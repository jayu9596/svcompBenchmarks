var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: ref;

var $M.3: i32;

var $M.4: ref;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: [ref]i32;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]i24;

var $M.15: [ref]i8;

var $M.16: [ref]i8;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.23: i32;

var $M.24: i32;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]i24;

var $M.30: [ref]i8;

var $M.31: [ref]i8;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: ref;

var $M.35: [ref]i8;

var $M.36: i32;

var $M.38: ref;

var $M.39: i32;

var $M.40: ref;

var $M.41: [ref]i8;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: ref;

var $M.63: ref;

var $M.64: i32;

var $M.65: ref;

var $M.66: i32;

var $M.67: i16;

var $M.68: i16;

var $M.72: [ref]i8;

var $M.73: [ref]i8;

var $M.74: [ref]i8;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.90: [ref]i8;

var $M.153: [ref]i8;

var $M.154: [ref]i8;

var $M.155: [ref]i8;

var $M.156: [ref]i8;

var $M.201: [ref]i8;

var $M.202: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 660819);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_usb_serial_port_softint: ref;

axiom __ksymtab_usb_serial_port_softint == $sub.ref(0, 2068);

const {:count 24} __kstrtab_usb_serial_port_softint: ref;

axiom __kstrtab_usb_serial_port_softint == $sub.ref(0, 3116);

const driver_attr_new_id: ref;

axiom driver_attr_new_id == $sub.ref(0, 4188);

const {:count 2} usb_serial_drv_attrs: ref;

axiom usb_serial_drv_attrs == $sub.ref(0, 5228);

const usb_serial_drv_group: ref;

axiom usb_serial_drv_group == $sub.ref(0, 6284);

const {:count 2} usb_serial_drv_groups: ref;

axiom usb_serial_drv_groups == $sub.ref(0, 7324);

const {:count 26} __kstrtab_usb_serial_generic_resume: ref;

axiom __kstrtab_usb_serial_generic_resume == $sub.ref(0, 8374);

const {:count 29} __kstrtab_usb_serial_handle_dcd_change: ref;

axiom __kstrtab_usb_serial_handle_dcd_change == $sub.ref(0, 9427);

const {:count 24} __kstrtab_usb_serial_handle_break: ref;

axiom __kstrtab_usb_serial_handle_break == $sub.ref(0, 10475);

const {:count 29} __kstrtab_usb_serial_handle_sysrq_char: ref;

axiom __kstrtab_usb_serial_handle_sysrq_char == $sub.ref(0, 11528);

const {:count 30} __kstrtab_usb_serial_generic_get_icount: ref;

axiom __kstrtab_usb_serial_generic_get_icount == $sub.ref(0, 12582);

const {:count 30} __kstrtab_usb_serial_generic_tiocmiwait: ref;

axiom __kstrtab_usb_serial_generic_tiocmiwait == $sub.ref(0, 13636);

const {:count 30} __kstrtab_usb_serial_generic_unthrottle: ref;

axiom __kstrtab_usb_serial_generic_unthrottle == $sub.ref(0, 14690);

const {:count 28} __kstrtab_usb_serial_generic_throttle: ref;

axiom __kstrtab_usb_serial_generic_throttle == $sub.ref(0, 15742);

const {:count 39} __kstrtab_usb_serial_generic_write_bulk_callback: ref;

axiom __kstrtab_usb_serial_generic_write_bulk_callback == $sub.ref(0, 16805);

const {:count 38} __kstrtab_usb_serial_generic_read_bulk_callback: ref;

axiom __kstrtab_usb_serial_generic_read_bulk_callback == $sub.ref(0, 17867);

const {:count 36} __kstrtab_usb_serial_generic_process_read_urb: ref;

axiom __kstrtab_usb_serial_generic_process_read_urb == $sub.ref(0, 18927);

const {:count 36} __kstrtab_usb_serial_generic_submit_read_urbs: ref;

axiom __kstrtab_usb_serial_generic_submit_read_urbs == $sub.ref(0, 19987);

const {:count 35} __kstrtab_usb_serial_generic_wait_until_sent: ref;

axiom __kstrtab_usb_serial_generic_wait_until_sent == $sub.ref(0, 21046);

const {:count 35} __kstrtab_usb_serial_generic_chars_in_buffer: ref;

axiom __kstrtab_usb_serial_generic_chars_in_buffer == $sub.ref(0, 22105);

const {:count 25} __kstrtab_usb_serial_generic_write: ref;

axiom __kstrtab_usb_serial_generic_write == $sub.ref(0, 23154);

const {:count 31} __kstrtab_usb_serial_generic_write_start: ref;

axiom __kstrtab_usb_serial_generic_write_start == $sub.ref(0, 24209);

const {:count 25} __kstrtab_usb_serial_generic_close: ref;

axiom __kstrtab_usb_serial_generic_close == $sub.ref(0, 25258);

const {:count 24} __kstrtab_usb_serial_generic_open: ref;

axiom __kstrtab_usb_serial_generic_open == $sub.ref(0, 26306);

const {:count 2} serial_drivers: ref;

axiom serial_drivers == $sub.ref(0, 27346);

const product: ref;

axiom product == $sub.ref(0, 28372);

const vendor: ref;

axiom vendor == $sub.ref(0, 29398);

const serial_proc_fops: ref;

axiom serial_proc_fops == $sub.ref(0, 30646);

const serial_ops: ref;

axiom serial_ops == $sub.ref(0, 31942);

const usb_serial_driver: ref;

axiom usb_serial_driver == $sub.ref(0, 33270);

const {:count 30} __kstrtab_usb_serial_deregister_drivers: ref;

axiom __kstrtab_usb_serial_deregister_drivers == $sub.ref(0, 34324);

const {:count 28} __kstrtab_usb_serial_register_drivers: ref;

axiom __kstrtab_usb_serial_register_drivers == $sub.ref(0, 35376);

const dev_attr_port_number: ref;

axiom dev_attr_port_number == $sub.ref(0, 36448);

const {:count 2} usb_serial_port_attrs: ref;

axiom usb_serial_port_attrs == $sub.ref(0, 37488);

const usb_serial_port_group: ref;

axiom usb_serial_port_group == $sub.ref(0, 38544);

const {:count 2} usb_serial_port_groups: ref;

axiom usb_serial_port_groups == $sub.ref(0, 39584);

const serial_port_ops: ref;

axiom serial_port_ops == $sub.ref(0, 40648);

const usb_serial_driver_list: ref;

axiom usb_serial_driver_list == $sub.ref(0, 41688);

const {:count 18} __kstrtab_usb_serial_resume: ref;

axiom __kstrtab_usb_serial_resume == $sub.ref(0, 42730);

const {:count 19} __kstrtab_usb_serial_suspend: ref;

axiom __kstrtab_usb_serial_suspend == $sub.ref(0, 43773);

const serial_minors: ref;

axiom serial_minors == $sub.ref(0, 44909);

const table_lock: ref;

axiom table_lock == $sub.ref(0, 46093);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 47121);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 48149);

const {:count 2} generic_device_ids: ref;

axiom generic_device_ids == $sub.ref(0, 49237);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 50265);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 51293);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 52321);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 53349);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 54377);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 55405);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 56433);

const usb_serial_tty_driver: ref;

axiom usb_serial_tty_driver == $sub.ref(0, 57465);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 58493);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 59521);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 60549);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 61577);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 62605);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 63633);

const serial_proc_fops_group1: ref;

axiom serial_proc_fops_group1 == $sub.ref(0, 64665);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 65693);

const driver_attr_new_id_group0: ref;

axiom driver_attr_new_id_group0 == $sub.ref(0, 66725);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 67757);

const serial_ops_group0: ref;

axiom serial_ops_group0 == $sub.ref(0, 68789);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 69817);

const usb_serial_bus_type_group0: ref;

axiom usb_serial_bus_type_group0 == $sub.ref(0, 70849);

const usb_serial_generic_device_group0: ref;

axiom usb_serial_generic_device_group0 == $sub.ref(0, 71881);

const serial_ops_group1: ref;

axiom serial_ops_group1 == $sub.ref(0, 72913);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 73941);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 74969);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 75997);

const serial_proc_fops_group2: ref;

axiom serial_proc_fops_group2 == $sub.ref(0, 77029);

const usb_serial_driver_group1: ref;

axiom usb_serial_driver_group1 == $sub.ref(0, 78061);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 79089);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 80117);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 81145);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 82173);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 83205);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 84237);

const serial_port_ops_group1: ref;

axiom serial_port_ops_group1 == $sub.ref(0, 85269);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 86301);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 87329);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 88357);

const usb_serial_bus_type: ref;

axiom usb_serial_bus_type == $sub.ref(0, 89541);

const __ksymtab_usb_serial_generic_resume: ref;

axiom __ksymtab_usb_serial_generic_resume == $sub.ref(0, 90581);

const __ksymtab_usb_serial_handle_dcd_change: ref;

axiom __ksymtab_usb_serial_handle_dcd_change == $sub.ref(0, 91621);

const __ksymtab_usb_serial_handle_break: ref;

axiom __ksymtab_usb_serial_handle_break == $sub.ref(0, 92661);

const __ksymtab_usb_serial_handle_sysrq_char: ref;

axiom __ksymtab_usb_serial_handle_sysrq_char == $sub.ref(0, 93701);

const __ksymtab_usb_serial_generic_get_icount: ref;

axiom __ksymtab_usb_serial_generic_get_icount == $sub.ref(0, 94741);

const __ksymtab_usb_serial_generic_tiocmiwait: ref;

axiom __ksymtab_usb_serial_generic_tiocmiwait == $sub.ref(0, 95781);

const __ksymtab_usb_serial_generic_unthrottle: ref;

axiom __ksymtab_usb_serial_generic_unthrottle == $sub.ref(0, 96821);

const __ksymtab_usb_serial_generic_throttle: ref;

axiom __ksymtab_usb_serial_generic_throttle == $sub.ref(0, 97861);

const __ksymtab_usb_serial_generic_write_bulk_callback: ref;

axiom __ksymtab_usb_serial_generic_write_bulk_callback == $sub.ref(0, 98901);

const __ksymtab_usb_serial_generic_read_bulk_callback: ref;

axiom __ksymtab_usb_serial_generic_read_bulk_callback == $sub.ref(0, 99941);

const __ksymtab_usb_serial_generic_process_read_urb: ref;

axiom __ksymtab_usb_serial_generic_process_read_urb == $sub.ref(0, 100981);

const __ksymtab_usb_serial_generic_submit_read_urbs: ref;

axiom __ksymtab_usb_serial_generic_submit_read_urbs == $sub.ref(0, 102021);

const __ksymtab_usb_serial_generic_wait_until_sent: ref;

axiom __ksymtab_usb_serial_generic_wait_until_sent == $sub.ref(0, 103061);

const __ksymtab_usb_serial_generic_chars_in_buffer: ref;

axiom __ksymtab_usb_serial_generic_chars_in_buffer == $sub.ref(0, 104101);

const __ksymtab_usb_serial_generic_write: ref;

axiom __ksymtab_usb_serial_generic_write == $sub.ref(0, 105141);

const __ksymtab_usb_serial_generic_write_start: ref;

axiom __ksymtab_usb_serial_generic_write_start == $sub.ref(0, 106181);

const __ksymtab_usb_serial_generic_close: ref;

axiom __ksymtab_usb_serial_generic_close == $sub.ref(0, 107221);

const __ksymtab_usb_serial_generic_open: ref;

axiom __ksymtab_usb_serial_generic_open == $sub.ref(0, 108261);

const usb_serial_generic_device: ref;

axiom usb_serial_generic_device == $sub.ref(0, 109837);

const __ksymtab_usb_serial_deregister_drivers: ref;

axiom __ksymtab_usb_serial_deregister_drivers == $sub.ref(0, 110877);

const __ksymtab_usb_serial_register_drivers: ref;

axiom __ksymtab_usb_serial_register_drivers == $sub.ref(0, 111917);

const __ksymtab_usb_serial_resume: ref;

axiom __ksymtab_usb_serial_resume == $sub.ref(0, 112957);

const __ksymtab_usb_serial_suspend: ref;

axiom __ksymtab_usb_serial_suspend == $sub.ref(0, 113997);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 31} .str.3: ref;

axiom .str.3 == $sub.ref(0, 115052);

const {:count 31} .str.4: ref;

axiom .str.4 == $sub.ref(0, 116107);

const .str: ref;

axiom .str == $sub.ref(0, 117141);

const {:count 22} .str.120: ref;

axiom .str.120 == $sub.ref(0, 118187);

const {:count 27} .str.121: ref;

axiom .str.121 == $sub.ref(0, 119238);

const {:count 31} .str.122: ref;

axiom .str.122 == $sub.ref(0, 120293);

const {:count 35} .str.123: ref;

axiom .str.123 == $sub.ref(0, 121352);

const {:count 207} .str.6: ref;

axiom .str.6 == $sub.ref(0, 122583);

const {:count 13} .str.124: ref;

axiom .str.124 == $sub.ref(0, 123620);

const {:count 32} .str.125: ref;

axiom .str.125 == $sub.ref(0, 124676);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 48} .str.83: ref;

axiom .str.83 == $sub.ref(0, 125748);

const {:count 210} .str.25: ref;

axiom .str.25 == $sub.ref(0, 126982);

const {:count 36} .str.59: ref;

axiom .str.59 == $sub.ref(0, 128042);

const {:count 51} .str.60: ref;

axiom .str.60 == $sub.ref(0, 129117);

const {:count 50} .str.61: ref;

axiom .str.61 == $sub.ref(0, 130191);

const {:count 31} .str.19: ref;

axiom .str.19 == $sub.ref(0, 131246);

const {:count 27} .str.62: ref;

axiom .str.62 == $sub.ref(0, 132297);

const {:count 24} .str.63: ref;

axiom .str.63 == $sub.ref(0, 133345);

const {:count 35} .str.64: ref;

axiom .str.64 == $sub.ref(0, 134404);

const {:count 25} .str.65: ref;

axiom .str.65 == $sub.ref(0, 135453);

const {:count 36} .str.66: ref;

axiom .str.66 == $sub.ref(0, 136513);

const {:count 25} .str.67: ref;

axiom .str.67 == $sub.ref(0, 137562);

const {:count 36} .str.68: ref;

axiom .str.68 == $sub.ref(0, 138622);

const {:count 30} .str.69: ref;

axiom .str.69 == $sub.ref(0, 139676);

const {:count 41} .str.70: ref;

axiom .str.70 == $sub.ref(0, 140741);

const {:count 35} .str.71: ref;

axiom .str.71 == $sub.ref(0, 141800);

const {:count 46} .str.72: ref;

axiom .str.72 == $sub.ref(0, 142870);

const {:count 35} .str.73: ref;

axiom .str.73 == $sub.ref(0, 143929);

const {:count 46} .str.74: ref;

axiom .str.74 == $sub.ref(0, 144999);

const {:count 38} .str.75: ref;

axiom .str.75 == $sub.ref(0, 146061);

const {:count 49} .str.76: ref;

axiom .str.76 == $sub.ref(0, 147134);

const {:count 39} .str.77: ref;

axiom .str.77 == $sub.ref(0, 148197);

const {:count 50} .str.78: ref;

axiom .str.78 == $sub.ref(0, 149271);

const {:count 36} .str.79: ref;

axiom .str.79 == $sub.ref(0, 150331);

const {:count 47} .str.80: ref;

axiom .str.80 == $sub.ref(0, 151402);

const {:count 40} .str.81: ref;

axiom .str.81 == $sub.ref(0, 152466);

const {:count 51} .str.82: ref;

axiom .str.82 == $sub.ref(0, 153541);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 39} .str.15: ref;

axiom .str.15 == $sub.ref(0, 154604);

const {:count 22} .str.13: ref;

axiom .str.13 == $sub.ref(0, 155650);

const {:count 29} .str.14: ref;

axiom .str.14 == $sub.ref(0, 156703);

const {:count 38} .str.11: ref;

axiom .str.11 == $sub.ref(0, 157765);

const {:count 21} .str.12: ref;

axiom .str.12 == $sub.ref(0, 158810);

const {:count 35} .str.9: ref;

axiom .str.9 == $sub.ref(0, 159869);

const {:count 38} .str.10: ref;

axiom .str.10 == $sub.ref(0, 160931);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 35} .str.8: ref;

axiom .str.8 == $sub.ref(0, 161990);

const {:count 17} .str.7: ref;

axiom .str.7 == $sub.ref(0, 163031);

const {:count 30} .str.5: ref;

axiom .str.5 == $sub.ref(0, 164085);

const {:count 21} .str.58: ref;

axiom .str.58 == $sub.ref(0, 165130);

const {:count 21} .str.23: ref;

axiom .str.23 == $sub.ref(0, 166175);

const {:count 17} .str.24: ref;

axiom .str.24 == $sub.ref(0, 167216);

const {:count 14} .str.26: ref;

axiom .str.26 == $sub.ref(0, 168254);

const {:count 28} .str.27: ref;

axiom .str.27 == $sub.ref(0, 169306);

const {:count 28} .str.28: ref;

axiom .str.28 == $sub.ref(0, 170358);

const {:count 30} .str.29: ref;

axiom .str.29 == $sub.ref(0, 171412);

const {:count 31} .str.30: ref;

axiom .str.30 == $sub.ref(0, 172467);

const {:count 35} .str.31: ref;

axiom .str.31 == $sub.ref(0, 173526);

const {:count 36} .str.32: ref;

axiom .str.32 == $sub.ref(0, 174586);

const {:count 62} .str.33: ref;

axiom .str.33 == $sub.ref(0, 175672);

const {:count 57} .str.34: ref;

axiom .str.34 == $sub.ref(0, 176753);

const {:count 47} .str.35: ref;

axiom .str.35 == $sub.ref(0, 177824);

const {:count 77} .str.36: ref;

axiom .str.36 == $sub.ref(0, 178925);

const {:count 71} .str.37: ref;

axiom .str.37 == $sub.ref(0, 180020);

const {:count 30} .str.38: ref;

axiom .str.38 == $sub.ref(0, 181074);

const {:count 23} .str.39: ref;

axiom .str.39 == $sub.ref(0, 182121);

const {:count 33} .str.40: ref;

axiom .str.40 == $sub.ref(0, 183178);

const {:count 22} .str.41: ref;

axiom .str.41 == $sub.ref(0, 184224);

const {:count 14} .str.42: ref;

axiom .str.42 == $sub.ref(0, 185262);

const {:count 91} .str.43: ref;

axiom .str.43 == $sub.ref(0, 186377);

const {:count 93} .str.44: ref;

axiom .str.44 == $sub.ref(0, 187494);

const {:count 35} .str.45: ref;

axiom .str.45 == $sub.ref(0, 188553);

const {:count 9} .str.46: ref;

axiom .str.46 == $sub.ref(0, 189586);

const {:count 16} .str.47: ref;

axiom .str.47 == $sub.ref(0, 190626);

const {:count 43} .str.48: ref;

axiom .str.48 == $sub.ref(0, 191693);

const {:count 16} .str.56: ref;

axiom .str.56 == $sub.ref(0, 192733);

const {:count 7} .str.57: ref;

axiom .str.57 == $sub.ref(0, 193764);

const {:count 24} .str.53: ref;

axiom .str.53 == $sub.ref(0, 194812);

const {:count 4} .str.54: ref;

axiom .str.54 == $sub.ref(0, 195840);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 196877);

const {:count 27} .str.51: ref;

axiom .str.51 == $sub.ref(0, 197928);

const {:count 28} .str.52: ref;

axiom .str.52 == $sub.ref(0, 198980);

const {:count 20} .str.49: ref;

axiom .str.49 == $sub.ref(0, 200024);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 201056);

const {:count 29} .str.16: ref;

axiom .str.16 == $sub.ref(0, 202109);

const {:count 16} .str.17: ref;

axiom .str.17 == $sub.ref(0, 203149);

const {:count 11} .str.18: ref;

axiom .str.18 == $sub.ref(0, 204184);

const {:count 45} .str.128: ref;

axiom .str.128 == $sub.ref(0, 205253);

const {:count 39} .str.127: ref;

axiom .str.127 == $sub.ref(0, 206316);

const {:count 21} .str.20: ref;

axiom .str.20 == $sub.ref(0, 207361);

const {:count 11} .str.21: ref;

axiom .str.21 == $sub.ref(0, 208396);

const {:count 19} .str.22: ref;

axiom .str.22 == $sub.ref(0, 209439);

const {:count 12} .str.55: ref;

axiom .str.55 == $sub.ref(0, 210475);

const {:count 4} .str.112: ref;

axiom .str.112 == $sub.ref(0, 211503);

const {:count 18} .str.86: ref;

axiom .str.86 == $sub.ref(0, 212545);

const {:count 16} .str.92: ref;

axiom .str.92 == $sub.ref(0, 213585);

const {:count 16} .str.100: ref;

axiom .str.100 == $sub.ref(0, 214625);

const {:count 23} .str.101: ref;

axiom .str.101 == $sub.ref(0, 215672);

const {:count 13} .str.98: ref;

axiom .str.98 == $sub.ref(0, 216709);

const {:count 14} .str.85: ref;

axiom .str.85 == $sub.ref(0, 217747);

const {:count 18} .str.87: ref;

axiom .str.87 == $sub.ref(0, 218789);

const {:count 16} .str.84: ref;

axiom .str.84 == $sub.ref(0, 219829);

const {:count 19} .str.89: ref;

axiom .str.89 == $sub.ref(0, 220872);

const {:count 13} .str.90: ref;

axiom .str.90 == $sub.ref(0, 221909);

const {:count 17} .str.91: ref;

axiom .str.91 == $sub.ref(0, 222950);

const {:count 23} .str.99: ref;

axiom .str.99 == $sub.ref(0, 223997);

const {:count 18} .str.97: ref;

axiom .str.97 == $sub.ref(0, 225039);

const {:count 13} .str.93: ref;

axiom .str.93 == $sub.ref(0, 226076);

const {:count 17} .str.94: ref;

axiom .str.94 == $sub.ref(0, 227117);

const {:count 15} .str.95: ref;

axiom .str.95 == $sub.ref(0, 228156);

const {:count 13} .str.96: ref;

axiom .str.96 == $sub.ref(0, 229193);

const {:count 12} .str.88: ref;

axiom .str.88 == $sub.ref(0, 230229);

const {:count 27} .str.102: ref;

axiom .str.102 == $sub.ref(0, 231280);

const {:count 4} .str.103: ref;

axiom .str.103 == $sub.ref(0, 232308);

const {:count 7} .str.105: ref;

axiom .str.105 == $sub.ref(0, 233339);

const {:count 11} .str.104: ref;

axiom .str.104 == $sub.ref(0, 234374);

const {:count 11} .str.106: ref;

axiom .str.106 == $sub.ref(0, 235409);

const {:count 26} .str.107: ref;

axiom .str.107 == $sub.ref(0, 236459);

const {:count 14} .str.108: ref;

axiom .str.108 == $sub.ref(0, 237497);

const {:count 9} .str.109: ref;

axiom .str.109 == $sub.ref(0, 238530);

const {:count 9} .str.110: ref;

axiom .str.110 == $sub.ref(0, 239563);

const {:count 10} .str.111: ref;

axiom .str.111 == $sub.ref(0, 240597);

const {:count 7} .str.126: ref;

axiom .str.126 == $sub.ref(0, 241628);

const {:count 48} .str.113: ref;

axiom .str.113 == $sub.ref(0, 242700);

const {:count 16} .str.114: ref;

axiom .str.114 == $sub.ref(0, 243740);

const {:count 7} .str.115: ref;

axiom .str.115 == $sub.ref(0, 244771);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 45} .str.116: ref;

axiom .str.116 == $sub.ref(0, 245840);

const {:count 38} .str.117: ref;

axiom .str.117 == $sub.ref(0, 246902);

const {:count 52} .str.118: ref;

axiom .str.118 == $sub.ref(0, 247978);

const {:count 42} .str.119: ref;

axiom .str.119 == $sub.ref(0, 249044);

const {:count 18} .str.2: ref;

axiom .str.2 == $sub.ref(0, 250086);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 251118);

const {:count 3} .str.1.272: ref;

axiom .str.1.272 == $sub.ref(0, 252145);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 253183);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 254211);

const usb_serial_port_softint: ref;

axiom usb_serial_port_softint == $sub.ref(0, 255243);

procedure usb_serial_port_softint($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7;



implementation usb_serial_port_softint($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_25: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1496, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} vslice_dummy_var_25 := schedule_work($p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 256275);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 257307);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i2 := queue_work($p1, $p0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 258339);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i2 := ldv_queue_work_on_5(8192, $p0, $p1);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_5: ref;

axiom ldv_queue_work_on_5 == $sub.ref(0, 259371);

procedure ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7;



implementation ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} {:cexpr "ldv_queue_work_on_5:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 8} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} activate_work_1($p2, 2);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 260403);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 10} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 1} true;
    call {:si_unique_call 11} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 12} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 261435);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.3;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.7;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $M.7 := $i1;
    call {:si_unique_call 17} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.5 := $i1;
    call {:si_unique_call 16} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.3 := $i1;
    call {:si_unique_call 15} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.2 := $p0;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.1 := $i1;
    call {:si_unique_call 14} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_serial_suspend: ref;

axiom usb_serial_suspend == $sub.ref(0, 262467);

procedure usb_serial_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i33: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p3, $i1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p4 := usb_get_intfdata($p0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 2);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i9);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 552)), $mul.ref(328, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb11:
    call $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i33 := usb_serial_suspend_loop_$bb11($p5, $p29, $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i33);
    goto $bb11_last;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i34, 8));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} usb_serial_port_poison_urbs($p37);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i33, 1);
    call {:si_unique_call 23} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p29);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, $i38);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i38;
    goto $bb13_dummy;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 552)), $mul.ref(328, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.9, $p20);
    call {:si_unique_call 20} $i22 := devirtbounce($p19, $p5, $i21);
    call {:si_unique_call 21} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $i22;
    goto $bb7;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, $sub.i8(0, 3));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i26);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i27 := $i22;
    goto $bb5;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 263499);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_serial_port_poison_urbs: ref;

axiom usb_serial_port_poison_urbs == $sub.ref(0, 264531);

procedure usb_serial_port_poison_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_poison_urbs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} usb_poison_urb($p3);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} usb_poison_urb($p16);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} usb_poison_urb($p6);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} usb_poison_urb($p13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} usb_poison_urb($p8);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} usb_poison_urb($p10);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    return;
}



const usb_poison_urb: ref;

axiom usb_poison_urb == $sub.ref(0, 265563);

procedure usb_poison_urb($p0: ref);
  free requires assertsPassed;



implementation usb_poison_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 266595);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_serial_resume: ref;

axiom usb_serial_resume == $sub.ref(0, 267627);

procedure usb_serial_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $CurrAddr, $M.40;



implementation usb_serial_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i18: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} usb_serial_unpoison_port_urbs($p2);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 3));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i5);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 552)), $mul.ref(336, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i18 := usb_serial_generic_resume($p2);
    call {:si_unique_call 36} {:cexpr "rv"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 552)), $mul.ref(336, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 33} $i16 := devirtbounce.1($p15, $p2);
    call {:si_unique_call 34} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const usb_serial_unpoison_port_urbs: ref;

axiom usb_serial_unpoison_port_urbs == $sub.ref(0, 268659);

procedure usb_serial_unpoison_port_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_unpoison_port_urbs($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $i10, $i11, $i12, $i13, $i5 := usb_serial_unpoison_port_urbs_loop_$bb4($p0, $p1, $i6, $p8, $p9, $i10, $i11, $i12, $i13, $i5);
    goto $bb4_last;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i6, 8));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} usb_serial_port_unpoison_urbs($p9);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i5, 1);
    call {:si_unique_call 38} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, $i10);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;
}



const usb_serial_generic_resume: ref;

axiom usb_serial_generic_resume == $sub.ref(0, 269691);

procedure usb_serial_generic_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i16: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i6: i32;
  var $i7: i32;
  var $i37: i32;
  var $i5: i32;
  var $i38: i1;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i5, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i39 := (if $i38 == 1 then $sub.i32(0, 5) else 0);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i16, $i33, $i34, $i35, $i36, $i6, $i7, $i37 := usb_serial_generic_resume_loop_$bb4($p0, $p1, $i8, $p10, $p11, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i16, $i33, $i34, $i35, $i36, $i6, $i7, $i37);
    goto $bb4_last;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i8, 8));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(680, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i14 := constant_test_bit(31, $p13);
    call {:si_unique_call 40} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1192, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i6;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i24;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i16 := $i32;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i7, 1);
    call {:si_unique_call 41} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i33);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i37 := $i16;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i5 := $i37;
    goto $bb3;

  $bb22:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i16, $i33;
    goto $bb22_dummy;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i28 := usb_serial_generic_write_start($p11, 16);
    call {:si_unique_call 46} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i24;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb21;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i24, 1);
    call {:si_unique_call 47} {:cexpr "c"} boogie_si_record_i32($i30);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb20;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i20 := usb_serial_generic_submit_read_urbs($p11, 16);
    call {:si_unique_call 43} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i6;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb15;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i6, 1);
    call {:si_unique_call 44} {:cexpr "c"} boogie_si_record_i32($i22);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb14;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i16 := $i6;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_196;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 270723);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const usb_serial_generic_submit_read_urbs: ref;

axiom usb_serial_generic_submit_read_urbs == $sub.ref(0, 271755);

procedure usb_serial_generic_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i8: i32;
  var $i6: i32;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} {:cexpr "usb_serial_generic_submit_read_urbs:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i2 := usb_serial_generic_submit_read_urb($p0, 0, $i1);
    call {:si_unique_call 51} {:cexpr "res"} boogie_si_record_i32($i2);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i4, $i5 := 0, $i2;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i15 := usb_serial_generic_submit_read_urb($p0, 1, $i1);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i4, $i5 := 1, $i15;
    assume {:branchcond $i16} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i4, 0);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb10;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb14;

  $bb14:
    call $i9, $p11, $p12, $i13, $i14, $i8 := usb_serial_generic_submit_read_urbs_loop_$bb14($p0, $i9, $p11, $p12, $i13, $i14, $i8);
    goto $bb14_last;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref($i9, 8));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} usb_kill_urb($p12);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i8, 1);
    call {:si_unique_call 54} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, 0);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i14 == 1);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb16_dummy;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;
}



const usb_serial_generic_write_start: ref;

axiom usb_serial_generic_write_start == $sub.ref(0, 272787);

procedure usb_serial_generic_write_start($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_write_start($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i14: i64;
  var $i12: i64;
  var $p15: ref;
  var $p16: ref;
  var $i13: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} {:cexpr "usb_serial_generic_write_start:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1400, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i3 := test_and_set_bit_lock(0, $p2);
    call {:si_unique_call 57} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p7 := spinlock_check($p6);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 60} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i12 := $i8;
    assume {:branchcond $i11} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i13 := $i8;
    goto $bb8;

  $bb8:
    call $i14, $i13, $p18, $p19, $p20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i28, $p31, $i32, $i33, $p34, $i35, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $p58, $i59, $i60, $p61, $p62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $p88, $i89, $i90, $i91 := usb_serial_generic_write_start_loop_$bb8($p0, $i1, $p6, $p9, $i14, $i13, $p18, $p19, $p20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i28, $p31, $i32, $i33, $p34, $i35, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $p58, $i59, $i60, $p61, $p62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $p88, $i89, $i90, $i91);
    goto $bb8_last;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i21, $i25);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i28 := $i13;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i32 := find_first_bit($p31, 2);
    call {:si_unique_call 66} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    call {:si_unique_call 67} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} spin_unlock_irqrestore($p34, $i13);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i33);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref($i35, 8));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 552)), $mul.ref(544, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p38, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    call {:si_unique_call 69} $i50 := devirtbounce.2($p44, $p0, $p46, $i49);
    call {:si_unique_call 70} {:cexpr "count"} boogie_si_record_i32($i50);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p38, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p38, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} usb_serial_debug_data($p52, .str.3, $i50, $p54);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p56 := spinlock_check($p55);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i57 := _raw_spin_lock_irqsave($p56);
    call {:si_unique_call 74} {:cexpr "flags"} boogie_si_record_i64($i57);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, $i50);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} spin_unlock_irqrestore($p62, $i57);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i33);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} clear_bit($i63, $p64);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i65 := usb_submit_urb($p38, $i1);
    call {:si_unique_call 78} {:cexpr "result"} boogie_si_record_i32($i65);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i67, $i68, $i69 := $i33, $i50, $i65;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p88 := spinlock_check($p6);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i89 := _raw_spin_lock_irqsave($p88);
    call {:si_unique_call 88} {:cexpr "flags"} boogie_si_record_i64($i89);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p9);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i14 := $i89;
    assume true;
    goto $bb9, $bb23;

  $bb23:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i89;
    goto $bb23_dummy;

  $bb9:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1400, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} clear_bit_unlock(0, $p15);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} spin_unlock_irqrestore($p16, $i12);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb14:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(696, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i74 == 1);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1(1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} dev_err.ref.ref.ref.i32($p76, .str.4, .str.3, $i69);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i67);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} set_bit($i77, $p78);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p80 := spinlock_check($p79);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i81 := _raw_spin_lock_irqsave($p80);
    call {:si_unique_call 83} {:cexpr "flags"} boogie_si_record_i64($i81);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i83, $i68);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} spin_unlock_irqrestore($p86, $i81);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1400, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} clear_bit_unlock(0, $p87);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i5 := $i69;
    goto $bb3;

  $bb19:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb17;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1400, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} clear_bit_unlock(0, $p29);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} spin_unlock_irqrestore($p30, $i28);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_309;
}



const test_and_set_bit_lock: ref;

axiom test_and_set_bit_lock == $sub.ref(0, 273819);

procedure test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} {:cexpr "test_and_set_bit_lock:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i2 := test_and_set_bit($i0, $p1);
    call {:si_unique_call 91} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 274851);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 275883);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const clear_bit_unlock: ref;

axiom clear_bit_unlock == $sub.ref(0, 276915);

procedure clear_bit_unlock($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit_unlock($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "clear_bit_unlock:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 95} devirtbounce.3(0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} clear_bit($i0, $p1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 277947);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    return;
}



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 278979);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} {:cexpr "find_first_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_debug_data: ref;

axiom usb_serial_debug_data == $sub.ref(0, 280011);

procedure usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 103} {:cexpr "usb_serial_debug_data:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.120);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.121);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.122);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.14, $p10);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 368);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p10, $i13);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 105} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p4, $p0, .str.122, $p1, $i2, $i2, $p3);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 281043);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 108} devirtbounce.4(0, $p1, $i0, $p1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 282075);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 283107);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 284139);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 113} devirtbounce.4(0, $p1, $i0, $p1);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 285171);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 115} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 286203);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 287235);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 288267);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 118} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 119} devirtbounce.5(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.16, $p2);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_serial_generic_submit_read_urb: ref;

axiom usb_serial_generic_submit_read_urb == $sub.ref(0, 289299);

procedure usb_serial_generic_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 121} {:cexpr "usb_serial_generic_submit_read_urb:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 122} {:cexpr "usb_serial_generic_submit_read_urb:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1248, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i6 := test_and_clear_bit($i4, $p5);
    call {:si_unique_call 124} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p9, .str);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p10, .str.123);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p11, .str.6);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p12, .str.124);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.14, $p14);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 286);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p14, $i17);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p18, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.15, $p19);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 126} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref($i26, 8));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i30 := usb_submit_urb($p29, $i2);
    call {:si_unique_call 129} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1248, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} set_bit($i35, $p36);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb3;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i30, $sub.i32(0, 19));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} dev_err.ref.ref.ref.i32($p34, .str.125, .str.123, $i30);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p25, .str.124, .str.123, $i1);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 290331);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 291363);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 133} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 134} devirtbounce.5(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.16, $p2);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_serial_port_unpoison_urbs: ref;

axiom usb_serial_port_unpoison_urbs == $sub.ref(0, 292395);

procedure usb_serial_port_unpoison_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_unpoison_urbs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} usb_unpoison_urb($p3);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} usb_unpoison_urb($p16);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} usb_unpoison_urb($p6);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} usb_unpoison_urb($p13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} usb_unpoison_urb($p8);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} usb_unpoison_urb($p10);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    return;
}



const usb_unpoison_urb: ref;

axiom usb_unpoison_urb == $sub.ref(0, 293427);

procedure usb_unpoison_urb($p0: ref);
  free requires assertsPassed;



implementation usb_unpoison_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_register_drivers: ref;

axiom usb_serial_register_drivers == $sub.ref(0, 294459);

procedure usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.34, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $CurrAddr;



implementation usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i8;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p24: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p40: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p60: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p3 := kzalloc(304, 208);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i11 := $and.i8($i10, $sub.i8(0, 2));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i12 := $or.i8($i11, 1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i12);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 3));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, 2);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i16);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, usb_serial_suspend);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, usb_serial_resume);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, usb_serial_probe);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, usb_serial_disconnect);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i35 := ldv_usb_register_driver_24($p4, __this_module, .str);
    call {:si_unique_call 143} {:cexpr "rc"} boogie_si_record_i32($i35);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(72, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p2);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i55 := driver_attach($p54);
    call {:si_unique_call 147} {:cexpr "rc"} boogie_si_record_i32($i55);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p40 := $p0;
    goto $bb23;

  $bb23:
    call $p41, $p42, $p43, $i44, $i45, $p46, $i47, $p48, $p49, $i50, $i51, $p40 := usb_serial_register_drivers_loop_$bb23($p3, $p41, $p42, $p43, $i44, $i45, $p46, $i47, $p48, $p49, $i50, $i51, $p40);
    goto $bb23_last;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p3);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p40);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i44 := usb_serial_register($p43);
    call {:si_unique_call 145} {:cexpr "rc"} boogie_si_record_i32($i44);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p46, $i47 := $p40, $i44;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p40, $mul.ref(1, 8));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p40 := $p48;
    goto $bb29_dummy;

  $bb25:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p46, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p46);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i64($i57, $i58);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} ldv_usb_deregister_25($p4);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i7 := $i47;
    goto $bb3;

  $bb32:
    assume $i59 == 1;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p60 := $p56;
    goto $bb35;

  $bb35:
    call $p61, $p62, $i63, $i64, $p60 := usb_serial_register_drivers_loop_$bb35($i58, $p61, $p62, $i63, $i64, $p60);
    goto $bb35_last;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} usb_serial_deregister($p61);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p60, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p60);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64($i63, $i58);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i64 == 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb37:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p60 := $p62;
    goto $bb37_dummy;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p24 := $p0;
    goto $bb8;

  $bb8:
    call $p25, $p26, $p27, $i28, $i29, $p31, $p32, $i33, $i34, $p24 := usb_serial_register_drivers_loop_$bb8($p25, $p26, $p27, $i28, $i29, $p31, $p32, $i33, $i34, $p24);
    goto $bb8_last;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 552)), $mul.ref(344, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p24, $mul.ref(1, 8));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p31;
    goto $bb14_dummy;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, usb_serial_reset_resume);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_670;

  $bb29_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_610;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 295491);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 151} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_serial_probe: ref;

axiom usb_serial_probe == $sub.ref(0, 296523);

procedure usb_serial_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.17, $M.18, $M.19, $M.20, $M.0, $CurrAddr, $M.36, $M.39, $M.32, $M.33, $M.23, $M.40, assertsPassed, $M.1, $M.3, $M.5, $M.7, $M.2, $M.4, $M.6, $M.8;



implementation usb_serial_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $i46: i8;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i24;
  var $i114: i24;
  var $i115: i24;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $i123: i1;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i24;
  var $i138: i24;
  var $i139: i24;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $i147: i1;
  var $i148: i64;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i24;
  var $i162: i24;
  var $i163: i24;
  var $p164: ref;
  var $p165: ref;
  var $i166: i8;
  var $i167: i64;
  var $i168: i64;
  var $i169: i64;
  var $i170: i1;
  var $i171: i1;
  var $i172: i64;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i24;
  var $i186: i24;
  var $i187: i24;
  var $p188: ref;
  var $p189: ref;
  var $i190: i8;
  var $i191: i64;
  var $i192: i64;
  var $i193: i64;
  var $i194: i1;
  var $i195: i1;
  var $i196: i64;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i8;
  var $i203: i32;
  var $i204: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $p210: ref;
  var $i211: i16;
  var $i212: i32;
  var $i213: i1;
  var $p215: ref;
  var $i216: i16;
  var $i217: i32;
  var $i218: i1;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $i224: i1;
  var $p226: ref;
  var $i227: i16;
  var $i228: i32;
  var $i229: i1;
  var $p231: ref;
  var $i232: i16;
  var $i233: i32;
  var $i234: i1;
  var $p236: ref;
  var $i237: i16;
  var $i238: i32;
  var $i239: i1;
  var $p241: ref;
  var $i242: i16;
  var $i243: i32;
  var $i244: i1;
  var $p246: ref;
  var $i247: i16;
  var $i248: i32;
  var $i249: i1;
  var $i219: i32;
  var $p250: ref;
  var $p251: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i1;
  var $p273: ref;
  var $p274: ref;
  var $i275: i64;
  var $p277: ref;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i24;
  var $i287: i24;
  var $i288: i24;
  var $p289: ref;
  var $p290: ref;
  var $i291: i8;
  var $i292: i64;
  var $i293: i64;
  var $i294: i64;
  var $i295: i1;
  var $i296: i1;
  var $i297: i64;
  var $p298: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i32;
  var $i302: i32;
  var $i303: i8;
  var $i304: i32;
  var $i305: i1;
  var $i271: i32;
  var $i272: i32;
  var $i306: i32;
  var $i270: i32;
  var $i307: i32;
  var $i308: i1;
  var $i309: i1;
  var $p311: ref;
  var $p312: ref;
  var $i313: i32;
  var $i314: i64;
  var $i315: i1;
  var $i316: i1;
  var $p318: ref;
  var $p319: ref;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $i324: i64;
  var $i325: i1;
  var $p326: ref;
  var $p327: ref;
  var $i328: i32;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i8;
  var $i333: i32;
  var $i334: i32;
  var $i335: i32;
  var $i336: i1;
  var $i337: i32;
  var $i338: i8;
  var $p339: ref;
  var $i340: i8;
  var $p341: ref;
  var $i342: i8;
  var $p343: ref;
  var $i344: i8;
  var $p345: ref;
  var $i346: i8;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $p356: ref;
  var $i357: i8;
  var $i358: i32;
  var $i359: i1;
  var $i360: i32;
  var $i361: i8;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $i369: i24;
  var $i370: i24;
  var $i371: i24;
  var $p372: ref;
  var $p373: ref;
  var $i374: i8;
  var $i375: i64;
  var $i376: i64;
  var $i377: i64;
  var $i378: i1;
  var $i379: i1;
  var $p381: ref;
  var $p382: ref;
  var $i383: i64;
  var $i384: i1;
  var $p385: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p401: ref;
  var $p403: ref;
  var $p405: ref;
  var $i406: i64;
  var $p408: ref;
  var $p409: ref;
  var $p411: ref;
  var $p413: ref;
  var $p415: ref;
  var $p417: ref;
  var $p419: ref;
  var $p420: ref;
  var $i421: i32;
  var $i422: i1;
  var $i380: i32;
  var $i423: i1;
  var $i425: i64;
  var $p426: ref;
  var $p427: ref;
  var $i428: i64;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i64;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $p440: ref;
  var $p441: ref;
  var $i442: i8;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p447: ref;
  var $p449: ref;
  var $p450: ref;
  var $i451: i64;
  var $i452: i1;
  var $i453: i64;
  var $p454: ref;
  var $p456: ref;
  var $p458: ref;
  var $p459: ref;
  var $i460: i64;
  var $i461: i1;
  var $p462: ref;
  var $i463: i8;
  var $i464: i32;
  var $i465: i32;
  var $p467: ref;
  var $p468: ref;
  var $i469: i32;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $i486: i32;
  var $i487: i1;
  var $i424: i32;
  var $i488: i1;
  var $i490: i64;
  var $p491: ref;
  var $p492: ref;
  var $i493: i64;
  var $p495: ref;
  var $p496: ref;
  var $p498: ref;
  var $p499: ref;
  var $i500: i32;
  var $i501: i32;
  var $i502: i1;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $i506: i64;
  var $i507: i32;
  var $i508: i1;
  var $i509: i32;
  var $i510: i32;
  var $p511: ref;
  var $p512: ref;
  var $i513: i8;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $p518: ref;
  var $p520: ref;
  var $p521: ref;
  var $i522: i64;
  var $i523: i1;
  var $i524: i64;
  var $p525: ref;
  var $p527: ref;
  var $p529: ref;
  var $p530: ref;
  var $i531: i64;
  var $i532: i1;
  var $p533: ref;
  var $i534: i8;
  var $i535: i32;
  var $i536: i32;
  var $p538: ref;
  var $p539: ref;
  var $i540: i32;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $i557: i32;
  var $i558: i1;
  var $i489: i32;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $i563: i64;
  var $i564: i1;
  var $i565: i1;
  var $i567: i64;
  var $p568: ref;
  var $p569: ref;
  var $i570: i64;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $i578: i64;
  var $i579: i1;
  var $i580: i32;
  var $p581: ref;
  var $i582: i8;
  var $p583: ref;
  var $i584: i64;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $i589: i64;
  var $i590: i1;
  var $p591: ref;
  var $i592: i8;
  var $i593: i32;
  var $i594: i32;
  var $p595: ref;
  var $p596: ref;
  var $i597: i32;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $i606: i8;
  var $i607: i32;
  var $i608: i32;
  var $i609: i1;
  var $i566: i32;
  var $i610: i1;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $i617: i24;
  var $i618: i24;
  var $i619: i24;
  var $p620: ref;
  var $p621: ref;
  var $i622: i8;
  var $i623: i64;
  var $i624: i64;
  var $i625: i64;
  var $i626: i1;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $i631: i64;
  var $i632: i1;
  var $i633: i1;
  var $i635: i64;
  var $p636: ref;
  var $p637: ref;
  var $i638: i64;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $i646: i64;
  var $i647: i1;
  var $i648: i32;
  var $p649: ref;
  var $p650: ref;
  var $i651: i8;
  var $p652: ref;
  var $i653: i64;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $i658: i64;
  var $i659: i1;
  var $p660: ref;
  var $i661: i8;
  var $i662: i32;
  var $i663: i32;
  var $p664: ref;
  var $p665: ref;
  var $i666: i32;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $i675: i8;
  var $i676: i32;
  var $i677: i32;
  var $i678: i1;
  var $i634: i32;
  var $i679: i1;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $i686: i24;
  var $i687: i24;
  var $i688: i24;
  var $p689: ref;
  var $p690: ref;
  var $i691: i8;
  var $i692: i64;
  var $i693: i64;
  var $i694: i64;
  var $i695: i1;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $i699: i64;
  var $i700: i1;
  var $p701: ref;
  var $p702: ref;
  var $i703: i32;
  var $i704: i1;
  var $p705: ref;
  var $i706: i8;
  var $i707: i8;
  var $i708: i8;
  var $i709: i1;
  var $p710: ref;
  var $p711: ref;
  var $i712: i8;
  var $i713: i8;
  var $i714: i8;
  var $p715: ref;
  var $i716: i8;
  var $i717: i8;
  var $i718: i8;
  var $i719: i32;
  var $i720: i1;
  var $i721: i1;
  var $i723: i64;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $i729: i32;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $i737: i24;
  var $i738: i24;
  var $i739: i24;
  var $p740: ref;
  var $p741: ref;
  var $i742: i8;
  var $i743: i64;
  var $i744: i64;
  var $i745: i64;
  var $i746: i1;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $i751: i32;
  var $i752: i1;
  var $i753: i32;
  var $i754: i1;
  var $i722: i32;
  var $p755: ref;
  var $i756: i8;
  var $i757: i8;
  var $p759: ref;
  var $p760: ref;
  var $p761: ref;
  var $i762: i32;
  var $p764: ref;
  var $p765: ref;
  var $p767: ref;
  var $p768: ref;
  var $i41: i32;
  var $p769: ref;
  var $p770: ref;
  var $p772: ref;
  var $p774: ref;
  var $p775: ref;
  var $i776: i64;
  var $i777: i1;
  var $i778: i64;
  var $p779: ref;
  var $p781: ref;
  var $p783: ref;
  var $p784: ref;
  var $i785: i64;
  var $i786: i1;
  var $p787: ref;
  var $i788: i8;
  var $i789: i32;
  var $i790: i32;
  var $p792: ref;
  var $p793: ref;
  var $i794: i32;
  var $p796: ref;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $p800: ref;
  var $p801: ref;
  var $p802: ref;
  var $p803: ref;
  var $p804: ref;
  var $p806: ref;
  var $p808: ref;
  var $p809: ref;
  var $i810: i64;
  var $i811: i1;
  var $i812: i64;
  var $p813: ref;
  var $p815: ref;
  var $p817: ref;
  var $p818: ref;
  var $i819: i64;
  var $i820: i1;
  var $p821: ref;
  var $i822: i8;
  var $i823: i32;
  var $i824: i32;
  var $p826: ref;
  var $p827: ref;
  var $i828: i32;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $p835: ref;
  var $p836: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_26: ref;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p19 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p21 := interface_to_usbdev($p0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p22 := search_serial_device($p0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i45 := ldv_try_module_get_13($p44);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i8($i45);
    call {:si_unique_call 179} {:cexpr "tmp___1"} boogie_si_record_i8($i46);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} mutex_unlock(table_lock);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p50 := create_serial($p21, $p0, $p22);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(272, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p85, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i89, 0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94 := 0, 0, 0, 0;
    assume {:branchcond $i90} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i211 := $load.i16($M.0, $p210);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i211);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1659);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.0, $p221);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i223 := $zext.i16.i32($i222);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1367);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i232 := $load.i16($M.0, $p231);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i233 := $zext.i16.i32($i232);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 1423);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i242 := $load.i16($M.0, $p241);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i243 := $zext.i16.i32($i242);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 4597);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i313 := $i92;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i314 := $p2i.ref.i64($p22);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i315 := $eq.i64($i314, $p2i.ref.i64(usb_serial_generic_device));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    $i320 := 0;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    $i335 := $i320;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i336 := $sgt.i32($i335, 8);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    $i337 := $i335;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i8($i337);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p339, $i338);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i8($i93);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(29, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p341, $i340);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i342 := $trunc.i32.i8($i94);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(30, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p343, $i342);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i344 := $trunc.i32.i8($i313);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(27, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p345, $i344);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i346 := $trunc.i32.i8($i91);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(28, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p347, $i346);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.0, $p348);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} _dev_info.ref.ref.ref($p20, .str.39, $p349);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i350 := $sgt.i32($i93, $i94);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i350 == 1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i351 := $i94;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i352 := $sgt.i32($i351, $i313);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i352 == 1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i353 := $i313;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i354 := $sgt.i32($i353, $i91);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i354 == 1);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i355 := $i91;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.0, $p356);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    call {:si_unique_call 238} {:cexpr "_max2___2"} boogie_si_record_i32($i358);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i359 := $sgt.i32($i355, $i358);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i359 == 1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i360 := $i358;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i361 := $trunc.i32.i8($i360);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(26, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p362, $i361);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p363, .str);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p364, .str.24);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p365, .str.25);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p366, .str.40);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i369 := $load.i24($M.14, $p368);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i370 := $and.i24($i369, $sub.i24(0, 262144));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i371 := $or.i24($i370, 903);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p368, $i371);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p372, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i374 := $load.i8($M.15, $p373);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i375 := $zext.i8.i64($i374);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i376 := $and.i64($i375, 1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i377 := ldv__builtin_expect($i376, 0);
    call {:si_unique_call 240} {:cexpr "tmp___14"} boogie_si_record_i64($i377);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i378 := $ne.i64($i377, 0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i379 := $slt.i32(0, $i360);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i379 == 1);
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i423 := $slt.i32(0, $i93);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i488 := $slt.i32(0, $i94);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i488 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.0, $p559);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p560, $mul.ref(0, 552)), $mul.ref(504, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.0, $p561);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i563 := $p2i.ref.i64($p562);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i564 := $ne.i64($i563, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i564 == 1);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i610 := $ne.i32($i313, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i610} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p628 := $load.ref($M.0, $p627);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p628, $mul.ref(0, 552)), $mul.ref(512, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p630 := $load.ref($M.0, $p629);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i631 := $p2i.ref.i64($p630);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i632 := $ne.i64($i631, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i632 == 1);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i679 := $ne.i32($i91, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i679} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i679 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p696 := $bitcast.ref.ref($p50);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} usb_set_intfdata($p0, $p696);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(280, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p698 := $load.ref($M.0, $p697);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i699 := $p2i.ref.i64($p698);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i700 := $ne.i64($i699, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i700 == 1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i712 := $load.i8($M.0, $p711);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i713 := $and.i8($i712, $sub.i8(0, 5));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i714 := $or.i8($i713, 4);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p711, $i714);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i716 := $load.i8($M.0, $p715);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i717 := $and.i8($i716, $sub.i8(0, 2));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i718 := $or.i8($i717, 1);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p715, $i718);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i719 := allocate_minors($p50, $i337);
    call {:si_unique_call 309} {:cexpr "tmp___29"} boogie_si_record_i32($i719);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i720 := $ne.i32($i719, 0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $i721 := $slt.i32(0, $i337);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i721 == 1);
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i756 := $load.i8($M.0, $p755);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i757 := $and.i8($i756, $sub.i8(0, 2));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p755, $i757);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p760 := $load.ref($M.0, $p759);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p760, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i762 := $load.i32($M.0, $p761);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} usb_serial_console_init($i762);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p765 := $load.ref($M.0, $p764);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} ldv_module_put_18($p765);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb271:
    assume $i721 == 1;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i722 := 0;
    goto $bb274;

  $bb274:
    call $i723, $p725, $p726, $p727, $p728, $i729, $p731, $p732, $p733, $p734, $p735, $p736, $i737, $i738, $i739, $p740, $p741, $i742, $i743, $i744, $i745, $i746, $p747, $p748, $p749, $p750, $i751, $i752, $i753, $i754, $i722, vslice_dummy_var_27 := usb_serial_probe_loop_$bb274($p19, $p20, $p50, $i337, $i723, $p725, $p726, $p727, $p728, $i729, $p731, $p732, $p733, $p734, $p735, $p736, $i737, $i738, $i739, $p740, $p741, $i742, $i743, $i744, $i745, $i746, $p747, $p748, $p749, $p750, $i751, $i752, $i753, $i754, $i722, vslice_dummy_var_27);
    goto $bb274_last;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $i723 := $sext.i32.i64($i722);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i723, 8));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p726 := $load.ref($M.0, $p725);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p726, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i729 := $load.i32($M.0, $p728);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_27 := dev_set_name.ref.ref.i32($p727, .str.46, $i729);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p731, .str);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p732, .str.24);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p733, .str.25);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p734, .str.47);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p736 := $bitcast.ref.ref($p735);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i737 := $load.i24($M.14, $p736);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i738 := $and.i24($i737, $sub.i24(0, 262144));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i739 := $or.i24($i738, 1070);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p736, $i739);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p740, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i742 := $load.i8($M.15, $p741);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i743 := $zext.i8.i64($i742);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i744 := $and.i64($i743, 1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i745 := ldv__builtin_expect($i744, 0);
    call {:si_unique_call 313} {:cexpr "tmp___31"} boogie_si_record_i64($i745);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i746 := $ne.i64($i745, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} device_enable_async_suspend($p749);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i751 := device_add($p750);
    call {:si_unique_call 318} {:cexpr "retval"} boogie_si_record_i32($i751);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i752 := $ne.i32($i751, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $i753 := $add.i32($i722, 1);
    call {:si_unique_call 320} {:cexpr "i"} boogie_si_record_i32($i753);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i754 := $slt.i32($i753, $i337);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i754 == 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb282:
    assume $i754 == 1;
    assume {:verifier.code 0} true;
    $i722 := $i753;
    goto $bb282_dummy;

  $bb279:
    assume $i752 == 1;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} dev_err.ref.ref($p20, .str.48);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb276:
    assume $i746 == 1;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p748 := dev_name($p747);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __dynamic_dev_dbg.ref.ref.ref.ref($p19, $p20, .str.47, $p748);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb268:
    assume $i720 == 1;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} dev_err.ref.ref($p20, .str.45);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} usb_serial_put($p50);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p768 := $load.ref($M.0, $p767);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ldv_module_put_19($p768);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb258:
    assume $i700 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(280, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    call {:si_unique_call 305} $i703 := devirtbounce.1($p702, $p50);
    call {:si_unique_call 306} {:cexpr "retval"} boogie_si_record_i32($i703);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i704 := $slt.i32($i703, 0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i706 := $load.i8($M.0, $p705);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i707 := $and.i8($i706, $sub.i8(0, 5));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i708 := $or.i8($i707, 4);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p705, $i708);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i709 := $sgt.i32($i703, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i709} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb263:
    assume $i709 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p710, 0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb260:
    assume $i704 == 1;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb252:
    assume $i679 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p680, .str);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p681, .str.24);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p682, .str.25);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p683, .str.44);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p685 := $bitcast.ref.ref($p684);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i686 := $load.i24($M.14, $p685);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i687 := $and.i24($i686, $sub.i24(0, 262144));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i688 := $or.i24($i687, 1034);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p685, $i688);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p689, 0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i691 := $load.i8($M.15, $p690);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i692 := $zext.i8.i64($i691);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i693 := $and.i64($i692, 1);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i694 := ldv__builtin_expect($i693, 0);
    call {:si_unique_call 303} {:cexpr "tmp___28"} boogie_si_record_i64($i694);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i695 := $ne.i64($i694, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb254:
    assume $i695 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __dynamic_dev_dbg.ref.ref.ref($p18, $p20, .str.44);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb235:
    assume $i632 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i633 := $slt.i32(0, $i91);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i633} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i633 == 1);
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb237:
    assume $i633 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i634 := 0;
    goto $bb240;

  $bb240:
    call $i635, $p636, $p637, $i638, $p640, $p641, $p642, $p643, $p644, $p645, $i646, $i647, $i648, $p649, $p650, $i651, $p652, $i653, $p654, $p655, $p656, $p657, $i658, $i659, $p660, $i661, $i662, $i663, $p664, $p665, $i666, $p667, $p668, $p669, $p670, $p671, $p672, $p673, $p674, $i675, $i676, $i677, $i678, $i634 := usb_serial_probe_loop_$bb240($p3, $p21, $p50, $i91, $i635, $p636, $p637, $i638, $p640, $p641, $p642, $p643, $p644, $p645, $i646, $i647, $i648, $p649, $p650, $i651, $p652, $i653, $p654, $p655, $p656, $p657, $i658, $i659, $p660, $i661, $i662, $i663, $p664, $p665, $i666, $p667, $p668, $p669, $p670, $p671, $p672, $p673, $p674, $i675, $i676, $i677, $i678, $i634);
    goto $bb240_last;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i635 := $sext.i32.i64($i634);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref($i635, 8));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.20, $p636);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i638 := $sext.i32.i64($i634);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i638, 8));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p641 := $load.ref($M.0, $p640);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p642 := usb_alloc_urb(0, 208);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p643, $p642);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p645 := $load.ref($M.0, $p644);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i646 := $p2i.ref.i64($p645);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i647 := $eq.i64($i646, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i647 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i648 := usb_endpoint_maxp($p637);
    call {:si_unique_call 295} {:cexpr "buffer_size"} boogie_si_record_i32($i648);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1160, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p649, $i648);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p637, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i651 := $load.i8($M.0, $p650);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1176, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p652, $i651);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i653 := $sext.i32.i64($i648);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p654 := kmalloc($i653, 208);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1152, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p655, $p654);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1152, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.0, $p656);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i658 := $p2i.ref.i64($p657);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i659 := $eq.i64($i658, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p637, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i661 := $load.i8($M.0, $p660);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i662 := $zext.i8.i32($i661);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i663 := __create_pipe($p21, $i662);
    call {:si_unique_call 298} {:cexpr "tmp___27"} boogie_si_record_i32($i663);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p665 := $load.ref($M.0, $p664);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i666 := $or.i32($i663, 1073741824);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p641, $mul.ref(0, 3016)), $mul.ref(1152, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.0, $p667);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p670, $mul.ref(0, 552)), $mul.ref(512, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p672 := $load.ref($M.0, $p671);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p673 := $bitcast.ref.ref($p641);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p637, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i675 := $load.i8($M.0, $p674);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i676 := $zext.i8.i32($i675);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} usb_fill_int_urb($p665, $p21, $i666, $p668, $i648, $p672, $p673, $i676);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i677 := $add.i32($i634, 1);
    call {:si_unique_call 300} {:cexpr "i"} boogie_si_record_i32($i677);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i678 := $slt.i32($i677, $i91);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i678 == 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb248:
    assume $i678 == 1;
    assume {:verifier.code 0} true;
    $i634 := $i677;
    goto $bb248_dummy;

  $bb245:
    assume $i659 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb242:
    assume $i647 == 1;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb229:
    assume $i610 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p611, .str);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p612, .str.24);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p613, .str.25);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p614, .str.43);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p616 := $bitcast.ref.ref($p615);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i617 := $load.i24($M.14, $p616);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i618 := $and.i24($i617, $sub.i24(0, 262144));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i619 := $or.i24($i618, 1008);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p616, $i619);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p620, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i622 := $load.i8($M.15, $p621);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i623 := $zext.i8.i64($i622);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i624 := $and.i64($i623, 1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i625 := ldv__builtin_expect($i624, 0);
    call {:si_unique_call 291} {:cexpr "tmp___25"} boogie_si_record_i64($i625);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i626 := $ne.i64($i625, 0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i626} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb231:
    assume $i626 == 1;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} __dynamic_dev_dbg.ref.ref.ref($p17, $p20, .str.43);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb212:
    assume $i564 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i565 := $slt.i32(0, $i313);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i565 == 1);
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb214:
    assume $i565 == 1;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i566 := 0;
    goto $bb217;

  $bb217:
    call $i567, $p568, $p569, $i570, $p572, $p573, $p574, $p575, $p576, $p577, $i578, $i579, $i580, $p581, $i582, $p583, $i584, $p585, $p586, $p587, $p588, $i589, $i590, $p591, $i592, $i593, $i594, $p595, $p596, $i597, $p598, $p599, $p600, $p601, $p602, $p603, $p604, $p605, $i606, $i607, $i608, $i609, $i566 := usb_serial_probe_loop_$bb217($p2, $p21, $p50, $i313, $i567, $p568, $p569, $i570, $p572, $p573, $p574, $p575, $p576, $p577, $i578, $i579, $i580, $p581, $i582, $p583, $i584, $p585, $p586, $p587, $p588, $i589, $i590, $p591, $i592, $i593, $i594, $p595, $p596, $i597, $p598, $p599, $p600, $p601, $p602, $p603, $p604, $p605, $i606, $i607, $i608, $i609, $i566);
    goto $bb217_last;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i567 := $sext.i32.i64($i566);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i567, 8));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p569 := $load.ref($M.19, $p568);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i570 := $sext.i32.i64($i566);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i570, 8));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p573 := $load.ref($M.0, $p572);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p574 := usb_alloc_urb(0, 208);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p573, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p575, $p574);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p573, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p577 := $load.ref($M.0, $p576);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i578 := $p2i.ref.i64($p577);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i579 := $eq.i64($i578, 0);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i580 := usb_endpoint_maxp($p569);
    call {:si_unique_call 284} {:cexpr "buffer_size"} boogie_si_record_i32($i580);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p569, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i582 := $load.i8($M.0, $p581);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p573, $mul.ref(0, 3016)), $mul.ref(1144, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p583, $i582);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i584 := $sext.i32.i64($i580);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p585 := kmalloc($i584, 208);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p573, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p586, $p585);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p573, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p588 := $load.ref($M.0, $p587);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i589 := $p2i.ref.i64($p588);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i590 := $eq.i64($i589, 0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p569, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i592 := $load.i8($M.0, $p591);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i593 := $zext.i8.i32($i592);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i594 := __create_pipe($p21, $i593);
    call {:si_unique_call 287} {:cexpr "tmp___24"} boogie_si_record_i32($i594);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p573, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.0, $p595);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i597 := $or.i32($i594, 1073741952);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p573, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p599 := $load.ref($M.0, $p598);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p601 := $load.ref($M.0, $p600);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p601, $mul.ref(0, 552)), $mul.ref(504, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.0, $p602);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p604 := $bitcast.ref.ref($p573);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p569, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i606 := $load.i8($M.0, $p605);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i607 := $zext.i8.i32($i606);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} usb_fill_int_urb($p596, $p21, $i597, $p599, $i580, $p603, $p604, $i607);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i608 := $add.i32($i566, 1);
    call {:si_unique_call 289} {:cexpr "i"} boogie_si_record_i32($i608);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i609 := $slt.i32($i608, $i313);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i609 == 1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb225:
    assume $i609 == 1;
    assume {:verifier.code 0} true;
    $i566 := $i608;
    goto $bb225_dummy;

  $bb222:
    assume $i590 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb219:
    assume $i579 == 1;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb186:
    assume $i488 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i489 := 0;
    goto $bb189;

  $bb189:
    call $i490, $p491, $p492, $i493, $p495, $p496, $p498, $p499, $i500, $i501, $i502, $p503, $p504, $p505, $i506, $i507, $i508, $i509, $i510, $p511, $p512, $i513, $p514, $p515, $p516, $p518, $p520, $p521, $i522, $i523, $i524, $p525, $p527, $p529, $p530, $i531, $i532, $p533, $i534, $i535, $i536, $p538, $p539, $i540, $p542, $p543, $p544, $p545, $p546, $p547, $p548, $p550, $p551, $p552, $p554, $p555, $p556, $i557, $i558, $i489, $p769, $p770, $p772, $p774, $p775, $i776, $i777, $i778, $p779, $p781, $p783, $p784, $i785, $i786, $p787, $i788, $i789, $i790, $p792, $p793, $i794, $p796, $p797, $p798, $p799, $p800, $p801, $p802 := usb_serial_probe_loop_$bb189($p5, $p21, $p50, $i94, $i490, $p491, $p492, $i493, $p495, $p496, $p498, $p499, $i500, $i501, $i502, $p503, $p504, $p505, $i506, $i507, $i508, $i509, $i510, $p511, $p512, $i513, $p514, $p515, $p516, $p518, $p520, $p521, $i522, $i523, $i524, $p525, $p527, $p529, $p530, $i531, $i532, $p533, $i534, $i535, $i536, $p538, $p539, $i540, $p542, $p543, $p544, $p545, $p546, $p547, $p548, $p550, $p551, $p552, $p554, $p555, $p556, $i557, $i558, $i489, $p769, $p770, $p772, $p774, $p775, $i776, $i777, $i778, $p779, $p781, $p783, $p784, $i785, $i786, $p787, $i788, $i789, $i790, $p792, $p793, $i794, $p796, $p797, $p798, $p799, $p800, $p801, $p802);
    goto $bb189_last;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i490 := $sext.i32.i64($i489);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref($i490, 8));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.18, $p491);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i493 := $sext.i32.i64($i489);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i493, 8));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p496 := $load.ref($M.0, $p495);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p499 := $bitcast.ref.ref($p498);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i500 := __kfifo_alloc($p499, 4096, 1, 208);
    call {:si_unique_call 267} {:cexpr "tmp___19"} boogie_si_record_i32($i500);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i501 := __kfifo_int_must_check_helper($i500);
    call {:si_unique_call 269} {:cexpr "tmp___20"} boogie_si_record_i32($i501);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i502 := $ne.i32($i501, 0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p504 := $load.ref($M.0, $p503);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p504, $mul.ref(0, 552)), $mul.ref(264, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i506 := $load.i64($M.0, $p505);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i507 := $trunc.i64.i32($i506);
    call {:si_unique_call 270} {:cexpr "buffer_size"} boogie_si_record_i32($i507);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i507, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    $i510 := $i507;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p511, $i510);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p492, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i513 := $load.i8($M.0, $p512);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p514, $i513);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} set_bit(0, $p515);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p516 := usb_alloc_urb(0, 208);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p518, $p516);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.0, $p520);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i522 := $p2i.ref.i64($p521);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i523 := $eq.i64($i522, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb201;

  $bb201:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i524 := $sext.i32.i64($i510);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p525 := kmalloc($i524, 208);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p527, $p525);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.0, $p529);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i531 := $p2i.ref.i64($p530);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i532 := $eq.i64($i531, 0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb205;

  $bb205:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p492, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i534 := $load.i8($M.0, $p533);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i535 := $zext.i8.i32($i534);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i536 := __create_pipe($p21, $i535);
    call {:si_unique_call 277} {:cexpr "tmp___22"} boogie_si_record_i32($i536);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p539 := $load.ref($M.0, $p538);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i540 := $or.i32($i536, $sub.i32(0, 1073741824));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p543 := $load.ref($M.0, $p542);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p545 := $load.ref($M.0, $p544);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p545, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p547 := $load.ref($M.0, $p546);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p548 := $bitcast.ref.ref($p496);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} usb_fill_bulk_urb($p539, $p21, $i540, $p543, $i510, $p547, $p548);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} set_bit(1, $p769);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p770 := usb_alloc_urb(0, 208);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p772, $p770);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p775 := $load.ref($M.0, $p774);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i776 := $p2i.ref.i64($p775);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i777 := $eq.i64($i776, 0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $i778 := $sext.i32.i64($i510);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p779 := kmalloc($i778, 208);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p781, $p779);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p784 := $load.ref($M.0, $p783);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i785 := $p2i.ref.i64($p784);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i786 := $eq.i64($i785, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i786 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p492, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i788 := $load.i8($M.0, $p787);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i789 := $zext.i8.i32($i788);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i790 := __create_pipe($p21, $i789);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p793 := $load.ref($M.0, $p792);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i794 := $or.i32($i790, $sub.i32(0, 1073741824));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.0, $p796);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p799 := $load.ref($M.0, $p798);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($p799, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p801 := $load.ref($M.0, $p800);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p802 := $bitcast.ref.ref($p496);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} usb_fill_bulk_urb($p793, $p21, $i794, $p797, $i510, $p801, $p802);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p551 := $load.ref($M.0, $p550);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p552, $p551);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p555 := $load.ref($M.0, $p554);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p496, $mul.ref(0, 3016)), $mul.ref(1256, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p556, $p555);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i557 := $add.i32($i489, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32($i557);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i558 := $slt.i32($i557, $i94);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i558 == 1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb209:
    assume $i558 == 1;
    assume {:verifier.code 0} true;
    $i489 := $i557;
    goto $bb209_dummy;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i786 == 1;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb285:
    assume {:verifier.code 0} true;
    assume $i777 == 1;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i532 == 1;
    goto $bb204;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i523 == 1;
    goto $bb200;

  $bb194:
    assume $i508 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i509 := usb_endpoint_maxp($p492);
    call {:si_unique_call 272} {:cexpr "buffer_size"} boogie_si_record_i32($i509);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i510 := $i509;
    goto $bb196;

  $bb191:
    assume $i502 == 1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb163:
    assume $i423 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i424 := 0;
    goto $bb166;

  $bb166:
    call $i425, $p426, $p427, $i428, $p430, $p431, $p432, $p433, $p434, $i435, $i436, $i437, $i438, $i439, $p440, $p441, $i442, $p443, $p444, $p445, $p447, $p449, $p450, $i451, $i452, $i453, $p454, $p456, $p458, $p459, $i460, $i461, $p462, $i463, $i464, $i465, $p467, $p468, $i469, $p471, $p472, $p473, $p474, $p475, $p476, $p477, $p479, $p480, $p481, $p483, $p484, $p485, $i486, $i487, $i424, $p803, $p804, $p806, $p808, $p809, $i810, $i811, $i812, $p813, $p815, $p817, $p818, $i819, $i820, $p821, $i822, $i823, $i824, $p826, $p827, $i828, $p830, $p831, $p832, $p833, $p834, $p835, $p836 := usb_serial_probe_loop_$bb166($p4, $p21, $p50, $i93, $i425, $p426, $p427, $i428, $p430, $p431, $p432, $p433, $p434, $i435, $i436, $i437, $i438, $i439, $p440, $p441, $i442, $p443, $p444, $p445, $p447, $p449, $p450, $i451, $i452, $i453, $p454, $p456, $p458, $p459, $i460, $i461, $p462, $i463, $i464, $i465, $p467, $p468, $i469, $p471, $p472, $p473, $p474, $p475, $p476, $p477, $p479, $p480, $p481, $p483, $p484, $p485, $i486, $i487, $i424, $p803, $p804, $p806, $p808, $p809, $i810, $i811, $i812, $p813, $p815, $p817, $p818, $i819, $i820, $p821, $i822, $i823, $i824, $p826, $p827, $i828, $p830, $p831, $p832, $p833, $p834, $p835, $p836);
    goto $bb166_last;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i425 := $sext.i32.i64($i424);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref($i425, 8));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.17, $p426);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i428 := $sext.i32.i64($i424);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i428, 8));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.0, $p430);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p433 := $load.ref($M.0, $p432);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p433, $mul.ref(0, 552)), $mul.ref(256, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i435 := $load.i64($M.0, $p434);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i436 := $trunc.i64.i32($i435);
    call {:si_unique_call 254} {:cexpr "__max1"} boogie_si_record_i32($i436);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i437 := usb_endpoint_maxp($p427);
    call {:si_unique_call 256} {:cexpr "tmp___16"} boogie_si_record_i32($i437);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i438 := $sgt.i32($i436, $i437);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i438 == 1);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i439 := $i437;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1192, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p440, $i439);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i442 := $load.i8($M.0, $p441);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p443, $i442);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1248, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} set_bit(0, $p444);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p445 := usb_alloc_urb(0, 208);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p447, $p445);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i451 := $p2i.ref.i64($p450);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i452 := $eq.i64($i451, 0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb175;

  $bb175:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i453 := $sext.i32.i64($i439);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p454 := kmalloc($i453, 208);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p456, $p454);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.0, $p458);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i460 := $p2i.ref.i64($p459);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i461 := $eq.i64($i460, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb179;

  $bb179:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i463 := $load.i8($M.0, $p462);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i464 := $zext.i8.i32($i463);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i465 := __create_pipe($p21, $i464);
    call {:si_unique_call 261} {:cexpr "tmp___18"} boogie_si_record_i32($i465);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p468 := $load.ref($M.0, $p467);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i469 := $or.i32($i465, $sub.i32(0, 1073741696));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p474 := $load.ref($M.0, $p473);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p474, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.0, $p475);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p477 := $bitcast.ref.ref($p431);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} usb_fill_bulk_urb($p468, $p21, $i469, $p472, $i439, $p476, $p477);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1248, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} set_bit(1, $p803);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p804 := usb_alloc_urb(0, 208);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p806, $p804);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p809 := $load.ref($M.0, $p808);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i810 := $p2i.ref.i64($p809);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i811 := $eq.i64($i810, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i811 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i812 := $sext.i32.i64($i439);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p813 := kmalloc($i812, 208);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p815, $p813);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p818 := $load.ref($M.0, $p817);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i819 := $p2i.ref.i64($p818);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i820 := $eq.i64($i819, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($add.ref($p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i822 := $load.i8($M.0, $p821);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i823 := $zext.i8.i32($i822);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i824 := __create_pipe($p21, $i823);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.0, $p826);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i828 := $or.i32($i824, $sub.i32(0, 1073741696));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p831 := $load.ref($M.0, $p830);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p833 := $load.ref($M.0, $p832);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p833, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p835 := $load.ref($M.0, $p834);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p836 := $bitcast.ref.ref($p431);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} usb_fill_bulk_urb($p827, $p21, $i828, $p831, $i439, $p835, $p836);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.0, $p479);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p481, $p480);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.0, $p483);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p431, $mul.ref(0, 3016)), $mul.ref(1184, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p485, $p484);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i486 := $add.i32($i424, 1);
    call {:si_unique_call 265} {:cexpr "i"} boogie_si_record_i32($i486);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i487 := $slt.i32($i486, $i93);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i487 == 1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb183:
    assume $i487 == 1;
    assume {:verifier.code 0} true;
    $i424 := $i486;
    goto $bb183_dummy;

  $bb294:
    assume {:verifier.code 0} true;
    assume $i820 == 1;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i811 == 1;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb177:
    assume {:verifier.code 0} true;
    assume $i461 == 1;
    goto $bb178;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb174;

  $bb168:
    assume $i438 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i439 := $i436;
    goto $bb170;

  $bb151:
    assume $i379 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i380 := 0;
    goto $bb154;

  $bb154:
    call $p381, $p382, $i383, $i384, $p385, $p387, $p388, $p389, $p392, $p393, $p394, $p395, $p397, $p398, $p399, $p401, $p403, $p405, $i406, $p408, $p409, $p411, $p413, $p415, $p417, $p419, $p420, $i421, $i422, $i380, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_26 := usb_serial_probe_loop_$bb154($p0, $p14, $p15, $p16, $p50, $i360, $p381, $p382, $i383, $i384, $p385, $p387, $p388, $p389, $p392, $p393, $p394, $p395, $p397, $p398, $p399, $p401, $p403, $p405, $i406, $p408, $p409, $p411, $p413, $p415, $p417, $p419, $p420, $i421, $i422, $i380, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_26);
    goto $bb154_last;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p381 := kzalloc(3008, 208);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p381);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i383 := $p2i.ref.i64($p382);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i384 := $eq.i64($i383, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} tty_port_init($p385);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(328, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p387, serial_port_ops);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p388, $p50);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_26 := spinlock_check($p389);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1048, 1)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} __raw_spin_lock_init($p393, .str.41, $p14);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1496, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __init_work($p394, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p395, 137438953408);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(0, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p398 := $bitcast.ref.ref($p397);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p399 := $bitcast.ref.ref($p16);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 249} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p398, $p399, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(32, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} lockdep_init_map($p401, .str.42, $p15, 0);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(8, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} INIT_LIST_HEAD($p403);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(24, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p405, usb_serial_port_work);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i406 := $sext.i32.i64($i380);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i406, 8));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p408, $p381);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(0, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p411, $p409);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(496, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p413, $0.ref);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(488, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p415, usb_serial_bus_type);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(1400, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p417, usb_serial_port_release);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(1392, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p419, usb_serial_port_groups);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p382, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} device_initialize($p420);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i421 := $add.i32($i380, 1);
    call {:si_unique_call 253} {:cexpr "i"} boogie_si_record_i32($i421);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i422 := $slt.i32($i421, $i360);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i422 == 1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb160:
    assume $i422 == 1;
    assume {:verifier.code 0} true;
    $i380 := $i421;
    goto $bb160_dummy;

  $bb156:
    assume $i384 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb148:
    assume $i378 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __dynamic_dev_dbg.ref.ref.ref.i32($p13, $p20, .str.40, $i360);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume $i359 == 1;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i360 := $i355;
    goto $bb147;

  $bb142:
    assume $i354 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i355 := $i353;
    goto $bb144;

  $bb139:
    assume $i352 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i353 := $i351;
    goto $bb141;

  $bb136:
    assume $i350 == 1;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i351 := $i93;
    goto $bb138;

  $bb133:
    assume $i336 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} dev_warn.ref.ref.i32($p20, .str.38, $i335);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i337 := 8;
    goto $bb135;

  $bb124:
    assume $i321 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(288, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p323);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i325 := $ne.i64($i324, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    $i329 := $i320;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    $i334 := $i329;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i335 := $i334;
    goto $bb132;

  $bb129:
    assume $i330 == 1;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i332 := $load.i8($M.0, $p331);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i333 := $sext.i8.i32($i332);
    call {:si_unique_call 235} {:cexpr "num_ports"} boogie_si_record_i32($i333);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i334 := $i333;
    goto $bb131;

  $bb126:
    assume $i325 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(288, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.0, $p326);
    call {:si_unique_call 233} $i328 := devirtbounce.1($p327, $p50);
    call {:si_unique_call 234} {:cexpr "num_ports"} boogie_si_record_i32($i328);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i329 := $i328;
    goto $bb128;

  $bb118:
    assume $i315 == 1;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i94, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} _dev_info.ref.ref($p20, .str.36);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} _dev_info.ref.ref($p20, .str.37);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i320 := $i94;
    goto $bb123;

  $bb120:
    assume $i316 == 1;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} dev_err.ref.ref($p20, .str.35);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} usb_serial_put($p50);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.0, $p318);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} ldv_module_put_17($p319);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i244 == 1;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i247 := $load.i16($M.0, $p246);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i248 := $zext.i16.i32($i247);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 5);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i219 := $i92;
    assume {:branchcond $i249} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb88;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1608, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p251, $mul.ref(0, 680)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i257 := $ne.i64($i255, $i256);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    $i307 := $i219;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i93, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb111, $bb113;

  $bb113:
    assume !($i308 == 1);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i94, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i313 := $i307;
    goto $bb117;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} _dev_info.ref.ref($p20, .str.34);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} usb_serial_put($p50);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} ldv_module_put_16($p312);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 19);
    goto $bb6;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb112;

  $bb91:
    assume $i257 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1608, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p259, $mul.ref(0, 680)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.0, $p263);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p264, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.0, $p266);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i32($i267);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i269 := $sgt.i32($i268, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i270 := $i219;
    assume {:branchcond $i269} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i307 := $i270;
    goto $bb110;

  $bb93:
    assume $i269 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i271, $i272 := 0, $i219;
    goto $bb96;

  $bb96:
    call $p273, $p274, $i275, $p277, $i278, $i279, $p280, $p281, $p282, $p283, $p284, $p285, $i286, $i287, $i288, $p289, $p290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i271, $i272, $i306 := usb_serial_probe_loop_$bb96($p2, $p12, $p20, $p264, $p266, $p273, $p274, $i275, $p277, $i278, $i279, $p280, $p281, $p282, $p283, $p284, $p285, $i286, $i287, $i288, $p289, $p290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i271, $i272, $i306);
    goto $bb96_last;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p264, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i271);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p274, $mul.ref($i275, 72)), $mul.ref(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i278 := usb_endpoint_is_int_in($p277);
    call {:si_unique_call 219} {:cexpr "tmp___13"} boogie_si_record_i32($i278);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i279 := $ne.i32($i278, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    $i301 := $i272;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i302 := $add.i32($i271, 1);
    call {:si_unique_call 224} {:cexpr "i"} boogie_si_record_i32($i302);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.0, $p266);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i304 := $zext.i8.i32($i303);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i305 := $sgt.i32($i304, $i302);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i306 := $i301;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i270 := $i306;
    goto $bb95;

  $bb107:
    assume $i305 == 1;
    assume {:verifier.code 0} true;
    $i271, $i272 := $i302, $i301;
    goto $bb107_dummy;

  $bb98:
    assume $i279 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p280, .str);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p281, .str.24);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p282, .str.25);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p283, .str.33);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i286 := $load.i24($M.14, $p285);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i287 := $and.i24($i286, $sub.i24(0, 262144));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i288 := $or.i24($i287, 836);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p285, $i288);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p289, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i291 := $load.i8($M.15, $p290);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i64($i291);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i293 := $and.i64($i292, 1);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i294 := ldv__builtin_expect($i293, 0);
    call {:si_unique_call 221} {:cexpr "tmp___12"} boogie_si_record_i64($i294);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i295 := $ne.i64($i294, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i296 := $sle.i32($i272, 7);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    $i300 := $i272;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i301 := $i300;
    goto $bb106;

  $bb103:
    assume $i296 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i297 := $sext.i32.i64($i272);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i297, 8));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p298, $p277);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i299 := $add.i32($i272, 1);
    call {:si_unique_call 223} {:cexpr "num_interrupt_in"} boogie_si_record_i32($i299);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i300 := $i299;
    goto $bb105;

  $bb100:
    assume $i295 == 1;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __dynamic_dev_dbg.ref.ref.ref($p12, $p20, .str.33);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb81:
    assume $i234 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i237 := $load.i16($M.0, $p236);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i238 := $zext.i16.i32($i237);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 38688);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i219 := $i92;
    assume {:branchcond $i239} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb83;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb74;

  $bb76:
    assume $i224 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i227 := $load.i16($M.0, $p226);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i227);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 8200);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i219 := $i92;
    assume {:branchcond $i229} true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb78;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i229 == 1;
    goto $bb74;

  $bb70:
    assume $i213 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.0, $p215);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 8963);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i219 := $i92;
    assume {:branchcond $i218} true;
    goto $bb73, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb72;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb74;

  $bb26:
    assume $i90 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i95, $i96, $i97, $i98, $i99 := 0, 0, 0, 0, 0;
    goto $bb29;

  $bb29:
    call $p100, $p101, $i102, $p104, $i105, $i106, $p107, $p108, $p109, $p110, $p111, $p112, $i113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $p131, $p132, $p133, $p134, $p135, $p136, $i137, $i138, $i139, $p140, $p141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $p156, $p157, $p158, $p159, $p160, $i161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $p173, $i174, $i175, $i176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $i185, $i186, $i187, $p188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i95, $i96, $i97, $i98, $i99, $i205, $i206, $i207, $i208 := usb_serial_probe_loop_$bb29($p2, $p3, $p4, $p5, $p8, $p9, $p10, $p11, $p20, $p85, $p87, $p100, $p101, $i102, $p104, $i105, $i106, $p107, $p108, $p109, $p110, $p111, $p112, $i113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $p131, $p132, $p133, $p134, $p135, $p136, $i137, $i138, $i139, $p140, $p141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $p156, $p157, $p158, $p159, $p160, $i161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $p173, $i174, $i175, $i176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $i185, $i186, $i187, $p188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i95, $i96, $i97, $i98, $i99, $i205, $i206, $i207, $i208);
    goto $bb29_last;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p85, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i97);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p101, $mul.ref($i102, 72)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i105 := usb_endpoint_is_bulk_in($p104);
    call {:si_unique_call 194} {:cexpr "tmp___5"} boogie_si_record_i32($i105);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i128 := $i96;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i129 := usb_endpoint_is_bulk_out($p104);
    call {:si_unique_call 200} {:cexpr "tmp___7"} boogie_si_record_i32($i129);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i152 := $i95;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i153 := usb_endpoint_is_int_in($p104);
    call {:si_unique_call 206} {:cexpr "tmp___9"} boogie_si_record_i32($i153);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    $i176 := $i98;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i177 := usb_endpoint_is_int_out($p104);
    call {:si_unique_call 212} {:cexpr "tmp___11"} boogie_si_record_i32($i177);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    $i200 := $i99;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i97, 1);
    call {:si_unique_call 217} {:cexpr "i"} boogie_si_record_i32($i201);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p87);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i204 := $sgt.i32($i203, $i201);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i205, $i206, $i207, $i208 := $i200, $i176, $i128, $i152;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94 := $i205, $i206, $i207, $i208;
    goto $bb28;

  $bb67:
    assume $i204 == 1;
    assume {:verifier.code 0} true;
    $i95, $i96, $i97, $i98, $i99 := $i152, $i128, $i201, $i176, $i200;
    goto $bb67_dummy;

  $bb58:
    assume $i178 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p179, .str);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p180, .str.24);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p181, .str.25);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p182, .str.32);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i185 := $load.i24($M.14, $p184);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i186 := $and.i24($i185, $sub.i24(0, 262144));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i187 := $or.i24($i186, 809);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p184, $i187);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p188, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.15, $p189);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i64($i190);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i192 := $and.i64($i191, 1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i193 := ldv__builtin_expect($i192, 0);
    call {:si_unique_call 214} {:cexpr "tmp___10"} boogie_si_record_i64($i193);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i195 := $sle.i32($i99, 7);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i199 := $i99;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i200 := $i199;
    goto $bb66;

  $bb63:
    assume $i195 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i99);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref($i196, 8));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p197, $p104);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i99, 1);
    call {:si_unique_call 216} {:cexpr "num_interrupt_out"} boogie_si_record_i32($i198);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i199 := $i198;
    goto $bb65;

  $bb60:
    assume $i194 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __dynamic_dev_dbg.ref.ref.ref.i32($p11, $p20, .str.32, $i97);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb49:
    assume $i154 == 1;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p155, .str);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p156, .str.24);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p157, .str.25);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p158, .str.31);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i161 := $load.i24($M.14, $p160);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i162 := $and.i24($i161, $sub.i24(0, 262144));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i163 := $or.i24($i162, 799);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p160, $i163);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p164, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.15, $p165);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i64($i166);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i168 := $and.i64($i167, 1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i169 := ldv__builtin_expect($i168, 0);
    call {:si_unique_call 208} {:cexpr "tmp___8"} boogie_si_record_i64($i169);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i171 := $sle.i32($i98, 7);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i175 := $i98;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i176 := $i175;
    goto $bb57;

  $bb54:
    assume $i171 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i98);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i172, 8));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p173, $p104);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i174 := $add.i32($i98, 1);
    call {:si_unique_call 210} {:cexpr "num_interrupt_in"} boogie_si_record_i32($i174);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i175 := $i174;
    goto $bb56;

  $bb51:
    assume $i170 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __dynamic_dev_dbg.ref.ref.ref.i32($p10, $p20, .str.31, $i97);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb40:
    assume $i130 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p131, .str);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p132, .str.24);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p133, .str.25);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p134, .str.30);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i137 := $load.i24($M.14, $p136);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i138 := $and.i24($i137, $sub.i24(0, 262144));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i139 := $or.i24($i138, 790);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p136, $i139);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p140, 0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.15, $p141);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i64($i142);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i144 := $and.i64($i143, 1);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 202} {:cexpr "tmp___6"} boogie_si_record_i64($i145);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i147 := $sle.i32($i95, 7);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    $i151 := $i95;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i152 := $i151;
    goto $bb48;

  $bb45:
    assume $i147 == 1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i148 := $sext.i32.i64($i95);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref($i148, 8));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p149, $p104);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i95, 1);
    call {:si_unique_call 204} {:cexpr "num_bulk_out"} boogie_si_record_i32($i150);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i151 := $i150;
    goto $bb47;

  $bb42:
    assume $i146 == 1;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p20, .str.30, $i97);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb31:
    assume $i106 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p107, .str);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p108, .str.24);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p109, .str.25);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p110, .str.29);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i113 := $load.i24($M.14, $p112);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i114 := $and.i24($i113, $sub.i24(0, 262144));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i115 := $or.i24($i114, 781);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p112, $i115);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p116, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.15, $p117);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i64($i118);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i120 := $and.i64($i119, 1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i121 := ldv__builtin_expect($i120, 0);
    call {:si_unique_call 196} {:cexpr "tmp___4"} boogie_si_record_i64($i121);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i123 := $sle.i32($i96, 7);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i127 := $i96;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i128 := $i127;
    goto $bb39;

  $bb36:
    assume $i123 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i96);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref($i124, 8));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p125, $p104);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i96, 1);
    call {:si_unique_call 198} {:cexpr "num_bulk_in"} boogie_si_record_i32($i126);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i127 := $i126;
    goto $bb38;

  $bb33:
    assume $i122 == 1;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p20, .str.29, $i97);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb17:
    assume $i59 == 1;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p60 := get_iface_id($p22, $p0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(272, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    call {:si_unique_call 186} $i63 := devirtbounce.6($p62, $p50, $p60);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 187} {:cexpr "retval"} boogie_si_record_i32($i63);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p65, .str);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p66, .str.24);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p67, .str.25);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p68, .str.28);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.14, $p70);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 766);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p70, $i73);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p74, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.15, $p75);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 189} {:cexpr "tmp___3"} boogie_si_record_i64($i79);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} usb_serial_put($p50);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ldv_module_put_15($p83);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i41 := $i63;
    goto $bb6;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i80 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} __dynamic_dev_dbg.ref.ref.ref($p7, $p20, .str.28);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} ldv_module_put_14($p55);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} mutex_unlock(table_lock);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} dev_err.ref.ref($p20, .str.27);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb6;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb10;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} mutex_unlock(table_lock);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p25, .str);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p26, .str.24);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p27, .str.25);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p28, .str.26);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.14, $p30);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 741);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p30, $i33);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p34, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.15, $p35);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 176} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i40 == 1;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} __dynamic_dev_dbg.ref.ref.ref($p6, $p20, .str.26);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb282_dummy:
    assume false;
    return;

  $bb274_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  $bb248_dummy:
    assume false;
    return;

  $bb240_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  $bb225_dummy:
    assume false;
    return;

  $bb217_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  $bb209_dummy:
    assume false;
    return;

  $bb189_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  $bb183_dummy:
    assume false;
    return;

  $bb166_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  $bb160_dummy:
    assume false;
    return;

  $bb154_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  $bb107_dummy:
    assume false;
    return;

  $bb96_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  $bb67_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_801;
}



const usb_serial_disconnect: ref;

axiom usb_serial_disconnect == $sub.ref(0, 297555);

procedure usb_serial_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.1, $M.3, $M.5, $M.7, $M.32, $M.33, $M.23, $M.36, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation usb_serial_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i14: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var vslice_dummy_var_28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} usb_serial_console_disconnect($p2);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} mutex_lock_nested($p4, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 2));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i8 := $or.i8($i7, 1);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i8);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} mutex_unlock($p9);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 552)), $mul.ref(296, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} usb_serial_put($p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} _dev_info.ref.ref($p3, .str.58);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 552)), $mul.ref(296, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    call {:si_unique_call 342} devirtbounce.7($p44, $p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb4;

  $bb4:
    call $i15, $p17, $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i14, vslice_dummy_var_28 := usb_serial_disconnect_loop_$bb4($p2, $p10, $i15, $p17, $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i14, vslice_dummy_var_28);
    goto $bb4_last;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i15, 8));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p20 := tty_port_tty_get($p19);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} usb_serial_port_poison_urbs($p18);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} __wake_up($p24, 1, 1, $0.ref);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(0, 3016)), $mul.ref(1496, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_28 := ldv_cancel_work_sync_20($p25);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i28 := device_is_registered($p27);
    call {:si_unique_call 339} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i14, 1);
    call {:si_unique_call 341} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p10);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, $i31);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i31;
    goto $bb12_dummy;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} device_del($p30);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} tty_vhangup($p20);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} tty_kref_put($p20);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1868;
}



const usb_serial_reset_resume: ref;

axiom usb_serial_reset_resume == $sub.ref(0, 298587);

procedure usb_serial_reset_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $CurrAddr, $M.40;



implementation usb_serial_reset_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} usb_serial_unpoison_port_urbs($p2);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 3));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i5);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 552)), $mul.ref(344, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 33));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i21 := $or.i8($i20, 32);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i21);
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 95);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 552)), $mul.ref(344, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 347} $i16 := devirtbounce.1($p15, $p2);
    call {:si_unique_call 348} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ldv_usb_register_driver_24: ref;

axiom ldv_usb_register_driver_24 == $sub.ref(0, 299619);

procedure ldv_usb_register_driver_24($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.34, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_24($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 350} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 351} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 352} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} ldv_usb_driver_5();
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_register: ref;

axiom usb_serial_register == $sub.ref(0, 300651);

procedure usb_serial_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $CurrAddr;



implementation usb_serial_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i3: i32;
  var vslice_dummy_var_29: i64;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i1 := usb_disabled();
    call {:si_unique_call 355} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} usb_serial_operations_init($p0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(24, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} list_add($p27, usb_serial_driver_list);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i28 := usb_serial_bus_register($p0);
    call {:si_unique_call 364} {:cexpr "retval"} boogie_si_record_i32($i28);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_31 := printk.ref.ref(.str.61, $p35);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} mutex_unlock(table_lock);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i3 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_30 := printk.ref.i32.ref(.str.60, $i28, $p31);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(24, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} list_del($p33);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32(1, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 357} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_29 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} warn_slowpath_fmt.ref.i32.ref.ref(.str.25, 1350, .str.59, $p22);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;
}



const driver_attach: ref;

axiom driver_attach == $sub.ref(0, 301683);

procedure driver_attach($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_attach($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 369} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 370} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_serial_deregister: ref;

axiom usb_serial_deregister == $sub.ref(0, 302715);

procedure usb_serial_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_serial_deregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_32 := printk.ref.ref(.str.83, $p2);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(24, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} list_del($p4);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} mutex_unlock(table_lock);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} usb_serial_bus_deregister($p0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_deregister_25: ref;

axiom ldv_usb_deregister_25 == $sub.ref(0, 303747);

procedure ldv_usb_deregister_25($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_usb_deregister_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} usb_deregister($p0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 377} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 304779);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 305811);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 378} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 380} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 381} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 306843);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 307875);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 308907);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_bus_deregister: ref;

axiom usb_serial_bus_deregister == $sub.ref(0, 309939);

procedure usb_serial_bus_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_serial_bus_deregister($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} free_dynids($p0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} driver_unregister($p1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    return;
}



const free_dynids: ref;

axiom free_dynids == $sub.ref(0, 310971);

procedure free_dynids($p0: ref);
  free requires assertsPassed;



implementation free_dynids($p0: ref)
{
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p18: ref;
  var $p19: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} spin_lock($p2);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i13, $i16);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} spin_unlock($p30);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p10, $p6;
    goto $bb4;

  $bb4:
    call $p20, $p21, $p23, $p24, $p26, $i27, $i28, $p18, $p19 := free_dynids_loop_$bb4($i16, $p20, $p21, $p23, $p24, $p26, $i27, $i28, $p18, $p19);
    goto $bb4_last;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} list_del($p20);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p19);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} kfree($p21);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i16);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p18, $p19 := $p24, $p18;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2070;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 312003);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 313035);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} _raw_spin_lock($p2);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 314067);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} free_($p0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 315099);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} _raw_spin_unlock($p2);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 316131);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 317163);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 394} $free($p0);
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 318195);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    return;
}



const usb_disabled: ref;

axiom usb_disabled == $sub.ref(0, 319227);

procedure usb_disabled() returns ($r: i32);
  free requires assertsPassed;



implementation usb_disabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 320259);

procedure warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_operations_init: ref;

axiom usb_serial_operations_init == $sub.ref(0, 321291);

procedure usb_serial_operations_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $CurrAddr;



implementation usb_serial_operations_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i24;
  var $i119: i24;
  var $i120: i24;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i24;
  var $i147: i24;
  var $i148: i24;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i64;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i24;
  var $i171: i24;
  var $i172: i24;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i64;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i24;
  var $i195: i24;
  var $i196: i24;
  var $p197: ref;
  var $p198: ref;
  var $i199: i8;
  var $i200: i64;
  var $i201: i64;
  var $i202: i64;
  var $i203: i1;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i24;
  var $i219: i24;
  var $i220: i24;
  var $p221: ref;
  var $p222: ref;
  var $i223: i8;
  var $i224: i64;
  var $i225: i64;
  var $i226: i64;
  var $i227: i1;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i24;
  var $i243: i24;
  var $i244: i24;
  var $p245: ref;
  var $p246: ref;
  var $i247: i8;
  var $i248: i64;
  var $i249: i64;
  var $i250: i64;
  var $i251: i1;
  var $p253: ref;
  var $p254: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(368, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(360, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(376, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(408, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(424, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i162 := $eq.i64($i161, 0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p184);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i186 := $eq.i64($i185, 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(536, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p208);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i210 := $eq.i64($i209, 0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(544, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i234 := $eq.i64($i233, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    return;

  $bb58:
    assume $i234 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(544, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p235, usb_serial_generic_prepare_write_buffer);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p236, .str);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p237, .str.62);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p238, .str.25);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p239, .str.81);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p240);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i242 := $load.i24($M.29, $p241);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i243 := $and.i24($i242, $sub.i24(0, 262144));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i244 := $or.i24($i243, 1336);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p241, $i244);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p245, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.30, $p246);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i248 := $zext.i8.i64($i247);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i249 := $and.i64($i248, 1);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i250 := ldv__builtin_expect($i249, 0);
    call {:si_unique_call 436} {:cexpr "tmp___8"} boogie_si_record_i64($i250);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i251 := $ne.i64($i250, 0);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i251 == 1;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} __dynamic_pr_debug.ref.ref.ref($p10, .str.82, $p254);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb52:
    assume $i210 == 1;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(536, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p211, usb_serial_generic_process_read_urb);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p212, .str);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p213, .str.62);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p214, .str.25);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p215, .str.79);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i218 := $load.i24($M.29, $p217);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i219 := $and.i24($i218, $sub.i24(0, 262144));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i220 := $or.i24($i219, 1335);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p217, $i220);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p221, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.30, $p222);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i64($i223);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i225 := $and.i64($i224, 1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i226 := ldv__builtin_expect($i225, 0);
    call {:si_unique_call 433} {:cexpr "tmp___7"} boogie_si_record_i64($i226);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i227 := $ne.i64($i226, 0);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume $i227 == 1;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __dynamic_pr_debug.ref.ref.ref($p9, .str.80, $p230);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb46:
    assume $i186 == 1;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p187, usb_serial_generic_write_bulk_callback);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p188, .str);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p189, .str.62);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p190, .str.25);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p191, .str.77);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i194 := $load.i24($M.29, $p193);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i195 := $and.i24($i194, $sub.i24(0, 262144));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i196 := $or.i24($i195, 1334);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p193, $i196);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p197, 0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.30, $p198);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i64($i199);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i201 := $and.i64($i200, 1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i202 := ldv__builtin_expect($i201, 0);
    call {:si_unique_call 430} {:cexpr "tmp___6"} boogie_si_record_i64($i202);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i203 == 1;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} __dynamic_pr_debug.ref.ref.ref($p8, .str.78, $p206);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb40:
    assume $i162 == 1;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p163, usb_serial_generic_read_bulk_callback);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p164, .str);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p165, .str.62);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p166, .str.25);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p167, .str.75);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i170 := $load.i24($M.29, $p169);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i171 := $and.i24($i170, $sub.i24(0, 262144));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i172 := $or.i24($i171, 1333);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p169, $i172);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p173, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.30, $p174);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i64($i175);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i177 := $and.i64($i176, 1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i178 := ldv__builtin_expect($i177, 0);
    call {:si_unique_call 427} {:cexpr "tmp___5"} boogie_si_record_i64($i178);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i179 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} __dynamic_pr_debug.ref.ref.ref($p7, .str.76, $p182);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb31:
    assume $i134 == 1;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(416, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i138 == 1;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(416, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, usb_serial_generic_wait_until_sent);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p140, .str);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p141, .str.62);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p142, .str.25);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p143, .str.73);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i146 := $load.i24($M.29, $p145);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i147 := $and.i24($i146, $sub.i24(0, 262144));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i148 := $or.i24($i147, 1332);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p145, $i148);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p149, 0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.30, $p150);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i64($i151);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i153 := $and.i64($i152, 1);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 424} {:cexpr "tmp___4"} boogie_si_record_i64($i154);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i155 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} __dynamic_pr_debug.ref.ref.ref($p6, .str.74, $p158);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb25:
    assume $i110 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(408, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, usb_serial_generic_chars_in_buffer);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p112, .str);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p113, .str.62);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p114, .str.25);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p115, .str.71);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i118 := $load.i24($M.29, $p117);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i119 := $and.i24($i118, $sub.i24(0, 262144));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i120 := $or.i24($i119, 1330);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p117, $i120);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p121, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.30, $p122);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i64($i123);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i125 := $and.i64($i124, 1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 421} {:cexpr "tmp___3"} boogie_si_record_i64($i126);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i127 == 1;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} __dynamic_pr_debug.ref.ref.ref($p5, .str.72, $p130);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb19:
    assume $i86 == 1;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(376, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, usb_serial_generic_write_room);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p88, .str);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p89, .str.62);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p90, .str.25);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p91, .str.69);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.29, $p93);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 1329);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p93, $i96);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p97, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.30, $p98);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 418} {:cexpr "tmp___2"} boogie_si_record_i64($i102);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i103 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} __dynamic_pr_debug.ref.ref.ref($p4, .str.70, $p106);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(360, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, usb_serial_generic_close);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p64, .str);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p65, .str.62);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p66, .str.25);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p67, .str.67);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.29, $p69);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 1328);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p69, $i72);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p73, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.30, $p74);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 415} {:cexpr "tmp___1"} boogie_si_record_i64($i78);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i79 == 1;
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} __dynamic_pr_debug.ref.ref.ref($p3, .str.68, $p82);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(368, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, usb_serial_generic_write);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p40, .str);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p41, .str.62);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p42, .str.25);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p43, .str.65);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.29, $p45);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 1327);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p45, $i48);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p49, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.30, $p50);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 412} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i55 == 1;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __dynamic_pr_debug.ref.ref.ref($p2, .str.66, $p58);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, usb_serial_generic_open);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p16, .str);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p17, .str.62);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p18, .str.25);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p19, .str.63);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.29, $p21);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 1326);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.29 := $store.i24($M.29, $p21, $i24);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p25, 0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.30, $p26);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i31 == 1;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} __dynamic_pr_debug.ref.ref.ref($p1, .str.64, $p34);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 322323);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __list_add($p0, $p1, $p3);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_bus_register: ref;

axiom usb_serial_bus_register == $sub.ref(0, 323355);

procedure usb_serial_bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_serial_bus_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var vslice_dummy_var_33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, usb_serial_bus_type);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_33 := spinlock_check($p5);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} __raw_spin_lock_init($p10, .str.19, $p1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} INIT_LIST_HEAD($p12);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(40, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i14 := driver_register($p13);
    call {:si_unique_call 444} {:cexpr "retval"} boogie_si_record_i32($i14);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 324387);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 325419);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    return;
}



const driver_register: ref;

axiom driver_register == $sub.ref(0, 326451);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 327483);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_open: ref;

axiom usb_serial_generic_open == $sub.ref(0, 328515);

procedure usb_serial_generic_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p3 := spinlock_check($p2);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 449} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1576, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1577, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} spin_unlock_irqrestore($p7, $i4);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1192, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i11 := usb_serial_generic_submit_read_urbs($p1, 208);
    call {:si_unique_call 452} {:cexpr "result"} boogie_si_record_i32($i11);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 329547);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_write: ref;

axiom usb_serial_generic_write == $sub.ref(0, 330579);

procedure usb_serial_generic_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i20: i32;
  var $i21: i32;
  var $i19: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "usb_serial_generic_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p10 := spinlock_check($p9);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 456} {:cexpr "__flags"} boogie_si_record_i64($i11);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i3);
    call {:si_unique_call 457} {:cexpr "__n"} boogie_si_record_i64($i13);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64(0, 0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i13);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i21 := __kfifo_in($p15, $p2, $i20);
    call {:si_unique_call 461} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} spin_unlock_irqrestore($p22, $i11);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i23 := usb_serial_generic_write_start($p1, 32);
    call {:si_unique_call 464} {:cexpr "result"} boogie_si_record_i32($i23);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i7 := $i23;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i13);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i18 := __kfifo_in_r($p15, $p2, $i17, 0);
    call {:si_unique_call 459} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_serial_generic_close: ref;

axiom usb_serial_generic_close == $sub.ref(0, 331611);

procedure usb_serial_generic_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_generic_close($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1192, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} usb_kill_urb($p24);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} usb_kill_urb($p27);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} usb_kill_urb($p6);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} usb_kill_urb($p30);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p8 := spinlock_check($p7);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 469} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i14);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} spin_unlock_irqrestore($p18, $i9);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const usb_serial_generic_write_room: ref;

axiom usb_serial_generic_write_room == $sub.ref(0, 332643);

procedure usb_serial_generic_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p10 := spinlock_check($p9);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 476} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i20, $i24);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i16, $i25);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    call {:si_unique_call 477} {:cexpr "__avail"} boogie_si_record_i32($i27);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64(0, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i27;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i36 := __kfifo_uint_must_check_helper($i35);
    call {:si_unique_call 481} {:cexpr "tmp___3"} boogie_si_record_i32($i36);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} spin_unlock_irqrestore($p37, $i11);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p38, .str);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p39, .str.5);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p40, .str.6);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p41, .str.7);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.14, $p43);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 224);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p43, $i46);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p47, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.15, $p48);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 484} {:cexpr "tmp___4"} boogie_si_record_i64($i52);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p54, .str.7, .str.5, $i36);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i27);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64($i29, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb10;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32(0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i27, $i31);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i33 := __kfifo_max_r($i32, 0);
    call {:si_unique_call 479} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const usb_serial_generic_chars_in_buffer: ref;

axiom usb_serial_generic_chars_in_buffer == $sub.ref(0, 333675);

procedure usb_serial_generic_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p10 := spinlock_check($p9);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 489} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i16, $i20);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    call {:si_unique_call 490} {:cexpr "chars"} boogie_si_record_i32($i24);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} spin_unlock_irqrestore($p25, $i11);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p26, .str);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p27, .str.8);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p28, .str.6);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p29, .str.7);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.14, $p31);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 241);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p31, $i34);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p35, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.15, $p36);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 493} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i41 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p42, .str.7, .str.8, $i24);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const usb_serial_generic_wait_until_sent: ref;

axiom usb_serial_generic_wait_until_sent == $sub.ref(0, 334707);

procedure usb_serial_generic_wait_until_sent($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation usb_serial_generic_wait_until_sent($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i1;
  var $i53: i8;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var vslice_dummy_var_34: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 496} {:cexpr "usb_serial_generic_wait_until_sent:arg:timeout"} boogie_si_record_i64($i1);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i6 := tty_get_baud_rate($p0);
    call {:si_unique_call 498} {:cexpr "bps"} boogie_si_record_i32($i6);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32(2500, $i8);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    call {:si_unique_call 499} {:cexpr "__max1"} boogie_si_record_i64($i10);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64($i10, 1);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i1, 0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i12;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p17, .str);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p18, .str.9);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p19, .str.6);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p20, .str.10);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.14, $p22);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 266);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p22, $i25);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p26, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.15, $p27);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 502} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, jiffies);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, $i1);
    call {:si_unique_call 508} {:cexpr "expire"} boogie_si_record_i64($i37);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $i56, vslice_dummy_var_34 := usb_serial_generic_wait_until_sent_loop_$bb16($i1, $p5, $i16, $i37, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $i56, vslice_dummy_var_34);
    goto $bb16_last;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 552)), $mul.ref(424, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    call {:si_unique_call 509} $i52 := devirtbounce.8($p51, $p5);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i8($i52);
    call {:si_unique_call 510} {:cexpr "tmp___4"} boogie_si_record_i8($i53);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i56 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_34 := schedule_timeout_interruptible($i16);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p39 := get_current();
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i40 := signal_pending($p39);
    call {:si_unique_call 514} {:cexpr "tmp___3"} boogie_si_record_i32($i40);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i1, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, jiffies);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i37, $i43);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i45 := $slt.i64($i44, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb24;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb28:
    assume $i54 == 1;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb30;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i33 := jiffies_to_msecs($i16);
    call {:si_unique_call 504} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i34 := jiffies_to_msecs($i1);
    call {:si_unique_call 506} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p2, $p35, .str.10, .str.9, $i34, $i33);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i13 == 1;
    call {:si_unique_call 500} {:cexpr "usb_serial_generic_wait_until_sent:arg:__min2"} boogie_si_record_i64($i1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64($i12, $i1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i15 := $i1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb12;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb11;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i8 := 9600;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2797;
}



const usb_serial_generic_read_bulk_callback: ref;

axiom usb_serial_generic_read_bulk_callback == $sub.ref(0, 335739);

procedure usb_serial_generic_read_bulk_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation usb_serial_generic_read_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i24;
  var $i78: i24;
  var $i79: i24;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i8;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i12, $i13);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i115, $i116);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i15 := 1;
    assume {:branchcond $i117} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1248, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} set_bit($i17, $p18);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p19, .str);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p20, .str.11);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p21, .str.6);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p22, .str.12);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.14, $p24);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 362);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p24, $i27);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p28, 0);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.15, $p29);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 520} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p71, .str);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p72, .str.11);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p73, .str.6);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p74, .str.14);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i77 := $load.i24($M.14, $p76);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i78 := $and.i24($i77, $sub.i24(0, 262144));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i79 := $or.i24($i78, 378);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p76, $i79);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p80, 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.15, $p81);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i64($i82);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i84 := $and.i64($i83, 1);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i85 := ldv__builtin_expect($i84, 0);
    call {:si_unique_call 529} {:cexpr "tmp___1"} boogie_si_record_i64($i85);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p100 := spinlock_check($p99);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i101 := _raw_spin_lock_irqsave($p100);
    call {:si_unique_call 533} {:cexpr "flags"} boogie_si_record_i64($i101);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1577, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1576, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $i103);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1576, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i107 := $sext.i8.i32($i106);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i108 == 1);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} spin_unlock_irqrestore($p111, $i101);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb45:
    assume $i108 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} spin_unlock_irqrestore($p109, $i101);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_35 := usb_serial_generic_submit_read_urb($p6, $i16, 32);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb41:
    assume $i86 == 1;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p87, .str.14, .str.11, $i89);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} usb_serial_debug_data($p90, .str.11, $i92, $p8);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 552)), $mul.ref(536, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    call {:si_unique_call 526} devirtbounce.9($p98, $p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i39, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb22;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p49, .str);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p50, .str.11);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p51, .str.6);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p52, .str.13);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.14, $p54);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 370);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p54, $i57);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p58, 0);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.15, $p59);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 524} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i64 == 1;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p65, .str.13, .str.11, $i67);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb16:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i39, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb22;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} dev_err.ref.ref.ref.i32($p68, .str.13, .str.11, $i70);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb14:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i39, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i39, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb22;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb30;

  $bb27:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i39, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb22;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb33;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p1, $p35, .str.12, .str.11, $i16, $i37);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;
}



const usb_serial_generic_write_bulk_callback: ref;

axiom usb_serial_generic_write_bulk_callback == $sub.ref(0, 336771);

procedure usb_serial_generic_write_bulk_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.2, $M.1, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7;



implementation usb_serial_generic_write_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume {:branchcond $i10} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i77, $i78);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i11 := 1;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p14 := spinlock_check($p13);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i15 := _raw_spin_lock_irqsave($p14);
    call {:si_unique_call 540} {:cexpr "flags"} boogie_si_record_i64($i15);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i17, $i19);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i12);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} set_bit($i22, $p23);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} spin_unlock_irqrestore($p24, $i15);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p4);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(696, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  $bb46:
    assume !($i68 == 1);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1(1);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} dev_err.ref.ref.ref.i32($p70, .str.14, .str.15, $i72);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_36 := usb_serial_generic_write_start($p4, 32);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} usb_serial_port_softint($p4);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb45;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb15:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb19;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p36, .str);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p37, .str.15);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p38, .str.6);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p39, .str.13);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.14, $p41);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 420);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p41, $i44);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p45, 0);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.15, $p46);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 544} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i51 == 1;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p52, .str.13, .str.15, $i54);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb13:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i26, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb22:
    assume $i32 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p4);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(696, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i59 == 1);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1(1);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} dev_err.ref.ref.ref.i32($p61, .str.13, .str.15, $i63);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb38;

  $bb11:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i26, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i26, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb19;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb27;

  $bb24:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i26, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb30;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;
}



const usb_serial_generic_process_read_urb: ref;

axiom usb_serial_generic_process_read_urb == $sub.ref(0, 337803);

procedure usb_serial_generic_process_read_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $CurrAddr;



implementation usb_serial_generic_process_read_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i25: i32;
  var $p26: ref;
  var $p40: ref;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(696, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32(0, $i23);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} tty_flip_buffer_push($p40);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i25, $p26 := 0, $p5;
    goto $bb14;

  $bb14:
    call $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i36, $p37, $i38, $i39, $i25, $p26, vslice_dummy_var_38 := usb_serial_generic_process_read_urb_loop_$bb14($p3, $p22, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i36, $p37, $i38, $i39, $i25, $p26, vslice_dummy_var_38);
    goto $bb14_last;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i29 := usb_serial_handle_sysrq_char($p3, $i28);
    call {:si_unique_call 553} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i25, 1);
    call {:si_unique_call 555} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p26, $mul.ref(1, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p22);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i36, $i38);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i25, $p26 := $i36, $p37;
    goto $bb19_dummy;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p26);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_38 := tty_insert_flip_char($p31, $i34, 0);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_37 := tty_insert_flip_string($p17, $p5, $i20);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;
}



const usb_serial_generic_prepare_write_buffer: ref;

axiom usb_serial_generic_prepare_write_buffer == $sub.ref(0, 338835);

procedure usb_serial_generic_prepare_write_buffer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_prepare_write_buffer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i13: i32;
  var $i14: i32;
  var $i12: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} {:cexpr "usb_serial_generic_prepare_write_buffer:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p4 := spinlock_check($p3);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 559} {:cexpr "__flags"} boogie_si_record_i64($i5);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} {:cexpr "usb_serial_generic_prepare_write_buffer:arg:__n"} boogie_si_record_i64($i2);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64(0, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i2);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i14 := __kfifo_out($p8, $p1, $i13);
    call {:si_unique_call 564} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i15 := __kfifo_uint_must_check_helper($i12);
    call {:si_unique_call 566} {:cexpr "__ret"} boogie_si_record_i32($i15);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} spin_unlock_irqrestore($p16, $i5);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i17 := __kfifo_uint_must_check_helper($i15);
    call {:si_unique_call 569} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i11 := __kfifo_out_r($p8, $p1, $i10, 0);
    call {:si_unique_call 562} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __kfifo_out_r: ref;

axiom __kfifo_out_r == $sub.ref(0, 339867);

procedure __kfifo_out_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_out_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} {:cexpr "__kfifo_out_r:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 571} {:cexpr "__kfifo_out_r:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 572} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 573} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_out: ref;

axiom __kfifo_out == $sub.ref(0, 340899);

procedure __kfifo_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 574} {:cexpr "__kfifo_out:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 575} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 576} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __kfifo_uint_must_check_helper: ref;

axiom __kfifo_uint_must_check_helper == $sub.ref(0, 341931);

procedure __kfifo_uint_must_check_helper($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_uint_must_check_helper($i0: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "__kfifo_uint_must_check_helper:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 342963);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_handle_sysrq_char: ref;

axiom usb_serial_handle_sysrq_char == $sub.ref(0, 343995);

procedure usb_serial_handle_sysrq_char($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_handle_sysrq_char($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "usb_serial_handle_sysrq_char:arg:ch"} boogie_si_record_i32($i1);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(696, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i1, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, jiffies);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i11, $i13);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i15 := $slt.i64($i14, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} handle_sysrq($i1);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb11;
}



const tty_insert_flip_char: ref;

axiom tty_insert_flip_char == $sub.ref(0, 345027);

procedure tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.0, $CurrAddr;



implementation tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i12: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i40: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.32 := $store.i8($M.32, $p3, $i1);
    assume {:verifier.code 0} true;
    $M.33 := $store.i8($M.33, $p4, $i2);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i12);
    call {:si_unique_call 585} {:cexpr "change"} boogie_si_record_i32($i16);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i40 := tty_insert_flip_string_flags($p0, $p3, $p4, 1);
    call {:si_unique_call 590} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, $i21);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 587} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p37 := char_buf_ptr($p7, $i32);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.32, $p3);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i38);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb12;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p29 := flag_buf_ptr($p7, $i28);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.33, $p4);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i30);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.33, $p4);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb3;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 346059);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    return;
}



const flag_buf_ptr: ref;

axiom flag_buf_ptr == $sub.ref(0, 347091);

procedure flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "flag_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p2 := char_buf_ptr($p0, $i1);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const char_buf_ptr: ref;

axiom char_buf_ptr == $sub.ref(0, 348123);

procedure char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} {:cexpr "char_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const tty_insert_flip_string_flags: ref;

axiom tty_insert_flip_string_flags == $sub.ref(0, 349155);

procedure tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 594} {:cexpr "tty_insert_flip_string_flags:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 595} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 596} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const handle_sysrq: ref;

axiom handle_sysrq == $sub.ref(0, 350187);

procedure handle_sysrq($i0: i32);
  free requires assertsPassed;



implementation handle_sysrq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "handle_sysrq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 351219);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 598} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 599} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 601} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 352251);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 353283);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 604} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_timeout_interruptible: ref;

axiom schedule_timeout_interruptible == $sub.ref(0, 354315);

procedure schedule_timeout_interruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_interruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 609} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 355347);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p0 := devirtbounce.10(0, current_task);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 356379);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 612} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 614} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 357411);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(8, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.31, $p2);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 617} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 358443);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 359475);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 622} $i2 := devirtbounce.11(0, $p1, $i0);
    call {:si_unique_call 623} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 360507);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 624} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 625} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __kfifo_max_r: ref;

axiom __kfifo_max_r == $sub.ref(0, 361539);

procedure __kfifo_max_r($i0: i32, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_max_r($i0: i32, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} {:cexpr "__kfifo_max_r:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 627} {:cexpr "__kfifo_max_r:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 628} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 629} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __kfifo_in_r: ref;

axiom __kfifo_in_r == $sub.ref(0, 362571);

procedure __kfifo_in_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_in_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} {:cexpr "__kfifo_in_r:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 631} {:cexpr "__kfifo_in_r:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 633} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_in: ref;

axiom __kfifo_in == $sub.ref(0, 363603);

procedure __kfifo_in($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_in($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 634} {:cexpr "__kfifo_in:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 635} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 636} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 364635);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 637} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 638} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_driver_5: ref;

axiom ldv_usb_driver_5 == $sub.ref(0, 365667);

procedure ldv_usb_driver_5();
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation ldv_usb_driver_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 366699);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p1 := calloc(1, $i0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} __VERIFIER_assume($i4);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_serial_console_disconnect: ref;

axiom usb_serial_console_disconnect == $sub.ref(0, 367731);

procedure usb_serial_console_disconnect($p0: ref);
  free requires assertsPassed;



implementation usb_serial_console_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 368763);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p1 := external_alloc();
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_vhangup: ref;

axiom tty_vhangup == $sub.ref(0, 369795);

procedure tty_vhangup($p0: ref);
  free requires assertsPassed;



implementation tty_vhangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 370827);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 371859);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 645} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cancel_work_sync_20: ref;

axiom ldv_cancel_work_sync_20 == $sub.ref(0, 372891);

procedure ldv_cancel_work_sync_20($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.5, $M.7;



implementation ldv_cancel_work_sync_20($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i1 := cancel_work_sync($p0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 648} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} disable_work_1($p0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const device_is_registered: ref;

axiom device_is_registered == $sub.ref(0, 373923);

procedure device_is_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_is_registered($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(288, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i8($i3, 1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const device_del: ref;

axiom device_del == $sub.ref(0, 374955);

procedure device_del($p0: ref);
  free requires assertsPassed;



implementation device_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_put: ref;

axiom usb_serial_put == $sub.ref(0, 375987);

procedure usb_serial_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $CurrAddr, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation usb_serial_put($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(96, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_39 := kref_put($p1, destroy_serial);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 377019);

procedure _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    return;
}



const destroy_serial: ref;

axiom destroy_serial == $sub.ref(0, 378051);

procedure destroy_serial($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation destroy_serial($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i27: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 96), 272));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(24, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(24, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 272)), $mul.ref(26, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 272)), $mul.ref(16, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} usb_put_intf($p41);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 272)), $mul.ref(0, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} usb_put_dev($p43);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} kfree($p44);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb13;

  $bb13:
    call $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i27 := destroy_serial_loop_$bb13($p1, $p23, $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i27);
    goto $bb13_last;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 272)), $mul.ref(32, 1)), $mul.ref($i28, 8));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i27, 1);
    call {:si_unique_call 654} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p23);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, $i36);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i36;
    goto $bb18_dummy;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p31, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} put_device($p35);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 272)), $mul.ref(8, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 552)), $mul.ref(304, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 272)), $mul.ref(8, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 552)), $mul.ref(304, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 652} devirtbounce.7($p22, $p2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} release_minors($p2);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 379083);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $CurrAddr, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 659} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 380115);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $CurrAddr, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_40: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 661} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_40 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 667} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 668} devirtbounce.12($p2, $p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} warn_slowpath_null(.str.23, 71);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 381147);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 382179);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 671} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 672} devirtbounce.13(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.35, $p2);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const release_minors: ref;

axiom release_minors == $sub.ref(0, 383211);

procedure release_minors($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation release_minors($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} mutex_unlock(table_lock);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 9));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i18);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i5 := release_minors_loop_$bb4($p0, $p1, $i6, $p8, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i5);
    goto $bb4_last;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i6, 8));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} idr_remove(serial_minors, $i11);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, 1);
    call {:si_unique_call 675} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, $i12);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3499;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 384243);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 385275);

procedure usb_put_intf($p0: ref);
  free requires assertsPassed;



implementation usb_put_intf($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 386307);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 387339);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 388371);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 679} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 389403);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.5, $M.7;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.3;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i11 := $M.3;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.5;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i19 := $M.5;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.7;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i27 := $M.7;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.8;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 683} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.6;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 682} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.4;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 681} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.2;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 680} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 390435);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 684} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 685} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 391467);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const search_serial_device: ref;

axiom search_serial_device == $sub.ref(0, 392499);

procedure search_serial_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation search_serial_device($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p12: ref;
  var $p13: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(496, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 168), 304));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, usb_serial_driver_list);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 552));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 552)), $mul.ref(24, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p12, $p13 := $p8, $0.ref;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p12, $p13 := search_serial_device_loop_$bb4($p0, $p5, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p12, $p13);
    goto $bb4_last;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p5);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i16, $i17);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p20 := $p13;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p23 := $p12;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 24), 552));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 24), 552)), $mul.ref(24, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p12, $p13 := $p29, $p20;
    goto $bb13_dummy;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb11;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p19 := get_iface_id($p12, $p0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;
}



const ldv_try_module_get_13: ref;

axiom ldv_try_module_get_13 == $sub.ref(0, 393531);

procedure ldv_try_module_get_13($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36;



implementation ldv_try_module_get_13($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 688} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const create_serial: ref;

axiom create_serial == $sub.ref(0, 394563);

procedure create_serial($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation create_serial($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p4 := kzalloc(272, 208);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p9 := usb_get_dev($p0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p2);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p12 := usb_get_intf($p1);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(96, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} kref_init($p14);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} __mutex_init($p15, .str.49, $p3);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 9));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i18);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const ldv_module_put_14: ref;

axiom ldv_module_put_14 == $sub.ref(0, 395595);

procedure ldv_module_put_14($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv_module_put($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const get_iface_id: ref;

axiom get_iface_id == $sub.ref(0, 396627);

procedure get_iface_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation get_iface_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(8, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p6 := usb_match_id($p1, $p5);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p27 := match_dynamic_id($p1, $p0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $p27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $r := $p26;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p30, .str);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p31, .str.50);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p32, .str.25);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p33, .str.52);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.14, $p35);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 646);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p35, $i38);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p39, 0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.15, $p40);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 704} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __dynamic_dev_dbg.ref.ref.ref($p3, $p46, .str.52);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p9, .str);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p10, .str.50);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p11, .str.25);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p12, .str.51);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.14, $p14);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 641);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p14, $i17);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p18, 0);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.15, $p19);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 700} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $p6;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __dynamic_dev_dbg.ref.ref.ref($p2, $p25, .str.51);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_module_put_15: ref;

axiom ldv_module_put_15 == $sub.ref(0, 397659);

procedure ldv_module_put_15($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} ldv_module_put($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 398691);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 708} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 710} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 399723);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 712} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 714} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 400755);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 716} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 718} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_int_out: ref;

axiom usb_endpoint_is_int_out == $sub.ref(0, 401787);

procedure usb_endpoint_is_int_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 720} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 722} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const ldv_module_put_16: ref;

axiom ldv_module_put_16 == $sub.ref(0, 402819);

procedure ldv_module_put_16($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} ldv_module_put($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_module_put_17: ref;

axiom ldv_module_put_17 == $sub.ref(0, 403851);

procedure ldv_module_put_17($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} ldv_module_put($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 404883);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 405915);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 406947);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 407979);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 409011);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_port_work: ref;

axiom usb_serial_port_work == $sub.ref(0, 410043);

procedure usb_serial_port_work($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1496), 3016)), $mul.ref(8, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} tty_port_tty_wakeup($p3);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_port_release: ref;

axiom usb_serial_port_release == $sub.ref(0, 411075);

procedure usb_serial_port_release($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_port_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, .str);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p5, .str.53);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p6, .str.25);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p7, .str.54);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.14, $p9);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 580);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p9, $i12);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p13, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.15, $p14);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 730} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1136, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} usb_free_urb($p21);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1168, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} usb_free_urb($p23);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} usb_free_urb($p26);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} kfree($p29);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} usb_free_urb($p53);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} kfree($p56);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} usb_free_urb($p32);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} kfree($p35);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} usb_free_urb($p47);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1304, 1)), $mul.ref(1, 8));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} kfree($p50);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} __kfifo_free($p38);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1128, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} kfree($p40);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1152, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} kfree($p42);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(8, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} tty_port_destroy($p43);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p3);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} kfree($p44);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p0, .str.54, .str.53);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_initialize: ref;

axiom device_initialize == $sub.ref(0, 412107);

procedure device_initialize($p0: ref);
  free requires assertsPassed;



implementation device_initialize($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 413139);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 414171);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 748} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p2 := external_alloc();
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 415203);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 751} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 416235);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 417267);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 755} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    return;
}



const __kfifo_alloc: ref;

axiom __kfifo_alloc == $sub.ref(0, 418299);

procedure __kfifo_alloc($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_alloc($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 756} {:cexpr "__kfifo_alloc:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 757} {:cexpr "__kfifo_alloc:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 758} {:cexpr "__kfifo_alloc:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 1} true;
    call {:si_unique_call 759} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_int_must_check_helper: ref;

axiom __kfifo_int_must_check_helper == $sub.ref(0, 419331);

procedure __kfifo_int_must_check_helper($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_int_must_check_helper($i0: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} {:cexpr "__kfifo_int_must_check_helper:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 420363);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 763} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 764} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p5);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p6);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 3);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 5);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $sub.i32(0, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 765} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i7, 1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 16);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i24 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $sub.i32(0, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32(1, $i25);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb11;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i22 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 421395);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} dev_set_drvdata($p2, $p1);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    return;
}



const allocate_minors: ref;

axiom allocate_minors == $sub.ref(0, 422427);

procedure allocate_minors($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr;



implementation allocate_minors($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i23: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i8;
  var $i41: i8;
  var $i43: i1;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i44: i32;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 768} {:cexpr "allocate_minors:arg:num_ports"} boogie_si_record_i32($i1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p3, .str);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p4, .str.56);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p5, .str.25);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p6, .str.57);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.14, $p8);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 94);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p8, $i11);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p12, 0);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.15, $p13);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 770} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i1, 0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i40 := $and.i8($i39, $sub.i8(0, 9));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i41 := $or.i8($i40, 8);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i41);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} mutex_unlock(table_lock);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb7;

  $bb7:
    call $i24, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $i23 := allocate_minors_loop_$bb7($p0, $i1, $i24, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $i23);
    goto $bb7_last;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i24, 8));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i29 := idr_alloc(serial_minors, $p28, 0, 0, 208);
    call {:si_unique_call 774} {:cexpr "minor"} boogie_si_record_i32($i29);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i23, $i29;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p27, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i29);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i23);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p27, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i34);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i23, 1);
    call {:si_unique_call 775} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i1, $i36);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i36;
    goto $bb13_dummy;

  $bb9:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32(0, $i31);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} mutex_unlock(table_lock);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i42 := $i32;
    goto $bb16;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb20;

  $bb20:
    call $i45, $p47, $p48, $p49, $i50, $i51, $i52, $i44 := allocate_minors_loop_$bb20($p0, $i31, $i45, $p47, $p48, $p49, $i50, $i51, $i52, $i44);
    goto $bb20_last;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i45, 8));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} idr_remove(serial_minors, $i50);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i44, 1);
    call {:si_unique_call 778} {:cexpr "j"} boogie_si_record_i32($i51);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i52 := $ult.i32($i51, $i31);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i44 := $i51;
    goto $bb22_dummy;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p21, .str.57, .str.56, $i1);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4031;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 423459);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 780} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 781} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 424491);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p9 := kobject_name($p8);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const device_enable_async_suspend: ref;

axiom device_enable_async_suspend == $sub.ref(0, 425523);

procedure device_enable_async_suspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation device_enable_async_suspend($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(5, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(4, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 2);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i9);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_add: ref;

axiom device_add == $sub.ref(0, 426555);

procedure device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 783} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 784} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_serial_console_init: ref;

axiom usb_serial_console_init == $sub.ref(0, 427587);

procedure usb_serial_console_init($i0: i32);
  free requires assertsPassed;



implementation usb_serial_console_init($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} {:cexpr "usb_serial_console_init:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_18: ref;

axiom ldv_module_put_18 == $sub.ref(0, 428619);

procedure ldv_module_put_18($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_module_put($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_module_put_19: ref;

axiom ldv_module_put_19 == $sub.ref(0, 429651);

procedure ldv_module_put_19($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_module_put($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 430683);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i3 := $M.36;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.36;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $M.36 := $i6;
    call {:si_unique_call 789} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 431715);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 790} __VERIFIER_error();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 432747);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 433779);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 791} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 792} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 793} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 794} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 795} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 434811);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 435843);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 797} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p2 := ldv_malloc($i0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 436875);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 799} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 800} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 801} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 802} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p4 := malloc($i0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 1} true;
    call {:si_unique_call 804} __VERIFIER_assume($i7);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 437907);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 805} $r := $malloc($i0);
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 438939);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    return;
}



const __kfifo_free: ref;

axiom __kfifo_free == $sub.ref(0, 439971);

procedure __kfifo_free($p0: ref);
  free requires assertsPassed;



implementation __kfifo_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_destroy: ref;

axiom tty_port_destroy == $sub.ref(0, 441003);

procedure tty_port_destroy($p0: ref);
  free requires assertsPassed;



implementation tty_port_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 442035);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 443067);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 444099);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 445131);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 446163);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_match_id: ref;

axiom usb_match_id == $sub.ref(0, 447195);

procedure usb_match_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_match_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p2 := external_alloc();
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const match_dynamic_id: ref;

axiom match_dynamic_id == $sub.ref(0, 448227);

procedure match_dynamic_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation match_dynamic_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p15: ref;
  var $p32: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} spin_lock($p3);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i10, $i13);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} spin_unlock($p32);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p15 := $p7;
    goto $bb4;

  $bb4:
    call $p16, $i17, $i18, $p19, $p25, $p26, $p27, $p28, $i29, $i30, $p15 := match_dynamic_id_loop_$bb4($p0, $i13, $p16, $i17, $i18, $p19, $p25, $p26, $p27, $p28, $i29, $i30, $p15);
    goto $bb4_last;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i17 := usb_match_one_id($p0, $p16);
    call {:si_unique_call 809} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p19 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i13);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} spin_unlock($p21);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4225;
}



const usb_match_one_id: ref;

axiom usb_match_one_id == $sub.ref(0, 449259);

procedure usb_match_one_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_match_one_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 812} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 813} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 450291);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p1 := external_alloc();
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 451323);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $p1 := external_alloc();
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 452355);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} atomic_set($p1, 1);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 453387);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 454419);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 455451);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i3 := ldv_undef_int();
    call {:si_unique_call 819} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i5 := $M.36;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.36 := $i6;
    call {:si_unique_call 820} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 456483);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 1} true;
    call {:si_unique_call 821} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 822} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 823} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const usb_serial_deregister_drivers: ref;

axiom usb_serial_deregister_drivers == $sub.ref(0, 457515);

procedure usb_serial_deregister_drivers($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation usb_serial_deregister_drivers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p7: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} ldv_usb_deregister_26($p3);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} kfree($p13);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p7 := $p0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $i11, $i12, $p7 := usb_serial_deregister_drivers_loop_$bb4($p8, $p9, $p10, $i11, $i12, $p7);
    goto $bb4_last;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} usb_serial_deregister($p8);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref(1, 8));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4301;
}



const ldv_usb_deregister_26: ref;

axiom ldv_usb_deregister_26 == $sub.ref(0, 458547);

procedure ldv_usb_deregister_26($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_usb_deregister_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} usb_deregister($p0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_throttle: ref;

axiom usb_serial_generic_throttle == $sub.ref(0, 459579);

procedure usb_serial_generic_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_generic_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p5 := spinlock_check($p4);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 831} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1577, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} spin_unlock_irqrestore($p8, $i6);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_unthrottle: ref;

axiom usb_serial_generic_unthrottle == $sub.ref(0, 460611);

procedure usb_serial_generic_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} spin_lock_irq($p4);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1576, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    call {:si_unique_call 834} {:cexpr "was_throttled"} boogie_si_record_i32($i7);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1577, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1576, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} spin_unlock_irq($p10);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i7, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_41 := usb_serial_generic_submit_read_urbs($p3, 208);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 461643);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} _raw_spin_lock_irq($p2);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 462675);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} _raw_spin_unlock_irq($p2);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 463707);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 464739);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_tiocmiwait: ref;

axiom usb_serial_generic_tiocmiwait == $sub.ref(0, 465771);

procedure usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i28: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p2 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 841} {:cexpr "usb_serial_generic_tiocmiwait:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p8 := spinlock_check($p7);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 844} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 845} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p11, $p12, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} spin_unlock_irqrestore($p13, $i9);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} __might_sleep(.str.6, 505, 0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i14 := usb_serial_generic_msr_changed($p0, $i1, $p2);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 849} {:cexpr "tmp___2"} boogie_si_record_i8($i15);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i38;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(680, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i42 := constant_test_bit(31, $p41);
    call {:si_unique_call 863} {:cexpr "tmp___4"} boogie_si_record_i32($i42);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i38;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb23;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 5);
    goto $bb22;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} INIT_LIST_HEAD($p19);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i23 := prepare_to_wait_event($p22, $p3, 1);
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i24 := usb_serial_generic_msr_changed($p0, $i1, $p2);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 854} {:cexpr "tmp___1"} boogie_si_record_i8($i25);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i26 == 1);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    goto $bb9;

  $bb9:
    call $i27, $i29, $i30, $i31, $i32, $i33, $i34 := usb_serial_generic_tiocmiwait_loop_$bb9($p0, $i1, $p2, $p3, $p22, $i27, $i29, $i30, $i31, $i32, $i33, $i34);
    goto $bb9_last;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i27, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} schedule();
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i31 := prepare_to_wait_event($p22, $p3, 1);
    call {:si_unique_call 859} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i32 := usb_serial_generic_msr_changed($p0, $i1, $p2);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 861} {:cexpr "tmp___1"} boogie_si_record_i8($i33);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i31;
    goto $bb16_dummy;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} finish_wait($p36, $p3);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i28);
    call {:si_unique_call 856} {:cexpr "__ret"} boogie_si_record_i32($i37);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb17;

  $bb13:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 466803);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 865} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_msr_changed: ref;

axiom usb_serial_generic_msr_changed == $sub.ref(0, 467835);

procedure usb_serial_generic_msr_changed($p0: ref, $i1: i64, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_serial_generic_msr_changed($p0: ref, $i1: i64, $p2: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i43: i1;
  var $i26: i1;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i1;
  var $i11: i1;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    call {:si_unique_call 867} {:cexpr "usb_serial_generic_msr_changed:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(680, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i9 := constant_test_bit(31, $p8);
    call {:si_unique_call 869} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p13 := spinlock_check($p12);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 872} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p15);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 873} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p16, $p17, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} spin_unlock_irqrestore($p18, $i14);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i1, 128);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i1, 256);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i1, 64);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i1, 32);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i43 := 0;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i26 := $i43;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i26);
    call {:si_unique_call 875} {:cexpr "ret"} boogie_si_record_i8($i49);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p3);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 876} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p50, $p51, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i49);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i11 := $i52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i45, $i47);
    assume {:verifier.code 0} true;
    $i43 := $i48;
    goto $bb23;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i37, $i39);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i26 := 1;
    assume {:branchcond $i40} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb9;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i30, $i32);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i26 := 1;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb9;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i22, $i24);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i26 := 1;
    assume {:branchcond $i25} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 468867);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 878} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 879} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 469899);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 470931);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_get_icount: ref;

axiom usb_serial_generic_get_icount == $sub.ref(0, 471963);

procedure usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p2 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p7 := spinlock_check($p6);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 883} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1348, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 884} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p10, $p11, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} spin_unlock_irqrestore($p12, $i8);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(36, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const usb_serial_handle_break: ref;

axiom usb_serial_handle_break == $sub.ref(0, 472995);

procedure usb_serial_handle_break($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_handle_break($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p8: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 1250);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1584, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const usb_serial_handle_dcd_change: ref;

axiom usb_serial_handle_dcd_change == $sub.ref(0, 474027);

procedure usb_serial_handle_dcd_change($p0: ref, $p1: ref, $i2: i32);



const tty_ldisc_ref: ref;

axiom tty_ldisc_ref == $sub.ref(0, 475059);

procedure tty_ldisc_ref($p0: ref) returns ($r: ref);



const tty_ldisc_deref: ref;

axiom tty_ldisc_deref == $sub.ref(0, 476091);

procedure tty_ldisc_deref($p0: ref);



const tty_hangup: ref;

axiom tty_hangup == $sub.ref(0, 477123);

procedure tty_hangup($p0: ref);



const usb_serial_device_match: ref;

axiom usb_serial_device_match == $sub.ref(0, 478155);

procedure usb_serial_device_match($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_device_match($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 40), 552));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p8);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const usb_serial_device_probe: ref;

axiom usb_serial_device_probe == $sub.ref(0, 479187);

procedure usb_serial_device_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $M.40, $CurrAddr;



implementation usb_serial_device_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i24: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i5: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i10 := usb_autopm_get_interface($p9);
    call {:si_unique_call 887} {:cexpr "retval"} boogie_si_record_i32($i10);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(312, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1120, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 891} {:cexpr "minor"} boogie_si_record_i32($i26);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p27 := $M.38;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p28 := ldv_tty_register_device_62($p27, $i26, $p0);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i30 := IS_ERR($p29);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 894} {:cexpr "tmp___0"} boogie_si_record_i8($i31);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} usb_autopm_put_interface($p39);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} _dev_info.ref.ref.ref.i32($p44, .str.127, $p46, $i26);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p28);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i34 := PTR_ERR($p33);
    call {:si_unique_call 896} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    call {:si_unique_call 897} {:cexpr "retval"} boogie_si_record_i32($i35);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i24 := $i35;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} usb_autopm_put_interface($p57);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i5 := $i24;
    goto $bb3;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    call {:si_unique_call 900} vslice_dummy_var_42 := devirtbounce.15($p52, $p2);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(312, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 888} $i22 := devirtbounce.15($p21, $p2);
    call {:si_unique_call 889} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb12;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_serial_device_remove: ref;

axiom usb_serial_device_remove == $sub.ref(0, 480219);

procedure usb_serial_device_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.40;



implementation usb_serial_device_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i10 := usb_autopm_get_interface($p9);
    call {:si_unique_call 902} {:cexpr "autopm_err"} boogie_si_record_i32($i10);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1120, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 903} {:cexpr "minor"} boogie_si_record_i32($i12);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p13 := $M.38;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_tty_unregister_device_63($p13, $i12);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p17, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} _dev_info.ref.ref.ref.i32($p0, .str.128, $p27, $i12);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i10, 0);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} usb_autopm_put_interface($p32);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 905} $i24 := devirtbounce.15($p23, $p2);
    call {:si_unique_call 906} {:cexpr "retval"} boogie_si_record_i32($i24);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 481251);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 909} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 910} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_tty_unregister_device_63: ref;

axiom ldv_tty_unregister_device_63 == $sub.ref(0, 482283);

procedure ldv_tty_unregister_device_63($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_tty_unregister_device_63($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "ldv_tty_unregister_device_63:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} tty_unregister_device($p0, $i1);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 483315);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    return;
}



const tty_unregister_device: ref;

axiom tty_unregister_device == $sub.ref(0, 484347);

procedure tty_unregister_device($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation tty_unregister_device($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} {:cexpr "tty_unregister_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    return;
}



const ldv_tty_register_device_62: ref;

axiom ldv_tty_register_device_62 == $sub.ref(0, 485379);

procedure ldv_tty_register_device_62($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.0, $CurrAddr;



implementation ldv_tty_register_device_62($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} {:cexpr "ldv_tty_register_device_62:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p3 := tty_register_device($p0, $i1, $p2);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i5 := IS_ERR($p4);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 918} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_tty_port_operations_7();
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 486411);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i1 := ldv_is_err($p0);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 922} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 487443);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 924} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 488475);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 489507);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_register_device: ref;

axiom tty_register_device == $sub.ref(0, 490539);

procedure tty_register_device($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_register_device($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "tty_register_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p3 := external_alloc();
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_tty_port_operations_7: ref;

axiom ldv_tty_port_operations_7 == $sub.ref(0, 491571);

procedure ldv_tty_port_operations_7();
  free requires assertsPassed;
  modifies $M.40, $M.0, $CurrAddr;



implementation ldv_tty_port_operations_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p0 := ldv_init_zalloc(1040);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $M.40 := $p0;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    return;
}



const serial_port_carrier_raised: ref;

axiom serial_port_carrier_raised == $sub.ref(0, 492603);

procedure serial_port_carrier_raised($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $CurrAddr, $M.40;



implementation serial_port_carrier_raised($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 3016));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(488, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(488, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 928} $i13 := devirtbounce.15($p12, $p2);
    call {:si_unique_call 929} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const serial_port_dtr_rts: ref;

axiom serial_port_dtr_rts == $sub.ref(0, 493635);

procedure serial_port_dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation serial_port_dtr_rts($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} {:cexpr "serial_port_dtr_rts:arg:on"} boogie_si_record_i32($i1);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 3016));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 552)), $mul.ref(480, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 552)), $mul.ref(480, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 931} devirtbounce.16($p13, $p3, $i1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_port_shutdown: ref;

axiom serial_port_shutdown == $sub.ref(0, 494667);

procedure serial_port_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation serial_port_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 3016));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(360, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(360, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 932} devirtbounce.17($p12, $p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const serial_port_activate: ref;

axiom serial_port_activate == $sub.ref(0, 495699);

procedure serial_port_activate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.17, $M.18, $M.19, $M.20, $M.0, $M.36, $CurrAddr, $M.39, $M.32, $M.33, $M.23, $M.40, assertsPassed, $M.1, $M.3, $M.5, $M.7, $M.2, $M.4, $M.6, $M.8;



implementation serial_port_activate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i12: i32;
  var $p20: ref;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 3016));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} mutex_lock_nested($p6, 0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(24, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 3016)), $mul.ref(0, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 934} $i19 := devirtbounce.18($p18, $p1, $p3);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 935} {:cexpr "retval"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} mutex_unlock($p20);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i12, 0);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i22 := usb_translate_errors($i12);
    call {:si_unique_call 938} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_translate_errors: ref;

axiom usb_translate_errors == $sub.ref(0, 496731);

procedure usb_translate_errors($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_translate_errors($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    call {:si_unique_call 939} {:cexpr "usb_translate_errors:arg:error_code"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $i0;
    goto $bb20;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb10;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb15;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb18;
}



const port_number_show: ref;

axiom port_number_show == $sub.ref(0, 497763);

procedure port_number_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation port_number_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 1592), 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i8 := sprintf.ref.ref.i32($p2, .str.112, $i7);
    call {:si_unique_call 941} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 498795);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const serial_install: ref;

axiom serial_install == $sub.ref(0, 499827);

procedure serial_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, assertsPassed, $M.1, $M.3, $M.5, $M.7, $CurrAddr, $M.2, $M.4, $M.6, $M.8;



implementation serial_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i25: i32;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i20: i32;
  var $p49: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(32, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 942} {:cexpr "idx"} boogie_si_record_i32($i3);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p4 := usb_serial_port_get_by_minor($i3);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i15 := ldv_try_module_get_10($p14);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 945} {:cexpr "tmp"} boogie_si_record_i8($i16);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i23 := usb_autopm_get_interface($p22);
    call {:si_unique_call 949} {:cexpr "retval"} boogie_si_record_i32($i23);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i27 := tty_port_install($p26, $p0, $p1);
    call {:si_unique_call 952} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} mutex_unlock($p29);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 552)), $mul.ref(496, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p4);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 552)), $mul.ref(496, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 955} devirtbounce.19($p39, $p1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} usb_autopm_put_interface($p43);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} ldv_module_put_11($p48);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} usb_serial_put($p9);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} mutex_unlock($p49);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb14;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const serial_open: ref;

axiom serial_open == $sub.ref(0, 500859);

procedure serial_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation serial_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str.88);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.25);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.54);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.14, $p11);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 246);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p11, $i14);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p15, 0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.15, $p16);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 958} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i25 := tty_port_open($p24, $p0, $p1);
    call {:si_unique_call 961} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.54, .str.88);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_close: ref;

axiom serial_close == $sub.ref(0, 501891);

procedure serial_close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation serial_close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str.96);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.25);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.54);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.14, $p11);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 284);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p11, $i14);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p15, 0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.15, $p16);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 964} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} tty_port_close($p24, $p0, $p1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.54, .str.96);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_cleanup: ref;

axiom serial_cleanup == $sub.ref(0, 502923);

procedure serial_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $M.36, $CurrAddr, assertsPassed, $M.32, $M.33, $M.23, $M.1, $M.3, $M.5, $M.7, $M.2, $M.4, $M.6, $M.8;



implementation serial_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.95);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.25);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.54);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.14, $p10);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 304);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p10, $i13);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 969} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(696, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p30, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} mutex_lock_nested($p36, 0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p30);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(24, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p30, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} mutex_unlock($p44);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} usb_serial_put($p30);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} ldv_module_put_12($p35);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p30, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} usb_autopm_put_interface($p43);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.54, .str.95);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_write: ref;

axiom serial_write == $sub.ref(0, 503955);

procedure serial_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr;



implementation serial_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 977} {:cexpr "serial_write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p15, .str);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p16, .str.93);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p17, .str.25);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p18, .str.94);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.14, $p20);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 335);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p20, $i23);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p24, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.15, $p25);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 979} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 552)), $mul.ref(368, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 981} $i39 := devirtbounce.20($p38, $p0, $p6, $p1, $i2);
    call {:si_unique_call 982} {:cexpr "retval"} boogie_si_record_i32($i39);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i39;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i14 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i41 := usb_translate_errors($i39);
    call {:si_unique_call 984} {:cexpr "retval"} boogie_si_record_i32($i41);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb10;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p32, .str.94, .str.93, $i2);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;
}



const serial_write_room: ref;

axiom serial_write_room == $sub.ref(0, 504987);

procedure serial_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, $M.39, $M.40;



implementation serial_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.97);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.25);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.54);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.14, $p10);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 348);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p10, $i13);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 987} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 552)), $mul.ref(376, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 989} $i29 := devirtbounce.21($p28, $p0);
    call {:si_unique_call 990} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.54, .str.97);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_chars_in_buffer: ref;

axiom serial_chars_in_buffer == $sub.ref(0, 506019);

procedure serial_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, $M.39, $M.40;



implementation serial_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p7, .str);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p8, .str.99);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.25);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p10, .str.54);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.14, $p12);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 358);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p12, $i15);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p16, 0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.15, $p17);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 993} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p6);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(24, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 552)), $mul.ref(408, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 995} $i35 := devirtbounce.21($p34, $p0);
    call {:si_unique_call 996} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i30 := $i35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p24, .str.54, .str.99);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_ioctl: ref;

axiom serial_ioctl == $sub.ref(0, 507051);

procedure serial_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr;



implementation serial_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 998} {:cexpr "serial_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 999} {:cexpr "serial_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p7, .str);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p8, .str.90);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.25);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p10, .str.91);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.14, $p12);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 408);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p12, $i15);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p16, 0);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.15, $p17);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1001} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 21596);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 552)), $mul.ref(384, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 515);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i42 := $i58;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 552)), $mul.ref(384, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    call {:si_unique_call 1005} $i57 := devirtbounce.23($p56, $p0, $i1, $i2);
    call {:si_unique_call 1006} {:cexpr "retval"} boogie_si_record_i32($i57);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb14;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 552)), $mul.ref(464, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 515);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb10;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 552)), $mul.ref(464, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 1003} $i40 := devirtbounce.22($p39, $p0, $i2);
    call {:si_unique_call 1004} {:cexpr "retval"} boogie_si_record_i32($i40);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb9;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p24, .str.91, .str.90, $i1);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_set_termios: ref;

axiom serial_set_termios == $sub.ref(0, 508083);

procedure serial_set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation serial_set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str.89);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.25);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.54);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.14, $p11);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 427);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p11, $i14);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p15, 0);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.15, $p16);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1009} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 552)), $mul.ref(392, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} tty_termios_copy_hw($p38, $p1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 552)), $mul.ref(392, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 1011} devirtbounce.24($p37, $p0, $p5, $p1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.54, .str.89);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_throttle: ref;

axiom serial_throttle == $sub.ref(0, 509115);

procedure serial_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation serial_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.84);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.25);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.54);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.14, $p10);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 386);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p10, $i13);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1015} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 552)), $mul.ref(432, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 552)), $mul.ref(432, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 1017} devirtbounce.19($p36, $p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.54, .str.84);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_unthrottle: ref;

axiom serial_unthrottle == $sub.ref(0, 510147);

procedure serial_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation serial_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.87);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.25);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.54);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.14, $p10);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 396);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p10, $i13);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1020} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 552)), $mul.ref(440, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 552)), $mul.ref(440, 1));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 1022} devirtbounce.19($p36, $p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.54, .str.87);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_hangup: ref;

axiom serial_hangup == $sub.ref(0, 511179);

procedure serial_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation serial_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.85);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.25);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.54);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.14, $p10);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 275);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p10, $i13);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1025} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} tty_port_hangup($p23);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.54, .str.85);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_break: ref;

axiom serial_break == $sub.ref(0, 512211);

procedure serial_break($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation serial_break($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1029} {:cexpr "serial_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str.98);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.25);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.54);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.14, $p11);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 439);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p11, $i14);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p15, 0);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.15, $p16);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1031} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 552)), $mul.ref(400, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 552)), $mul.ref(400, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 1033} devirtbounce.14($p37, $p0, $i1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.54, .str.98);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_wait_until_sent: ref;

axiom serial_wait_until_sent == $sub.ref(0, 513243);

procedure serial_wait_until_sent($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation serial_wait_until_sent($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1035} {:cexpr "serial_wait_until_sent:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p8, .str);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p9, .str.101);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p10, .str.25);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p11, .str.54);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.14, $p13);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 371);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p13, $i16);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p17, 0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.15, $p18);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1037} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 552)), $mul.ref(416, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} mutex_lock_nested($p34, 0);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p7);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(24, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} mutex_unlock($p47);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 552)), $mul.ref(416, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i1);
    call {:si_unique_call 1040} devirtbounce.25($p45, $p0, $i46);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p25, .str.54, .str.101);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_tiocmget: ref;

axiom serial_tiocmget == $sub.ref(0, 514275);

procedure serial_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, $M.39, $M.40;



implementation serial_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, .str);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p6, .str.100);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.25);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.54);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.14, $p10);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 499);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p10, $i13);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1044} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 1046} $i37 := devirtbounce.21($p36, $p0);
    call {:si_unique_call 1047} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.54, .str.100);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_tiocmset: ref;

axiom serial_tiocmset == $sub.ref(0, 515307);

procedure serial_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation serial_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1049} {:cexpr "serial_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 1050} {:cexpr "serial_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p7, .str);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p8, .str.92);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.25);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p10, .str.54);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.14, $p12);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 511);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p12, $i15);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p16, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.15, $p17);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 552)), $mul.ref(456, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 552)), $mul.ref(456, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 1054} $i39 := devirtbounce.26($p38, $p0, $i1, $i2);
    call {:si_unique_call 1055} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p24, .str.54, .str.92);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_get_icount: ref;

axiom serial_get_icount == $sub.ref(0, 516339);

procedure serial_get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.17, $M.18, $M.19, $M.20, $M.0, $CurrAddr, $M.36, $M.39, $M.32, $M.33, $M.23, $M.40, assertsPassed, $M.1, $M.3, $M.5, $M.7, $M.2, $M.4, $M.6, $M.8;



implementation serial_get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str.86);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.25);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.54);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.14, $p11);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 523);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p11, $i14);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p15, 0);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.15, $p16);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1058} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 552)), $mul.ref(472, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 552)), $mul.ref(472, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 1060} $i38 := devirtbounce.27($p37, $p0, $p1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 1061} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb6;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.54, .str.86);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_port_hangup: ref;

axiom tty_port_hangup == $sub.ref(0, 517371);

procedure tty_port_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_port_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    return;
}



const tty_termios_copy_hw: ref;

axiom tty_termios_copy_hw == $sub.ref(0, 518403);

procedure tty_termios_copy_hw($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_termios_copy_hw($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_12: ref;

axiom ldv_module_put_12 == $sub.ref(0, 519435);

procedure ldv_module_put_12($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_module_put($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const tty_port_close: ref;

axiom tty_port_close == $sub.ref(0, 520467);

procedure tty_port_close($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tty_port_close($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_open: ref;

axiom tty_port_open == $sub.ref(0, 521499);

procedure tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1064} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_port_get_by_minor: ref;

axiom usb_serial_port_get_by_minor == $sub.ref(0, 522531);

procedure usb_serial_port_get_by_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_serial_port_get_by_minor($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $p15: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} {:cexpr "usb_serial_port_get_by_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p1 := idr_find(serial_minors, $i0);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} mutex_lock_nested($p8, 0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(24, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(96, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} kref_get($p16);
    assume {:verifier.code 0} true;
    $p15 := $p1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p5 := $p15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} mutex_unlock(table_lock);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} mutex_unlock($p14);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;
}



const ldv_try_module_get_10: ref;

axiom ldv_try_module_get_10 == $sub.ref(0, 523563);

procedure ldv_try_module_get_10($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36;



implementation ldv_try_module_get_10($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 1073} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_port_install: ref;

axiom tty_port_install == $sub.ref(0, 524595);

procedure tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1074} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1075} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_module_put_11: ref;

axiom ldv_module_put_11 == $sub.ref(0, 525627);

procedure ldv_module_put_11($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} ldv_module_put($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const idr_find: ref;

axiom idr_find == $sub.ref(0, 526659);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1079} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} __read_once_size($p5, $p7, 8);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1082} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p29 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(0, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 255);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __read_once_size($p21, $p23, 8);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1085} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb6;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 527691);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_43: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 1088} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1089} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1091} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_43 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1092} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1094} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1097} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} warn_slowpath_null(.str.23, 47);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 528723);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 1100} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1101} $i3 := devirtbounce.28(0, $p2, $i0, $p2);
    call {:si_unique_call 1102} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 529755);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    call {:si_unique_call 1103} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 1104} devirtbounce.3(0);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1105} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    call {:si_unique_call 1106} devirtbounce.3(0);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 530787);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1107} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 531819);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p2 := external_alloc();
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 532851);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1112} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1113} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1114} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 533883);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1115} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1117} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const serial_proc_open: ref;

axiom serial_proc_open == $sub.ref(0, 534915);

procedure serial_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i2 := single_open($p1, serial_proc_show, $0.ref);
    call {:si_unique_call 1119} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 535947);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial_proc_show: ref;

axiom serial_proc_show == $sub.ref(0, 536979);

procedure serial_proc_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation serial_proc_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i4: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_44 := seq_puts($p0, .str.102);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $p5, $i6, $i7, $p8, $p9, $p11, $p12, $p14, $p15, $i16, $i17, $p18, $p19, $p21, $p22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p34, $p35, $p37, $i38, $i39, $p40, $p41, $p43, $i44, $i45, $p47, $i48, $i49, $p51, $i52, $i53, $p55, $p56, $p57, $p59, $p62, $i63, $i64, $i4, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53 := serial_proc_show_loop_$bb1($p0, $p2, $p5, $i6, $i7, $p8, $p9, $p11, $p12, $p14, $p15, $i16, $i17, $p18, $p19, $p21, $p22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p34, $p35, $p37, $i38, $i39, $p40, $p41, $p43, $i44, $i45, $p47, $i48, $i49, $p51, $i52, $i53, $p55, $p56, $p57, $p59, $p62, $i63, $i64, $i4, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53);
    goto $bb1_last;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $p5 := usb_serial_port_get_by_minor($i4);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_45 := seq_printf.ref.ref.i32($p0, .str.103, $i4);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} vslice_dummy_var_47 := seq_printf.ref.ref.ref($p0, .str.106, $p32);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_48 := seq_printf.ref.ref.i32.i32($p0, .str.107, $i39, $i45);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_49 := seq_printf.ref.ref.i32($p0, .str.108, $i49);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_50 := seq_printf.ref.ref.i32($p0, .str.109, $i53);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p2);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_51 := usb_make_path($p56, $p57, 40);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p2);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_52 := seq_printf.ref.ref.ref($p0, .str.110, $p59);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_53 := seq_putc($p0, 10);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} usb_serial_put($p9);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} mutex_unlock($p62);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i4, 1);
    call {:si_unique_call 1125} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i64 := $sle.i32($i63, 511);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i63;
    goto $bb13_dummy;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p27 := .str.105;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} vslice_dummy_var_46 := seq_printf.ref.ref.ref($p0, .str.104, $p27);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 1144)), $mul.ref(24, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p27 := $p25;
    goto $bb11;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5938;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 538011);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1137} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 539043);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1139} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 540075);

procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1141} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1143} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1145} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 541107);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(64, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(4, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.111, $p6, $p8);
    call {:si_unique_call 1149} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const seq_putc: ref;

axiom seq_putc == $sub.ref(0, 542139);

procedure seq_putc($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation seq_putc($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1150} {:cexpr "seq_putc:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1151} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 543171);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const new_id_show: ref;

axiom new_id_show == $sub.ref(0, 544203);

procedure new_id_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation new_id_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(168, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i5 := usb_show_dynids($p4, $p1);
    call {:si_unique_call 1154} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const new_id_store: ref;

axiom new_id_store == $sub.ref(0, 545235);

procedure new_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation new_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} {:cexpr "new_id_store:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(168, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(8, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i8 := usb_store_new_id($p5, $p7, $p0, $p1, $i2);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i9 := $sge.i64($i8, 0);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $i8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(160, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(160, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 304)), $mul.ref(80, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(160, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 304)), $mul.ref(72, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(160, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i25 := usb_store_new_id($p16, $p20, $p24, $p1, $i2);
    call {:si_unique_call 1159} {:cexpr "retval"} boogie_si_record_i64($i25);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;
}



const usb_store_new_id: ref;

axiom usb_store_new_id == $sub.ref(0, 546267);

procedure usb_store_new_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i64);
  free requires assertsPassed;



implementation usb_store_new_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i64)
{
  var $i5: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1160} {:cexpr "usb_store_new_id:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1161} $i5 := __VERIFIER_nondet_long();
    call {:si_unique_call 1162} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i5);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_show_dynids: ref;

axiom usb_show_dynids == $sub.ref(0, 547299);

procedure usb_show_dynids($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation usb_show_dynids($p0: ref, $p1: ref) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} $i2 := __VERIFIER_nondet_long();
    call {:si_unique_call 1164} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i2);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 548331);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1166} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.41;
    call {:si_unique_call 1167} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.41 := cmdloc_dummy_var_19;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 549363);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_file_operations_9: ref;

axiom ldv_file_operations_9 == $sub.ref(0, 550395);

procedure ldv_file_operations_9();
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.0, $CurrAddr;



implementation ldv_file_operations_9()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.42 := $p0;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $M.43 := $p2;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_tty_operations_6: ref;

axiom ldv_initialize_tty_operations_6 == $sub.ref(0, 551427);

procedure ldv_initialize_tty_operations_6();
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.0, $CurrAddr;



implementation ldv_initialize_tty_operations_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1170} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1171} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p2 := ldv_init_zalloc(1816);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.45 := $p2;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 552459);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.5, $M.7;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 1173} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1174} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 1175} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1176} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 553491);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.5, $M.7;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} ldv_stop();
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i21 := $M.7;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i23 := $M.7;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.7 := 4;
    call {:si_unique_call 1189} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p25 := $M.2;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} usb_serial_port_work($p25);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 1191} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i16 := $M.5;
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i18 := $M.5;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.5 := 4;
    call {:si_unique_call 1186} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p20 := $M.2;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} usb_serial_port_work($p20);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 1188} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i11 := $M.3;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i13 := $M.3;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.3 := 4;
    call {:si_unique_call 1183} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p15 := $M.2;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} usb_serial_port_work($p15);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1185} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.1 := 4;
    call {:si_unique_call 1180} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p10 := $M.2;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} usb_serial_port_work($p10);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 1182} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 554523);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const main: ref;

axiom main == $sub.ref(0, 555555);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.46, $M.47, $M.39, $M.48, $M.49, $M.50, $M.1, $M.3, $M.5, $M.7, $M.51, $M.52, $M.53, $M.54, $M.23, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.55, $M.0, $M.56, $M.57, $M.58, $M.42, $M.43, $M.44, $M.45, $M.17, $M.18, $M.19, $M.20, $M.59, $M.9, $M.60, $M.61, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.68, $M.67, $M.153, $M.154, $M.155, $M.156, $M.64, $M.66, $M.38, $M.62, $M.6, $M.63, $M.65, $M.24, $M.34, $M.8, $M.4, $M.40, $M.2, $M.36, $M.201, $M.202, $CurrAddr, $M.32, $M.33, assertsPassed, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i64;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $i224: i1;
  var $i225: i1;
  var $i226: i1;
  var $i227: i1;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i1;
  var $i273: i1;
  var $i274: i1;
  var $i275: i1;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $p280: ref;
  var $i282: i32;
  var $i283: i32;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i64;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i64;
  var $i293: i32;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $p298: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i32;
  var $i304: i32;
  var $i305: i1;
  var $i306: i32;
  var $i307: i1;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i1;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $i329: i32;
  var $i330: i32;
  var $i331: i1;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $i336: i32;
  var $i337: i1;
  var $i338: i1;
  var $i339: i1;
  var $i340: i1;
  var $i341: i1;
  var $i342: i1;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $p354: ref;
  var $i355: i32;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $i362: i1;
  var $i363: i32;
  var $i364: i1;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $i368: i32;
  var $i369: i32;
  var $i370: i32;
  var $i371: i1;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i380: i32;
  var $i381: i1;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: ref;
  var vslice_dummy_var_58: ref;
  var vslice_dummy_var_59: ref;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: ref;
  var vslice_dummy_var_63: ref;
  var vslice_dummy_var_64: ref;
  var vslice_dummy_var_65: ref;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i64;
  var vslice_dummy_var_89: i64;
  var vslice_dummy_var_90: i64;
  var vslice_dummy_var_91: i32;

  $bb0:
    call {:si_unique_call 1193} $initialize();
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $p13 := ldv_init_zalloc(184);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $p15 := ldv_init_zalloc(80);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p17 := ldv_init_zalloc(44);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p19 := ldv_init_zalloc(1816);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p21 := ldv_init_zalloc(8);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $p23 := ldv_init_zalloc(1);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $p24 := ldv_init_zalloc(48);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $p26 := ldv_init_zalloc(1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p27 := ldv_init_zalloc(1416);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $p29 := ldv_init_zalloc(32);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} ldv_initialize();
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} vslice_dummy_var_54 := ldv_memset($p31, 0, 8);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} vslice_dummy_var_55 := ldv_memset($p33, 0, 4);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_56 := ldv_memset($p35, 0, 4);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} vslice_dummy_var_57 := ldv_memset($p37, 0, 4);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p4);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vslice_dummy_var_58 := ldv_memset($p39, 0, 4);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p5);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vslice_dummy_var_59 := ldv_memset($p41, 0, 4);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p6);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vslice_dummy_var_60 := ldv_memset($p43, 0, 4);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p7);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} vslice_dummy_var_61 := ldv_memset($p45, 0, 4);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p8);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} vslice_dummy_var_62 := ldv_memset($p47, 0, 8);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p9);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_63 := ldv_memset($p49, 0, 8);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p10);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_64 := ldv_memset($p51, 0, 4);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p11);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} vslice_dummy_var_65 := ldv_memset($p53, 0, 4);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1231} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1232} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1233} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1234} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1235} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1236} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} work_init_1();
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1238} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1239} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1240} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1241} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $p128, $i129, $i130, $p131, $i132, $i133, $i135, $i136, $p137, $i138, $i139, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $p151, $i152, $i153, $i155, $i156, $p157, $i158, $i159, $i161, $i162, $p163, $i164, $i166, $i167, $p168, $i169, $i170, $p171, $i172, $i173, $p174, $p175, $i176, $i177, $p178, $i180, $i181, $p182, $i184, $i185, $p186, $i187, $i189, $i190, $p191, $i192, $i194, $i195, $p196, $i198, $i199, $p200, $i202, $i203, $p204, $i206, $i207, $p208, $i210, $i211, $p212, $i213, $i214, $i215, $p216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $p239, $i241, $i242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $i252, $i253, $i254, $p255, $i256, $i257, $i258, $p259, $i260, $i261, $i262, $p263, $i264, $i265, $i266, $i267, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $p280, $i282, $i283, $i284, $i285, $p286, $i287, $i289, $i290, $p291, $i292, $i293, $i295, $i296, $p297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $p345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p353, $p354, $i355, $i357, $i358, $p359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $p367, $i368, $i369, $i370, $i371, $i372, $i373, $p374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p14, $p16, $p18, $p20, $p22, $p23, $p25, $p26, $p28, $p30, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $p128, $i129, $i130, $p131, $i132, $i133, $i135, $i136, $p137, $i138, $i139, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $p151, $i152, $i153, $i155, $i156, $p157, $i158, $i159, $i161, $i162, $p163, $i164, $i166, $i167, $p168, $i169, $i170, $p171, $i172, $i173, $p174, $p175, $i176, $i177, $p178, $i180, $i181, $p182, $i184, $i185, $p186, $i187, $i189, $i190, $p191, $i192, $i194, $i195, $p196, $i198, $i199, $p200, $i202, $i203, $p204, $i206, $i207, $p208, $i210, $i211, $p212, $i213, $i214, $i215, $p216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $p239, $i241, $i242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $i252, $i253, $i254, $p255, $i256, $i257, $i258, $p259, $i260, $i261, $i262, $p263, $i264, $i265, $i266, $i267, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $p280, $i282, $i283, $i284, $i285, $p286, $i287, $i289, $i290, $p291, $i292, $i293, $i295, $i296, $p297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $p345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p353, $p354, $i355, $i357, $i358, $p359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $p367, $i368, $i369, $i370, $i371, $i372, $i373, $p374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i55, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i55, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_stop();
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb166_dummy;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i334 := $M.23;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb304:
    assume $i335 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1386} $i336 := __VERIFIER_nondet_int();
    call {:si_unique_call 1387} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i336);
    call {:si_unique_call 1388} {:cexpr "tmp___16"} boogie_si_record_i32($i336);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i337 := $slt.i32($i336, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    $i338 := $slt.i32($i336, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    $i339 := $slt.i32($i336, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i336, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i340 == 1);
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} ldv_stop();
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb313:
    assume $i340 == 1;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i377 := $M.23;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, 3);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb348:
    assume $i378 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i379 := ldv_reset_resume_5();
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.61 := $i379;
    call {:si_unique_call 1405} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i379);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i380 := $M.61;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 0);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb350:
    assume $i381 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1406} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb311:
    assume $i339 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i363 := $M.23;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i363, 3);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume !($i364 == 1);
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $i370 := $M.23;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 2);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    assume !($i371 == 1);
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb342:
    assume $i371 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i372 := $M.24;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 0);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    assume !($i373 == 1);
    goto $bb344;

  $bb345:
    assume $i373 == 1;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p374 := $M.34;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} usb_serial_disconnect($p374);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1402} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i375 := $M.53;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i375, 1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $M.53 := $i376;
    call {:si_unique_call 1403} {:cexpr "ref_cnt"} boogie_si_record_i32($i376);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb347;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb336:
    assume $i364 == 1;
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i365 := $M.24;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 0);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    assume !($i366 == 1);
    goto $bb338;

  $bb339:
    assume $i366 == 1;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p367 := $M.34;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} usb_serial_disconnect($p367);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i368 := $M.53;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i369 := $sub.i32($i368, 1);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.53 := $i369;
    call {:si_unique_call 1400} {:cexpr "ref_cnt"} boogie_si_record_i32($i369);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb341;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb309:
    assume $i338 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i357 := $M.23;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 3);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb330:
    assume $i358 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p359 := $M.34;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i360 := usb_serial_resume($p359);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $M.60 := $i360;
    call {:si_unique_call 1396} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i360);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i361 := $M.60;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb332:
    assume $i362 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb307:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    $i341 := $slt.i32($i336, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i341 == 1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i351 := $M.23;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 2);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb327:
    assume $i352 == 1;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p353 := $M.34;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p11, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i355 := $load.i32($M.41, $p354);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} vslice_dummy_var_91 := usb_serial_suspend($p353, $i355);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1394} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb316:
    assume $i341 == 1;
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i336, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb315;

  $bb318:
    assume $i342 == 1;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i343 := $M.23;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 1);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb320:
    assume $i344 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p345 := $M.34;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i346 := usb_serial_probe($p345, $p30);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.59 := $i346;
    call {:si_unique_call 1390} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i346);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i347 := $M.59;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 0);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb322:
    assume $i348 == 1;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i349 := $M.53;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i350 := $add.i32($i349, 1);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.53 := $i350;
    call {:si_unique_call 1392} {:cexpr "ref_cnt"} boogie_si_record_i32($i350);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb324;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i59 == 1;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i317 := $M.54;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i318 := $ne.i32($i317, 0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb274:
    assume $i318 == 1;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1364} $i319 := __VERIFIER_nondet_int();
    call {:si_unique_call 1365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i319);
    call {:si_unique_call 1366} {:cexpr "tmp___15"} boogie_si_record_i32($i319);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i320 := $slt.i32($i319, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i319, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i321 == 1);
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} ldv_stop();
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb279:
    assume $i321 == 1;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i327 := $M.54;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 1);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb292:
    assume $i328 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i329 := usb_serial_init();
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $M.58 := $i329;
    call {:si_unique_call 1371} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i329);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i330 := $M.58;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i331 := $ne.i32($i330, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i332 := $M.58;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 0);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb297:
    assume $i333 == 1;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1373} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} ldv_initialize_bus_type_2();
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} ldv_file_operations_9();
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} ldv_initialize_driver_attribute_3();
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} ldv_initialize_usb_serial_driver_4();
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} ldv_initialize_tty_operations_6();
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb294:
    assume $i331 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_check_final_state();
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb277:
    assume $i320 == 1;
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i319, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume !($i322 == 1);
    goto $bb281;

  $bb282:
    assume $i322 == 1;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i323 := $M.54;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, 2);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb284:
    assume $i324 == 1;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i325 := $M.53;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 0);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb286;

  $bb287:
    assume $i326 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} usb_serial_exit();
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i315 := $M.52;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb271:
    assume $i316 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} ldv_main_exported_4();
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb5:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i55, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i313 := $M.51;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb268:
    assume $i314 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} invoke_work_1();
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb14:
    assume $i61 == 1;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i306 := $M.50;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb256:
    assume $i307 == 1;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1356} $i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 1357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i308);
    call {:si_unique_call 1358} {:cexpr "tmp___14"} boogie_si_record_i32($i308);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv_stop();
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb259:
    assume $i309 == 1;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i310 := $M.50;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb261:
    assume $i311 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_90 := port_number_show($p28, $p25, $p26);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb3:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i55, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i55, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i55, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i304 := $M.49;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb253:
    assume $i305 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} ldv_main_exported_2();
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i269 := $M.48;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb220:
    assume $i270 == 1;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1340} $i271 := __VERIFIER_nondet_int();
    call {:si_unique_call 1341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i271);
    call {:si_unique_call 1342} {:cexpr "tmp___13"} boogie_si_record_i32($i271);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i272 := $slt.i32($i271, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i273 := $slt.i32($i271, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i271, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i274 == 1);
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} ldv_stop();
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb227:
    assume $i274 == 1;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i295 := $M.48;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 1);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb244:
    assume $i296 == 1;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p297 := $M.42;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p298 := $M.43;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i299 := serial_proc_open($p297, $p298);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $M.57 := $i299;
    call {:si_unique_call 1351} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i299);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i300 := $M.57;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 0);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb246:
    assume $i301 == 1;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i302 := $M.53;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i303 := $add.i32($i302, 1);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.53 := $i303;
    call {:si_unique_call 1353} {:cexpr "ref_cnt"} boogie_si_record_i32($i303);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb225:
    assume $i273 == 1;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i289 := $M.48;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 2);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb241:
    assume $i290 == 1;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p291 := $M.43;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i292 := $load.i64($M.41, $p8);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.41, $p10);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} vslice_dummy_var_89 := seq_lseek($p291, $i292, $i293);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb223:
    assume $i272 == 1;
    assume {:verifier.code 0} true;
    $i275 := $slt.i32($i271, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i275 == 1);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i284 := $M.48;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 2);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb238:
    assume $i285 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p286 := $M.43;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i287 := $load.i64($M.41, $p9);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_88 := seq_read($p286, $p23, $i287, $p22);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb230:
    assume $i275 == 1;
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i271, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i276 == 1);
    goto $bb229;

  $bb232:
    assume $i276 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i277 := $M.48;
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 2);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb234:
    assume $i278 == 1;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p279 := $M.42;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p280 := $M.43;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_87 := single_release($p279, $p280);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i282 := $M.53;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i283 := $sub.i32($i282, 1);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.53 := $i283;
    call {:si_unique_call 1345} {:cexpr "ref_cnt"} boogie_si_record_i32($i283);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb18:
    assume $i63 == 1;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i220 := $M.39;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb170:
    assume $i221 == 1;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1315} $i222 := __VERIFIER_nondet_int();
    call {:si_unique_call 1316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i222);
    call {:si_unique_call 1317} {:cexpr "tmp___12"} boogie_si_record_i32($i222);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i223 := $slt.i32($i222, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    $i224 := $slt.i32($i222, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    $i225 := $slt.i32($i222, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i222, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i226 == 1);
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_stop();
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb179:
    assume $i226 == 1;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i266 := $M.39;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb214:
    assume $i267 == 1;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_86 := ldv_destruct_7();
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1338} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb177:
    assume $i225 == 1;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i261 := $M.39;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 2);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb211:
    assume $i262 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p263 := $M.40;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} serial_port_shutdown($p263);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i264 := $M.53;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i265 := $sub.i32($i264, 1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.53 := $i265;
    call {:si_unique_call 1336} {:cexpr "ref_cnt"} boogie_si_record_i32($i265);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto $bb213;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb175:
    assume $i224 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i249 := $M.39;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 1);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i253 := $M.39;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 3);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i257 := $M.39;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 2);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb208:
    assume $i258 == 1;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p259 := $M.40;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.41, $p7);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} serial_port_dtr_rts($p259, $i260);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb205:
    assume $i254 == 1;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p255 := $M.40;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.41, $p7);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} serial_port_dtr_rts($p255, $i256);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb202:
    assume $i250 == 1;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p251 := $M.40;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.41, $p7);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} serial_port_dtr_rts($p251, $i252);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb173:
    assume $i223 == 1;
    assume {:verifier.code 0} true;
    $i227 := $slt.i32($i222, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i227 == 1);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i237 := $M.39;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i241 := $M.39;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 3);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i245 := $M.39;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 2);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb199:
    assume $i246 == 1;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p247 := $M.40;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} vslice_dummy_var_85 := serial_port_carrier_raised($p247);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb196:
    assume $i242 == 1;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p243 := $M.40;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} vslice_dummy_var_84 := serial_port_carrier_raised($p243);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume $i238 == 1;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p239 := $M.40;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} vslice_dummy_var_83 := serial_port_carrier_raised($p239);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb182:
    assume $i227 == 1;
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i222, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb181;

  $bb184:
    assume $i228 == 1;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i229 := $M.39;
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 1);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb186:
    assume $i230 == 1;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p231 := $M.40;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i232 := serial_port_activate($p231, $p20);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.56 := $i232;
    call {:si_unique_call 1319} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i232);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i233 := $M.56;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 0);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb188:
    assume $i234 == 1;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i235 := $M.53;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i236 := $add.i32($i235, 1);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $M.53 := $i236;
    call {:si_unique_call 1321} {:cexpr "ref_cnt"} boogie_si_record_i32($i236);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    goto $bb190;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i55, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i65 == 1);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i218 := $M.47;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb167:
    assume $i219 == 1;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_main_exported_3();
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb22:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i55, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb13;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i67 := $M.46;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb26:
    assume $i68 == 1;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1246} $i69 := __VERIFIER_nondet_int();
    call {:si_unique_call 1247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i69);
    call {:si_unique_call 1248} {:cexpr "tmp___11"} boogie_si_record_i32($i69);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i69, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i69, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i69, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i69, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i69, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} ldv_stop();
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb39:
    assume $i75 == 1;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i210 := $M.46;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 1);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i214 := $M.46;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 2);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb160:
    assume $i215 == 1;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p216 := $M.45;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.41, $p1);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} serial_wait_until_sent($p216, $i217);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1312} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i211 == 1;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p212 := $M.45;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.41, $p1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} serial_wait_until_sent($p212, $i213);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb37:
    assume $i74 == 1;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i202 := $M.46;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 1);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i206 := $M.46;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 2);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb154:
    assume $i207 == 1;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p208 := $M.45;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} vslice_dummy_var_82 := serial_tiocmget($p208);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1308} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i203 == 1;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p204 := $M.45;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vslice_dummy_var_81 := serial_tiocmget($p204);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1306} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb35:
    assume $i73 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i194 := $M.46;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i198 := $M.46;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 2);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb148:
    assume $i199 == 1;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p200 := $M.45;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} vslice_dummy_var_80 := serial_chars_in_buffer($p200);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1304} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume $i195 == 1;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p196 := $M.45;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} vslice_dummy_var_79 := serial_chars_in_buffer($p196);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1302} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb33:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i69, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i76 == 1);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i184 := $M.46;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i189 := $M.46;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 2);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb142:
    assume $i190 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p191 := $M.45;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.41, $p4);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_78 := serial_break($p191, $i192);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1300} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i185 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p186 := $M.45;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.41, $p4);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vslice_dummy_var_77 := serial_break($p186, $i187);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1298} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb42:
    assume $i76 == 1;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i176 := $M.46;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i180 := $M.46;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 2);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb136:
    assume $i181 == 1;
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p182 := $M.45;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_76 := serial_write_room($p182);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1296} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i177 == 1;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p178 := $M.45;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} vslice_dummy_var_75 := serial_write_room($p178);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1294} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb31:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i69, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i69, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i78 == 1);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i172 := $M.46;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 2);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb130:
    assume $i173 == 1;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p174 := $M.45;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p175 := $M.44;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} serial_close($p174, $p175);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1292} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb46:
    assume $i78 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i166 := $M.46;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 1);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i169 := $M.46;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 2);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb127:
    assume $i170 == 1;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p171 := $M.45;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} serial_cleanup($p171);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1290} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i167 == 1;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p168 := $M.45;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} serial_cleanup($p168);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i69, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i79 == 1);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i161 := $M.46;
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 2);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb121:
    assume $i162 == 1;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p163 := $M.45;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.41, $p6);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_74 := serial_write($p163, $p12, $i164);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1286} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb48:
    assume $i79 == 1;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i149 := $M.46;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 1);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i155 := $M.46;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 2);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb118:
    assume $i156 == 1;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p157 := $M.45;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.41, $p2);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.41, $p5);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_73 := serial_tiocmset($p157, $i158, $i159);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1284} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume $i150 == 1;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p151 := $M.45;
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.41, $p2);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.41, $p5);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} vslice_dummy_var_72 := serial_tiocmset($p151, $i152, $i153);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb29:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i69, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i69, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i69, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i82 == 1);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i141 := $M.46;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 1);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i145 := $M.46;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 2);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb112:
    assume $i146 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p147 := $M.45;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} vslice_dummy_var_71 := serial_install($p14, $p147);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1280} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb109:
    assume $i142 == 1;
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p143 := $M.45;
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_70 := serial_install($p14, $p143);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1278} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb111;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i82 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i129 := $M.46;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i135 := $M.46;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb106:
    assume $i136 == 1;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p137 := $M.45;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.41, $p3);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.41, $p0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_69 := serial_ioctl($p137, $i138, $i139);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb103:
    assume $i130 == 1;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p131 := $M.45;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.41, $p3);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.41, $p0);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_68 := serial_ioctl($p131, $i132, $i133);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb52:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i69, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i83 == 1);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i123 := $M.46;
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i126 := $M.46;
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb100:
    assume $i127 == 1;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p128 := $M.45;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} serial_set_termios($p128, $p18);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i124 == 1;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p125 := $M.45;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} serial_set_termios($p125, $p18);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb56:
    assume $i83 == 1;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i114 := $M.46;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb91:
    assume $i115 == 1;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p116 := $M.45;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p117 := $M.44;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i118 := serial_open($p116, $p117);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.55 := $i118;
    call {:si_unique_call 1266} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i118);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i119 := $M.55;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i120 == 1;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i121 := $M.53;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i121, 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $M.53 := $i122;
    call {:si_unique_call 1268} {:cexpr "ref_cnt"} boogie_si_record_i32($i122);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb50:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i69, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i69, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i85 == 1);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i108 := $M.46;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 1);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i111 := $M.46;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 2);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb88:
    assume $i112 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p113 := $M.45;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} serial_unthrottle($p113);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i109 == 1;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p110 := $M.45;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} serial_unthrottle($p110);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i85 == 1;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i100 := $M.46;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i104 := $M.46;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb82:
    assume $i105 == 1;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p106 := $M.45;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} vslice_dummy_var_67 := serial_get_icount($p106, $p16);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i101 == 1;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p102 := $M.45;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_66 := serial_get_icount($p102, $p16);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1258} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i86 == 1);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i94 := $M.46;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i97 := $M.46;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 2);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb76:
    assume $i98 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p99 := $M.45;
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} serial_hangup($p99);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb73:
    assume $i95 == 1;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p96 := $M.45;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} serial_hangup($p96);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb62:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i69, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb41;

  $bb64:
    assume $i87 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i88 := $M.46;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i91 := $M.46;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb69:
    assume $i92 == 1;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p93 := $M.45;
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} serial_throttle($p93);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1252} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb71;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i89 == 1;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p90 := $M.45;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} serial_throttle($p90);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1250} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb166_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1243} $i55 := __VERIFIER_nondet_int();
    call {:si_unique_call 1244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i55);
    call {:si_unique_call 1245} {:cexpr "tmp___10"} boogie_si_record_i32($i55);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 556587);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 557619);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.41, $M.47, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var vslice_dummy_var_92: ref;
  var vslice_dummy_var_93: i64;
  var vslice_dummy_var_94: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p1 := ldv_init_zalloc(1);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} vslice_dummy_var_92 := ldv_memset($p3, 0, 8);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1413} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1414} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1415} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_stop();
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i14 := $M.47;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p16 := $M.62;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_94 := new_id_show($p16, $p2);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i9 := $M.47;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p11 := $M.62;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.41, $p0);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_93 := new_id_store($p11, $p1, $i12);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_destruct_7: ref;

axiom ldv_destruct_7 == $sub.ref(0, 558651);

procedure ldv_destruct_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_destruct_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1421} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1422} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 559683);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.64, $M.49, $M.53, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $M.40, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p0 := ldv_init_zalloc(120);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1424} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1425} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1426} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ldv_stop();
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i23 := $M.49;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume $i24 == 1;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p25 := $M.63;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_97 := usb_serial_device_remove($p25);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i27 := $M.53;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.53 := $i28;
    call {:si_unique_call 1437} {:cexpr "ref_cnt"} boogie_si_record_i32($i28);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i15 := $M.49;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i19 := $M.49;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume $i20 == 1;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p21 := $M.63;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_96 := usb_serial_device_match($p21, $p1);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p17 := $M.63;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_95 := usb_serial_device_match($p17, $p1);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i7 := $M.49;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p9 := $M.63;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i10 := usb_serial_device_probe($p9);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.64 := $i10;
    call {:si_unique_call 1428} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i10);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i11 := $M.64;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i13 := $M.53;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.53 := $i14;
    call {:si_unique_call 1430} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 560715);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.66, $M.53, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i37: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $p0 := ldv_init_zalloc(272);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1440} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1441} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1442} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_stop();
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i46 := $M.52;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb51:
    assume $i47 == 1;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} vslice_dummy_var_101 := ldv_probe_4();
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1467} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i49 := $M.53;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $M.53 := $i50;
    call {:si_unique_call 1468} {:cexpr "ref_cnt"} boogie_si_record_i32($i50);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i36 := $M.52;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 3);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i41 := $M.52;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb48:
    assume $i42 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_100 := ldv_release_4();
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i44 := $M.53;
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, 1);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $M.53 := $i45;
    call {:si_unique_call 1465} {:cexpr "ref_cnt"} boogie_si_record_i32($i45);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i37 == 1;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} vslice_dummy_var_99 := ldv_release_4();
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i39 := $M.53;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $M.53 := $i40;
    call {:si_unique_call 1462} {:cexpr "ref_cnt"} boogie_si_record_i32($i40);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i33 := $M.52;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb42:
    assume $i34 == 1;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} vslice_dummy_var_98 := ldv_suspend_4();
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.52 := 3;
    call {:si_unique_call 1459} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i28 := $M.52;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 3);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36:
    assume $i29 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i30 := usb_serial_generic_resume($p1);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.66 := $i30;
    call {:si_unique_call 1456} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i30);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i31 := $M.66;
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i32 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1457} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i19 := $M.52;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $M.52;
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i25 := $M.52;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume $i26 == 1;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p27 := $M.65;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} usb_serial_generic_unthrottle($p27);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i23 == 1;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p24 := $M.65;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} usb_serial_generic_unthrottle($p24);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $M.52 := 3;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i20 == 1;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p21 := $M.65;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} usb_serial_generic_unthrottle($p21);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i10 := $M.52;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := $M.52;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i16 := $M.52;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p18 := $M.65;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} usb_serial_generic_throttle($p18);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p15 := $M.65;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} usb_serial_generic_throttle($p15);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.52 := 3;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p12 := $M.65;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} usb_serial_generic_throttle($p12);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const usb_serial_exit: ref;

axiom usb_serial_exit == $sub.ref(0, 561747);

procedure usb_serial_exit();
  free requires assertsPassed;
  modifies $M.23;



implementation usb_serial_exit()
{
  var $p0: ref;
  var $p2: ref;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} usb_serial_console_exit();
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} usb_serial_generic_deregister();
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_usb_deregister_23(usb_serial_driver);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p0 := $M.38;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_102 := tty_unregister_driver($p0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p2 := $M.38;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} put_tty_driver($p2);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} bus_unregister(usb_serial_bus_type);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_init: ref;

axiom usb_serial_init == $sub.ref(0, 562779);

procedure usb_serial_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.23, $M.24, $M.34, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $CurrAddr;



implementation usb_serial_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i41: i32;
  var $i42: i1;
  var $i45: i32;
  var $i46: i1;
  var $i44: i32;
  var $p48: ref;
  var $i40: i32;
  var $i8: i32;
  var $p51: ref;
  var $i4: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p0 := alloc_tty_driver(512);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p1 := $M.38;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i5 := bus_register(usb_serial_bus_type);
    call {:si_unique_call 1478} {:cexpr "result"} boogie_si_record_i32($i5);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p9 := $M.38;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, .str);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p11 := $M.38;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, .str.115);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p13 := $M.38;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 188);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p15 := $M.38;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p17 := $M.38;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 3);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p19 := $M.38;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p21 := $M.38;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, 12);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p23 := $M.38;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 1482} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p25, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p26 := $M.38;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 3261);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $p29 := $M.38;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(36, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 9600);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p32 := $M.38;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(40, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 9600);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p35 := $M.38;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} tty_set_operations($p35, serial_ops);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p36 := $M.38;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i37 := tty_register_driver($p36);
    call {:si_unique_call 1485} {:cexpr "result"} boogie_si_record_i32($i37);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i41 := ldv_usb_register_driver_21(usb_serial_driver, __this_module, .str);
    call {:si_unique_call 1489} {:cexpr "result"} boogie_si_record_i32($i41);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i45 := usb_serial_generic_register();
    call {:si_unique_call 1493} {:cexpr "result"} boogie_si_record_i32($i45);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i4 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_108 := printk.ref.ref(.str.118, .str.114);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_usb_deregister_22(usb_serial_driver);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p48 := $M.38;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} vslice_dummy_var_107 := tty_unregister_driver($p48);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i40 := $i44;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} bus_unregister(usb_serial_bus_type);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_104 := printk.ref.ref.i32(.str.119, .str.114, $i8);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p51 := $M.38;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} put_tty_driver($p51);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto $bb3;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} vslice_dummy_var_106 := printk.ref.ref(.str.117, .str.114);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i44 := $i41;
    goto $bb15;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_105 := printk.ref.ref(.str.116, .str.114);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i40 := $i37;
    goto $bb11;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_103 := printk.ref.ref(.str.113, .str.114);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_initialize_bus_type_2: ref;

axiom ldv_initialize_bus_type_2 == $sub.ref(0, 563811);

procedure ldv_initialize_bus_type_2();
  free requires assertsPassed;
  modifies $M.63, $M.0, $CurrAddr;



implementation ldv_initialize_bus_type_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $M.63 := $p0;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_driver_attribute_3: ref;

axiom ldv_initialize_driver_attribute_3 == $sub.ref(0, 564843);

procedure ldv_initialize_driver_attribute_3();
  free requires assertsPassed;
  modifies $M.62, $M.0, $CurrAddr;



implementation ldv_initialize_driver_attribute_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p0 := ldv_init_zalloc(120);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_serial_driver_4: ref;

axiom ldv_initialize_usb_serial_driver_4 == $sub.ref(0, 565875);

procedure ldv_initialize_usb_serial_driver_4();
  free requires assertsPassed;
  modifies $M.65, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $p0 := ldv_init_zalloc(1816);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $M.65 := $p0;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    return;
}



const ldv_reset_resume_5: ref;

axiom ldv_reset_resume_5 == $sub.ref(0, 566907);

procedure ldv_reset_resume_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_reset_resume_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1499} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1500} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 567939);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i0 := $M.36;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_error();
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 568971);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i3 := IS_ERR($p2);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1505} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const bus_register: ref;

axiom bus_register == $sub.ref(0, 570003);

procedure bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1506} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1507} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 571035);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 572067);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1508} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1509} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_register_driver_21: ref;

axiom ldv_usb_register_driver_21 == $sub.ref(0, 573099);

procedure ldv_usb_register_driver_21($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.34, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_21($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1511} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1512} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 1513} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ldv_usb_driver_5();
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_generic_register: ref;

axiom usb_serial_generic_register == $sub.ref(0, 574131);

procedure usb_serial_generic_register() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.34, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $CurrAddr;



implementation usb_serial_generic_register() returns ($r: i32)
{
  var $i0: i16;
  var $i1: i16;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i0 := $M.67;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), $i0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i1 := $M.68;
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), $i1);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, generic_device_ids, 3);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i2 := usb_serial_register_drivers(serial_drivers, .str.2, generic_device_ids);
    call {:si_unique_call 1516} {:cexpr "retval"} boogie_si_record_i32($i2);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_deregister_22: ref;

axiom ldv_usb_deregister_22 == $sub.ref(0, 575163);

procedure ldv_usb_deregister_22($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_usb_deregister_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} usb_deregister($p0);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    return;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 576195);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1519} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1520} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bus_unregister: ref;

axiom bus_unregister == $sub.ref(0, 577227);

procedure bus_unregister($p0: ref);
  free requires assertsPassed;



implementation bus_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 578259);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    return;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 579291);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1522} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $p3 := external_alloc();
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const usb_serial_console_exit: ref;

axiom usb_serial_console_exit == $sub.ref(0, 580323);

procedure usb_serial_console_exit();
  free requires assertsPassed;



implementation usb_serial_console_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_deregister: ref;

axiom usb_serial_generic_deregister == $sub.ref(0, 581355);

procedure usb_serial_generic_deregister();
  free requires assertsPassed;
  modifies $M.23;



implementation usb_serial_generic_deregister()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} usb_serial_deregister_drivers(serial_drivers);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_deregister_23: ref;

axiom ldv_usb_deregister_23 == $sub.ref(0, 582387);

procedure ldv_usb_deregister_23($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_usb_deregister_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} usb_deregister($p0);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    return;
}



const ldv_suspend_4: ref;

axiom ldv_suspend_4 == $sub.ref(0, 583419);

procedure ldv_suspend_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1527} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1528} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 584451);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1529} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 585483);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1531} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1532} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 586515);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1533} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 1} true;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 587547);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 588579);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 589611);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 590643);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 591675);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 592707);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 593739);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 594771);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 595803);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 596835);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 597867);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 598899);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 599931);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1534} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1535} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1536} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1537} __VERIFIER_assume($i4);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 600963);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 601995);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 603027);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 604059);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1538} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1539} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1540} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1541} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1542} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1543} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1544} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1545} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1546} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1547} __VERIFIER_assume($i7);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1548} __VERIFIER_assume($i11);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 605091);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 606123);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1551} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1552} __VERIFIER_assume($i4);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 607155);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 608187);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 609219);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 610251);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 611283);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1554} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1555} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1556} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1557} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1558} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1560} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1561} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1562} __VERIFIER_assume($i7);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1563} __VERIFIER_assume($i11);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 612315);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 613347);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 614379);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 615411);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 616443);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 617475);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 618507);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 619539);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 620571);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1564} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1566} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1567} __VERIFIER_assume($i10);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 621603);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1568} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1569} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1570} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 622635);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1572} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1573} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 623667);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1574} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1575} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 624699);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 625731);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1576} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1577} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 626763);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 627795);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 628827);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1578} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1579} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1580} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1581} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $p6 := malloc($i5);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1583} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 629859);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 630891);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.72, $M.0, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.68, $M.67, $M.153, $M.154, $M.155, $M.156, $M.64, $M.66, $M.60, $M.59, $M.56, $M.61, $M.58, $M.55, $M.57, $M.38, $M.52, $M.39, $M.51, $M.1, $M.53, $M.47, $M.42, $M.48, $M.62, $M.6, $M.44, $M.5, $M.63, $M.65, $M.45, $M.24, $M.49, $M.3, $M.43, $M.34, $M.23, $M.54, $M.46, $M.7, $M.8, $M.4, $M.40, $M.2, $M.50, $M.36, $M.201, $M.202;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1584} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.72 := $store.i8($M.72, __kstrtab_usb_serial_port_softint, 117);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(11, 1)), 112);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(16, 1)), 115);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(18, 1)), 102);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(20, 1)), 105);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(21, 1)), 110);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_usb_serial_port_softint, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.ref($M.0, driver_attr_new_id, .str.126);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(32, 1)), new_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(40, 1)), new_id_store);
    $M.0 := $store.ref($M.0, usb_serial_drv_attrs, driver_attr_new_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_drv_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_group, $mul.ref(0, 32)), $mul.ref(16, 1)), usb_serial_drv_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_drv_groups, usb_serial_drv_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.73 := $store.i8($M.73, __kstrtab_usb_serial_generic_resume, 117);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(4, 1)), 115);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(5, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(6, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(8, 1)), 97);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(9, 1)), 108);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(11, 1)), 103);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(12, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(13, 1)), 110);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(15, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(16, 1)), 105);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(17, 1)), 99);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(19, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(21, 1)), 115);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(22, 1)), 117);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(23, 1)), 109);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_usb_serial_generic_resume, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.74 := $store.i8($M.74, __kstrtab_usb_serial_handle_dcd_change, 117);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(2, 1)), 98);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(4, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(5, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(6, 1)), 114);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(8, 1)), 97);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(9, 1)), 108);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(11, 1)), 104);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(12, 1)), 97);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(13, 1)), 110);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(15, 1)), 108);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(17, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(18, 1)), 100);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(19, 1)), 99);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(20, 1)), 100);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(21, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(22, 1)), 99);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(23, 1)), 104);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(24, 1)), 97);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(26, 1)), 103);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_usb_serial_handle_dcd_change, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.75 := $store.i8($M.75, __kstrtab_usb_serial_handle_break, 117);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(11, 1)), 104);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(12, 1)), 97);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(14, 1)), 100);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(15, 1)), 108);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(18, 1)), 98);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(19, 1)), 114);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(21, 1)), 97);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(22, 1)), 107);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_usb_serial_handle_break, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.76 := $store.i8($M.76, __kstrtab_usb_serial_handle_sysrq_char, 117);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(2, 1)), 98);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(4, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(5, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(6, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(8, 1)), 97);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(9, 1)), 108);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(11, 1)), 104);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(12, 1)), 97);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(13, 1)), 110);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(15, 1)), 108);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(17, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(18, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(19, 1)), 121);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(20, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(21, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(22, 1)), 113);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(23, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(24, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(25, 1)), 104);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(26, 1)), 97);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(27, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usb_serial_handle_sysrq_char, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, __kstrtab_usb_serial_generic_get_icount, 117);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(1, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(2, 1)), 98);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(8, 1)), 97);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(11, 1)), 103);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(13, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(15, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(17, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(19, 1)), 103);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(20, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(21, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(22, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(23, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(24, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(25, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(26, 1)), 117);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(27, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(28, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_usb_serial_generic_get_icount, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.78 := $store.i8($M.78, __kstrtab_usb_serial_generic_tiocmiwait, 117);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(1, 1)), 115);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(2, 1)), 98);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(8, 1)), 97);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(11, 1)), 103);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(13, 1)), 110);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(15, 1)), 114);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(17, 1)), 99);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(19, 1)), 116);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(20, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(21, 1)), 111);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(22, 1)), 99);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(23, 1)), 109);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(24, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(25, 1)), 119);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(26, 1)), 97);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(27, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(28, 1)), 116);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_usb_serial_generic_tiocmiwait, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.79 := $store.i8($M.79, __kstrtab_usb_serial_generic_unthrottle, 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(1, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(2, 1)), 98);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(8, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(11, 1)), 103);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(13, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(15, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(17, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(19, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(20, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(21, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(22, 1)), 104);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(23, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(24, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(25, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(26, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(27, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(28, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_usb_serial_generic_unthrottle, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, __kstrtab_usb_serial_generic_throttle, 117);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(1, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(2, 1)), 98);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(3, 1)), 95);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(4, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(5, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(6, 1)), 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(7, 1)), 105);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(8, 1)), 97);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(9, 1)), 108);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(10, 1)), 95);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(11, 1)), 103);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(12, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(13, 1)), 110);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(14, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(15, 1)), 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(16, 1)), 105);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(17, 1)), 99);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(19, 1)), 116);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(20, 1)), 104);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(21, 1)), 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(22, 1)), 111);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(23, 1)), 116);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(24, 1)), 116);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(25, 1)), 108);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_usb_serial_generic_throttle, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.81 := $store.i8($M.81, __kstrtab_usb_serial_generic_write_bulk_callback, 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(1, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(2, 1)), 98);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(3, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(4, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(5, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(6, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(7, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(8, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(9, 1)), 108);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(10, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(11, 1)), 103);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(12, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(13, 1)), 110);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(14, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(15, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(16, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(17, 1)), 99);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(18, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(19, 1)), 119);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(20, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(21, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(22, 1)), 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(23, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(24, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(25, 1)), 98);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(26, 1)), 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(27, 1)), 108);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(28, 1)), 107);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(29, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(30, 1)), 99);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(31, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(32, 1)), 108);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(33, 1)), 108);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(34, 1)), 98);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(35, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(36, 1)), 99);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(37, 1)), 107);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_bulk_callback, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.82 := $store.i8($M.82, __kstrtab_usb_serial_generic_read_bulk_callback, 117);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(1, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(2, 1)), 98);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(4, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(6, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(7, 1)), 105);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(8, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(9, 1)), 108);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(10, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(11, 1)), 103);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(12, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(13, 1)), 110);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(14, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(15, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(16, 1)), 105);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(17, 1)), 99);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(18, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(19, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(20, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(21, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(22, 1)), 100);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(23, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(24, 1)), 98);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(25, 1)), 117);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(26, 1)), 108);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(27, 1)), 107);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(28, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(29, 1)), 99);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(30, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(31, 1)), 108);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(32, 1)), 108);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(33, 1)), 98);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(34, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(35, 1)), 99);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(36, 1)), 107);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_usb_serial_generic_read_bulk_callback, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.83 := $store.i8($M.83, __kstrtab_usb_serial_generic_process_read_urb, 117);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(1, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(2, 1)), 98);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(3, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(4, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(5, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(6, 1)), 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(7, 1)), 105);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(8, 1)), 97);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(9, 1)), 108);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(10, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(11, 1)), 103);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(12, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(13, 1)), 110);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(14, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(15, 1)), 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(16, 1)), 105);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(17, 1)), 99);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(18, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(19, 1)), 112);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(20, 1)), 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(21, 1)), 111);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(22, 1)), 99);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(23, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(24, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(25, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(26, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(27, 1)), 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(28, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(29, 1)), 97);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(30, 1)), 100);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(31, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(32, 1)), 117);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(33, 1)), 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(34, 1)), 98);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_usb_serial_generic_process_read_urb, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.84 := $store.i8($M.84, __kstrtab_usb_serial_generic_submit_read_urbs, 117);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(1, 1)), 115);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(2, 1)), 98);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(3, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(4, 1)), 115);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(5, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(6, 1)), 114);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(7, 1)), 105);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(8, 1)), 97);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(9, 1)), 108);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(10, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(11, 1)), 103);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(12, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(13, 1)), 110);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(14, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(15, 1)), 114);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(16, 1)), 105);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(17, 1)), 99);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(18, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(19, 1)), 115);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(20, 1)), 117);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(21, 1)), 98);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(22, 1)), 109);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(23, 1)), 105);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(24, 1)), 116);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(25, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(26, 1)), 114);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(27, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(28, 1)), 97);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(29, 1)), 100);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(30, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(31, 1)), 117);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(32, 1)), 114);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(33, 1)), 98);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(34, 1)), 115);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_usb_serial_generic_submit_read_urbs, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.85 := $store.i8($M.85, __kstrtab_usb_serial_generic_wait_until_sent, 117);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(19, 1)), 119);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(20, 1)), 97);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(21, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(22, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(24, 1)), 117);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(25, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(26, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(27, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(28, 1)), 108);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(30, 1)), 115);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(31, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(32, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(33, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_usb_serial_generic_wait_until_sent, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.86 := $store.i8($M.86, __kstrtab_usb_serial_generic_chars_in_buffer, 117);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(19, 1)), 99);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(20, 1)), 104);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(21, 1)), 97);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(22, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(23, 1)), 115);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(24, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(25, 1)), 105);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(26, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(27, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(28, 1)), 98);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(29, 1)), 117);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(30, 1)), 102);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(31, 1)), 102);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(32, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(33, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_usb_serial_generic_chars_in_buffer, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.87 := $store.i8($M.87, __kstrtab_usb_serial_generic_write, 117);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(1, 1)), 115);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(2, 1)), 98);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(4, 1)), 115);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(6, 1)), 114);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(7, 1)), 105);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(8, 1)), 97);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(9, 1)), 108);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(11, 1)), 103);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(15, 1)), 114);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(16, 1)), 105);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(17, 1)), 99);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(18, 1)), 95);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(19, 1)), 119);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(20, 1)), 114);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(21, 1)), 105);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(22, 1)), 116);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_usb_serial_generic_write, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.88 := $store.i8($M.88, __kstrtab_usb_serial_generic_write_start, 117);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(2, 1)), 98);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(3, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(4, 1)), 115);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(5, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(6, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(7, 1)), 105);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(8, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(9, 1)), 108);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(11, 1)), 103);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(13, 1)), 110);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(14, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(15, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(16, 1)), 105);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(17, 1)), 99);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(18, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(19, 1)), 119);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(20, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(21, 1)), 105);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(22, 1)), 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(24, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(25, 1)), 115);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(26, 1)), 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(27, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(28, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(29, 1)), 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_usb_serial_generic_write_start, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.89 := $store.i8($M.89, __kstrtab_usb_serial_generic_close, 117);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(1, 1)), 115);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(2, 1)), 98);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(4, 1)), 115);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(6, 1)), 114);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(7, 1)), 105);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(8, 1)), 97);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(9, 1)), 108);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(11, 1)), 103);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(15, 1)), 114);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(16, 1)), 105);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(17, 1)), 99);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(18, 1)), 95);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(19, 1)), 99);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(22, 1)), 115);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_usb_serial_generic_close, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.90 := $store.i8($M.90, __kstrtab_usb_serial_generic_open, 117);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(11, 1)), 103);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(15, 1)), 114);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(16, 1)), 105);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(17, 1)), 99);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(18, 1)), 95);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(19, 1)), 111);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(20, 1)), 112);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(22, 1)), 110);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_usb_serial_generic_open, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.ref($M.0, serial_drivers, usb_serial_generic_device);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_drivers, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.68 := $sub.i16(0, 1);
    call {:si_unique_call 1585} {:cexpr "product"} boogie_si_record_i16($sub.i16(0, 1));
    $M.67 := 1529;
    call {:si_unique_call 1586} {:cexpr "vendor"} boogie_si_record_i16(1529);
    $M.0 := $store.ref($M.0, usb_serial_driver, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), usb_serial_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), usb_serial_disconnect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), usb_serial_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), usb_serial_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 3);
    $M.153 := $store.i8($M.153, __kstrtab_usb_serial_deregister_drivers, 117);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(1, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(2, 1)), 98);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(8, 1)), 97);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(11, 1)), 100);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(13, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(15, 1)), 103);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(17, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(18, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(19, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(20, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(21, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(22, 1)), 100);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(23, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(24, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(25, 1)), 118);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(26, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(27, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(28, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_usb_serial_deregister_drivers, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.154 := $store.i8($M.154, __kstrtab_usb_serial_register_drivers, 117);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(1, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(2, 1)), 98);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(3, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(4, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(5, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(6, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(7, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(8, 1)), 97);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(9, 1)), 108);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(10, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(11, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(12, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(13, 1)), 103);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(14, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(15, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(16, 1)), 116);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(17, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(18, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(19, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(20, 1)), 100);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(21, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(22, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(23, 1)), 118);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(24, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(25, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(26, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_usb_serial_register_drivers, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.ref($M.0, dev_attr_port_number, .str.55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(32, 1)), port_number_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_port_attrs, dev_attr_port_number);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_port_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_port_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_port_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_port_group, $mul.ref(0, 32)), $mul.ref(16, 1)), usb_serial_port_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_port_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_port_groups, usb_serial_port_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_port_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, serial_port_ops, serial_port_carrier_raised);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), serial_port_dtr_rts);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), serial_port_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), serial_port_activate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_driver_list, usb_serial_driver_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver_list, $mul.ref(0, 16)), $mul.ref(8, 1)), usb_serial_driver_list);
    $M.155 := $store.i8($M.155, __kstrtab_usb_serial_resume, 117);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(2, 1)), 98);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(4, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(8, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(9, 1)), 108);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(13, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_usb_serial_resume, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.156 := $store.i8($M.156, __kstrtab_usb_serial_suspend, 117);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(1, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(2, 1)), 98);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(6, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(8, 1)), 97);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(9, 1)), 108);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(11, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(12, 1)), 117);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(16, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_usb_serial_suspend, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.ref($M.0, serial_minors, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(96, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.21);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.64 := 0;
    call {:si_unique_call 1587} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1588} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.0 := $store.i16($M.0, generic_device_ids, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.60 := 0;
    call {:si_unique_call 1589} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1590} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1591} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1592} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1593} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1594} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1595} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.38 := $0.ref;
    $M.52 := 0;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 1599} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1600} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.42 := $0.ref;
    $M.48 := 0;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.6 := $0.ref;
    $M.44 := $0.ref;
    $M.5 := 0;
    call {:si_unique_call 1603} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.63 := $0.ref;
    $M.65 := $0.ref;
    $M.45 := $0.ref;
    $M.24 := 0;
    call {:si_unique_call 1604} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1606} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.34 := $0.ref;
    $M.23 := 0;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1610} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.4 := $0.ref;
    $M.40 := $0.ref;
    $M.2 := $0.ref;
    $M.50 := 0;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.36 := 1;
    call {:si_unique_call 1612} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, usb_serial_bus_type, .str.18);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(48, 1)), usb_serial_drv_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(56, 1)), usb_serial_device_match);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(72, 1)), usb_serial_device_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(80, 1)), usb_serial_device_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, usb_serial_generic_device, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(8, 1)), generic_device_ids);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(336, 1)), usb_serial_generic_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(432, 1)), usb_serial_generic_throttle);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(440, 1)), usb_serial_generic_unthrottle);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.3, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(27, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.120, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.123, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(28, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(29, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(30, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(31, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(33, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(26, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(28, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(30, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(33, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(34, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(36, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(37, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(24, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(25, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(27, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(30, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(31, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(33, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(34, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(35, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(36, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(24, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(30, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(32, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.8, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(27, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(28, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(30, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(31, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(33, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(28, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(23, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(26, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(3, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(11, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(13, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.201 := $store.i8($M.201, .str.112, 37);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.112, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.112, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.112, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(7, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.99, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(7, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(7, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.96, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 7)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 7)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.202 := $store.i8($M.202, .str.111, 117);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.111, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.126, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 7)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 7)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.115, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 7)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 7)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 7)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 7)), $mul.ref(5, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    call {:si_unique_call 1613} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 631923);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(serial_break, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_generic_tiocmiwait, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_handle_sysrq_char, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_generic_write_start, $p0);
    assume {:branchcond $i16} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_generic_submit_read_urbs, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i15 == 1);
    $i14 := $eq.ref(usb_serial_suspend, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1614} $i2 := usb_serial_suspend($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1615} $i4 := usb_serial_generic_submit_read_urbs($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1616} $i6 := usb_serial_generic_write_start($p5, arg1);
    $r := $i6;
    return;

  $bb5:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1617} $i8 := usb_serial_handle_sysrq_char($p7, arg1);
    $r := $i8;
    return;

  $bb6:
    assume $i18 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $i10 := $zext.i32.i64(arg1);
    call {:si_unique_call 1618} $i11 := usb_serial_generic_tiocmiwait($p9, $i10);
    $r := $i11;
    return;

  $bb7:
    assume $i19 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1619} $i13 := serial_break($p12, arg1);
    $r := $i13;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 632955);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $CurrAddr, $M.40;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i35 := $eq.ref(serial_tiocmget, $p0);
    assume {:branchcond $i35} true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_serial_device_remove, $p0);
    assume {:branchcond $i31} true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_handle_break, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_generic_chars_in_buffer, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_write_room, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_reset_resume, $p0);
    assume {:branchcond $i26} true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_generic_resume, $p0);
    assume {:branchcond $i25} true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume false;
    return;

  $bb2:
    assume $i24 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1620} $i2 := usb_serial_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i25 == 1;
    call {:si_unique_call 1621} $i3 := usb_serial_generic_resume(arg);
    $r := $i3;
    return;

  $bb4:
    assume $i26 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1622} $i5 := usb_serial_reset_resume($p4);
    $r := $i5;
    return;

  $bb5:
    assume $i27 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1623} $i7 := usb_serial_generic_write_room($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i28 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1624} $i9 := usb_serial_generic_chars_in_buffer($p8);
    $r := $i9;
    return;

  $bb7:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1625} $i11 := usb_serial_handle_break($p10);
    $r := $i11;
    return;

  $bb8:
    assume $i30 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1626} $i13 := usb_serial_device_probe($p12);
    $r := $i13;
    return;

  $bb9:
    assume $i31 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1627} $i15 := usb_serial_device_remove($p14);
    $r := $i15;
    return;

  $bb10:
    assume $i32 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1628} $i17 := serial_port_carrier_raised($p16);
    $r := $i17;
    return;

  $bb11:
    assume $i33 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1629} $i19 := serial_write_room($p18);
    $r := $i19;
    return;

  $bb12:
    assume $i34 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1630} $i21 := serial_chars_in_buffer($p20);
    $r := $i21;
    return;

  $bb13:
    assume $i35 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1631} $i23 := serial_tiocmget($p22);
    $r := $i23;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 633987);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(usb_serial_generic_prepare_write_buffer, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1632} $i1 := usb_serial_generic_prepare_write_buffer(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 635019);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 636051);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 637083);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 638115);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.17, $M.18, $M.19, $M.20, $M.0, $M.36, $CurrAddr, $M.39, $M.32, $M.33, $M.23, $M.40, assertsPassed, $M.1, $M.3, $M.5, $M.7, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i43 := $eq.ref(serial_proc_show, $p0);
    assume {:branchcond $i43} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i43 == 1);
    $i42 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i42 == 1);
    $i41 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i41 == 1);
    $i40 := $eq.ref(serial_get_icount, $p0);
    assume {:branchcond $i40} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i40 == 1);
    $i39 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i39 == 1);
    $i38 := $eq.ref(serial_install, $p0);
    assume {:branchcond $i38} true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i38 == 1);
    $i37 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i37 == 1);
    $i36 := $eq.ref(usb_serial_device_match, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i36 == 1);
    $i35 := $eq.ref(usb_serial_generic_get_icount, $p0);
    assume {:branchcond $i35} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i35 == 1);
    $i34 := $eq.ref(usb_serial_generic_open, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i34 == 1);
    $i33 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume false;
    return;

  $bb2:
    assume $i33 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1633} $i2 := usb_serial_probe($p1, arg1);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    $r := $i2;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1634} $i5 := usb_serial_generic_open($p3, $p4);
    $r := $i5;
    return;

  $bb4:
    assume $i35 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1635} $i8 := usb_serial_generic_get_icount($p6, $p7);
    $r := $i8;
    return;

  $bb5:
    assume $i36 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1636} $i11 := usb_serial_device_match($p9, $p10);
    $r := $i11;
    return;

  $bb6:
    assume $i37 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1637} $i14 := serial_port_activate($p12, $p13);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    $r := $i14;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i38 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1638} $i17 := serial_install($p15, $p16);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    $r := $i17;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i39 == 1;
    $p18 := $bitcast.ref.ref(arg);
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1639} $i20 := serial_open($p18, $p19);
    $r := $i20;
    return;

  $bb9:
    assume $i40 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1640} $i23 := serial_get_icount($p21, $p22);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    $r := $i23;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i41 == 1;
    $p24 := $bitcast.ref.ref(arg);
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1641} $i26 := serial_proc_open($p24, $p25);
    $r := $i26;
    return;

  $bb11:
    assume $i42 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1642} $i29 := single_release($p27, $p28);
    $r := $i29;
    return;

  $bb12:
    assume $i43 == 1;
    $p30 := $bitcast.ref.ref(arg);
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1643} $i32 := serial_proc_show($p30, $p31);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    $r := $i32;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 639147);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i34 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_cleanup, $p0);
    assume {:branchcond $i31} true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_deregister_drivers, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_port_release, $p0);
    assume {:branchcond $i26} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_port_work, $p0);
    assume {:branchcond $i25} true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume {:branchcond $i23} true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_generic_close, $p0);
    assume {:branchcond $i20} true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_port_softint, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1644} usb_serial_port_softint($p1);
    return;

  $bb3:
    assume $i19 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1645} usb_serial_disconnect($p2);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1646} usb_serial_generic_close($p3);
    return;

  $bb5:
    assume $i21 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1647} usb_serial_generic_read_bulk_callback($p4);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1648} usb_serial_generic_write_bulk_callback($p5);
    return;

  $bb7:
    assume $i23 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1649} usb_serial_generic_process_read_urb($p6);
    return;

  $bb8:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1650} destroy_serial($p7);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i25 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1651} usb_serial_port_work($p8);
    return;

  $bb10:
    assume $i26 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1652} usb_serial_port_release($p9);
    return;

  $bb11:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1653} usb_serial_deregister_drivers($p10);
    return;

  $bb12:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1654} usb_serial_generic_throttle($p11);
    return;

  $bb13:
    assume $i29 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1655} usb_serial_generic_unthrottle($p12);
    return;

  $bb14:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1656} serial_port_shutdown($p13);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i31 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1657} serial_cleanup($p14);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i32 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1658} serial_throttle($p15);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i33 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1659} serial_unthrottle($p16);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i34 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1660} serial_hangup($p17);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 640179);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i1);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i1)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 641211);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i31 := $eq.ref(serial_hangup, $p0);
    assume {:branchcond $i31} true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i28 == 1);
    $i27 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume {:branchcond $i26} true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume {:branchcond $i25} true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_deregister_drivers, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_port_release, $p0);
    assume {:branchcond $i23} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i22 == 1);
    $i21 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume {:branchcond $i20} true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_disconnect, $p0);
    assume {:branchcond $i16} true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_port_softint, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1661} usb_serial_port_softint($p1);
    return;

  $bb3:
    assume $i16 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1662} usb_serial_disconnect($p2);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i17 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1663} usb_serial_generic_close($p3);
    return;

  $bb5:
    assume $i18 == 1;
    call {:si_unique_call 1664} usb_serial_generic_read_bulk_callback(arg);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    call {:si_unique_call 1665} usb_serial_generic_write_bulk_callback(arg);
    return;

  $bb7:
    assume $i20 == 1;
    call {:si_unique_call 1666} usb_serial_generic_process_read_urb(arg);
    return;

  $bb8:
    assume $i21 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1667} destroy_serial($p4);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1668} usb_serial_port_work($p5);
    return;

  $bb10:
    assume $i23 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1669} usb_serial_port_release($p6);
    return;

  $bb11:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1670} usb_serial_deregister_drivers($p7);
    return;

  $bb12:
    assume $i25 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1671} usb_serial_generic_throttle($p8);
    return;

  $bb13:
    assume $i26 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1672} usb_serial_generic_unthrottle($p9);
    return;

  $bb14:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1673} serial_port_shutdown($p10);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1674} serial_cleanup($p11);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i29 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1675} serial_throttle($p12);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1676} serial_unthrottle($p13);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i31 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1677} serial_hangup($p14);
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 642243);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 643275);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(usb_serial_generic_tiocmiwait, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1678} $i2 := usb_serial_generic_tiocmiwait($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 644307);

procedure devirtbounce.12(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.12(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_throttle, $p0);
    assume {:branchcond $i31} true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_deregister_drivers, $p0);
    assume {:branchcond $i26} true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_port_release, $p0);
    assume {:branchcond $i25} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i24 == 1);
    $i23 := $eq.ref(destroy_serial, $p0);
    assume {:branchcond $i23} true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume {:branchcond $i20} true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_port_softint, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1679} usb_serial_port_softint($p1);
    return;

  $bb3:
    assume $i18 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1680} usb_serial_disconnect($p2);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1681} usb_serial_generic_close($p3);
    return;

  $bb5:
    assume $i20 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1682} usb_serial_generic_read_bulk_callback($p4);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1683} usb_serial_generic_write_bulk_callback($p5);
    return;

  $bb7:
    assume $i22 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1684} usb_serial_generic_process_read_urb($p6);
    return;

  $bb8:
    assume $i23 == 1;
    call {:si_unique_call 1685} destroy_serial(arg);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1686} usb_serial_port_work($p7);
    return;

  $bb10:
    assume $i25 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1687} usb_serial_port_release($p8);
    return;

  $bb11:
    assume $i26 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1688} usb_serial_deregister_drivers($p9);
    return;

  $bb12:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1689} usb_serial_generic_throttle($p10);
    return;

  $bb13:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1690} usb_serial_generic_unthrottle($p11);
    return;

  $bb14:
    assume $i29 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1691} serial_port_shutdown($p12);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1692} serial_cleanup($p13);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i31 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1693} serial_throttle($p14);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i32 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1694} serial_unthrottle($p15);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i33 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1695} serial_hangup($p16);
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 645339);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 646371);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(serial_wait_until_sent, $p0);
    assume {:branchcond $i5} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i5 == 1);
    $i4 := $eq.ref(serial_port_dtr_rts, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i4 == 1);
    $i3 := $eq.ref(usb_serial_generic_wait_until_sent, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $i1 := $zext.i32.i64(arg1);
    call {:si_unique_call 1696} usb_serial_generic_wait_until_sent(arg, $i1);
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1697} serial_port_dtr_rts($p2, arg1);
    return;

  $bb4:
    assume $i5 == 1;
    call {:si_unique_call 1698} serial_wait_until_sent(arg, arg1);
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 647403);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $CurrAddr, $M.40;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i35 := $eq.ref(serial_tiocmget, $p0);
    assume {:branchcond $i35} true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_serial_device_remove, $p0);
    assume {:branchcond $i31} true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_handle_break, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_generic_chars_in_buffer, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_write_room, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_reset_resume, $p0);
    assume {:branchcond $i26} true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_generic_resume, $p0);
    assume {:branchcond $i25} true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume false;
    return;

  $bb2:
    assume $i24 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1699} $i2 := usb_serial_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i25 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1700} $i4 := usb_serial_generic_resume($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i26 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1701} $i6 := usb_serial_reset_resume($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1702} $i8 := usb_serial_generic_write_room($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1703} $i10 := usb_serial_generic_chars_in_buffer($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i29 == 1;
    call {:si_unique_call 1704} $i11 := usb_serial_handle_break(arg);
    $r := $i11;
    return;

  $bb8:
    assume $i30 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1705} $i13 := usb_serial_device_probe($p12);
    $r := $i13;
    return;

  $bb9:
    assume $i31 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1706} $i15 := usb_serial_device_remove($p14);
    $r := $i15;
    return;

  $bb10:
    assume $i32 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1707} $i17 := serial_port_carrier_raised($p16);
    $r := $i17;
    return;

  $bb11:
    assume $i33 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1708} $i19 := serial_write_room($p18);
    $r := $i19;
    return;

  $bb12:
    assume $i34 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1709} $i21 := serial_chars_in_buffer($p20);
    $r := $i21;
    return;

  $bb13:
    assume $i35 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1710} $i23 := serial_tiocmget($p22);
    $r := $i23;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 648435);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(serial_wait_until_sent, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i7 == 1);
    $i6 := $eq.ref(serial_port_dtr_rts, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i6 == 1);
    $i5 := $eq.ref(usb_serial_generic_wait_until_sent, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i32.i64(arg1);
    call {:si_unique_call 1711} usb_serial_generic_wait_until_sent($p1, $i2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1712} serial_port_dtr_rts($p3, arg1);
    return;

  $bb4:
    assume $i7 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1713} serial_wait_until_sent($p4, arg1);
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 649467);

procedure devirtbounce.17(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.17(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i32 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_unthrottle, $p0);
    assume {:branchcond $i31} true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume {:branchcond $i26} true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_deregister_drivers, $p0);
    assume {:branchcond $i25} true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_port_work, $p0);
    assume {:branchcond $i23} true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i23 == 1);
    $i22 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume {:branchcond $i20} true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_port_softint, $p0);
    assume {:branchcond $i16} true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    call {:si_unique_call 1714} usb_serial_port_softint(arg);
    return;

  $bb3:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1715} usb_serial_disconnect($p1);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    call {:si_unique_call 1716} usb_serial_generic_close(arg);
    return;

  $bb5:
    assume $i19 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1717} usb_serial_generic_read_bulk_callback($p2);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1718} usb_serial_generic_write_bulk_callback($p3);
    return;

  $bb7:
    assume $i21 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1719} usb_serial_generic_process_read_urb($p4);
    return;

  $bb8:
    assume $i22 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1720} destroy_serial($p5);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i23 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1721} usb_serial_port_work($p6);
    return;

  $bb10:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1722} usb_serial_port_release($p7);
    return;

  $bb11:
    assume $i25 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1723} usb_serial_deregister_drivers($p8);
    return;

  $bb12:
    assume $i26 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1724} usb_serial_generic_throttle($p9);
    return;

  $bb13:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1725} usb_serial_generic_unthrottle($p10);
    return;

  $bb14:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1726} serial_port_shutdown($p11);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i29 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1727} serial_cleanup($p12);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1728} serial_throttle($p13);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i31 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1729} serial_unthrottle($p14);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i32 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1730} serial_hangup($p15);
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 650499);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.17, $M.18, $M.19, $M.20, $M.0, $M.36, $CurrAddr, $M.39, $M.32, $M.33, $M.23, $M.40, assertsPassed, $M.1, $M.3, $M.5, $M.7, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i39 := $eq.ref(serial_proc_show, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i39 == 1);
    $i38 := $eq.ref(single_release, $p0);
    assume {:branchcond $i38} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i38 == 1);
    $i37 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i37 == 1);
    $i36 := $eq.ref(serial_get_icount, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i36 == 1);
    $i35 := $eq.ref(serial_open, $p0);
    assume {:branchcond $i35} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i33 == 1);
    $i32 := $eq.ref(usb_serial_device_match, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_serial_generic_get_icount, $p0);
    assume {:branchcond $i31} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_serial_generic_open, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume false;
    return;

  $bb2:
    assume $i29 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1731} $i3 := usb_serial_probe($p1, $p2);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    $r := $i3;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i30 == 1;
    call {:si_unique_call 1732} $i4 := usb_serial_generic_open(arg, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i31 == 1;
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1733} $i6 := usb_serial_generic_get_icount(arg, $p5);
    $r := $i6;
    return;

  $bb5:
    assume $i32 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1734} $i9 := usb_serial_device_match($p7, $p8);
    $r := $i9;
    return;

  $bb6:
    assume $i33 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1735} $i12 := serial_port_activate($p10, $p11);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    $r := $i12;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1736} $i15 := serial_install($p13, $p14);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    $r := $i15;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1737} $i17 := serial_open(arg, $p16);
    $r := $i17;
    return;

  $bb9:
    assume $i36 == 1;
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1738} $i19 := serial_get_icount(arg, $p18);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    $r := $i19;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i37 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1739} $i22 := serial_proc_open($p20, $p21);
    $r := $i22;
    return;

  $bb11:
    assume $i38 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1740} $i25 := single_release($p23, $p24);
    $r := $i25;
    return;

  $bb12:
    assume $i39 == 1;
    $p26 := $bitcast.ref.ref(arg);
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1741} $i28 := serial_proc_show($p26, $p27);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    $r := $i28;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 651531);

procedure devirtbounce.19(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, $CurrAddr, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.19(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i28 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i28 == 1);
    $i27 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i27 == 1);
    $i26 := $eq.ref(serial_throttle, $p0);
    assume {:branchcond $i26} true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i26 == 1);
    $i25 := $eq.ref(serial_cleanup, $p0);
    assume {:branchcond $i25} true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i25 == 1);
    $i24 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume {:branchcond $i23} true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_deregister_drivers, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_port_release, $p0);
    assume {:branchcond $i20} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i19 == 1);
    $i18 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume {:branchcond $i16} true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i15 == 1);
    $i14 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_serial_port_softint, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1742} usb_serial_port_softint($p1);
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1743} usb_serial_disconnect($p2);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1744} usb_serial_generic_close($p3);
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1745} usb_serial_generic_read_bulk_callback($p4);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1746} usb_serial_generic_write_bulk_callback($p5);
    return;

  $bb7:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1747} usb_serial_generic_process_read_urb($p6);
    return;

  $bb8:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1748} destroy_serial($p7);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1749} usb_serial_port_work($p8);
    return;

  $bb10:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1750} usb_serial_port_release($p9);
    return;

  $bb11:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1751} usb_serial_deregister_drivers($p10);
    return;

  $bb12:
    assume $i22 == 1;
    call {:si_unique_call 1752} usb_serial_generic_throttle(arg);
    return;

  $bb13:
    assume $i23 == 1;
    call {:si_unique_call 1753} usb_serial_generic_unthrottle(arg);
    return;

  $bb14:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1754} serial_port_shutdown($p11);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i25 == 1;
    call {:si_unique_call 1755} serial_cleanup(arg);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i26 == 1;
    call {:si_unique_call 1756} serial_throttle(arg);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i27 == 1;
    call {:si_unique_call 1757} serial_unthrottle(arg);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i28 == 1;
    call {:si_unique_call 1758} serial_hangup(arg);
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 652563);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(usb_serial_generic_write, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1759} $i1 := usb_serial_generic_write(arg, arg1, arg2, arg3);
    $r := $i1;
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 653595);

procedure devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.39, $CurrAddr, $M.40;



implementation devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i31 := $eq.ref(serial_tiocmget, $p0);
    assume {:branchcond $i31} true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_device_remove, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_device_probe, $p0);
    assume {:branchcond $i26} true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_handle_break, $p0);
    assume {:branchcond $i25} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_generic_chars_in_buffer, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_generic_write_room, $p0);
    assume {:branchcond $i23} true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_reset_resume, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_generic_resume, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_resume, $p0);
    assume {:branchcond $i20} true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume false;
    return;

  $bb2:
    assume $i20 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1760} $i2 := usb_serial_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i21 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1761} $i4 := usb_serial_generic_resume($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i22 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1762} $i6 := usb_serial_reset_resume($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i23 == 1;
    call {:si_unique_call 1763} $i7 := usb_serial_generic_write_room(arg);
    $r := $i7;
    return;

  $bb6:
    assume $i24 == 1;
    call {:si_unique_call 1764} $i8 := usb_serial_generic_chars_in_buffer(arg);
    $r := $i8;
    return;

  $bb7:
    assume $i25 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1765} $i10 := usb_serial_handle_break($p9);
    $r := $i10;
    return;

  $bb8:
    assume $i26 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1766} $i12 := usb_serial_device_probe($p11);
    $r := $i12;
    return;

  $bb9:
    assume $i27 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1767} $i14 := usb_serial_device_remove($p13);
    $r := $i14;
    return;

  $bb10:
    assume $i28 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1768} $i16 := serial_port_carrier_raised($p15);
    $r := $i16;
    return;

  $bb11:
    assume $i29 == 1;
    call {:si_unique_call 1769} $i17 := serial_write_room(arg);
    $r := $i17;
    return;

  $bb12:
    assume $i30 == 1;
    call {:si_unique_call 1770} $i18 := serial_chars_in_buffer(arg);
    $r := $i18;
    return;

  $bb13:
    assume $i31 == 1;
    call {:si_unique_call 1771} $i19 := serial_tiocmget(arg);
    $r := $i19;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 654627);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(usb_serial_generic_tiocmiwait, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1772} $i1 := usb_serial_generic_tiocmiwait(arg, arg1);
    $r := $i1;
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 655659);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(serial_ioctl, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1773} $i1 := serial_ioctl(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 656691);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 657723);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: i64);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: i64)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(usb_serial_generic_wait_until_sent, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1774} usb_serial_generic_wait_until_sent(arg, arg1);
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 658755);

procedure devirtbounce.26(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr;



implementation devirtbounce.26(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(serial_tiocmset, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(serial_ioctl, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $i1 := $zext.i32.i64(arg2);
    call {:si_unique_call 1775} $i2 := serial_ioctl(arg, arg1, $i1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1776} $i3 := serial_tiocmset(arg, arg1, arg2);
    $r := $i3;
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 659787);

procedure devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.17, $M.18, $M.19, $M.20, $M.0, $M.36, $CurrAddr, $M.39, $M.32, $M.33, $M.23, $M.40, assertsPassed, $M.1, $M.3, $M.5, $M.7, $M.2, $M.4, $M.6, $M.8;



implementation devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(serial_proc_show, $p0);
    assume {:branchcond $i38} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i38 == 1);
    $i37 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i37 == 1);
    $i36 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i36 == 1);
    $i35 := $eq.ref(serial_get_icount, $p0);
    assume {:branchcond $i35} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_serial_device_match, $p0);
    assume {:branchcond $i31} true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_serial_generic_get_icount, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_generic_open, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume false;
    return;

  $bb2:
    assume $i28 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1777} $i3 := usb_serial_probe($p1, $p2);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    $r := $i3;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i29 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1778} $i5 := usb_serial_generic_open(arg, $p4);
    $r := $i5;
    return;

  $bb4:
    assume $i30 == 1;
    call {:si_unique_call 1779} $i6 := usb_serial_generic_get_icount(arg, arg1);
    $r := $i6;
    return;

  $bb5:
    assume $i31 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1780} $i9 := usb_serial_device_match($p7, $p8);
    $r := $i9;
    return;

  $bb6:
    assume $i32 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1781} $i12 := serial_port_activate($p10, $p11);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    $r := $i12;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1782} $i15 := serial_install($p13, $p14);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    $r := $i15;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i34 == 1;
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1783} $i17 := serial_open(arg, $p16);
    $r := $i17;
    return;

  $bb9:
    assume $i35 == 1;
    call {:si_unique_call 1784} $i18 := serial_get_icount(arg, arg1);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    $r := $i18;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i36 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1785} $i21 := serial_proc_open($p19, $p20);
    $r := $i21;
    return;

  $bb11:
    assume $i37 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1786} $i24 := single_release($p22, $p23);
    $r := $i24;
    return;

  $bb12:
    assume $i38 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1787} $i27 := serial_proc_show($p25, $p26);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    $r := $i27;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 660819);

procedure devirtbounce.28(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.28(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.72, $M.0, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.68, $M.67, $M.153, $M.154, $M.155, $M.156, $M.64, $M.66, $M.60, $M.59, $M.56, $M.61, $M.58, $M.55, $M.57, $M.38, $M.52, $M.39, $M.51, $M.1, $M.53, $M.47, $M.42, $M.48, $M.62, $M.6, $M.44, $M.5, $M.63, $M.65, $M.45, $M.24, $M.49, $M.3, $M.43, $M.34, $M.23, $M.54, $M.46, $M.7, $M.8, $M.4, $M.40, $M.2, $M.50, $M.36, $M.201, $M.202, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1788} __SMACK_static_init();
    call {:si_unique_call 1789} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.41, $M.46, $M.47, $M.39, $M.48, $M.49, $M.50, $M.1, $M.3, $M.5, $M.7, $M.51, $M.52, $M.53, $M.54, $M.23, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.55, $M.0, $M.56, $M.57, $M.58, $M.42, $M.43, $M.44, $M.45, $M.17, $M.18, $M.19, $M.20, $M.59, $M.9, $M.60, $M.61, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.68, $M.67, $M.153, $M.154, $M.155, $M.156, $M.64, $M.66, $M.38, $M.62, $M.6, $M.63, $M.65, $M.24, $M.34, $M.8, $M.4, $M.40, $M.2, $M.36, $M.201, $M.202, $CurrAddr, $M.32, $M.33, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation usb_serial_suspend_loop_$bb11(in_$p5: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i33: i32)
{

  entry:
    out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i33 := in_$i34, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i33;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  $bb13:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i38;
    goto $bb13_dummy;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, out_$i38);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, in_$p29);
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i33, 1);
    call {:si_unique_call 23} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} usb_serial_port_poison_urbs(out_$p37);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i34, 8));
    goto corral_source_split_99;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i33 := usb_serial_suspend_loop_$bb11(in_$p5, in_$p29, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i33);
    return;

  exit:
    return;
}



procedure usb_serial_suspend_loop_$bb11(in_$p5: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i33: i32);



implementation usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i5 := in_$i6, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, out_$i10);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, in_$p1);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i5, 1);
    call {:si_unique_call 38} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} usb_serial_port_unpoison_urbs(out_$p9);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_178;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i5 := usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0, in_$p1, out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i5);
    return;

  exit:
    return;
}



procedure usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i5: i32);



implementation usb_serial_generic_resume_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i16: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i6: i32, in_$i7: i32, in_$i37: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i16: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i6: i32, out_$i7: i32, out_$i37: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37 := in_$i8, in_$p10, in_$p11, in_$p13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i16, in_$i33, in_$i34, in_$i35, in_$i36, in_$i6, in_$i7, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  $bb22:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i16, out_$i33;
    goto $bb22_dummy;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i16;
    assume true;
    goto $bb22;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i33);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, in_$p1);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i7, 1);
    call {:si_unique_call 41} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_208;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i32;
    goto $bb8;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i6;
    goto $bb8;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} out_$i14 := constant_test_bit(31, out_$p13);
    call {:si_unique_call 40} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(680, 1));
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_199;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_240;

  $bb17:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i24;
    goto $bb21;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_238;

  $bb19:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i24;
    goto $bb20;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb20;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i24, 1);
    call {:si_unique_call 47} {:cexpr "c"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_236;

  $bb18:
    assume out_$i29 == 1;
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, 0);
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} out_$i28 := usb_serial_generic_write_start(out_$p11, 16);
    call {:si_unique_call 46} {:cexpr "r"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_232;

  $bb16:
    assume out_$i27 == 1;
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p11, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_227;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_226;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i6;
    goto $bb15;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i23;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  $bb13:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i6;
    goto $bb14;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i22;
    goto $bb14;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i6, 1);
    call {:si_unique_call 44} {:cexpr "c"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_222;

  $bb12:
    assume out_$i21 == 1;
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$i20 := usb_serial_generic_submit_read_urbs(out_$p11, 16);
    call {:si_unique_call 43} {:cexpr "r"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_218;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_214;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 3016)), $mul.ref(1192, 1));
    goto corral_source_split_213;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37 := usb_serial_generic_resume_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37);
    return;

  exit:
    return;
}



procedure usb_serial_generic_resume_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i16: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i6: i32, in_$i7: i32, in_$i37: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i16: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i6: i32, out_$i7: i32, out_$i37: i32);
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32)
{

  entry:
    out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8 := in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$i8;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  $bb16:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb16_dummy;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$i14 := $sge.i32(out_$i13, 0);
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 54} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} usb_kill_urb(out_$p12);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_277;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8 := usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8);
    return;

  exit:
    return;
}



procedure usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32);



implementation usb_serial_generic_write_start_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$p9: ref, in_$i14: i64, in_$i13: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i32, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$i91: i1) returns (out_$i14: i64, out_$i13: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i32, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$i91: i1)
{

  entry:
    out_$i14, out_$i13, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p88, out_$i89, out_$i90, out_$i91 := in_$i14, in_$i13, in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p88, in_$i89, in_$i90, in_$i91;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_309;

  $bb23:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i89;
    goto $bb23_dummy;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i89;
    assume true;
    goto $bb23;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i64(out_$i90, 0);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, in_$p9);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} out_$i89 := _raw_spin_lock_irqsave(out_$p88);
    call {:si_unique_call 88} {:cexpr "flags"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_399;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} out_$p88 := spinlock_check(in_$p6);
    goto corral_source_split_398;

  $bb15:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69 := out_$i33, out_$i50, out_$i65;
    assume true;
    goto $bb15;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} out_$i65 := usb_submit_urb(out_$p38, in_$i1);
    call {:si_unique_call 78} {:cexpr "result"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} clear_bit(out_$i63, out_$p64);
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i33);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} spin_unlock_irqrestore(out_$p62, out_$i57);
    goto corral_source_split_362;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_361;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, out_$i60);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i59, out_$i50);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1392, 1));
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} out_$i57 := _raw_spin_lock_irqsave(out_$p56);
    call {:si_unique_call 74} {:cexpr "flags"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} out_$p56 := spinlock_check(out_$p55);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} usb_serial_debug_data(out_$p52, .str.3, out_$i50, out_$p54);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p38, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p51, out_$i50);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p38, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    call {:si_unique_call 69} out_$i50 := devirtbounce.2(out_$p44, in_$p0, out_$p46, out_$i49);
    call {:si_unique_call 70} {:cexpr "count"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p38, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 552)), $mul.ref(544, 1));
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(out_$i35, 8));
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i33);
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} spin_unlock_irqrestore(out_$p34, out_$i13);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i64.i32(out_$i32);
    call {:si_unique_call 67} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i32 := find_first_bit(out_$p31, 2);
    call {:si_unique_call 66} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_329;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_328;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i13;
    assume true;
    goto $bb11;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i21, out_$i25);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    out_$p22 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_310;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i14, out_$i13, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p88, out_$i89, out_$i90, out_$i91 := usb_serial_generic_write_start_loop_$bb8(in_$p0, in_$i1, in_$p6, in_$p9, out_$i14, out_$i13, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p88, out_$i89, out_$i90, out_$i91);
    return;

  exit:
    return;
}



procedure usb_serial_generic_write_start_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$p9: ref, in_$i14: i64, in_$i13: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i32, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$i91: i1) returns (out_$i14: i64, out_$i13: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i32, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$i91: i1);
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation usb_serial_register_drivers_loop_$bb35(in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p60: ref) returns (out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p60: ref)
{

  entry:
    out_$p61, out_$p62, out_$i63, out_$i64, out_$p60 := in_$p61, in_$p62, in_$i63, in_$i64, in_$p60;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_670;

  $bb37:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p60 := out_$p62;
    goto $bb37_dummy;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$i64 := $ugt.i64(out_$i63, in_$i58);
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p60, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} usb_serial_deregister(out_$p61);
    goto corral_source_split_673;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p61, out_$p62, out_$i63, out_$i64, out_$p60 := usb_serial_register_drivers_loop_$bb35(in_$i58, out_$p61, out_$p62, out_$i63, out_$i64, out_$p60);
    return;

  exit:
    return;
}



procedure usb_serial_register_drivers_loop_$bb35(in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p60: ref) returns (out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p60: ref);



implementation usb_serial_register_drivers_loop_$bb23(in_$p3: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p40: ref)
{

  entry:
    out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p40 := in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p40;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  $bb29:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p40 := out_$p48;
    goto $bb29_dummy;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_659;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_657;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p40, $mul.ref(1, 8));
    goto corral_source_split_656;

  $bb26:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$p46, out_$i47 := out_$p40, out_$i44;
    assume true;
    goto $bb26;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} out_$i44 := usb_serial_register(out_$p43);
    call {:si_unique_call 145} {:cexpr "rc"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p40);
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p42, in_$p3);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_643;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p40 := usb_serial_register_drivers_loop_$bb23(in_$p3, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p40);
    return;

  exit:
    return;
}



procedure usb_serial_register_drivers_loop_$bb23(in_$p3: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p40: ref);
  modifies $M.0, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $CurrAddr;



implementation usb_serial_register_drivers_loop_$bb8(in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p24: ref)
{

  entry:
    out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24 := in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p31, in_$p32, in_$i33, in_$i34, in_$p24;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_610;

  $bb14:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p31;
    goto $bb14_dummy;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_628;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_626;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p24, $mul.ref(1, 8));
    goto corral_source_split_625;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 552)), $mul.ref(344, 1));
    goto corral_source_split_613;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24 := usb_serial_register_drivers_loop_$bb8(out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24);
    return;

  exit:
    return;
}



procedure usb_serial_register_drivers_loop_$bb8(in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p24: ref);



implementation usb_serial_probe_loop_$bb274(in_$p19: ref, in_$p20: ref, in_$p50: ref, in_$i337: i32, in_$i723: i64, in_$p725: ref, in_$p726: ref, in_$p727: ref, in_$p728: ref, in_$i729: i32, in_$p731: ref, in_$p732: ref, in_$p733: ref, in_$p734: ref, in_$p735: ref, in_$p736: ref, in_$i737: i24, in_$i738: i24, in_$i739: i24, in_$p740: ref, in_$p741: ref, in_$i742: i8, in_$i743: i64, in_$i744: i64, in_$i745: i64, in_$i746: i1, in_$p747: ref, in_$p748: ref, in_$p749: ref, in_$p750: ref, in_$i751: i32, in_$i752: i1, in_$i753: i32, in_$i754: i1, in_$i722: i32, in_vslice_dummy_var_27: i32) returns (out_$i723: i64, out_$p725: ref, out_$p726: ref, out_$p727: ref, out_$p728: ref, out_$i729: i32, out_$p731: ref, out_$p732: ref, out_$p733: ref, out_$p734: ref, out_$p735: ref, out_$p736: ref, out_$i737: i24, out_$i738: i24, out_$i739: i24, out_$p740: ref, out_$p741: ref, out_$i742: i8, out_$i743: i64, out_$i744: i64, out_$i745: i64, out_$i746: i1, out_$p747: ref, out_$p748: ref, out_$p749: ref, out_$p750: ref, out_$i751: i32, out_$i752: i1, out_$i753: i32, out_$i754: i1, out_$i722: i32, out_vslice_dummy_var_27: i32)
{

  entry:
    out_$i723, out_$p725, out_$p726, out_$p727, out_$p728, out_$i729, out_$p731, out_$p732, out_$p733, out_$p734, out_$p735, out_$p736, out_$i737, out_$i738, out_$i739, out_$p740, out_$p741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$p747, out_$p748, out_$p749, out_$p750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i722, out_vslice_dummy_var_27 := in_$i723, in_$p725, in_$p726, in_$p727, in_$p728, in_$i729, in_$p731, in_$p732, in_$p733, in_$p734, in_$p735, in_$p736, in_$i737, in_$i738, in_$i739, in_$p740, in_$p741, in_$i742, in_$i743, in_$i744, in_$i745, in_$i746, in_$p747, in_$p748, in_$p749, in_$p750, in_$i751, in_$i752, in_$i753, in_$i754, in_$i722, in_vslice_dummy_var_27;
    goto $bb274, exit;

  $bb274:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  $bb282:
    assume out_$i754 == 1;
    assume {:verifier.code 0} true;
    out_$i722 := out_$i753;
    goto $bb282_dummy;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i754 := $slt.i32(out_$i753, in_$i337);
    goto corral_source_split_1785;

  $bb281:
    assume {:verifier.code 0} true;
    out_$i753 := $add.i32(out_$i722, 1);
    call {:si_unique_call 320} {:cexpr "i"} boogie_si_record_i32(out_$i753);
    goto corral_source_split_1784;

  $bb280:
    assume !(out_$i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} dev_err.ref.ref(in_$p20, .str.48);
    goto corral_source_split_1782;

  $bb279:
    assume out_$i752 == 1;
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i752 := $ne.i32(out_$i751, 0);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} out_$i751 := device_add(out_$p750);
    call {:si_unique_call 318} {:cexpr "retval"} boogie_si_record_i32(out_$i751);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p750 := $add.ref($add.ref(out_$p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} device_enable_async_suspend(out_$p749);
    goto corral_source_split_1776;

  $bb278:
    assume {:verifier.code 0} true;
    out_$p749 := $add.ref($add.ref(out_$p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1775;

  $bb277:
    assume !(out_$i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __dynamic_dev_dbg.ref.ref.ref.ref(in_$p19, in_$p20, .str.47, out_$p748);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} out_$p748 := dev_name(out_$p747);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p747 := $add.ref($add.ref(out_$p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1771;

  $bb276:
    assume out_$i746 == 1;
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i746 := $ne.i64(out_$i745, 0);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} out_$i745 := ldv__builtin_expect(out_$i744, 0);
    call {:si_unique_call 313} {:cexpr "tmp___31"} boogie_si_record_i64(out_$i745);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i744 := $and.i64(out_$i743, 1);
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i743 := $zext.i8.i64(out_$i742);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i742 := $load.i8($M.15, out_$p741);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$p741 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p740, 0);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$p740 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, out_$p736, out_$i739);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$i739 := $or.i24(out_$i738, 1070);
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$i738 := $and.i24(out_$i737, $sub.i24(0, 262144));
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$i737 := $load.i24($M.14, out_$p736);
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$p736 := $bitcast.ref.ref(out_$p735);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$p735 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p734, .str.47);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p734 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p733, .str.25);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$p733 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p732, .str.24);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$p732 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p731, .str);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$p731 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} out_vslice_dummy_var_27 := dev_set_name.ref.ref.i32(out_$p727, .str.46, out_$i729);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i729 := $load.i32($M.0, out_$p728);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$p728 := $add.ref($add.ref(out_$p726, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p727 := $add.ref($add.ref(out_$p726, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$p726 := $load.ref($M.0, out_$p725);
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$p725 := $add.ref($add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i723, 8));
    goto corral_source_split_1741;

  $bb275:
    assume {:verifier.code 0} true;
    out_$i723 := $sext.i32.i64(out_$i722);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb282_dummy:
    call {:si_unique_call 1} out_$i723, out_$p725, out_$p726, out_$p727, out_$p728, out_$i729, out_$p731, out_$p732, out_$p733, out_$p734, out_$p735, out_$p736, out_$i737, out_$i738, out_$i739, out_$p740, out_$p741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$p747, out_$p748, out_$p749, out_$p750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i722, out_vslice_dummy_var_27 := usb_serial_probe_loop_$bb274(in_$p19, in_$p20, in_$p50, in_$i337, out_$i723, out_$p725, out_$p726, out_$p727, out_$p728, out_$i729, out_$p731, out_$p732, out_$p733, out_$p734, out_$p735, out_$p736, out_$i737, out_$i738, out_$i739, out_$p740, out_$p741, out_$i742, out_$i743, out_$i744, out_$i745, out_$i746, out_$p747, out_$p748, out_$p749, out_$p750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i722, out_vslice_dummy_var_27);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb274(in_$p19: ref, in_$p20: ref, in_$p50: ref, in_$i337: i32, in_$i723: i64, in_$p725: ref, in_$p726: ref, in_$p727: ref, in_$p728: ref, in_$i729: i32, in_$p731: ref, in_$p732: ref, in_$p733: ref, in_$p734: ref, in_$p735: ref, in_$p736: ref, in_$i737: i24, in_$i738: i24, in_$i739: i24, in_$p740: ref, in_$p741: ref, in_$i742: i8, in_$i743: i64, in_$i744: i64, in_$i745: i64, in_$i746: i1, in_$p747: ref, in_$p748: ref, in_$p749: ref, in_$p750: ref, in_$i751: i32, in_$i752: i1, in_$i753: i32, in_$i754: i1, in_$i722: i32, in_vslice_dummy_var_27: i32) returns (out_$i723: i64, out_$p725: ref, out_$p726: ref, out_$p727: ref, out_$p728: ref, out_$i729: i32, out_$p731: ref, out_$p732: ref, out_$p733: ref, out_$p734: ref, out_$p735: ref, out_$p736: ref, out_$i737: i24, out_$i738: i24, out_$i739: i24, out_$p740: ref, out_$p741: ref, out_$i742: i8, out_$i743: i64, out_$i744: i64, out_$i745: i64, out_$i746: i1, out_$p747: ref, out_$p748: ref, out_$p749: ref, out_$p750: ref, out_$i751: i32, out_$i752: i1, out_$i753: i32, out_$i754: i1, out_$i722: i32, out_vslice_dummy_var_27: i32);
  modifies $M.0, $M.15, $M.14, $M.13, $M.12, $M.11, $M.10;



implementation usb_serial_probe_loop_$bb240(in_$p3: ref, in_$p21: ref, in_$p50: ref, in_$i91: i32, in_$i635: i64, in_$p636: ref, in_$p637: ref, in_$i638: i64, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$i646: i64, in_$i647: i1, in_$i648: i32, in_$p649: ref, in_$p650: ref, in_$i651: i8, in_$p652: ref, in_$i653: i64, in_$p654: ref, in_$p655: ref, in_$p656: ref, in_$p657: ref, in_$i658: i64, in_$i659: i1, in_$p660: ref, in_$i661: i8, in_$i662: i32, in_$i663: i32, in_$p664: ref, in_$p665: ref, in_$i666: i32, in_$p667: ref, in_$p668: ref, in_$p669: ref, in_$p670: ref, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$i675: i8, in_$i676: i32, in_$i677: i32, in_$i678: i1, in_$i634: i32) returns (out_$i635: i64, out_$p636: ref, out_$p637: ref, out_$i638: i64, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$i646: i64, out_$i647: i1, out_$i648: i32, out_$p649: ref, out_$p650: ref, out_$i651: i8, out_$p652: ref, out_$i653: i64, out_$p654: ref, out_$p655: ref, out_$p656: ref, out_$p657: ref, out_$i658: i64, out_$i659: i1, out_$p660: ref, out_$i661: i8, out_$i662: i32, out_$i663: i32, out_$p664: ref, out_$p665: ref, out_$i666: i32, out_$p667: ref, out_$p668: ref, out_$p669: ref, out_$p670: ref, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$i675: i8, out_$i676: i32, out_$i677: i32, out_$i678: i1, out_$i634: i32)
{

  entry:
    out_$i635, out_$p636, out_$p637, out_$i638, out_$p640, out_$p641, out_$p642, out_$p643, out_$p644, out_$p645, out_$i646, out_$i647, out_$i648, out_$p649, out_$p650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$i658, out_$i659, out_$p660, out_$i661, out_$i662, out_$i663, out_$p664, out_$p665, out_$i666, out_$p667, out_$p668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$p674, out_$i675, out_$i676, out_$i677, out_$i678, out_$i634 := in_$i635, in_$p636, in_$p637, in_$i638, in_$p640, in_$p641, in_$p642, in_$p643, in_$p644, in_$p645, in_$i646, in_$i647, in_$i648, in_$p649, in_$p650, in_$i651, in_$p652, in_$i653, in_$p654, in_$p655, in_$p656, in_$p657, in_$i658, in_$i659, in_$p660, in_$i661, in_$i662, in_$i663, in_$p664, in_$p665, in_$i666, in_$p667, in_$p668, in_$p669, in_$p670, in_$p671, in_$p672, in_$p673, in_$p674, in_$i675, in_$i676, in_$i677, in_$i678, in_$i634;
    goto $bb240, exit;

  $bb240:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  $bb248:
    assume out_$i678 == 1;
    assume {:verifier.code 0} true;
    out_$i634 := out_$i677;
    goto $bb248_dummy;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$i678 := $slt.i32(out_$i677, in_$i91);
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$i677 := $add.i32(out_$i634, 1);
    call {:si_unique_call 300} {:cexpr "i"} boogie_si_record_i32(out_$i677);
    goto corral_source_split_1656;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} usb_fill_int_urb(out_$p665, in_$p21, out_$i666, out_$p668, out_$i648, out_$p672, out_$p673, out_$i676);
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$i676 := $zext.i8.i32(out_$i675);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$i675 := $load.i8($M.0, out_$p674);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p674 := $add.ref($add.ref(out_$p637, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$p673 := $bitcast.ref.ref(out_$p641);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$p672 := $load.ref($M.0, out_$p671);
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$p671 := $add.ref($add.ref(out_$p670, $mul.ref(0, 552)), $mul.ref(512, 1));
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$p670 := $load.ref($M.0, out_$p669);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$p669 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$p668 := $load.ref($M.0, out_$p667);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$p667 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1152, 1));
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$i666 := $or.i32(out_$i663, 1073741824);
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$p665 := $load.ref($M.0, out_$p664);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$p664 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} out_$i663 := __create_pipe(in_$p21, out_$i662);
    call {:si_unique_call 298} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i663);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$i662 := $zext.i8.i32(out_$i661);
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i661 := $load.i8($M.0, out_$p660);
    goto corral_source_split_1639;

  $bb247:
    assume {:verifier.code 0} true;
    out_$p660 := $add.ref($add.ref(out_$p637, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1638;

  $bb246:
    assume !(out_$i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i659 := $eq.i64(out_$i658, 0);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i658 := $p2i.ref.i64(out_$p657);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$p657 := $load.ref($M.0, out_$p656);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$p656 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1152, 1));
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p655, out_$p654);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$p655 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1152, 1));
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} out_$p654 := kmalloc(out_$i653, 208);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i653 := $sext.i32.i64(out_$i648);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p652, out_$i651);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$p652 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1176, 1));
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$i651 := $load.i8($M.0, out_$p650);
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$p650 := $add.ref($add.ref(out_$p637, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p649, out_$i648);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$p649 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1160, 1));
    goto corral_source_split_1621;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} out_$i648 := usb_endpoint_maxp(out_$p637);
    call {:si_unique_call 295} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i648);
    goto corral_source_split_1620;

  $bb243:
    assume !(out_$i647 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i647 := $eq.i64(out_$i646, 0);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$i646 := $p2i.ref.i64(out_$p645);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$p645 := $load.ref($M.0, out_$p644);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$p644 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p643, out_$p642);
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$p643 := $add.ref($add.ref(out_$p641, $mul.ref(0, 3016)), $mul.ref(1168, 1));
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} out_$p642 := usb_alloc_urb(0, 208);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p641 := $load.ref($M.0, out_$p640);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$p640 := $add.ref($add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i638, 8));
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$i638 := $sext.i32.i64(out_$i634);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$p637 := $load.ref($M.20, out_$p636);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$p636 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(out_$i635, 8));
    goto corral_source_split_1605;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i635 := $sext.i32.i64(out_$i634);
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb248_dummy:
    call {:si_unique_call 1} out_$i635, out_$p636, out_$p637, out_$i638, out_$p640, out_$p641, out_$p642, out_$p643, out_$p644, out_$p645, out_$i646, out_$i647, out_$i648, out_$p649, out_$p650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$i658, out_$i659, out_$p660, out_$i661, out_$i662, out_$i663, out_$p664, out_$p665, out_$i666, out_$p667, out_$p668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$p674, out_$i675, out_$i676, out_$i677, out_$i678, out_$i634 := usb_serial_probe_loop_$bb240(in_$p3, in_$p21, in_$p50, in_$i91, out_$i635, out_$p636, out_$p637, out_$i638, out_$p640, out_$p641, out_$p642, out_$p643, out_$p644, out_$p645, out_$i646, out_$i647, out_$i648, out_$p649, out_$p650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$i658, out_$i659, out_$p660, out_$i661, out_$i662, out_$i663, out_$p664, out_$p665, out_$i666, out_$p667, out_$p668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$p674, out_$i675, out_$i676, out_$i677, out_$i678, out_$i634);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb240(in_$p3: ref, in_$p21: ref, in_$p50: ref, in_$i91: i32, in_$i635: i64, in_$p636: ref, in_$p637: ref, in_$i638: i64, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$i646: i64, in_$i647: i1, in_$i648: i32, in_$p649: ref, in_$p650: ref, in_$i651: i8, in_$p652: ref, in_$i653: i64, in_$p654: ref, in_$p655: ref, in_$p656: ref, in_$p657: ref, in_$i658: i64, in_$i659: i1, in_$p660: ref, in_$i661: i8, in_$i662: i32, in_$i663: i32, in_$p664: ref, in_$p665: ref, in_$i666: i32, in_$p667: ref, in_$p668: ref, in_$p669: ref, in_$p670: ref, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$i675: i8, in_$i676: i32, in_$i677: i32, in_$i678: i1, in_$i634: i32) returns (out_$i635: i64, out_$p636: ref, out_$p637: ref, out_$i638: i64, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$i646: i64, out_$i647: i1, out_$i648: i32, out_$p649: ref, out_$p650: ref, out_$i651: i8, out_$p652: ref, out_$i653: i64, out_$p654: ref, out_$p655: ref, out_$p656: ref, out_$p657: ref, out_$i658: i64, out_$i659: i1, out_$p660: ref, out_$i661: i8, out_$i662: i32, out_$i663: i32, out_$p664: ref, out_$p665: ref, out_$i666: i32, out_$p667: ref, out_$p668: ref, out_$p669: ref, out_$p670: ref, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$i675: i8, out_$i676: i32, out_$i677: i32, out_$i678: i1, out_$i634: i32);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb217(in_$p2: ref, in_$p21: ref, in_$p50: ref, in_$i313: i32, in_$i567: i64, in_$p568: ref, in_$p569: ref, in_$i570: i64, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$i578: i64, in_$i579: i1, in_$i580: i32, in_$p581: ref, in_$i582: i8, in_$p583: ref, in_$i584: i64, in_$p585: ref, in_$p586: ref, in_$p587: ref, in_$p588: ref, in_$i589: i64, in_$i590: i1, in_$p591: ref, in_$i592: i8, in_$i593: i32, in_$i594: i32, in_$p595: ref, in_$p596: ref, in_$i597: i32, in_$p598: ref, in_$p599: ref, in_$p600: ref, in_$p601: ref, in_$p602: ref, in_$p603: ref, in_$p604: ref, in_$p605: ref, in_$i606: i8, in_$i607: i32, in_$i608: i32, in_$i609: i1, in_$i566: i32) returns (out_$i567: i64, out_$p568: ref, out_$p569: ref, out_$i570: i64, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$i578: i64, out_$i579: i1, out_$i580: i32, out_$p581: ref, out_$i582: i8, out_$p583: ref, out_$i584: i64, out_$p585: ref, out_$p586: ref, out_$p587: ref, out_$p588: ref, out_$i589: i64, out_$i590: i1, out_$p591: ref, out_$i592: i8, out_$i593: i32, out_$i594: i32, out_$p595: ref, out_$p596: ref, out_$i597: i32, out_$p598: ref, out_$p599: ref, out_$p600: ref, out_$p601: ref, out_$p602: ref, out_$p603: ref, out_$p604: ref, out_$p605: ref, out_$i606: i8, out_$i607: i32, out_$i608: i32, out_$i609: i1, out_$i566: i32)
{

  entry:
    out_$i567, out_$p568, out_$p569, out_$i570, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$i578, out_$i579, out_$i580, out_$p581, out_$i582, out_$p583, out_$i584, out_$p585, out_$p586, out_$p587, out_$p588, out_$i589, out_$i590, out_$p591, out_$i592, out_$i593, out_$i594, out_$p595, out_$p596, out_$i597, out_$p598, out_$p599, out_$p600, out_$p601, out_$p602, out_$p603, out_$p604, out_$p605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i566 := in_$i567, in_$p568, in_$p569, in_$i570, in_$p572, in_$p573, in_$p574, in_$p575, in_$p576, in_$p577, in_$i578, in_$i579, in_$i580, in_$p581, in_$i582, in_$p583, in_$i584, in_$p585, in_$p586, in_$p587, in_$p588, in_$i589, in_$i590, in_$p591, in_$i592, in_$i593, in_$i594, in_$p595, in_$p596, in_$i597, in_$p598, in_$p599, in_$p600, in_$p601, in_$p602, in_$p603, in_$p604, in_$p605, in_$i606, in_$i607, in_$i608, in_$i609, in_$i566;
    goto $bb217, exit;

  $bb217:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  $bb225:
    assume out_$i609 == 1;
    assume {:verifier.code 0} true;
    out_$i566 := out_$i608;
    goto $bb225_dummy;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i609 := $slt.i32(out_$i608, in_$i313);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i608 := $add.i32(out_$i566, 1);
    call {:si_unique_call 289} {:cexpr "i"} boogie_si_record_i32(out_$i608);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} usb_fill_int_urb(out_$p596, in_$p21, out_$i597, out_$p599, out_$i580, out_$p603, out_$p604, out_$i607);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$i607 := $zext.i8.i32(out_$i606);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$i606 := $load.i8($M.0, out_$p605);
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p605 := $add.ref($add.ref(out_$p569, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$p604 := $bitcast.ref.ref(out_$p573);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$p603 := $load.ref($M.0, out_$p602);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p602 := $add.ref($add.ref(out_$p601, $mul.ref(0, 552)), $mul.ref(504, 1));
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p601 := $load.ref($M.0, out_$p600);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$p600 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$p599 := $load.ref($M.0, out_$p598);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p598 := $add.ref($add.ref(out_$p573, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i597 := $or.i32(out_$i594, 1073741952);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$p596 := $load.ref($M.0, out_$p595);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$p595 := $add.ref($add.ref(out_$p573, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$i594 := __create_pipe(in_$p21, out_$i593);
    call {:si_unique_call 287} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i594);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i593 := $zext.i8.i32(out_$i592);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i592 := $load.i8($M.0, out_$p591);
    goto corral_source_split_1538;

  $bb224:
    assume {:verifier.code 0} true;
    out_$p591 := $add.ref($add.ref(out_$p569, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1537;

  $bb223:
    assume !(out_$i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$i590 := $eq.i64(out_$i589, 0);
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$i589 := $p2i.ref.i64(out_$p588);
    goto corral_source_split_1532;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$p588 := $load.ref($M.0, out_$p587);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$p587 := $add.ref($add.ref(out_$p573, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p586, out_$p585);
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p586 := $add.ref($add.ref(out_$p573, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} out_$p585 := kmalloc(out_$i584, 208);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$i584 := $sext.i32.i64(out_$i580);
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p583, out_$i582);
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$p583 := $add.ref($add.ref(out_$p573, $mul.ref(0, 3016)), $mul.ref(1144, 1));
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$i582 := $load.i8($M.0, out_$p581);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    out_$p581 := $add.ref($add.ref(out_$p569, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1522;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} out_$i580 := usb_endpoint_maxp(out_$p569);
    call {:si_unique_call 284} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i580);
    goto corral_source_split_1521;

  $bb220:
    assume !(out_$i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$i579 := $eq.i64(out_$i578, 0);
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$i578 := $p2i.ref.i64(out_$p577);
    goto corral_source_split_1516;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$p577 := $load.ref($M.0, out_$p576);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref(out_$p573, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1514;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p575, out_$p574);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$p575 := $add.ref($add.ref(out_$p573, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1512;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} out_$p574 := usb_alloc_urb(0, 208);
    goto corral_source_split_1511;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$p573 := $load.ref($M.0, out_$p572);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$p572 := $add.ref($add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i570, 8));
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i570 := $sext.i32.i64(out_$i566);
    goto corral_source_split_1508;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    out_$p569 := $load.ref($M.19, out_$p568);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$p568 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i567, 8));
    goto corral_source_split_1506;

  $bb218:
    assume {:verifier.code 0} true;
    out_$i567 := $sext.i32.i64(out_$i566);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb225_dummy:
    call {:si_unique_call 1} out_$i567, out_$p568, out_$p569, out_$i570, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$i578, out_$i579, out_$i580, out_$p581, out_$i582, out_$p583, out_$i584, out_$p585, out_$p586, out_$p587, out_$p588, out_$i589, out_$i590, out_$p591, out_$i592, out_$i593, out_$i594, out_$p595, out_$p596, out_$i597, out_$p598, out_$p599, out_$p600, out_$p601, out_$p602, out_$p603, out_$p604, out_$p605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i566 := usb_serial_probe_loop_$bb217(in_$p2, in_$p21, in_$p50, in_$i313, out_$i567, out_$p568, out_$p569, out_$i570, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$i578, out_$i579, out_$i580, out_$p581, out_$i582, out_$p583, out_$i584, out_$p585, out_$p586, out_$p587, out_$p588, out_$i589, out_$i590, out_$p591, out_$i592, out_$i593, out_$i594, out_$p595, out_$p596, out_$i597, out_$p598, out_$p599, out_$p600, out_$p601, out_$p602, out_$p603, out_$p604, out_$p605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i566);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb217(in_$p2: ref, in_$p21: ref, in_$p50: ref, in_$i313: i32, in_$i567: i64, in_$p568: ref, in_$p569: ref, in_$i570: i64, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$i578: i64, in_$i579: i1, in_$i580: i32, in_$p581: ref, in_$i582: i8, in_$p583: ref, in_$i584: i64, in_$p585: ref, in_$p586: ref, in_$p587: ref, in_$p588: ref, in_$i589: i64, in_$i590: i1, in_$p591: ref, in_$i592: i8, in_$i593: i32, in_$i594: i32, in_$p595: ref, in_$p596: ref, in_$i597: i32, in_$p598: ref, in_$p599: ref, in_$p600: ref, in_$p601: ref, in_$p602: ref, in_$p603: ref, in_$p604: ref, in_$p605: ref, in_$i606: i8, in_$i607: i32, in_$i608: i32, in_$i609: i1, in_$i566: i32) returns (out_$i567: i64, out_$p568: ref, out_$p569: ref, out_$i570: i64, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$i578: i64, out_$i579: i1, out_$i580: i32, out_$p581: ref, out_$i582: i8, out_$p583: ref, out_$i584: i64, out_$p585: ref, out_$p586: ref, out_$p587: ref, out_$p588: ref, out_$i589: i64, out_$i590: i1, out_$p591: ref, out_$i592: i8, out_$i593: i32, out_$i594: i32, out_$p595: ref, out_$p596: ref, out_$i597: i32, out_$p598: ref, out_$p599: ref, out_$p600: ref, out_$p601: ref, out_$p602: ref, out_$p603: ref, out_$p604: ref, out_$p605: ref, out_$i606: i8, out_$i607: i32, out_$i608: i32, out_$i609: i1, out_$i566: i32);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb189(in_$p5: ref, in_$p21: ref, in_$p50: ref, in_$i94: i32, in_$i490: i64, in_$p491: ref, in_$p492: ref, in_$i493: i64, in_$p495: ref, in_$p496: ref, in_$p498: ref, in_$p499: ref, in_$i500: i32, in_$i501: i32, in_$i502: i1, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$i506: i64, in_$i507: i32, in_$i508: i1, in_$i509: i32, in_$i510: i32, in_$p511: ref, in_$p512: ref, in_$i513: i8, in_$p514: ref, in_$p515: ref, in_$p516: ref, in_$p518: ref, in_$p520: ref, in_$p521: ref, in_$i522: i64, in_$i523: i1, in_$i524: i64, in_$p525: ref, in_$p527: ref, in_$p529: ref, in_$p530: ref, in_$i531: i64, in_$i532: i1, in_$p533: ref, in_$i534: i8, in_$i535: i32, in_$i536: i32, in_$p538: ref, in_$p539: ref, in_$i540: i32, in_$p542: ref, in_$p543: ref, in_$p544: ref, in_$p545: ref, in_$p546: ref, in_$p547: ref, in_$p548: ref, in_$p550: ref, in_$p551: ref, in_$p552: ref, in_$p554: ref, in_$p555: ref, in_$p556: ref, in_$i557: i32, in_$i558: i1, in_$i489: i32, in_$p769: ref, in_$p770: ref, in_$p772: ref, in_$p774: ref, in_$p775: ref, in_$i776: i64, in_$i777: i1, in_$i778: i64, in_$p779: ref, in_$p781: ref, in_$p783: ref, in_$p784: ref, in_$i785: i64, in_$i786: i1, in_$p787: ref, in_$i788: i8, in_$i789: i32, in_$i790: i32, in_$p792: ref, in_$p793: ref, in_$i794: i32, in_$p796: ref, in_$p797: ref, in_$p798: ref, in_$p799: ref, in_$p800: ref, in_$p801: ref, in_$p802: ref) returns (out_$i490: i64, out_$p491: ref, out_$p492: ref, out_$i493: i64, out_$p495: ref, out_$p496: ref, out_$p498: ref, out_$p499: ref, out_$i500: i32, out_$i501: i32, out_$i502: i1, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$i506: i64, out_$i507: i32, out_$i508: i1, out_$i509: i32, out_$i510: i32, out_$p511: ref, out_$p512: ref, out_$i513: i8, out_$p514: ref, out_$p515: ref, out_$p516: ref, out_$p518: ref, out_$p520: ref, out_$p521: ref, out_$i522: i64, out_$i523: i1, out_$i524: i64, out_$p525: ref, out_$p527: ref, out_$p529: ref, out_$p530: ref, out_$i531: i64, out_$i532: i1, out_$p533: ref, out_$i534: i8, out_$i535: i32, out_$i536: i32, out_$p538: ref, out_$p539: ref, out_$i540: i32, out_$p542: ref, out_$p543: ref, out_$p544: ref, out_$p545: ref, out_$p546: ref, out_$p547: ref, out_$p548: ref, out_$p550: ref, out_$p551: ref, out_$p552: ref, out_$p554: ref, out_$p555: ref, out_$p556: ref, out_$i557: i32, out_$i558: i1, out_$i489: i32, out_$p769: ref, out_$p770: ref, out_$p772: ref, out_$p774: ref, out_$p775: ref, out_$i776: i64, out_$i777: i1, out_$i778: i64, out_$p779: ref, out_$p781: ref, out_$p783: ref, out_$p784: ref, out_$i785: i64, out_$i786: i1, out_$p787: ref, out_$i788: i8, out_$i789: i32, out_$i790: i32, out_$p792: ref, out_$p793: ref, out_$i794: i32, out_$p796: ref, out_$p797: ref, out_$p798: ref, out_$p799: ref, out_$p800: ref, out_$p801: ref, out_$p802: ref)
{

  entry:
    out_$i490, out_$p491, out_$p492, out_$i493, out_$p495, out_$p496, out_$p498, out_$p499, out_$i500, out_$i501, out_$i502, out_$p503, out_$p504, out_$p505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p511, out_$p512, out_$i513, out_$p514, out_$p515, out_$p516, out_$p518, out_$p520, out_$p521, out_$i522, out_$i523, out_$i524, out_$p525, out_$p527, out_$p529, out_$p530, out_$i531, out_$i532, out_$p533, out_$i534, out_$i535, out_$i536, out_$p538, out_$p539, out_$i540, out_$p542, out_$p543, out_$p544, out_$p545, out_$p546, out_$p547, out_$p548, out_$p550, out_$p551, out_$p552, out_$p554, out_$p555, out_$p556, out_$i557, out_$i558, out_$i489, out_$p769, out_$p770, out_$p772, out_$p774, out_$p775, out_$i776, out_$i777, out_$i778, out_$p779, out_$p781, out_$p783, out_$p784, out_$i785, out_$i786, out_$p787, out_$i788, out_$i789, out_$i790, out_$p792, out_$p793, out_$i794, out_$p796, out_$p797, out_$p798, out_$p799, out_$p800, out_$p801, out_$p802 := in_$i490, in_$p491, in_$p492, in_$i493, in_$p495, in_$p496, in_$p498, in_$p499, in_$i500, in_$i501, in_$i502, in_$p503, in_$p504, in_$p505, in_$i506, in_$i507, in_$i508, in_$i509, in_$i510, in_$p511, in_$p512, in_$i513, in_$p514, in_$p515, in_$p516, in_$p518, in_$p520, in_$p521, in_$i522, in_$i523, in_$i524, in_$p525, in_$p527, in_$p529, in_$p530, in_$i531, in_$i532, in_$p533, in_$i534, in_$i535, in_$i536, in_$p538, in_$p539, in_$i540, in_$p542, in_$p543, in_$p544, in_$p545, in_$p546, in_$p547, in_$p548, in_$p550, in_$p551, in_$p552, in_$p554, in_$p555, in_$p556, in_$i557, in_$i558, in_$i489, in_$p769, in_$p770, in_$p772, in_$p774, in_$p775, in_$i776, in_$i777, in_$i778, in_$p779, in_$p781, in_$p783, in_$p784, in_$i785, in_$i786, in_$p787, in_$i788, in_$i789, in_$i790, in_$p792, in_$p793, in_$i794, in_$p796, in_$p797, in_$p798, in_$p799, in_$p800, in_$p801, in_$p802;
    goto $bb189, exit;

  $bb189:
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  $bb209:
    assume out_$i558 == 1;
    assume {:verifier.code 0} true;
    out_$i489 := out_$i557;
    goto $bb209_dummy;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$i558 := $slt.i32(out_$i557, in_$i94);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$i557 := $add.i32(out_$i489, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32(out_$i557);
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p556, out_$p555);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$p556 := $add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1256, 1));
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$p555 := $load.ref($M.0, out_$p554);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$p554 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p552, out_$p551);
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$p552 := $add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$p551 := $load.ref($M.0, out_$p550);
    goto corral_source_split_1476;

  $bb208:
    assume {:verifier.code 0} true;
    out_$p550 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1475;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} usb_fill_bulk_urb(out_$p793, in_$p21, out_$i794, out_$p797, out_$i510, out_$p801, out_$p802);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$p802 := $bitcast.ref.ref(out_$p496);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p801 := $load.ref($M.0, out_$p800);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p800 := $add.ref($add.ref(out_$p799, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$p799 := $load.ref($M.0, out_$p798);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$p798 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$p797 := $load.ref($M.0, out_$p796);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p796 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i794 := $or.i32(out_$i790, $sub.i32(0, 1073741824));
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p793 := $load.ref($M.0, out_$p792);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$p792 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} out_$i790 := __create_pipe(in_$p21, out_$i789);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i789 := $zext.i8.i32(out_$i788);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i788 := $load.i8($M.0, out_$p787);
    goto corral_source_split_1809;

  $bb290:
    assume {:verifier.code 0} true;
    out_$p787 := $add.ref($add.ref(out_$p492, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1808;

  $bb289:
    assume !(out_$i786 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i786 := $eq.i64(out_$i785, 0);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i785 := $p2i.ref.i64(out_$p784);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p784 := $load.ref($M.0, out_$p783);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p783 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p781, out_$p779);
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$p781 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out_$p779 := kmalloc(out_$i778, 208);
    goto corral_source_split_1800;

  $bb287:
    assume {:verifier.code 0} true;
    out_$i778 := $sext.i32.i64(out_$i510);
    goto corral_source_split_1799;

  $bb286:
    assume !(out_$i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i777 := $eq.i64(out_$i776, 0);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    out_$i776 := $p2i.ref.i64(out_$p775);
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$p775 := $load.ref($M.0, out_$p774);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$p774 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p772, out_$p770);
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    out_$p772 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(1, 8));
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} out_$p770 := usb_alloc_urb(0, 208);
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} set_bit(1, out_$p769);
    goto corral_source_split_1466;

  $bb207:
    assume {:verifier.code 0} true;
    out_$p769 := $add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} usb_fill_bulk_urb(out_$p539, in_$p21, out_$i540, out_$p543, out_$i510, out_$p547, out_$p548);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$p548 := $bitcast.ref.ref(out_$p496);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$p547 := $load.ref($M.0, out_$p546);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p546 := $add.ref($add.ref(out_$p545, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$p545 := $load.ref($M.0, out_$p544);
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$p544 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$p543 := $load.ref($M.0, out_$p542);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$p542 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$i540 := $or.i32(out_$i536, $sub.i32(0, 1073741824));
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$p539 := $load.ref($M.0, out_$p538);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$p538 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} out_$i536 := __create_pipe(in_$p21, out_$i535);
    call {:si_unique_call 277} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i536);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$i535 := $zext.i8.i32(out_$i534);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$i534 := $load.i8($M.0, out_$p533);
    goto corral_source_split_1450;

  $bb206:
    assume {:verifier.code 0} true;
    out_$p533 := $add.ref($add.ref(out_$p492, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1449;

  $bb205:
    assume !(out_$i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i532 := $eq.i64(out_$i531, 0);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i531 := $p2i.ref.i64(out_$p530);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$p530 := $load.ref($M.0, out_$p529);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$p529 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p527, out_$p525);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$p527 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} out_$p525 := kmalloc(out_$i524, 208);
    goto corral_source_split_1441;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i524 := $sext.i32.i64(out_$i510);
    goto corral_source_split_1440;

  $bb201:
    assume !(out_$i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    out_$i523 := $eq.i64(out_$i522, 0);
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$i522 := $p2i.ref.i64(out_$p521);
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$p521 := $load.ref($M.0, out_$p520);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$p520 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p518, out_$p516);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$p518 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} out_$p516 := usb_alloc_urb(0, 208);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} set_bit(0, out_$p515);
    goto corral_source_split_1431;

  $bb198:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1336, 1));
    goto corral_source_split_1430;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p514, out_$i513);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p514 := $add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$i513 := $load.i8($M.0, out_$p512);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$p512 := $add.ref($add.ref(out_$p492, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p511, out_$i510);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$p511 := $add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_1423;

  $bb196:
    assume {:verifier.code 0} true;
    goto corral_source_split_1422;

  $bb195:
    assume !(out_$i508 == 1);
    assume {:verifier.code 0} true;
    out_$i510 := out_$i507;
    goto $bb196;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i510 := out_$i509;
    goto $bb196;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} out_$i509 := usb_endpoint_maxp(out_$p492);
    call {:si_unique_call 272} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i509);
    goto corral_source_split_1420;

  $bb194:
    assume out_$i508 == 1;
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i508 := $eq.i32(out_$i507, 0);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i507 := $trunc.i64.i32(out_$i506);
    call {:si_unique_call 270} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i507);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$i506 := $load.i64($M.0, out_$p505);
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$p505 := $add.ref($add.ref(out_$p504, $mul.ref(0, 552)), $mul.ref(264, 1));
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$p504 := $load.ref($M.0, out_$p503);
    goto corral_source_split_1413;

  $bb193:
    assume {:verifier.code 0} true;
    out_$p503 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1412;

  $bb192:
    assume !(out_$i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$i502 := $ne.i32(out_$i501, 0);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$i501 := __kfifo_int_must_check_helper(out_$i500);
    call {:si_unique_call 269} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i501);
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} out_$i500 := __kfifo_alloc(out_$p499, 4096, 1, 208);
    call {:si_unique_call 267} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i500);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p499 := $bitcast.ref.ref(out_$p498);
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$p498 := $add.ref($add.ref($add.ref(out_$p496, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$p496 := $load.ref($M.0, out_$p495);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$p495 := $add.ref($add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i493, 8));
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i493 := $sext.i32.i64(out_$i489);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$p492 := $load.ref($M.18, out_$p491);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(in_$p5, $mul.ref(0, 64)), $mul.ref(out_$i490, 8));
    goto corral_source_split_1399;

  $bb190:
    assume {:verifier.code 0} true;
    out_$i490 := $sext.i32.i64(out_$i489);
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb209_dummy:
    call {:si_unique_call 1} out_$i490, out_$p491, out_$p492, out_$i493, out_$p495, out_$p496, out_$p498, out_$p499, out_$i500, out_$i501, out_$i502, out_$p503, out_$p504, out_$p505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p511, out_$p512, out_$i513, out_$p514, out_$p515, out_$p516, out_$p518, out_$p520, out_$p521, out_$i522, out_$i523, out_$i524, out_$p525, out_$p527, out_$p529, out_$p530, out_$i531, out_$i532, out_$p533, out_$i534, out_$i535, out_$i536, out_$p538, out_$p539, out_$i540, out_$p542, out_$p543, out_$p544, out_$p545, out_$p546, out_$p547, out_$p548, out_$p550, out_$p551, out_$p552, out_$p554, out_$p555, out_$p556, out_$i557, out_$i558, out_$i489, out_$p769, out_$p770, out_$p772, out_$p774, out_$p775, out_$i776, out_$i777, out_$i778, out_$p779, out_$p781, out_$p783, out_$p784, out_$i785, out_$i786, out_$p787, out_$i788, out_$i789, out_$i790, out_$p792, out_$p793, out_$i794, out_$p796, out_$p797, out_$p798, out_$p799, out_$p800, out_$p801, out_$p802 := usb_serial_probe_loop_$bb189(in_$p5, in_$p21, in_$p50, in_$i94, out_$i490, out_$p491, out_$p492, out_$i493, out_$p495, out_$p496, out_$p498, out_$p499, out_$i500, out_$i501, out_$i502, out_$p503, out_$p504, out_$p505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$p511, out_$p512, out_$i513, out_$p514, out_$p515, out_$p516, out_$p518, out_$p520, out_$p521, out_$i522, out_$i523, out_$i524, out_$p525, out_$p527, out_$p529, out_$p530, out_$i531, out_$i532, out_$p533, out_$i534, out_$i535, out_$i536, out_$p538, out_$p539, out_$i540, out_$p542, out_$p543, out_$p544, out_$p545, out_$p546, out_$p547, out_$p548, out_$p550, out_$p551, out_$p552, out_$p554, out_$p555, out_$p556, out_$i557, out_$i558, out_$i489, out_$p769, out_$p770, out_$p772, out_$p774, out_$p775, out_$i776, out_$i777, out_$i778, out_$p779, out_$p781, out_$p783, out_$p784, out_$i785, out_$i786, out_$p787, out_$i788, out_$i789, out_$i790, out_$p792, out_$p793, out_$i794, out_$p796, out_$p797, out_$p798, out_$p799, out_$p800, out_$p801, out_$p802);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb189(in_$p5: ref, in_$p21: ref, in_$p50: ref, in_$i94: i32, in_$i490: i64, in_$p491: ref, in_$p492: ref, in_$i493: i64, in_$p495: ref, in_$p496: ref, in_$p498: ref, in_$p499: ref, in_$i500: i32, in_$i501: i32, in_$i502: i1, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$i506: i64, in_$i507: i32, in_$i508: i1, in_$i509: i32, in_$i510: i32, in_$p511: ref, in_$p512: ref, in_$i513: i8, in_$p514: ref, in_$p515: ref, in_$p516: ref, in_$p518: ref, in_$p520: ref, in_$p521: ref, in_$i522: i64, in_$i523: i1, in_$i524: i64, in_$p525: ref, in_$p527: ref, in_$p529: ref, in_$p530: ref, in_$i531: i64, in_$i532: i1, in_$p533: ref, in_$i534: i8, in_$i535: i32, in_$i536: i32, in_$p538: ref, in_$p539: ref, in_$i540: i32, in_$p542: ref, in_$p543: ref, in_$p544: ref, in_$p545: ref, in_$p546: ref, in_$p547: ref, in_$p548: ref, in_$p550: ref, in_$p551: ref, in_$p552: ref, in_$p554: ref, in_$p555: ref, in_$p556: ref, in_$i557: i32, in_$i558: i1, in_$i489: i32, in_$p769: ref, in_$p770: ref, in_$p772: ref, in_$p774: ref, in_$p775: ref, in_$i776: i64, in_$i777: i1, in_$i778: i64, in_$p779: ref, in_$p781: ref, in_$p783: ref, in_$p784: ref, in_$i785: i64, in_$i786: i1, in_$p787: ref, in_$i788: i8, in_$i789: i32, in_$i790: i32, in_$p792: ref, in_$p793: ref, in_$i794: i32, in_$p796: ref, in_$p797: ref, in_$p798: ref, in_$p799: ref, in_$p800: ref, in_$p801: ref, in_$p802: ref) returns (out_$i490: i64, out_$p491: ref, out_$p492: ref, out_$i493: i64, out_$p495: ref, out_$p496: ref, out_$p498: ref, out_$p499: ref, out_$i500: i32, out_$i501: i32, out_$i502: i1, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$i506: i64, out_$i507: i32, out_$i508: i1, out_$i509: i32, out_$i510: i32, out_$p511: ref, out_$p512: ref, out_$i513: i8, out_$p514: ref, out_$p515: ref, out_$p516: ref, out_$p518: ref, out_$p520: ref, out_$p521: ref, out_$i522: i64, out_$i523: i1, out_$i524: i64, out_$p525: ref, out_$p527: ref, out_$p529: ref, out_$p530: ref, out_$i531: i64, out_$i532: i1, out_$p533: ref, out_$i534: i8, out_$i535: i32, out_$i536: i32, out_$p538: ref, out_$p539: ref, out_$i540: i32, out_$p542: ref, out_$p543: ref, out_$p544: ref, out_$p545: ref, out_$p546: ref, out_$p547: ref, out_$p548: ref, out_$p550: ref, out_$p551: ref, out_$p552: ref, out_$p554: ref, out_$p555: ref, out_$p556: ref, out_$i557: i32, out_$i558: i1, out_$i489: i32, out_$p769: ref, out_$p770: ref, out_$p772: ref, out_$p774: ref, out_$p775: ref, out_$i776: i64, out_$i777: i1, out_$i778: i64, out_$p779: ref, out_$p781: ref, out_$p783: ref, out_$p784: ref, out_$i785: i64, out_$i786: i1, out_$p787: ref, out_$i788: i8, out_$i789: i32, out_$i790: i32, out_$p792: ref, out_$p793: ref, out_$i794: i32, out_$p796: ref, out_$p797: ref, out_$p798: ref, out_$p799: ref, out_$p800: ref, out_$p801: ref, out_$p802: ref);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb166(in_$p4: ref, in_$p21: ref, in_$p50: ref, in_$i93: i32, in_$i425: i64, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$i435: i64, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$p440: ref, in_$p441: ref, in_$i442: i8, in_$p443: ref, in_$p444: ref, in_$p445: ref, in_$p447: ref, in_$p449: ref, in_$p450: ref, in_$i451: i64, in_$i452: i1, in_$i453: i64, in_$p454: ref, in_$p456: ref, in_$p458: ref, in_$p459: ref, in_$i460: i64, in_$i461: i1, in_$p462: ref, in_$i463: i8, in_$i464: i32, in_$i465: i32, in_$p467: ref, in_$p468: ref, in_$i469: i32, in_$p471: ref, in_$p472: ref, in_$p473: ref, in_$p474: ref, in_$p475: ref, in_$p476: ref, in_$p477: ref, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p483: ref, in_$p484: ref, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i424: i32, in_$p803: ref, in_$p804: ref, in_$p806: ref, in_$p808: ref, in_$p809: ref, in_$i810: i64, in_$i811: i1, in_$i812: i64, in_$p813: ref, in_$p815: ref, in_$p817: ref, in_$p818: ref, in_$i819: i64, in_$i820: i1, in_$p821: ref, in_$i822: i8, in_$i823: i32, in_$i824: i32, in_$p826: ref, in_$p827: ref, in_$i828: i32, in_$p830: ref, in_$p831: ref, in_$p832: ref, in_$p833: ref, in_$p834: ref, in_$p835: ref, in_$p836: ref) returns (out_$i425: i64, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$i435: i64, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$p440: ref, out_$p441: ref, out_$i442: i8, out_$p443: ref, out_$p444: ref, out_$p445: ref, out_$p447: ref, out_$p449: ref, out_$p450: ref, out_$i451: i64, out_$i452: i1, out_$i453: i64, out_$p454: ref, out_$p456: ref, out_$p458: ref, out_$p459: ref, out_$i460: i64, out_$i461: i1, out_$p462: ref, out_$i463: i8, out_$i464: i32, out_$i465: i32, out_$p467: ref, out_$p468: ref, out_$i469: i32, out_$p471: ref, out_$p472: ref, out_$p473: ref, out_$p474: ref, out_$p475: ref, out_$p476: ref, out_$p477: ref, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p483: ref, out_$p484: ref, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i424: i32, out_$p803: ref, out_$p804: ref, out_$p806: ref, out_$p808: ref, out_$p809: ref, out_$i810: i64, out_$i811: i1, out_$i812: i64, out_$p813: ref, out_$p815: ref, out_$p817: ref, out_$p818: ref, out_$i819: i64, out_$i820: i1, out_$p821: ref, out_$i822: i8, out_$i823: i32, out_$i824: i32, out_$p826: ref, out_$p827: ref, out_$i828: i32, out_$p830: ref, out_$p831: ref, out_$p832: ref, out_$p833: ref, out_$p834: ref, out_$p835: ref, out_$p836: ref)
{

  entry:
    out_$i425, out_$p426, out_$p427, out_$i428, out_$p430, out_$p431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$p440, out_$p441, out_$i442, out_$p443, out_$p444, out_$p445, out_$p447, out_$p449, out_$p450, out_$i451, out_$i452, out_$i453, out_$p454, out_$p456, out_$p458, out_$p459, out_$i460, out_$i461, out_$p462, out_$i463, out_$i464, out_$i465, out_$p467, out_$p468, out_$i469, out_$p471, out_$p472, out_$p473, out_$p474, out_$p475, out_$p476, out_$p477, out_$p479, out_$p480, out_$p481, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i424, out_$p803, out_$p804, out_$p806, out_$p808, out_$p809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p815, out_$p817, out_$p818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i823, out_$i824, out_$p826, out_$p827, out_$i828, out_$p830, out_$p831, out_$p832, out_$p833, out_$p834, out_$p835, out_$p836 := in_$i425, in_$p426, in_$p427, in_$i428, in_$p430, in_$p431, in_$p432, in_$p433, in_$p434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$p440, in_$p441, in_$i442, in_$p443, in_$p444, in_$p445, in_$p447, in_$p449, in_$p450, in_$i451, in_$i452, in_$i453, in_$p454, in_$p456, in_$p458, in_$p459, in_$i460, in_$i461, in_$p462, in_$i463, in_$i464, in_$i465, in_$p467, in_$p468, in_$i469, in_$p471, in_$p472, in_$p473, in_$p474, in_$p475, in_$p476, in_$p477, in_$p479, in_$p480, in_$p481, in_$p483, in_$p484, in_$p485, in_$i486, in_$i487, in_$i424, in_$p803, in_$p804, in_$p806, in_$p808, in_$p809, in_$i810, in_$i811, in_$i812, in_$p813, in_$p815, in_$p817, in_$p818, in_$i819, in_$i820, in_$p821, in_$i822, in_$i823, in_$i824, in_$p826, in_$p827, in_$i828, in_$p830, in_$p831, in_$p832, in_$p833, in_$p834, in_$p835, in_$p836;
    goto $bb166, exit;

  $bb166:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  $bb183:
    assume out_$i487 == 1;
    assume {:verifier.code 0} true;
    out_$i424 := out_$i486;
    goto $bb183_dummy;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i487 := $slt.i32(out_$i486, in_$i93);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i486 := $add.i32(out_$i424, 1);
    call {:si_unique_call 265} {:cexpr "i"} boogie_si_record_i32(out_$i486);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p485, out_$p484);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$p485 := $add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1184, 1));
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$p484 := $load.ref($M.0, out_$p483);
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    out_$p483 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1383;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p481, out_$p480);
    goto corral_source_split_1382;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    out_$p480 := $load.ref($M.0, out_$p479);
    goto corral_source_split_1380;

  $bb182:
    assume {:verifier.code 0} true;
    out_$p479 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1379;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} usb_fill_bulk_urb(out_$p827, in_$p21, out_$i828, out_$p831, out_$i439, out_$p835, out_$p836);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$p836 := $bitcast.ref.ref(out_$p431);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$p835 := $load.ref($M.0, out_$p834);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$p834 := $add.ref($add.ref(out_$p833, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$p833 := $load.ref($M.0, out_$p832);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$p832 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p831 := $load.ref($M.0, out_$p830);
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$p830 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i828 := $or.i32(out_$i824, $sub.i32(0, 1073741696));
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$p827 := $load.ref($M.0, out_$p826);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$p826 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_1836;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} out_$i824 := __create_pipe(in_$p21, out_$i823);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i823 := $zext.i8.i32(out_$i822);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i822 := $load.i8($M.0, out_$p821);
    goto corral_source_split_1833;

  $bb296:
    assume {:verifier.code 0} true;
    out_$p821 := $add.ref($add.ref(out_$p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1832;

  $bb295:
    assume !(out_$i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i820 := $eq.i64(out_$i819, 0);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i819 := $p2i.ref.i64(out_$p818);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$p818 := $load.ref($M.0, out_$p817);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p817 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p815, out_$p813);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$p815 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} out_$p813 := kmalloc(out_$i812, 208);
    goto corral_source_split_1824;

  $bb293:
    assume {:verifier.code 0} true;
    out_$i812 := $sext.i32.i64(out_$i439);
    goto corral_source_split_1823;

  $bb292:
    assume !(out_$i811 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    out_$i811 := $eq.i64(out_$i810, 0);
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$i810 := $p2i.ref.i64(out_$p809);
    goto corral_source_split_1376;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$p809 := $load.ref($M.0, out_$p808);
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$p808 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_1374;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p806, out_$p804);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$p806 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(1, 8));
    goto corral_source_split_1372;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} out_$p804 := usb_alloc_urb(0, 208);
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} set_bit(1, out_$p803);
    goto corral_source_split_1370;

  $bb181:
    assume {:verifier.code 0} true;
    out_$p803 := $add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1248, 1));
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} usb_fill_bulk_urb(out_$p468, in_$p21, out_$i469, out_$p472, out_$i439, out_$p476, out_$p477);
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    out_$p477 := $bitcast.ref.ref(out_$p431);
    goto corral_source_split_1366;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$p476 := $load.ref($M.0, out_$p475);
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    out_$p475 := $add.ref($add.ref(out_$p474, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$p474 := $load.ref($M.0, out_$p473);
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    out_$p473 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$p472 := $load.ref($M.0, out_$p471);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$p471 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i469 := $or.i32(out_$i465, $sub.i32(0, 1073741696));
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$p468 := $load.ref($M.0, out_$p467);
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$p467 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_$i465 := __create_pipe(in_$p21, out_$i464);
    call {:si_unique_call 261} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i465);
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$i464 := $zext.i8.i32(out_$i463);
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i463 := $load.i8($M.0, out_$p462);
    goto corral_source_split_1354;

  $bb180:
    assume {:verifier.code 0} true;
    out_$p462 := $add.ref($add.ref(out_$p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1353;

  $bb179:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i461 := $eq.i64(out_$i460, 0);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$i460 := $p2i.ref.i64(out_$p459);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$p459 := $load.ref($M.0, out_$p458);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$p458 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p456, out_$p454);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p456 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} out_$p454 := kmalloc(out_$i453, 208);
    goto corral_source_split_1345;

  $bb176:
    assume {:verifier.code 0} true;
    out_$i453 := $sext.i32.i64(out_$i439);
    goto corral_source_split_1344;

  $bb175:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i64(out_$i451, 0);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$i451 := $p2i.ref.i64(out_$p450);
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$p450 := $load.ref($M.0, out_$p449);
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$p449 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p447, out_$p445);
    goto corral_source_split_1338;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$p447 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} out_$p445 := usb_alloc_urb(0, 208);
    goto corral_source_split_1336;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} set_bit(0, out_$p444);
    goto corral_source_split_1335;

  $bb172:
    assume {:verifier.code 0} true;
    out_$p444 := $add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1248, 1));
    goto corral_source_split_1334;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p443, out_$i442);
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$p443 := $add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$i442 := $load.i8($M.0, out_$p441);
    goto corral_source_split_1330;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$p441 := $add.ref($add.ref(out_$p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p440, out_$i439);
    goto corral_source_split_1328;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    out_$p440 := $add.ref($add.ref(out_$p431, $mul.ref(0, 3016)), $mul.ref(1192, 1));
    goto corral_source_split_1327;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_1326;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$i439 := out_$i437;
    goto $bb170;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    out_$i439 := out_$i436;
    goto $bb170;

  $bb168:
    assume out_$i438 == 1;
    goto corral_source_split_1322;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    out_$i438 := $sgt.i32(out_$i436, out_$i437);
    goto corral_source_split_1320;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} out_$i437 := usb_endpoint_maxp(out_$p427);
    call {:si_unique_call 256} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i437);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$i436 := $trunc.i64.i32(out_$i435);
    call {:si_unique_call 254} {:cexpr "__max1"} boogie_si_record_i32(out_$i436);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$i435 := $load.i64($M.0, out_$p434);
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    out_$p434 := $add.ref($add.ref(out_$p433, $mul.ref(0, 552)), $mul.ref(256, 1));
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$p433 := $load.ref($M.0, out_$p432);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$p432 := $add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    out_$p431 := $load.ref($M.0, out_$p430);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$p430 := $add.ref($add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i428, 8));
    goto corral_source_split_1312;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    out_$i428 := $sext.i32.i64(out_$i424);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    out_$p427 := $load.ref($M.17, out_$p426);
    goto corral_source_split_1310;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(out_$i425, 8));
    goto corral_source_split_1309;

  $bb167:
    assume {:verifier.code 0} true;
    out_$i425 := $sext.i32.i64(out_$i424);
    goto corral_source_split_1308;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb169:
    assume !(out_$i438 == 1);
    goto corral_source_split_1324;

  $bb183_dummy:
    call {:si_unique_call 1} out_$i425, out_$p426, out_$p427, out_$i428, out_$p430, out_$p431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$p440, out_$p441, out_$i442, out_$p443, out_$p444, out_$p445, out_$p447, out_$p449, out_$p450, out_$i451, out_$i452, out_$i453, out_$p454, out_$p456, out_$p458, out_$p459, out_$i460, out_$i461, out_$p462, out_$i463, out_$i464, out_$i465, out_$p467, out_$p468, out_$i469, out_$p471, out_$p472, out_$p473, out_$p474, out_$p475, out_$p476, out_$p477, out_$p479, out_$p480, out_$p481, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i424, out_$p803, out_$p804, out_$p806, out_$p808, out_$p809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p815, out_$p817, out_$p818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i823, out_$i824, out_$p826, out_$p827, out_$i828, out_$p830, out_$p831, out_$p832, out_$p833, out_$p834, out_$p835, out_$p836 := usb_serial_probe_loop_$bb166(in_$p4, in_$p21, in_$p50, in_$i93, out_$i425, out_$p426, out_$p427, out_$i428, out_$p430, out_$p431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$p440, out_$p441, out_$i442, out_$p443, out_$p444, out_$p445, out_$p447, out_$p449, out_$p450, out_$i451, out_$i452, out_$i453, out_$p454, out_$p456, out_$p458, out_$p459, out_$i460, out_$i461, out_$p462, out_$i463, out_$i464, out_$i465, out_$p467, out_$p468, out_$i469, out_$p471, out_$p472, out_$p473, out_$p474, out_$p475, out_$p476, out_$p477, out_$p479, out_$p480, out_$p481, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i424, out_$p803, out_$p804, out_$p806, out_$p808, out_$p809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p815, out_$p817, out_$p818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i823, out_$i824, out_$p826, out_$p827, out_$i828, out_$p830, out_$p831, out_$p832, out_$p833, out_$p834, out_$p835, out_$p836);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb166(in_$p4: ref, in_$p21: ref, in_$p50: ref, in_$i93: i32, in_$i425: i64, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$i435: i64, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$p440: ref, in_$p441: ref, in_$i442: i8, in_$p443: ref, in_$p444: ref, in_$p445: ref, in_$p447: ref, in_$p449: ref, in_$p450: ref, in_$i451: i64, in_$i452: i1, in_$i453: i64, in_$p454: ref, in_$p456: ref, in_$p458: ref, in_$p459: ref, in_$i460: i64, in_$i461: i1, in_$p462: ref, in_$i463: i8, in_$i464: i32, in_$i465: i32, in_$p467: ref, in_$p468: ref, in_$i469: i32, in_$p471: ref, in_$p472: ref, in_$p473: ref, in_$p474: ref, in_$p475: ref, in_$p476: ref, in_$p477: ref, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p483: ref, in_$p484: ref, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i424: i32, in_$p803: ref, in_$p804: ref, in_$p806: ref, in_$p808: ref, in_$p809: ref, in_$i810: i64, in_$i811: i1, in_$i812: i64, in_$p813: ref, in_$p815: ref, in_$p817: ref, in_$p818: ref, in_$i819: i64, in_$i820: i1, in_$p821: ref, in_$i822: i8, in_$i823: i32, in_$i824: i32, in_$p826: ref, in_$p827: ref, in_$i828: i32, in_$p830: ref, in_$p831: ref, in_$p832: ref, in_$p833: ref, in_$p834: ref, in_$p835: ref, in_$p836: ref) returns (out_$i425: i64, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$i435: i64, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$p440: ref, out_$p441: ref, out_$i442: i8, out_$p443: ref, out_$p444: ref, out_$p445: ref, out_$p447: ref, out_$p449: ref, out_$p450: ref, out_$i451: i64, out_$i452: i1, out_$i453: i64, out_$p454: ref, out_$p456: ref, out_$p458: ref, out_$p459: ref, out_$i460: i64, out_$i461: i1, out_$p462: ref, out_$i463: i8, out_$i464: i32, out_$i465: i32, out_$p467: ref, out_$p468: ref, out_$i469: i32, out_$p471: ref, out_$p472: ref, out_$p473: ref, out_$p474: ref, out_$p475: ref, out_$p476: ref, out_$p477: ref, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p483: ref, out_$p484: ref, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i424: i32, out_$p803: ref, out_$p804: ref, out_$p806: ref, out_$p808: ref, out_$p809: ref, out_$i810: i64, out_$i811: i1, out_$i812: i64, out_$p813: ref, out_$p815: ref, out_$p817: ref, out_$p818: ref, out_$i819: i64, out_$i820: i1, out_$p821: ref, out_$i822: i8, out_$i823: i32, out_$i824: i32, out_$p826: ref, out_$p827: ref, out_$i828: i32, out_$p830: ref, out_$p831: ref, out_$p832: ref, out_$p833: ref, out_$p834: ref, out_$p835: ref, out_$p836: ref);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb154(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p50: ref, in_$i360: i32, in_$p381: ref, in_$p382: ref, in_$i383: i64, in_$i384: i1, in_$p385: ref, in_$p387: ref, in_$p388: ref, in_$p389: ref, in_$p392: ref, in_$p393: ref, in_$p394: ref, in_$p395: ref, in_$p397: ref, in_$p398: ref, in_$p399: ref, in_$p401: ref, in_$p403: ref, in_$p405: ref, in_$i406: i64, in_$p408: ref, in_$p409: ref, in_$p411: ref, in_$p413: ref, in_$p415: ref, in_$p417: ref, in_$p419: ref, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$i380: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_26: ref) returns (out_$p381: ref, out_$p382: ref, out_$i383: i64, out_$i384: i1, out_$p385: ref, out_$p387: ref, out_$p388: ref, out_$p389: ref, out_$p392: ref, out_$p393: ref, out_$p394: ref, out_$p395: ref, out_$p397: ref, out_$p398: ref, out_$p399: ref, out_$p401: ref, out_$p403: ref, out_$p405: ref, out_$i406: i64, out_$p408: ref, out_$p409: ref, out_$p411: ref, out_$p413: ref, out_$p415: ref, out_$p417: ref, out_$p419: ref, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$i380: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_26: ref)
{

  entry:
    out_$p381, out_$p382, out_$i383, out_$i384, out_$p385, out_$p387, out_$p388, out_$p389, out_$p392, out_$p393, out_$p394, out_$p395, out_$p397, out_$p398, out_$p399, out_$p401, out_$p403, out_$p405, out_$i406, out_$p408, out_$p409, out_$p411, out_$p413, out_$p415, out_$p417, out_$p419, out_$p420, out_$i421, out_$i422, out_$i380, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_26 := in_$p381, in_$p382, in_$i383, in_$i384, in_$p385, in_$p387, in_$p388, in_$p389, in_$p392, in_$p393, in_$p394, in_$p395, in_$p397, in_$p398, in_$p399, in_$p401, in_$p403, in_$p405, in_$i406, in_$p408, in_$p409, in_$p411, in_$p413, in_$p415, in_$p417, in_$p419, in_$p420, in_$i421, in_$i422, in_$i380, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_vslice_dummy_var_26;
    goto $bb154, exit;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  $bb160:
    assume out_$i422 == 1;
    assume {:verifier.code 0} true;
    out_$i380 := out_$i421;
    goto $bb160_dummy;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$i422 := $slt.i32(out_$i421, in_$i360);
    goto corral_source_split_1298;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$i421 := $add.i32(out_$i380, 1);
    call {:si_unique_call 253} {:cexpr "i"} boogie_si_record_i32(out_$i421);
    goto corral_source_split_1297;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} device_initialize(out_$p420);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    out_$p420 := $add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p419, usb_serial_port_groups);
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    out_$p419 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(1392, 1));
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p417, usb_serial_port_release);
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$p417 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(1400, 1));
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p415, usb_serial_bus_type);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p415 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(488, 1));
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p413, $0.ref);
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$p413 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(496, 1));
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p411, out_$p409);
    goto corral_source_split_1286;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1592, 1)), $mul.ref(0, 1));
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$p409 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1284;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p408, out_$p381);
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$p408 := $add.ref($add.ref($add.ref(in_$p50, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i406, 8));
    goto corral_source_split_1282;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$i406 := $sext.i32.i64(out_$i380);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p405, usb_serial_port_work);
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(24, 1));
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} INIT_LIST_HEAD(out_$p403);
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(8, 1));
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} lockdep_init_map(out_$p401, .str.42, in_$p15, 0);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$p401 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(32, 1));
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 249} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p398, out_$p399, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    out_$p399 := $bitcast.ref.ref(in_$p16);
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$p398 := $bitcast.ref.ref(out_$p397);
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1496, 1)), $mul.ref(0, 1));
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p395, 137438953408);
    goto corral_source_split_1270;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$p395 := $add.ref($add.ref(in_$p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __init_work(out_$p394, 0);
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$p394 := $add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1496, 1));
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} __raw_spin_lock_init(out_$p393, .str.41, in_$p14);
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$p393 := $bitcast.ref.ref(out_$p392);
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$p392 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1048, 1)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} out_vslice_dummy_var_26 := spinlock_check(out_$p389);
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(1048, 1));
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p388, in_$p50);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$p388 := $add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p387, serial_port_ops);
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    out_$p387 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(328, 1));
    goto corral_source_split_1258;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} tty_port_init(out_$p385);
    goto corral_source_split_1257;

  $bb159:
    assume {:verifier.code 0} true;
    out_$p385 := $add.ref($add.ref(out_$p382, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1256;

  $bb157:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i64(out_$i383, 0);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i383 := $p2i.ref.i64(out_$p382);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$p382 := $bitcast.ref.ref(out_$p381);
    goto corral_source_split_1245;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} out_$p381 := kzalloc(3008, 208);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb160_dummy:
    call {:si_unique_call 1} out_$p381, out_$p382, out_$i383, out_$i384, out_$p385, out_$p387, out_$p388, out_$p389, out_$p392, out_$p393, out_$p394, out_$p395, out_$p397, out_$p398, out_$p399, out_$p401, out_$p403, out_$p405, out_$i406, out_$p408, out_$p409, out_$p411, out_$p413, out_$p415, out_$p417, out_$p419, out_$p420, out_$i421, out_$i422, out_$i380, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_26 := usb_serial_probe_loop_$bb154(in_$p0, in_$p14, in_$p15, in_$p16, in_$p50, in_$i360, out_$p381, out_$p382, out_$i383, out_$i384, out_$p385, out_$p387, out_$p388, out_$p389, out_$p392, out_$p393, out_$p394, out_$p395, out_$p397, out_$p398, out_$p399, out_$p401, out_$p403, out_$p405, out_$i406, out_$p408, out_$p409, out_$p411, out_$p413, out_$p415, out_$p417, out_$p419, out_$p420, out_$i421, out_$i422, out_$i380, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_26);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb154(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p50: ref, in_$i360: i32, in_$p381: ref, in_$p382: ref, in_$i383: i64, in_$i384: i1, in_$p385: ref, in_$p387: ref, in_$p388: ref, in_$p389: ref, in_$p392: ref, in_$p393: ref, in_$p394: ref, in_$p395: ref, in_$p397: ref, in_$p398: ref, in_$p399: ref, in_$p401: ref, in_$p403: ref, in_$p405: ref, in_$i406: i64, in_$p408: ref, in_$p409: ref, in_$p411: ref, in_$p413: ref, in_$p415: ref, in_$p417: ref, in_$p419: ref, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$i380: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_26: ref) returns (out_$p381: ref, out_$p382: ref, out_$i383: i64, out_$i384: i1, out_$p385: ref, out_$p387: ref, out_$p388: ref, out_$p389: ref, out_$p392: ref, out_$p393: ref, out_$p394: ref, out_$p395: ref, out_$p397: ref, out_$p398: ref, out_$p399: ref, out_$p401: ref, out_$p403: ref, out_$p405: ref, out_$i406: i64, out_$p408: ref, out_$p409: ref, out_$p411: ref, out_$p413: ref, out_$p415: ref, out_$p417: ref, out_$p419: ref, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$i380: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_26: ref);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb96(in_$p2: ref, in_$p12: ref, in_$p20: ref, in_$p264: ref, in_$p266: ref, in_$p273: ref, in_$p274: ref, in_$i275: i64, in_$p277: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i286: i24, in_$i287: i24, in_$i288: i24, in_$p289: ref, in_$p290: ref, in_$i291: i8, in_$i292: i64, in_$i293: i64, in_$i294: i64, in_$i295: i1, in_$i296: i1, in_$i297: i64, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$i302: i32, in_$i303: i8, in_$i304: i32, in_$i305: i1, in_$i271: i32, in_$i272: i32, in_$i306: i32) returns (out_$p273: ref, out_$p274: ref, out_$i275: i64, out_$p277: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i286: i24, out_$i287: i24, out_$i288: i24, out_$p289: ref, out_$p290: ref, out_$i291: i8, out_$i292: i64, out_$i293: i64, out_$i294: i64, out_$i295: i1, out_$i296: i1, out_$i297: i64, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$i302: i32, out_$i303: i8, out_$i304: i32, out_$i305: i1, out_$i271: i32, out_$i272: i32, out_$i306: i32)
{

  entry:
    out_$p273, out_$p274, out_$i275, out_$p277, out_$i278, out_$i279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i271, out_$i272, out_$i306 := in_$p273, in_$p274, in_$i275, in_$p277, in_$i278, in_$i279, in_$p280, in_$p281, in_$p282, in_$p283, in_$p284, in_$p285, in_$i286, in_$i287, in_$i288, in_$p289, in_$p290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i271, in_$i272, in_$i306;
    goto $bb96, exit;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  $bb107:
    assume out_$i305 == 1;
    assume {:verifier.code 0} true;
    out_$i271, out_$i272 := out_$i302, out_$i301;
    goto $bb107_dummy;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$i306 := out_$i301;
    assume true;
    goto $bb107;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i305 := $sgt.i32(out_$i304, out_$i302);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i304 := $zext.i8.i32(out_$i303);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i8($M.0, in_$p266);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i302 := $add.i32(out_$i271, 1);
    call {:si_unique_call 224} {:cexpr "i"} boogie_si_record_i32(out_$i302);
    goto corral_source_split_1094;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1093;

  $bb99:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    out_$i301 := out_$i272;
    goto $bb106;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$i301 := out_$i300;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_1091;

  $bb104:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    out_$i300 := out_$i272;
    goto $bb105;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i300 := out_$i299;
    goto $bb105;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i299 := $add.i32(out_$i272, 1);
    call {:si_unique_call 223} {:cexpr "num_interrupt_in"} boogie_si_record_i32(out_$i299);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p298, out_$p277);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$p298 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i297, 8));
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i297 := $sext.i32.i64(out_$i272);
    goto corral_source_split_1086;

  $bb103:
    assume out_$i296 == 1;
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i296 := $sle.i32(out_$i272, 7);
    goto corral_source_split_1083;

  $bb101:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __dynamic_dev_dbg.ref.ref.ref(in_$p12, in_$p20, .str.33);
    goto corral_source_split_1081;

  $bb100:
    assume out_$i295 == 1;
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$i295 := $ne.i64(out_$i294, 0);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} out_$i294 := ldv__builtin_expect(out_$i293, 0);
    call {:si_unique_call 221} {:cexpr "tmp___12"} boogie_si_record_i64(out_$i294);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i293 := $and.i64(out_$i292, 1);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i292 := $zext.i8.i64(out_$i291);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i8($M.15, out_$p290);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p289, 0);
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$p289 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, out_$p285, out_$i288);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i288 := $or.i24(out_$i287, 836);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i287 := $and.i24(out_$i286, $sub.i24(0, 262144));
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i24($M.14, out_$p285);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$p285 := $bitcast.ref.ref(out_$p284);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$p284 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p283, .str.33);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p282, .str.25);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p281, .str.24);
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1059;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p280, .str);
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$p280 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  $bb98:
    assume out_$i279 == 1;
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i279 := $ne.i32(out_$i278, 0);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$i278 := usb_endpoint_is_int_in(out_$p277);
    call {:si_unique_call 219} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i278);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(out_$p274, $mul.ref(out_$i275, 72)), $mul.ref(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i32.i64(out_$i271);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$p274 := $load.ref($M.0, out_$p273);
    goto corral_source_split_1049;

  $bb97:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref($add.ref(in_$p264, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb107_dummy:
    call {:si_unique_call 1} out_$p273, out_$p274, out_$i275, out_$p277, out_$i278, out_$i279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i271, out_$i272, out_$i306 := usb_serial_probe_loop_$bb96(in_$p2, in_$p12, in_$p20, in_$p264, in_$p266, out_$p273, out_$p274, out_$i275, out_$p277, out_$i278, out_$i279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i271, out_$i272, out_$i306);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb96(in_$p2: ref, in_$p12: ref, in_$p20: ref, in_$p264: ref, in_$p266: ref, in_$p273: ref, in_$p274: ref, in_$i275: i64, in_$p277: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i286: i24, in_$i287: i24, in_$i288: i24, in_$p289: ref, in_$p290: ref, in_$i291: i8, in_$i292: i64, in_$i293: i64, in_$i294: i64, in_$i295: i1, in_$i296: i1, in_$i297: i64, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$i302: i32, in_$i303: i8, in_$i304: i32, in_$i305: i1, in_$i271: i32, in_$i272: i32, in_$i306: i32) returns (out_$p273: ref, out_$p274: ref, out_$i275: i64, out_$p277: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i286: i24, out_$i287: i24, out_$i288: i24, out_$p289: ref, out_$p290: ref, out_$i291: i8, out_$i292: i64, out_$i293: i64, out_$i294: i64, out_$i295: i1, out_$i296: i1, out_$i297: i64, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$i302: i32, out_$i303: i8, out_$i304: i32, out_$i305: i1, out_$i271: i32, out_$i272: i32, out_$i306: i32);
  modifies $M.19, $M.15, $M.14, $M.13, $M.12, $M.11, $M.10;



implementation usb_serial_probe_loop_$bb29(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p20: ref, in_$p85: ref, in_$p87: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i24, in_$i114: i24, in_$i115: i24, in_$p116: ref, in_$p117: ref, in_$i118: i8, in_$i119: i64, in_$i120: i64, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$i137: i24, in_$i138: i24, in_$i139: i24, in_$p140: ref, in_$p141: ref, in_$i142: i8, in_$i143: i64, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$i147: i1, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i24, in_$i162: i24, in_$i163: i24, in_$p164: ref, in_$p165: ref, in_$i166: i8, in_$i167: i64, in_$i168: i64, in_$i169: i64, in_$i170: i1, in_$i171: i1, in_$i172: i64, in_$p173: ref, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i24, in_$i186: i24, in_$i187: i24, in_$p188: ref, in_$p189: ref, in_$i190: i8, in_$i191: i64, in_$i192: i64, in_$i193: i64, in_$i194: i1, in_$i195: i1, in_$i196: i64, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i32, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i32) returns (out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i24, out_$i114: i24, out_$i115: i24, out_$p116: ref, out_$p117: ref, out_$i118: i8, out_$i119: i64, out_$i120: i64, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$i137: i24, out_$i138: i24, out_$i139: i24, out_$p140: ref, out_$p141: ref, out_$i142: i8, out_$i143: i64, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$i147: i1, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i24, out_$i162: i24, out_$i163: i24, out_$p164: ref, out_$p165: ref, out_$i166: i8, out_$i167: i64, out_$i168: i64, out_$i169: i64, out_$i170: i1, out_$i171: i1, out_$i172: i64, out_$p173: ref, out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i24, out_$i186: i24, out_$i187: i24, out_$p188: ref, out_$p189: ref, out_$i190: i8, out_$i191: i64, out_$i192: i64, out_$i193: i64, out_$i194: i1, out_$i195: i1, out_$i196: i64, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i32, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i32)
{

  entry:
    out_$p100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i205, out_$i206, out_$i207, out_$i208 := in_$p100, in_$p101, in_$i102, in_$p104, in_$i105, in_$i106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p131, in_$p132, in_$p133, in_$p134, in_$p135, in_$p136, in_$i137, in_$i138, in_$i139, in_$p140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$i161, in_$i162, in_$i163, in_$p164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$p173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184, in_$i185, in_$i186, in_$i187, in_$p188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i205, in_$i206, in_$i207, in_$i208;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_801;

  $bb67:
    assume out_$i204 == 1;
    assume {:verifier.code 0} true;
    out_$i95, out_$i96, out_$i97, out_$i98, out_$i99 := out_$i152, out_$i128, out_$i201, out_$i176, out_$i200;
    goto $bb67_dummy;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    out_$i205, out_$i206, out_$i207, out_$i208 := out_$i200, out_$i176, out_$i128, out_$i152;
    assume true;
    goto $bb67;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    out_$i204 := $sgt.i32(out_$i203, out_$i201);
    goto corral_source_split_975;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32(out_$i202);
    goto corral_source_split_974;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i8($M.0, in_$p87);
    goto corral_source_split_973;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i201 := $add.i32(out_$i97, 1);
    call {:si_unique_call 217} {:cexpr "i"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_972;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  $bb59:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := out_$i99;
    goto $bb66;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i200 := out_$i199;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  $bb64:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i199 := out_$i99;
    goto $bb65;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$i199 := out_$i198;
    goto $bb65;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$i198 := $add.i32(out_$i99, 1);
    call {:si_unique_call 216} {:cexpr "num_interrupt_out"} boogie_si_record_i32(out_$i198);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, out_$p197, out_$p104);
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(out_$i196, 8));
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    out_$i196 := $sext.i32.i64(out_$i99);
    goto corral_source_split_964;

  $bb63:
    assume out_$i195 == 1;
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i195 := $sle.i32(out_$i99, 7);
    goto corral_source_split_961;

  $bb61:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p11, in_$p20, .str.32, out_$i97);
    goto corral_source_split_959;

  $bb60:
    assume out_$i194 == 1;
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i64(out_$i193, 0);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} out_$i193 := ldv__builtin_expect(out_$i192, 0);
    call {:si_unique_call 214} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i193);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$i192 := $and.i64(out_$i191, 1);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i8.i64(out_$i190);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i8($M.15, out_$p189);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p188, 0);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, out_$p184, out_$i187);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$i187 := $or.i24(out_$i186, 809);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$i186 := $and.i24(out_$i185, $sub.i24(0, 262144));
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i24($M.14, out_$p184);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p184 := $bitcast.ref.ref(out_$p183);
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p182, .str.32);
    goto corral_source_split_942;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_941;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p181, .str.25);
    goto corral_source_split_940;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p180, .str.24);
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p179, .str);
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_935;

  $bb58:
    assume out_$i178 == 1;
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i177, 0);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} out_$i177 := usb_endpoint_is_int_out(out_$p104);
    call {:si_unique_call 212} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_931;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  $bb50:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    out_$i176 := out_$i98;
    goto $bb57;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$i176 := out_$i175;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  $bb55:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    out_$i175 := out_$i98;
    goto $bb56;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i175 := out_$i174;
    goto $bb56;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$i174 := $add.i32(out_$i98, 1);
    call {:si_unique_call 210} {:cexpr "num_interrupt_in"} boogie_si_record_i32(out_$i174);
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p173, out_$p104);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i172, 8));
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i98);
    goto corral_source_split_923;

  $bb54:
    assume out_$i171 == 1;
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i171 := $sle.i32(out_$i98, 7);
    goto corral_source_split_920;

  $bb52:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p10, in_$p20, .str.31, out_$i97);
    goto corral_source_split_918;

  $bb51:
    assume out_$i170 == 1;
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$i170 := $ne.i64(out_$i169, 0);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} out_$i169 := ldv__builtin_expect(out_$i168, 0);
    call {:si_unique_call 208} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i169);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i168 := $and.i64(out_$i167, 1);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i8.i64(out_$i166);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i8($M.15, out_$p165);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p164, 0);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, out_$p160, out_$i163);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i163 := $or.i24(out_$i162, 799);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$i162 := $and.i24(out_$i161, $sub.i24(0, 262144));
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i24($M.14, out_$p160);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p160 := $bitcast.ref.ref(out_$p159);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p158, .str.31);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p157, .str.25);
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p156, .str.24);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p155, .str);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_894;

  $bb49:
    assume out_$i154 == 1;
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} out_$i153 := usb_endpoint_is_int_in(out_$p104);
    call {:si_unique_call 206} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i153);
    goto corral_source_split_890;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  $bb41:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i152 := out_$i95;
    goto $bb48;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i151;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  $bb46:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    out_$i151 := out_$i95;
    goto $bb47;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i151 := out_$i150;
    goto $bb47;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i32(out_$i95, 1);
    call {:si_unique_call 204} {:cexpr "num_bulk_out"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, out_$p149, out_$p104);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p5, $mul.ref(0, 64)), $mul.ref(out_$i148, 8));
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i148 := $sext.i32.i64(out_$i95);
    goto corral_source_split_882;

  $bb45:
    assume out_$i147 == 1;
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i147 := $sle.i32(out_$i95, 7);
    goto corral_source_split_879;

  $bb43:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p9, in_$p20, .str.30, out_$i97);
    goto corral_source_split_877;

  $bb42:
    assume out_$i146 == 1;
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} out_$i145 := ldv__builtin_expect(out_$i144, 0);
    call {:si_unique_call 202} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i145);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$i144 := $and.i64(out_$i143, 1);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i8.i64(out_$i142);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i8($M.15, out_$p141);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p140, 0);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, out_$p136, out_$i139);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i139 := $or.i24(out_$i138, 790);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i138 := $and.i24(out_$i137, $sub.i24(0, 262144));
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i24($M.14, out_$p136);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p136 := $bitcast.ref.ref(out_$p135);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p134, .str.30);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p133, .str.25);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p132, .str.24);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p131, .str);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_853;

  $bb40:
    assume out_$i130 == 1;
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i129, 0);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} out_$i129 := usb_endpoint_is_bulk_out(out_$p104);
    call {:si_unique_call 200} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_849;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  $bb32:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := out_$i96;
    goto $bb39;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i127;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  $bb37:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := out_$i96;
    goto $bb38;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i127 := out_$i126;
    goto $bb38;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i96, 1);
    call {:si_unique_call 198} {:cexpr "num_bulk_in"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, out_$p125, out_$p104);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(out_$i124, 8));
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i96);
    goto corral_source_split_841;

  $bb36:
    assume out_$i123 == 1;
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i123 := $sle.i32(out_$i96, 7);
    goto corral_source_split_838;

  $bb34:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p8, in_$p20, .str.29, out_$i97);
    goto corral_source_split_836;

  $bb33:
    assume out_$i122 == 1;
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} out_$i121 := ldv__builtin_expect(out_$i120, 0);
    call {:si_unique_call 196} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i121);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i120 := $and.i64(out_$i119, 1);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i64(out_$i118);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i8($M.15, out_$p117);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p116, 0);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, out_$p112, out_$i115);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i115 := $or.i24(out_$i114, 781);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i114 := $and.i24(out_$i113, $sub.i24(0, 262144));
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i24($M.14, out_$p112);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p110, .str.29);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p109, .str.25);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p108, .str.24);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p107, .str);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_812;

  $bb31:
    assume out_$i106 == 1;
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} out_$i105 := usb_endpoint_is_bulk_in(out_$p104);
    call {:si_unique_call 194} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p101, $mul.ref(out_$i102, 72)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i97);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_804;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p85, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb67_dummy:
    call {:si_unique_call 1} out_$p100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i205, out_$i206, out_$i207, out_$i208 := usb_serial_probe_loop_$bb29(in_$p2, in_$p3, in_$p4, in_$p5, in_$p8, in_$p9, in_$p10, in_$p11, in_$p20, in_$p85, in_$p87, out_$p100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i205, out_$i206, out_$i207, out_$i208);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb29(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p20: ref, in_$p85: ref, in_$p87: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i24, in_$i114: i24, in_$i115: i24, in_$p116: ref, in_$p117: ref, in_$i118: i8, in_$i119: i64, in_$i120: i64, in_$i121: i64, in_$i122: i1, in_$i123: i1, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$i137: i24, in_$i138: i24, in_$i139: i24, in_$p140: ref, in_$p141: ref, in_$i142: i8, in_$i143: i64, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$i147: i1, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i24, in_$i162: i24, in_$i163: i24, in_$p164: ref, in_$p165: ref, in_$i166: i8, in_$i167: i64, in_$i168: i64, in_$i169: i64, in_$i170: i1, in_$i171: i1, in_$i172: i64, in_$p173: ref, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i24, in_$i186: i24, in_$i187: i24, in_$p188: ref, in_$p189: ref, in_$i190: i8, in_$i191: i64, in_$i192: i64, in_$i193: i64, in_$i194: i1, in_$i195: i1, in_$i196: i64, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i32, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i32) returns (out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i24, out_$i114: i24, out_$i115: i24, out_$p116: ref, out_$p117: ref, out_$i118: i8, out_$i119: i64, out_$i120: i64, out_$i121: i64, out_$i122: i1, out_$i123: i1, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$i137: i24, out_$i138: i24, out_$i139: i24, out_$p140: ref, out_$p141: ref, out_$i142: i8, out_$i143: i64, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$i147: i1, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i24, out_$i162: i24, out_$i163: i24, out_$p164: ref, out_$p165: ref, out_$i166: i8, out_$i167: i64, out_$i168: i64, out_$i169: i64, out_$i170: i1, out_$i171: i1, out_$i172: i64, out_$p173: ref, out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i24, out_$i186: i24, out_$i187: i24, out_$p188: ref, out_$p189: ref, out_$i190: i8, out_$i191: i64, out_$i192: i64, out_$i193: i64, out_$i194: i1, out_$i195: i1, out_$i196: i64, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i32, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i32);
  modifies $M.20, $M.15, $M.14, $M.13, $M.12, $M.11, $M.10, $M.19, $M.18, $M.17;



implementation usb_serial_disconnect_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i8, in_$i33: i32, in_$i34: i1, in_$i14: i32, in_vslice_dummy_var_28: i1) returns (out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i8, out_$i33: i32, out_$i34: i1, out_$i14: i32, out_vslice_dummy_var_28: i1)
{

  entry:
    out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i14, out_vslice_dummy_var_28 := in_$i15, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$p25, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i14, in_vslice_dummy_var_28;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1868;

  $bb12:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i31;
    goto $bb12_dummy;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i33, out_$i31);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i32);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.0, in_$p10);
    goto corral_source_split_1896;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i14, 1);
    call {:si_unique_call 341} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1895;

  $bb10:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} device_del(out_$p30);
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p18, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1892;

  $bb9:
    assume out_$i29 == 1;
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} out_$i28 := device_is_registered(out_$p27);
    call {:si_unique_call 339} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} out_vslice_dummy_var_28 := ldv_cancel_work_sync_20(out_$p25);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p18, $mul.ref(0, 3016)), $mul.ref(1496, 1));
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} __wake_up(out_$p24, 1, 1, $0.ref);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_1883;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} usb_serial_port_poison_urbs(out_$p18);
    goto corral_source_split_1882;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} tty_kref_put(out_$p20);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} tty_vhangup(out_$p20);
    goto corral_source_split_1879;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_$p20 := tty_port_tty_get(out_$p19);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i15, 8));
    goto corral_source_split_1871;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i14, out_vslice_dummy_var_28 := usb_serial_disconnect_loop_$bb4(in_$p2, in_$p10, out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i14, out_vslice_dummy_var_28);
    return;

  exit:
    return;
}



procedure usb_serial_disconnect_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i8, in_$i33: i32, in_$i34: i1, in_$i14: i32, in_vslice_dummy_var_28: i1) returns (out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i8, out_$i33: i32, out_$i34: i1, out_$i14: i32, out_vslice_dummy_var_28: i1);
  modifies $M.1, $M.3, $M.5, $M.7;



implementation free_dynids_loop_$bb4(in_$i16: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p18: ref, out_$p19: ref)
{

  entry:
    out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p18, out_$p19 := in_$p20, in_$p21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p18, in_$p19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2070;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p24, out_$p18;
    goto $bb6_dummy;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i16);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} kfree(out_$p21);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} list_del(out_$p20);
    goto corral_source_split_2073;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p18, out_$p19 := free_dynids_loop_$bb4(in_$i16, out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p18, out_$p19);
    return;

  exit:
    return;
}



procedure free_dynids_loop_$bb4(in_$i16: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p18: ref, out_$p19: ref);



implementation usb_serial_generic_wait_until_sent_loop_$bb16(in_$i1: i64, in_$p5: ref, in_$i16: i64, in_$i37: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i1, in_$i53: i8, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_vslice_dummy_var_34: i64) returns (out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i1, out_$i53: i8, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_vslice_dummy_var_34: i64)
{

  entry:
    out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_vslice_dummy_var_34 := in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_vslice_dummy_var_34;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb24;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i64(out_$i44, 0);
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i64(in_$i37, out_$i43);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, jiffies);
    goto corral_source_split_2816;

  $bb22:
    assume out_$i42 == 1;
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(in_$i1, 0);
    goto corral_source_split_2813;

  $bb19:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} out_$i40 := signal_pending(out_$p39);
    call {:si_unique_call 514} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out_$p39 := get_current();
    goto corral_source_split_2807;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out_vslice_dummy_var_34 := schedule_timeout_interruptible(in_$i16);
    goto corral_source_split_2806;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb31:
    assume out_$i56 == 1;
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_2825;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2824;

  $bb29:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := 1;
    goto $bb30;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i55 := 0;
    goto $bb30;

  $bb28:
    assume out_$i54 == 1;
    goto corral_source_split_2822;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i8.i1(out_$i53);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i1.i8(out_$i52);
    call {:si_unique_call 510} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i53);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    call {:si_unique_call 509} out_$i52 := devirtbounce.8(out_$p51, in_$p5);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 552)), $mul.ref(424, 1));
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2798;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_vslice_dummy_var_34 := usb_serial_generic_wait_until_sent_loop_$bb16(in_$i1, in_$p5, in_$i16, in_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_vslice_dummy_var_34);
    return;

  exit:
    return;
}



procedure usb_serial_generic_wait_until_sent_loop_$bb16(in_$i1: i64, in_$p5: ref, in_$i16: i64, in_$i37: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i1, in_$i53: i8, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_vslice_dummy_var_34: i64) returns (out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i1, out_$i53: i8, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_vslice_dummy_var_34: i64);
  modifies $M.0, $CurrAddr;



implementation usb_serial_generic_process_read_urb_loop_$bb14(in_$p3: ref, in_$p22: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i8, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i25: i32, in_$p26: ref, in_vslice_dummy_var_38: i32) returns (out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i8, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i25: i32, out_$p26: ref, out_vslice_dummy_var_38: i32)
{

  entry:
    out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i36, out_$p37, out_$i38, out_$i39, out_$i25, out_$p26, out_vslice_dummy_var_38 := in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i36, in_$p37, in_$i38, in_$i39, in_$i25, in_$p26, in_vslice_dummy_var_38;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  $bb19:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$p26 := out_$i36, out_$p37;
    goto $bb19_dummy;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i39 := $ult.i32(out_$i36, out_$i38);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, in_$p22);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p26, $mul.ref(1, 1));
    goto corral_source_split_3140;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i25, 1);
    call {:si_unique_call 555} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3139;

  $bb17:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} out_vslice_dummy_var_38 := tty_insert_flip_char(out_$p31, out_$i34, 0);
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i32.i8(out_$i33);
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i32);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.0, out_$p26);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p3, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_3133;

  $bb16:
    assume out_$i30 == 1;
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_$i29 := usb_serial_handle_sysrq_char(in_$p3, out_$i28);
    call {:si_unique_call 553} {:cexpr "tmp"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i8.i32(out_$i27);
    goto corral_source_split_3128;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.0, out_$p26);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i36, out_$p37, out_$i38, out_$i39, out_$i25, out_$p26, out_vslice_dummy_var_38 := usb_serial_generic_process_read_urb_loop_$bb14(in_$p3, in_$p22, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i36, out_$p37, out_$i38, out_$i39, out_$i25, out_$p26, out_vslice_dummy_var_38);
    return;

  exit:
    return;
}



procedure usb_serial_generic_process_read_urb_loop_$bb14(in_$p3: ref, in_$p22: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i8, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i25: i32, in_$p26: ref, in_vslice_dummy_var_38: i32) returns (out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i8, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i25: i32, out_$p26: ref, out_vslice_dummy_var_38: i32);
  modifies $M.32, $M.33, $M.0, $CurrAddr;



implementation destroy_serial_loop_$bb13(in_$p1: ref, in_$p23: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i27: i32) returns (out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i27: i32)
{

  entry:
    out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i27 := in_$i28, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i27;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;

  $bb18:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i36;
    goto $bb18_dummy;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, out_$i36);
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, in_$p23);
    goto corral_source_split_3438;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i27, 1);
    call {:si_unique_call 654} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3437;

  $bb16:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} put_device(out_$p35);
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p31, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, $0.ref);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_3432;

  $bb15:
    assume out_$i33 == 1;
    goto corral_source_split_3431;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 96), 272)), $mul.ref(32, 1)), $mul.ref(out_$i28, 8));
    goto corral_source_split_3426;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i27 := destroy_serial_loop_$bb13(in_$p1, in_$p23, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i27);
    return;

  exit:
    return;
}



procedure destroy_serial_loop_$bb13(in_$p1: ref, in_$p23: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i27: i32) returns (out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i27: i32);
  modifies $M.0;



implementation release_minors_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := in_$i6, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3499;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, out_$i12);
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, in_$p1);
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, 1);
    call {:si_unique_call 675} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} idr_remove(serial_minors, out_$i11);
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_3505;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_3504;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_3502;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := release_minors_loop_$bb4(in_$p0, in_$p1, out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5);
    return;

  exit:
    return;
}



procedure release_minors_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32);



implementation search_serial_device_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p12: ref, out_$p13: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13 := in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p12, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$p13 := out_$p29, out_$p20;
    goto $bb13_dummy;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p28, $mul.ref($sub.ref(0, 24), 552)), $mul.ref(24, 1));
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p28, $mul.ref($sub.ref(0, 24), 552));
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3635;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3634;

  $bb10:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p12;
    assume true;
    goto $bb10;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_3627;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$p20 := out_$p13;
    goto $bb8;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p19;
    goto $bb8;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_$p19 := get_iface_id(out_$p12, in_$p0);
    goto corral_source_split_3624;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i16, out_$i17);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3618;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13 := search_serial_device_loop_$bb4(in_$p0, in_$p5, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13);
    return;

  exit:
    return;
}



procedure search_serial_device_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p12: ref, out_$p13: ref);
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation allocate_minors_loop_$bb20(in_$p0: ref, in_$i31: i32, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i44: i32) returns (out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i44: i32)
{

  entry:
    out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i44 := in_$i45, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i44;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  $bb22:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i51;
    goto $bb22_dummy;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i52 := $ult.i32(out_$i51, in_$i31);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i44, 1);
    call {:si_unique_call 778} {:cexpr "j"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4073;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} idr_remove(serial_minors, out_$i50);
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i45, 8));
    goto corral_source_split_4068;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i44 := allocate_minors_loop_$bb20(in_$p0, in_$i31, out_$i45, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i44);
    return;

  exit:
    return;
}



procedure allocate_minors_loop_$bb20(in_$p0: ref, in_$i31: i32, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i44: i32) returns (out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i44: i32);



implementation allocate_minors_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i23: i32) returns (out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i23: i32)
{

  entry:
    out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i23 := in_$i24, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i23;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4031;

  $bb13:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i36;
    goto $bb13_dummy;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i37 := $ugt.i32(in_$i1, out_$i36);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i23, 1);
    call {:si_unique_call 775} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p35, out_$i34);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p27, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i32.i8(out_$i23);
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, out_$i29);
    goto corral_source_split_4045;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p27, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_4044;

  $bb10:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32 := out_$i23, out_$i29;
    assume true;
    goto $bb10;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i29, 0);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_$i29 := idr_alloc(serial_minors, out_$p28, 0, 0, 208);
    call {:si_unique_call 774} {:cexpr "minor"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i24, 8));
    goto corral_source_split_4034;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i32.i64(out_$i23);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i23 := allocate_minors_loop_$bb7(in_$p0, in_$i1, out_$i24, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i23);
    return;

  exit:
    return;
}



procedure allocate_minors_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i23: i32) returns (out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i23: i32);
  modifies $M.0;



implementation match_dynamic_id_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15 := in_$p16, in_$i17, in_$i18, in_$p19, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4225;

  $bb10:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, in_$i13);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_4239;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4238;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_$i17 := usb_match_one_id(in_$p0, out_$p16);
    call {:si_unique_call 809} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4228;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15 := match_dynamic_id_loop_$bb4(in_$p0, in_$i13, out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15);
    return;

  exit:
    return;
}



procedure match_dynamic_id_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p15: ref);



implementation usb_serial_deregister_drivers_loop_$bb4(in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7 := in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4301;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p9;
    goto $bb6_dummy;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_4307;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(1, 8));
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} usb_serial_deregister(out_$p8);
    goto corral_source_split_4304;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7 := usb_serial_deregister_drivers_loop_$bb4(out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7);
    return;

  exit:
    return;
}



procedure usb_serial_deregister_drivers_loop_$bb4(in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p7: ref);



implementation usb_serial_generic_tiocmiwait_loop_$bb9(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p22: ref, in_$i27: i64, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i8, in_$i34: i1) returns (out_$i27: i64, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i8, out_$i34: i1)
{

  entry:
    out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34 := in_$i27, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := out_$i31;
    goto $bb16_dummy;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i8(out_$i32);
    call {:si_unique_call 861} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} out_$i32 := usb_serial_generic_msr_changed(in_$p0, in_$i1, in_$p2);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} out_$i31 := prepare_to_wait_event(in_$p22, in_$p3, 1);
    call {:si_unique_call 859} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_4414;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} schedule();
    goto corral_source_split_4413;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i27;
    assume true;
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i27, 0);
    goto corral_source_split_4409;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34 := usb_serial_generic_tiocmiwait_loop_$bb9(in_$p0, in_$i1, in_$p2, in_$p3, in_$p22, out_$i27, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34);
    return;

  exit:
    return;
}



procedure usb_serial_generic_tiocmiwait_loop_$bb9(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p22: ref, in_$i27: i64, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i8, in_$i34: i1) returns (out_$i27: i64, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i8, out_$i34: i1);
  modifies $M.0, $CurrAddr;



implementation serial_proc_show_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i4: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i4: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p59, out_$p62, out_$i63, out_$i64, out_$i4, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53 := in_$p5, in_$i6, in_$i7, in_$p8, in_$p9, in_$p11, in_$p12, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p27, in_$p29, in_$p30, in_$p31, in_$p32, in_$p34, in_$p35, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$p55, in_$p56, in_$p57, in_$p59, in_$p62, in_$i63, in_$i64, in_$i4, in_vslice_dummy_var_45, in_vslice_dummy_var_46, in_vslice_dummy_var_47, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5938;

  $bb13:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i63;
    goto $bb13_dummy;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$i64 := $sle.i32(out_$i63, 511);
    goto corral_source_split_5947;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1125} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_5946;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i7 == 1;
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i64(out_$i6, 0);
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_5941;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} out_$p5 := usb_serial_port_get_by_minor(out_$i4);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} mutex_unlock(out_$p62);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_6008;

  SeqInstr_117:
    goto corral_source_split_6007;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} usb_serial_put(out_$p9);
    goto SeqInstr_116;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_vslice_dummy_var_53 := seq_putc(in_$p0, 10);
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} out_vslice_dummy_var_52 := seq_printf.ref.ref.ref(in_$p0, .str.110, out_$p59);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_vslice_dummy_var_51 := usb_make_path(out_$p56, out_$p57, 40);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} out_vslice_dummy_var_50 := seq_printf.ref.ref.i32(in_$p0, .str.109, out_$i53);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.0, out_$p51);
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p5, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_vslice_dummy_var_49 := seq_printf.ref.ref.i32(in_$p0, .str.108, out_$i49);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_vslice_dummy_var_48 := seq_printf.ref.ref.i32.i32(in_$p0, .str.107, out_$i39, out_$i45);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i44);
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i16($M.0, out_$p43);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p41, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} out_vslice_dummy_var_47 := seq_printf.ref.ref.ref(in_$p0, .str.106, out_$p32);
    goto corral_source_split_5980;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_5978;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_5977;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5976;

  $bb8:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} out_vslice_dummy_var_46 := seq_printf.ref.ref.ref(in_$p0, .str.104, out_$p27);
    goto corral_source_split_5974;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5973;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    out_$p27 := .str.105;
    goto $bb11;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p25;
    goto $bb11;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    goto corral_source_split_5969;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(0, 1144)), $mul.ref(24, 1));
    goto corral_source_split_5968;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5960;

  $bb7:
    assume out_$i17 == 1;
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5953;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_vslice_dummy_var_45 := seq_printf.ref.ref.i32(in_$p0, .str.103, out_$i4);
    goto corral_source_split_5951;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_5950;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5949;

  $bb4:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume !(out_$i24 == 1);
    goto corral_source_split_5971;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p59, out_$p62, out_$i63, out_$i64, out_$i4, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53 := serial_proc_show_loop_$bb1(in_$p0, in_$p2, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p59, out_$p62, out_$i63, out_$i64, out_$i4, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53);
    return;

  exit:
    return;
}



procedure serial_proc_show_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i4: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i4: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32);
  modifies $M.0, $CurrAddr, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$i55: i32, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i133: i64, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i64, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i32, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i1, in_$i225: i1, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i269: i32, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$p280: ref, in_$i282: i32, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i64, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i64, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i32, in_$i304: i32, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i1, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$i329: i32, in_$i330: i32, in_$i331: i1, in_$i332: i32, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$i336: i32, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$p354: ref, in_$i355: i32, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i1, in_$i363: i32, in_$i364: i1, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i1, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i32, in_$i381: i1, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i64, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i64, in_vslice_dummy_var_91: i32) returns (out_$i55: i32, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i133: i64, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i64, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i32, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i1, out_$i225: i1, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i269: i32, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$p280: ref, out_$i282: i32, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i64, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i64, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i32, out_$i304: i32, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i1, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$i329: i32, out_$i330: i32, out_$i331: i1, out_$i332: i32, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$i336: i32, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$p354: ref, out_$i355: i32, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i1, out_$i363: i32, out_$i364: i1, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i1, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i32, out_$i381: i1, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i64, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i64, out_vslice_dummy_var_91: i32)
{

  entry:
    out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i262, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p280, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i295, out_$i296, out_$p297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$p354, out_$i355, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91 := in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$p102, in_$i104, in_$i105, in_$p106, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$p131, in_$i132, in_$i133, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i141, in_$i142, in_$p143, in_$i145, in_$i146, in_$p147, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$i161, in_$i162, in_$p163, in_$i164, in_$i166, in_$i167, in_$p168, in_$i169, in_$i170, in_$p171, in_$i172, in_$i173, in_$p174, in_$p175, in_$i176, in_$i177, in_$p178, in_$i180, in_$i181, in_$p182, in_$i184, in_$i185, in_$p186, in_$i187, in_$i189, in_$i190, in_$p191, in_$i192, in_$i194, in_$i195, in_$p196, in_$i198, in_$i199, in_$p200, in_$i202, in_$i203, in_$p204, in_$i206, in_$i207, in_$p208, in_$i210, in_$i211, in_$p212, in_$i213, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$p231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p239, in_$i241, in_$i242, in_$p243, in_$i245, in_$i246, in_$p247, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$p255, in_$i256, in_$i257, in_$i258, in_$p259, in_$i260, in_$i261, in_$i262, in_$p263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$p279, in_$p280, in_$i282, in_$i283, in_$i284, in_$i285, in_$p286, in_$i287, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$i295, in_$i296, in_$p297, in_$p298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$p345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$p353, in_$p354, in_$i355, in_$i357, in_$i358, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$i366, in_$p367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i372, in_$i373, in_$p374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1243} out_$i55 := __VERIFIER_nondet_int();
    call {:si_unique_call 1244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i55);
    call {:si_unique_call 1245} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i55);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb166_dummy;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb27:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1252} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6352;

  SeqInstr_123:
    goto corral_source_split_6351;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} serial_throttle(out_$p93);
    goto SeqInstr_122;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    out_$p93 := $M.45;
    goto corral_source_split_6350;

  $bb69:
    assume out_$i92 == 1;
    goto corral_source_split_6349;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 2);
    goto corral_source_split_6347;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i91 := $M.46;
    goto corral_source_split_6346;

  $bb67:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1250} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6344;

  SeqInstr_120:
    goto corral_source_split_6343;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} serial_throttle(out_$p90);
    goto SeqInstr_119;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    out_$p90 := $M.45;
    goto corral_source_split_6342;

  $bb66:
    assume out_$i89 == 1;
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 1);
    goto corral_source_split_6339;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    out_$i88 := $M.46;
    goto corral_source_split_6338;

  $bb64:
    assume out_$i87 == 1;
    goto corral_source_split_6337;

  $bb62:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i69, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb58:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb50:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i69, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb29:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i69, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i69, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1246} out_$i69 := __VERIFIER_nondet_int();
    call {:si_unique_call 1247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i69);
    call {:si_unique_call 1248} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i69);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i68 == 1;
    goto corral_source_split_6271;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_6269;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    out_$i67 := $M.46;
    goto corral_source_split_6268;

  $bb24:
    assume out_$i66 == 1;
    goto corral_source_split_6267;

  $bb22:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i55, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb16:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i55, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb3:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i55, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb77:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6365;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} serial_hangup(out_$p99);
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    out_$p99 := $M.45;
    goto corral_source_split_6363;

  $bb76:
    assume out_$i98 == 1;
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 2);
    goto corral_source_split_6360;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i97 := $M.46;
    goto corral_source_split_6359;

  $bb74:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} serial_hangup(out_$p96);
    goto corral_source_split_6356;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$p96 := $M.45;
    goto corral_source_split_6355;

  $bb73:
    assume out_$i95 == 1;
    goto corral_source_split_6354;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 1);
    goto corral_source_split_6335;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    out_$i94 := $M.46;
    goto corral_source_split_6334;

  $bb63:
    assume !(out_$i86 == 1);
    goto corral_source_split_6333;

  $bb83:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6378;

  SeqInstr_129:
    goto corral_source_split_6377;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} out_vslice_dummy_var_67 := serial_get_icount(out_$p106, in_$p16);
    goto SeqInstr_128;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$p106 := $M.45;
    goto corral_source_split_6376;

  $bb82:
    assume out_$i105 == 1;
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 2);
    goto corral_source_split_6373;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i104 := $M.46;
    goto corral_source_split_6372;

  $bb80:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1258} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6370;

  SeqInstr_126:
    goto corral_source_split_6369;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} out_vslice_dummy_var_66 := serial_get_icount(out_$p102, in_$p16);
    goto SeqInstr_125;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    out_$p102 := $M.45;
    goto corral_source_split_6368;

  $bb79:
    assume out_$i101 == 1;
    goto corral_source_split_6367;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 1);
    goto corral_source_split_6327;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    out_$i100 := $M.46;
    goto corral_source_split_6326;

  $bb60:
    assume out_$i85 == 1;
    goto corral_source_split_6325;

  $bb59:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i69, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb89:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6391;

  SeqInstr_135:
    goto corral_source_split_6390;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} serial_unthrottle(out_$p113);
    goto SeqInstr_134;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    out_$p113 := $M.45;
    goto corral_source_split_6389;

  $bb88:
    assume out_$i112 == 1;
    goto corral_source_split_6388;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 2);
    goto corral_source_split_6386;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i111 := $M.46;
    goto corral_source_split_6385;

  $bb86:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6383;

  SeqInstr_132:
    goto corral_source_split_6382;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} serial_unthrottle(out_$p110);
    goto SeqInstr_131;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    out_$p110 := $M.45;
    goto corral_source_split_6381;

  $bb85:
    assume out_$i109 == 1;
    goto corral_source_split_6380;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 1);
    goto corral_source_split_6331;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    out_$i108 := $M.46;
    goto corral_source_split_6330;

  $bb61:
    assume !(out_$i85 == 1);
    goto corral_source_split_6329;

  $bb92:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $M.53 := out_$i122;
    call {:si_unique_call 1268} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_6405;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i121, 1);
    goto corral_source_split_6404;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    out_$i121 := $M.53;
    goto corral_source_split_6403;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6402;

  $bb93:
    assume out_$i120 == 1;
    goto corral_source_split_6401;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_6399;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    out_$i119 := $M.55;
    goto corral_source_split_6398;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.55 := out_$i118;
    call {:si_unique_call 1266} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_6397;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} out_$i118 := serial_open(out_$p116, out_$p117);
    goto corral_source_split_6396;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    out_$p117 := $M.44;
    goto corral_source_split_6395;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    out_$p116 := $M.45;
    goto corral_source_split_6394;

  $bb91:
    assume out_$i115 == 1;
    goto corral_source_split_6393;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 1);
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i114 := $M.46;
    goto corral_source_split_6318;

  $bb56:
    assume out_$i83 == 1;
    goto corral_source_split_6317;

  $bb52:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i69, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb51:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i69, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb101:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6418;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} serial_set_termios(out_$p128, in_$p18);
    goto corral_source_split_6417;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    out_$p128 := $M.45;
    goto corral_source_split_6416;

  $bb100:
    assume out_$i127 == 1;
    goto corral_source_split_6415;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 2);
    goto corral_source_split_6413;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i126 := $M.46;
    goto corral_source_split_6412;

  $bb98:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6410;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} serial_set_termios(out_$p125, in_$p18);
    goto corral_source_split_6409;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    out_$p125 := $M.45;
    goto corral_source_split_6408;

  $bb97:
    assume out_$i124 == 1;
    goto corral_source_split_6407;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 1);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i123 := $M.46;
    goto corral_source_split_6322;

  $bb57:
    assume !(out_$i83 == 1);
    goto corral_source_split_6321;

  $bb107:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6435;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} out_vslice_dummy_var_69 := serial_ioctl(out_$p137, out_$i138, out_$i139);
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i64($M.41, in_$p0);
    goto corral_source_split_6433;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.41, in_$p3);
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    out_$p137 := $M.45;
    goto corral_source_split_6431;

  $bb106:
    assume out_$i136 == 1;
    goto corral_source_split_6430;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 2);
    goto corral_source_split_6428;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i135 := $M.46;
    goto corral_source_split_6427;

  $bb104:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6425;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} out_vslice_dummy_var_68 := serial_ioctl(out_$p131, out_$i132, out_$i133);
    goto corral_source_split_6424;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i64($M.41, in_$p0);
    goto corral_source_split_6423;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.41, in_$p3);
    goto corral_source_split_6422;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    out_$p131 := $M.45;
    goto corral_source_split_6421;

  $bb103:
    assume out_$i130 == 1;
    goto corral_source_split_6420;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i129 := $M.46;
    goto corral_source_split_6310;

  $bb54:
    assume out_$i82 == 1;
    goto corral_source_split_6309;

  $bb53:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i69, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb113:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1280} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6448;

  SeqInstr_141:
    goto corral_source_split_6447;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} out_vslice_dummy_var_71 := serial_install(in_$p14, out_$p147);
    goto SeqInstr_140;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    out_$p147 := $M.45;
    goto corral_source_split_6446;

  $bb112:
    assume out_$i146 == 1;
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 2);
    goto corral_source_split_6443;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i145 := $M.46;
    goto corral_source_split_6442;

  $bb110:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1278} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6440;

  SeqInstr_138:
    goto corral_source_split_6439;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} out_vslice_dummy_var_70 := serial_install(in_$p14, out_$p143);
    goto SeqInstr_137;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    out_$p143 := $M.45;
    goto corral_source_split_6438;

  $bb109:
    assume out_$i142 == 1;
    goto corral_source_split_6437;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 1);
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$i141 := $M.46;
    goto corral_source_split_6314;

  $bb55:
    assume !(out_$i82 == 1);
    goto corral_source_split_6313;

  $bb119:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1284} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} out_vslice_dummy_var_73 := serial_tiocmset(out_$p157, out_$i158, out_$i159);
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.41, in_$p5);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.41, in_$p2);
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$p157 := $M.45;
    goto corral_source_split_6461;

  $bb118:
    assume out_$i156 == 1;
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 2);
    goto corral_source_split_6458;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i155 := $M.46;
    goto corral_source_split_6457;

  $bb116:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} out_vslice_dummy_var_72 := serial_tiocmset(out_$p151, out_$i152, out_$i153);
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.41, in_$p5);
    goto corral_source_split_6453;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.41, in_$p2);
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$p151 := $M.45;
    goto corral_source_split_6451;

  $bb115:
    assume out_$i150 == 1;
    goto corral_source_split_6450;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 1);
    goto corral_source_split_6303;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$i149 := $M.46;
    goto corral_source_split_6302;

  $bb48:
    assume out_$i79 == 1;
    goto corral_source_split_6301;

  $bb44:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i69, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb31:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i69, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb30:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i69, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb122:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1286} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} out_vslice_dummy_var_74 := serial_write(out_$p163, in_$p12, out_$i164);
    goto corral_source_split_6470;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.41, in_$p6);
    goto corral_source_split_6469;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    out_$p163 := $M.45;
    goto corral_source_split_6468;

  $bb121:
    assume out_$i162 == 1;
    goto corral_source_split_6467;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 2);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i161 := $M.46;
    goto corral_source_split_6306;

  $bb49:
    assume !(out_$i79 == 1);
    goto corral_source_split_6305;

  $bb128:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1290} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6484;

  SeqInstr_147:
    goto corral_source_split_6483;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} serial_cleanup(out_$p171);
    goto SeqInstr_146;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$p171 := $M.45;
    goto corral_source_split_6482;

  $bb127:
    assume out_$i170 == 1;
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 2);
    goto corral_source_split_6479;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i169 := $M.46;
    goto corral_source_split_6478;

  $bb125:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6476;

  SeqInstr_144:
    goto corral_source_split_6475;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} serial_cleanup(out_$p168);
    goto SeqInstr_143;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$p168 := $M.45;
    goto corral_source_split_6474;

  $bb124:
    assume out_$i167 == 1;
    goto corral_source_split_6473;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 1);
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$i166 := $M.46;
    goto corral_source_split_6294;

  $bb46:
    assume out_$i78 == 1;
    goto corral_source_split_6293;

  $bb45:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i69, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb131:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1292} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} serial_close(out_$p174, out_$p175);
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    out_$p175 := $M.44;
    goto corral_source_split_6488;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$p174 := $M.45;
    goto corral_source_split_6487;

  $bb130:
    assume out_$i173 == 1;
    goto corral_source_split_6486;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 2);
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i172 := $M.46;
    goto corral_source_split_6298;

  $bb47:
    assume !(out_$i78 == 1);
    goto corral_source_split_6297;

  $bb137:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1296} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6503;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} out_vslice_dummy_var_76 := serial_write_room(out_$p182);
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$p182 := $M.45;
    goto corral_source_split_6501;

  $bb136:
    assume out_$i181 == 1;
    goto corral_source_split_6500;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 2);
    goto corral_source_split_6498;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i180 := $M.46;
    goto corral_source_split_6497;

  $bb134:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1294} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} out_vslice_dummy_var_75 := serial_write_room(out_$p178);
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$p178 := $M.45;
    goto corral_source_split_6493;

  $bb133:
    assume out_$i177 == 1;
    goto corral_source_split_6492;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$i176 := $M.46;
    goto corral_source_split_6286;

  $bb42:
    assume out_$i76 == 1;
    goto corral_source_split_6285;

  $bb33:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i69, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb32:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i69, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb143:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1300} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} out_vslice_dummy_var_78 := serial_break(out_$p191, out_$i192);
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i32($M.41, in_$p4);
    goto corral_source_split_6516;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$p191 := $M.45;
    goto corral_source_split_6515;

  $bb142:
    assume out_$i190 == 1;
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 2);
    goto corral_source_split_6512;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i189 := $M.46;
    goto corral_source_split_6511;

  $bb140:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1298} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6509;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} out_vslice_dummy_var_77 := serial_break(out_$p186, out_$i187);
    goto corral_source_split_6508;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.41, in_$p4);
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$p186 := $M.45;
    goto corral_source_split_6506;

  $bb139:
    assume out_$i185 == 1;
    goto corral_source_split_6505;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 1);
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i184 := $M.46;
    goto corral_source_split_6290;

  $bb43:
    assume !(out_$i76 == 1);
    goto corral_source_split_6289;

  $bb149:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1304} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} out_vslice_dummy_var_80 := serial_chars_in_buffer(out_$p200);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$p200 := $M.45;
    goto corral_source_split_6529;

  $bb148:
    assume out_$i199 == 1;
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 2);
    goto corral_source_split_6526;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i198 := $M.46;
    goto corral_source_split_6525;

  $bb146:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1302} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} out_vslice_dummy_var_79 := serial_chars_in_buffer(out_$p196);
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$p196 := $M.45;
    goto corral_source_split_6521;

  $bb145:
    assume out_$i195 == 1;
    goto corral_source_split_6520;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_6275;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    out_$i194 := $M.46;
    goto corral_source_split_6274;

  $bb35:
    assume out_$i73 == 1;
    goto corral_source_split_6273;

  $bb34:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i69, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb155:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1308} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} out_vslice_dummy_var_82 := serial_tiocmget(out_$p208);
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$p208 := $M.45;
    goto corral_source_split_6542;

  $bb154:
    assume out_$i207 == 1;
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 2);
    goto corral_source_split_6539;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i206 := $M.46;
    goto corral_source_split_6538;

  $bb152:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1306} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} out_vslice_dummy_var_81 := serial_tiocmget(out_$p204);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$p204 := $M.45;
    goto corral_source_split_6534;

  $bb151:
    assume out_$i203 == 1;
    goto corral_source_split_6533;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 1);
    goto corral_source_split_6279;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    out_$i202 := $M.46;
    goto corral_source_split_6278;

  $bb37:
    assume out_$i74 == 1;
    goto corral_source_split_6277;

  $bb36:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i69, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb161:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1312} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6559;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} serial_wait_until_sent(out_$p216, out_$i217);
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i32($M.41, in_$p1);
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$p216 := $M.45;
    goto corral_source_split_6556;

  $bb160:
    assume out_$i215 == 1;
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 2);
    goto corral_source_split_6553;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i214 := $M.46;
    goto corral_source_split_6552;

  $bb158:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} serial_wait_until_sent(out_$p212, out_$i213);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i32($M.41, in_$p1);
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$p212 := $M.45;
    goto corral_source_split_6547;

  $bb157:
    assume out_$i211 == 1;
    goto corral_source_split_6546;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 1);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i210 := $M.46;
    goto corral_source_split_6282;

  $bb39:
    assume out_$i75 == 1;
    goto corral_source_split_6281;

  $bb38:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i69, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} ldv_stop();
    goto corral_source_split_6561;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb41;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb41;

  $bb168:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_main_exported_3();
    goto corral_source_split_6564;

  $bb167:
    assume out_$i219 == 1;
    goto corral_source_split_6563;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i32(out_$i218, 0);
    goto corral_source_split_6265;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    out_$i218 := $M.47;
    goto corral_source_split_6264;

  $bb23:
    assume !(out_$i65 == 1);
    goto corral_source_split_6263;

  $bb171:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb187:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb189:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $M.53 := out_$i236;
    call {:si_unique_call 1321} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i236);
    goto corral_source_split_6599;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    out_$i236 := $add.i32(out_$i235, 1);
    goto corral_source_split_6598;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    out_$i235 := $M.53;
    goto corral_source_split_6597;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6596;

  $bb188:
    assume out_$i234 == 1;
    goto corral_source_split_6595;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 0);
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i233 := $M.56;
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.56 := out_$i232;
    call {:si_unique_call 1319} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i232);
    goto corral_source_split_6591;

  SeqInstr_150:
    goto corral_source_split_6590;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_$i232 := serial_port_activate(out_$p231, in_$p20);
    goto SeqInstr_149;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    out_$p231 := $M.40;
    goto corral_source_split_6589;

  $bb186:
    assume out_$i230 == 1;
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 1);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$i229 := $M.39;
    goto corral_source_split_6585;

  $bb184:
    assume out_$i228 == 1;
    goto corral_source_split_6584;

  $bb182:
    assume out_$i227 == 1;
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i222, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb173:
    assume out_$i223 == 1;
    assume {:verifier.code 0} true;
    out_$i227 := $slt.i32(out_$i222, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i223 := $slt.i32(out_$i222, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_6566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1315} out_$i222 := __VERIFIER_nondet_int();
    call {:si_unique_call 1316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i222);
    call {:si_unique_call 1317} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i222);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume out_$i221 == 1;
    goto corral_source_split_6566;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    out_$i221 := $ne.i32(out_$i220, 0);
    goto corral_source_split_6253;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    out_$i220 := $M.39;
    goto corral_source_split_6252;

  $bb18:
    assume out_$i63 == 1;
    goto corral_source_split_6251;

  $bb17:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i55, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb200:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6620;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} out_vslice_dummy_var_85 := serial_port_carrier_raised(out_$p247);
    goto corral_source_split_6619;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    out_$p247 := $M.40;
    goto corral_source_split_6618;

  $bb199:
    assume out_$i246 == 1;
    goto corral_source_split_6617;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 2);
    goto corral_source_split_6615;

  $bb198:
    assume {:verifier.code 0} true;
    out_$i245 := $M.39;
    goto corral_source_split_6614;

  $bb197:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} out_vslice_dummy_var_84 := serial_port_carrier_raised(out_$p243);
    goto corral_source_split_6611;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$p243 := $M.40;
    goto corral_source_split_6610;

  $bb196:
    assume out_$i242 == 1;
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 3);
    goto corral_source_split_6607;

  $bb195:
    assume {:verifier.code 0} true;
    out_$i241 := $M.39;
    goto corral_source_split_6606;

  $bb194:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_vslice_dummy_var_83 := serial_port_carrier_raised(out_$p239);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$p239 := $M.40;
    goto corral_source_split_6602;

  $bb193:
    assume out_$i238 == 1;
    goto corral_source_split_6601;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 1);
    goto corral_source_split_6582;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i237 := $M.39;
    goto corral_source_split_6581;

  $bb183:
    assume !(out_$i227 == 1);
    goto corral_source_split_6580;

  $bb209:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_6644;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} serial_port_dtr_rts(out_$p259, out_$i260);
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$i260 := $load.i32($M.41, in_$p7);
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$p259 := $M.40;
    goto corral_source_split_6641;

  $bb208:
    assume out_$i258 == 1;
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 2);
    goto corral_source_split_6638;

  $bb207:
    assume {:verifier.code 0} true;
    out_$i257 := $M.39;
    goto corral_source_split_6637;

  $bb206:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} serial_port_dtr_rts(out_$p255, out_$i256);
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i32($M.41, in_$p7);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$p255 := $M.40;
    goto corral_source_split_6632;

  $bb205:
    assume out_$i254 == 1;
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 3);
    goto corral_source_split_6629;

  $bb204:
    assume {:verifier.code 0} true;
    out_$i253 := $M.39;
    goto corral_source_split_6628;

  $bb203:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} serial_port_dtr_rts(out_$p251, out_$i252);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.41, in_$p7);
    goto corral_source_split_6624;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    out_$p251 := $M.40;
    goto corral_source_split_6623;

  $bb202:
    assume out_$i250 == 1;
    goto corral_source_split_6622;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 1);
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$i249 := $M.39;
    goto corral_source_split_6569;

  $bb175:
    assume out_$i224 == 1;
    goto corral_source_split_6568;

  $bb174:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    out_$i224 := $slt.i32(out_$i222, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb212:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.53 := out_$i265;
    call {:si_unique_call 1336} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i265);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$i265 := $sub.i32(out_$i264, 1);
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i264 := $M.53;
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6649;

  SeqInstr_153:
    goto corral_source_split_6648;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} serial_port_shutdown(out_$p263);
    goto SeqInstr_152;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$p263 := $M.40;
    goto corral_source_split_6647;

  $bb211:
    assume out_$i262 == 1;
    goto corral_source_split_6646;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 2);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i261 := $M.39;
    goto corral_source_split_6573;

  $bb177:
    assume out_$i225 == 1;
    goto corral_source_split_6572;

  $bb176:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    out_$i225 := $slt.i32(out_$i222, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb215:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1338} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_6656;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} out_vslice_dummy_var_86 := ldv_destruct_7();
    goto corral_source_split_6655;

  $bb214:
    assume out_$i267 == 1;
    goto corral_source_split_6654;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 1);
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i266 := $M.39;
    goto corral_source_split_6577;

  $bb179:
    assume out_$i226 == 1;
    goto corral_source_split_6576;

  $bb178:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i222, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_stop();
    goto corral_source_split_6658;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i226 == 1);
    goto $bb181;

  $bb185:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb181;

  $bb221:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb235:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.53 := out_$i283;
    call {:si_unique_call 1345} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i283);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    out_$i283 := $sub.i32(out_$i282, 1);
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i282 := $M.53;
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} out_vslice_dummy_var_87 := single_release(out_$p279, out_$p280);
    goto corral_source_split_6681;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    out_$p280 := $M.43;
    goto corral_source_split_6680;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    out_$p279 := $M.42;
    goto corral_source_split_6679;

  $bb234:
    assume out_$i278 == 1;
    goto corral_source_split_6678;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 2);
    goto corral_source_split_6676;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    out_$i277 := $M.48;
    goto corral_source_split_6675;

  $bb232:
    assume out_$i276 == 1;
    goto corral_source_split_6674;

  $bb230:
    assume out_$i275 == 1;
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i271, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb223:
    assume out_$i272 == 1;
    assume {:verifier.code 0} true;
    out_$i275 := $slt.i32(out_$i271, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb222:
    assume {:verifier.code 0} true;
    out_$i272 := $slt.i32(out_$i271, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_6660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1340} out_$i271 := __VERIFIER_nondet_int();
    call {:si_unique_call 1341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i271);
    call {:si_unique_call 1342} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i271);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume out_$i270 == 1;
    goto corral_source_split_6660;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    out_$i270 := $ne.i32(out_$i269, 0);
    goto corral_source_split_6257;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    out_$i269 := $M.48;
    goto corral_source_split_6256;

  $bb20:
    assume out_$i64 == 1;
    goto corral_source_split_6255;

  $bb19:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i55, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb239:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} out_vslice_dummy_var_88 := seq_read(out_$p286, in_$p23, out_$i287, in_$p22);
    goto corral_source_split_6690;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    out_$i287 := $load.i64($M.41, in_$p9);
    goto corral_source_split_6689;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    out_$p286 := $M.43;
    goto corral_source_split_6688;

  $bb238:
    assume out_$i285 == 1;
    goto corral_source_split_6687;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 2);
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i284 := $M.48;
    goto corral_source_split_6671;

  $bb231:
    assume !(out_$i275 == 1);
    goto corral_source_split_6670;

  $bb242:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} out_vslice_dummy_var_89 := seq_lseek(out_$p291, out_$i292, out_$i293);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$i293 := $load.i32($M.41, in_$p10);
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i64($M.41, in_$p8);
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$p291 := $M.43;
    goto corral_source_split_6694;

  $bb241:
    assume out_$i290 == 1;
    goto corral_source_split_6693;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 2);
    goto corral_source_split_6664;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    out_$i289 := $M.48;
    goto corral_source_split_6663;

  $bb225:
    assume out_$i273 == 1;
    goto corral_source_split_6662;

  $bb224:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    out_$i273 := $slt.i32(out_$i271, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb245:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb247:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.53 := out_$i303;
    call {:si_unique_call 1353} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i303);
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$i303 := $add.i32(out_$i302, 1);
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$i302 := $M.53;
    goto corral_source_split_6710;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_6709;

  $bb246:
    assume out_$i301 == 1;
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 0);
    goto corral_source_split_6706;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    out_$i300 := $M.57;
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $M.57 := out_$i299;
    call {:si_unique_call 1351} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i299);
    goto corral_source_split_6704;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} out_$i299 := serial_proc_open(out_$p297, out_$p298);
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    out_$p298 := $M.43;
    goto corral_source_split_6702;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$p297 := $M.42;
    goto corral_source_split_6701;

  $bb244:
    assume out_$i296 == 1;
    goto corral_source_split_6700;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 1);
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    out_$i295 := $M.48;
    goto corral_source_split_6667;

  $bb227:
    assume out_$i274 == 1;
    goto corral_source_split_6666;

  $bb226:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i271, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} ldv_stop();
    goto corral_source_split_6714;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb228:
    assume {:verifier.code 0} true;
    assume !(out_$i274 == 1);
    goto $bb229;

  $bb233:
    assume {:verifier.code 0} true;
    assume !(out_$i276 == 1);
    goto $bb229;

  $bb254:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} ldv_main_exported_2();
    goto corral_source_split_6717;

  $bb253:
    assume out_$i305 == 1;
    goto corral_source_split_6716;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    out_$i305 := $ne.i32(out_$i304, 0);
    goto corral_source_split_6261;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    out_$i304 := $M.49;
    goto corral_source_split_6260;

  $bb21:
    assume !(out_$i64 == 1);
    goto corral_source_split_6259;

  $bb257:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb262:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} out_vslice_dummy_var_90 := port_number_show(in_$p28, in_$p25, in_$p26);
    goto corral_source_split_6726;

  $bb261:
    assume out_$i311 == 1;
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 1);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$i310 := $M.50;
    goto corral_source_split_6722;

  $bb259:
    assume out_$i309 == 1;
    goto corral_source_split_6721;

  $bb258:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_6719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1356} out_$i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 1357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i308);
    call {:si_unique_call 1358} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i308);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb256:
    assume out_$i307 == 1;
    goto corral_source_split_6719;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    out_$i307 := $ne.i32(out_$i306, 0);
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$i306 := $M.50;
    goto corral_source_split_6244;

  $bb14:
    assume out_$i61 == 1;
    goto corral_source_split_6243;

  $bb5:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i55, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i55, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv_stop();
    goto corral_source_split_6729;

  $bb260:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb269:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} invoke_work_1();
    goto corral_source_split_6732;

  $bb268:
    assume out_$i314 == 1;
    goto corral_source_split_6731;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    out_$i314 := $ne.i32(out_$i313, 0);
    goto corral_source_split_6249;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i313 := $M.51;
    goto corral_source_split_6248;

  $bb15:
    assume !(out_$i61 == 1);
    goto corral_source_split_6247;

  $bb272:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} ldv_main_exported_4();
    goto corral_source_split_6735;

  $bb271:
    assume out_$i316 == 1;
    goto corral_source_split_6734;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i316 := $ne.i32(out_$i315, 0);
    goto corral_source_split_6233;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i315 := $M.52;
    goto corral_source_split_6232;

  $bb7:
    assume out_$i58 == 1;
    goto corral_source_split_6231;

  $bb6:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i55, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb275:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb285:
    assume {:verifier.code 0} true;
    assume !(out_$i324 == 1);
    goto $bb286;

  $bb288:
    assume {:verifier.code 0} true;
    assume !(out_$i326 == 1);
    goto $bb286;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 0);
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    out_$i325 := $M.53;
    goto corral_source_split_6748;

  $bb284:
    assume out_$i324 == 1;
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i323, 2);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i323 := $M.54;
    goto corral_source_split_6744;

  $bb282:
    assume out_$i322 == 1;
    goto corral_source_split_6743;

  $bb277:
    assume out_$i320 == 1;
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i319, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb276:
    assume {:verifier.code 0} true;
    out_$i320 := $slt.i32(out_$i319, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_6737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1364} out_$i319 := __VERIFIER_nondet_int();
    call {:si_unique_call 1365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i319);
    call {:si_unique_call 1366} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i319);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb274:
    assume out_$i318 == 1;
    goto corral_source_split_6737;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$i318 := $ne.i32(out_$i317, 0);
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$i317 := $M.54;
    goto corral_source_split_6236;

  $bb9:
    assume out_$i59 == 1;
    goto corral_source_split_6235;

  $bb8:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb293:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb298:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} ldv_initialize_tty_operations_6();
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6779;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} ldv_initialize_usb_serial_driver_4();
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} ldv_initialize_driver_attribute_3();
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} ldv_file_operations_9();
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} ldv_initialize_bus_type_2();
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1373} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6770;

  $bb297:
    assume out_$i333 == 1;
    goto corral_source_split_6769;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 0);
    goto corral_source_split_6767;

  $bb296:
    assume {:verifier.code 0} true;
    out_$i332 := $M.58;
    goto corral_source_split_6766;

  $bb295:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i331 := $ne.i32(out_$i330, 0);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$i330 := $M.58;
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $M.58 := out_$i329;
    call {:si_unique_call 1371} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i329);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} out_$i329 := usb_serial_init();
    goto corral_source_split_6758;

  $bb292:
    assume out_$i328 == 1;
    goto corral_source_split_6757;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 1);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i327 := $M.54;
    goto corral_source_split_6740;

  $bb279:
    assume out_$i321 == 1;
    goto corral_source_split_6739;

  $bb278:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    out_$i321 := $eq.i32(out_$i319, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} ldv_stop();
    goto corral_source_split_6783;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb280:
    assume {:verifier.code 0} true;
    assume !(out_$i321 == 1);
    goto $bb281;

  $bb283:
    assume {:verifier.code 0} true;
    assume !(out_$i322 == 1);
    goto $bb281;

  $bb305:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb321:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb323:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.53 := out_$i350;
    call {:si_unique_call 1392} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i350 := $add.i32(out_$i349, 1);
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$i349 := $M.53;
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6815;

  $bb322:
    assume out_$i348 == 1;
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 0);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i347 := $M.59;
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.59 := out_$i346;
    call {:si_unique_call 1390} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i346);
    goto corral_source_split_6810;

  SeqInstr_159:
    goto corral_source_split_6809;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$i346 := usb_serial_probe(out_$p345, in_$p30);
    goto SeqInstr_158;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$p345 := $M.34;
    goto corral_source_split_6808;

  $bb320:
    assume out_$i344 == 1;
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 1);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i343 := $M.23;
    goto corral_source_split_6804;

  $bb318:
    assume out_$i342 == 1;
    goto corral_source_split_6803;

  $bb316:
    assume out_$i341 == 1;
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i336, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb307:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    out_$i341 := $slt.i32(out_$i336, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb306:
    assume {:verifier.code 0} true;
    out_$i337 := $slt.i32(out_$i336, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1386} out_$i336 := __VERIFIER_nondet_int();
    call {:si_unique_call 1387} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i336);
    call {:si_unique_call 1388} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i336);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb304:
    assume out_$i335 == 1;
    goto corral_source_split_6785;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    out_$i335 := $ne.i32(out_$i334, 0);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    out_$i334 := $M.23;
    goto corral_source_split_6240;

  $bb11:
    assume out_$i60 == 1;
    goto corral_source_split_6239;

  $bb10:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb328:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1394} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} out_vslice_dummy_var_91 := usb_serial_suspend(out_$p353, out_$i355);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$i355 := $load.i32($M.41, out_$p354);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$p354 := $add.ref($add.ref(in_$p11, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6822;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$p353 := $M.34;
    goto corral_source_split_6821;

  $bb327:
    assume out_$i352 == 1;
    goto corral_source_split_6820;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 2);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$i351 := $M.23;
    goto corral_source_split_6800;

  $bb317:
    assume !(out_$i341 == 1);
    goto corral_source_split_6799;

  $bb331:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb333:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6835;

  $bb332:
    assume out_$i362 == 1;
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 0);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i361 := $M.60;
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $M.60 := out_$i360;
    call {:si_unique_call 1396} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i360);
    goto corral_source_split_6830;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} out_$i360 := usb_serial_resume(out_$p359);
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$p359 := $M.34;
    goto corral_source_split_6828;

  $bb330:
    assume out_$i358 == 1;
    goto corral_source_split_6827;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 3);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i357 := $M.23;
    goto corral_source_split_6788;

  $bb309:
    assume out_$i338 == 1;
    goto corral_source_split_6787;

  $bb308:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    out_$i338 := $slt.i32(out_$i336, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $M.53 := out_$i376;
    call {:si_unique_call 1403} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i376);
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i376 := $sub.i32(out_$i375, 1);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$i375 := $M.53;
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1402} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6859;

  SeqInstr_165:
    goto corral_source_split_6858;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} usb_serial_disconnect(out_$p374);
    goto SeqInstr_164;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$p374 := $M.34;
    goto corral_source_split_6857;

  $bb345:
    assume out_$i373 == 1;
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i372, 0);
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i372 := $M.24;
    goto corral_source_split_6853;

  $bb342:
    assume out_$i371 == 1;
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 2);
    goto corral_source_split_6850;

  $bb341:
    assume {:verifier.code 0} true;
    out_$i370 := $M.23;
    goto corral_source_split_6849;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.53 := out_$i369;
    call {:si_unique_call 1400} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i369);
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    out_$i369 := $sub.i32(out_$i368, 1);
    goto corral_source_split_6846;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i368 := $M.53;
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6844;

  SeqInstr_162:
    goto corral_source_split_6843;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} usb_serial_disconnect(out_$p367);
    goto SeqInstr_161;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$p367 := $M.34;
    goto corral_source_split_6842;

  $bb339:
    assume out_$i366 == 1;
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 0);
    goto corral_source_split_6839;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    out_$i365 := $M.24;
    goto corral_source_split_6838;

  $bb336:
    assume out_$i364 == 1;
    goto corral_source_split_6837;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i364 := $eq.i32(out_$i363, 3);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$i363 := $M.23;
    goto corral_source_split_6792;

  $bb311:
    assume out_$i339 == 1;
    goto corral_source_split_6791;

  $bb310:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    out_$i339 := $slt.i32(out_$i336, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb337:
    assume {:verifier.code 0} true;
    assume !(out_$i364 == 1);
    goto $bb338;

  $bb340:
    assume {:verifier.code 0} true;
    assume !(out_$i366 == 1);
    goto $bb338;

  $bb343:
    assume {:verifier.code 0} true;
    assume !(out_$i371 == 1);
    goto $bb344;

  $bb346:
    assume {:verifier.code 0} true;
    assume !(out_$i373 == 1);
    goto $bb344;

  $bb349:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb351:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1406} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6871;

  $bb350:
    assume out_$i381 == 1;
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i380, 0);
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$i380 := $M.61;
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.61 := out_$i379;
    call {:si_unique_call 1405} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i379);
    goto corral_source_split_6866;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} out_$i379 := ldv_reset_resume_5();
    goto corral_source_split_6865;

  $bb348:
    assume out_$i378 == 1;
    goto corral_source_split_6864;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i377, 3);
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i377 := $M.23;
    goto corral_source_split_6796;

  $bb313:
    assume out_$i340 == 1;
    goto corral_source_split_6795;

  $bb312:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i336, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} ldv_stop();
    goto corral_source_split_6873;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb314:
    assume {:verifier.code 0} true;
    assume !(out_$i340 == 1);
    goto $bb315;

  $bb319:
    assume {:verifier.code 0} true;
    assume !(out_$i342 == 1);
    goto $bb315;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_stop();
    goto corral_source_split_6875;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb13;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb13;

  $bb166_dummy:
    call {:si_unique_call 1} out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i262, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p280, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i295, out_$i296, out_$p297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$p354, out_$i355, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, in_$p22, in_$p23, in_$p25, in_$p26, in_$p28, in_$p30, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i262, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p280, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i295, out_$i296, out_$p297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$p354, out_$i355, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$i55: i32, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i133: i64, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i64, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i32, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i1, in_$i225: i1, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i269: i32, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$p280: ref, in_$i282: i32, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i64, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i64, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i32, in_$i304: i32, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i1, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$i329: i32, in_$i330: i32, in_$i331: i1, in_$i332: i32, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$i336: i32, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$p354: ref, in_$i355: i32, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i1, in_$i363: i32, in_$i364: i1, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i1, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i32, in_$i381: i1, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i64, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i64, in_vslice_dummy_var_91: i32) returns (out_$i55: i32, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i133: i64, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i64, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i32, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i1, out_$i225: i1, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i269: i32, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$p280: ref, out_$i282: i32, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i64, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i64, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i32, out_$i304: i32, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i1, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$i329: i32, out_$i330: i32, out_$i331: i1, out_$i332: i32, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$i336: i32, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$p354: ref, out_$i355: i32, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i1, out_$i363: i32, out_$i364: i1, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i1, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i32, out_$i381: i1, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i64, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i64, out_vslice_dummy_var_91: i32);
  modifies $M.46, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, $M.32, $M.33, $M.23, $M.36, $M.1, $M.3, $M.5, $M.7, assertsPassed, $M.2, $M.4, $M.6, $M.8, $M.17, $M.18, $M.19, $M.20, $M.39, $M.40, $M.53, $M.55, $M.41, $M.47, $M.56, $M.48, $M.57, $M.64, $M.49, $M.50, $M.52, $M.66, $M.44, $M.45, $M.65, $M.62, $M.42, $M.43, $M.63, $M.54, $M.58, $M.38, $M.24, $M.34, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.59, $M.9, $M.60, $M.61;


