var $M.0: i32;

var $M.1: [ref]i64;

var $M.2: [ref]i8;

var $M.3: [ref]ref;

var $M.4: [ref]i8;

var $M.5: i32;

var $M.6: [ref]ref;

var $M.7: [ref]i8;

var $M.8: [ref]i8;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: [ref]i8;

var $M.12: [ref]i32;

var $M.13: ref;

var $M.14: [ref]i32;

var $M.15: ref;

var $M.16: ref;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: [ref]i32;

var $M.27: i64;

var $M.28: i64;

var $M.29: i64;

var $M.30: i64;

var $M.31: i64;

var $M.32: i64;

var $M.33: [ref]i64;

var $M.34: i64;

var $M.35: i64;

var $M.36: i64;

var $M.37: i8;

var $M.38: i32;

var $M.39: [ref]i32;

var $M.40: i64;

var $M.41: [ref]i32;

var $M.42: [ref]ref;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.53: [ref]i32;

var $M.54: [ref]i32;

var $M.55: [ref]i32;

var $M.56: [ref]i32;

var $M.57: [ref]i32;

var $M.58: [ref]i32;

var $M.59: [ref]i64;

var $M.94: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 386252);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const rocket_ops_group0: ref;

axiom rocket_ops_group0 == $sub.ref(0, 2060);

const rocket_ops_group1: ref;

axiom rocket_ops_group1 == $sub.ref(0, 3092);

const rocket_port_ops_group1: ref;

axiom rocket_port_ops_group1 == $sub.ref(0, 4124);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 5152);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 6180);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 7208);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 8236);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 9264);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 10292);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 11320);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 12348);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 13376);

const __mod_pci__rocket_pci_ids_device_table: ref;

axiom __mod_pci__rocket_pci_ids_device_table == $sub.ref(0, 14432);

const driver_version: ref;

axiom driver_version == $sub.ref(0, 15584);

const rp_num_ports_open: ref;

axiom rp_num_ports_open == $sub.ref(0, 16612);

const {:count 8} xmit_flags: ref;

axiom xmit_flags == $sub.ref(0, 17668);

const max_board: ref;

axiom max_board == $sub.ref(0, 18696);

const {:count 4} upci_aiop_intr_bits: ref;

axiom upci_aiop_intr_bits == $sub.ref(0, 19736);

const {:count 23} rocket_pci_ids: ref;

axiom rocket_pci_ids == $sub.ref(0, 21496);

const {:count 52} RRegData: ref;

axiom RRegData == $sub.ref(0, 22572);

const {:count 72} RData: ref;

axiom RData == $sub.ref(0, 23668);

const {:count 4} pc104: ref;

axiom pc104 == $sub.ref(0, 24724);

const rocket_port_ops: ref;

axiom rocket_port_ops == $sub.ref(0, 25788);

const {:count 256} lineNumbers: ref;

axiom lineNumbers == $sub.ref(0, 27068);

const {:count 8} rocketModel: ref;

axiom rocketModel == $sub.ref(0, 28924);

const nextLineNumber: ref;

axiom nextLineNumber == $sub.ref(0, 29956);

const {:count 8} sBitMapSetTbl: ref;

axiom sBitMapSetTbl == $sub.ref(0, 30988);

const {:count 8} sBitMapClrTbl: ref;

axiom sBitMapClrTbl == $sub.ref(0, 32020);

const {:count 4} aiop_intr_bits: ref;

axiom aiop_intr_bits == $sub.ref(0, 33060);

const {:count 8} rp_baud_base: ref;

axiom rp_baud_base == $sub.ref(0, 34116);

const sClockPrescale: ref;

axiom sClockPrescale == $sub.ref(0, 35144);

const support_low_speed: ref;

axiom support_low_speed == $sub.ref(0, 36169);

const {:count 8} sController: ref;

axiom sController == $sub.ref(0, 38281);

const rocket_ops: ref;

axiom rocket_ops == $sub.ref(0, 39577);

const {:count 8} pc104_4: ref;

axiom pc104_4 == $sub.ref(0, 40665);

const modem4: ref;

axiom modem4 == $sub.ref(0, 41697);

const {:count 8} pc104_3: ref;

axiom pc104_3 == $sub.ref(0, 42785);

const modem3: ref;

axiom modem3 == $sub.ref(0, 43817);

const {:count 8} pc104_2: ref;

axiom pc104_2 == $sub.ref(0, 44905);

const modem2: ref;

axiom modem2 == $sub.ref(0, 45937);

const {:count 8} pc104_1: ref;

axiom pc104_1 == $sub.ref(0, 47025);

const {:count 8} rcktpt_type: ref;

axiom rcktpt_type == $sub.ref(0, 48081);

const modem1: ref;

axiom modem1 == $sub.ref(0, 49113);

const board4: ref;

axiom board4 == $sub.ref(0, 50145);

const board3: ref;

axiom board3 == $sub.ref(0, 51177);

const board2: ref;

axiom board2 == $sub.ref(0, 52209);

const board1: ref;

axiom board1 == $sub.ref(0, 53241);

const controller: ref;

axiom controller == $sub.ref(0, 54273);

const {:count 8} is_PCI: ref;

axiom is_PCI == $sub.ref(0, 55329);

const {:count 8} rcktpt_io_addr: ref;

axiom rcktpt_io_addr == $sub.ref(0, 56417);

const {:count 256} rp_table: ref;

axiom rp_table == $sub.ref(0, 59489);

const rocket_driver: ref;

axiom rocket_driver == $sub.ref(0, 60521);

const rocket_timer: ref;

axiom rocket_timer == $sub.ref(0, 61673);

const boot_tvec_bases: ref;

axiom boot_tvec_bases == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 214} .str.1: ref;

axiom .str.1 == $sub.ref(0, 62911);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 39} .str.48: ref;

axiom .str.48 == $sub.ref(0, 63974);

const {:count 15} .str.49: ref;

axiom .str.49 == $sub.ref(0, 65013);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 65} .str.47: ref;

axiom .str.47 == $sub.ref(0, 66102);

const {:count 14} .str.54: ref;

axiom .str.54 == $sub.ref(0, 67140);

const {:count 56} .str.51: ref;

axiom .str.51 == $sub.ref(0, 68220);

const {:count 19} .str.64: ref;

axiom .str.64 == $sub.ref(0, 69263);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 16} .str.57: ref;

axiom .str.57 == $sub.ref(0, 70303);

const {:count 9} .str.62: ref;

axiom .str.62 == $sub.ref(0, 71336);

const {:count 10} .str.55: ref;

axiom .str.55 == $sub.ref(0, 72370);

const {:count 8} .str.50: ref;

axiom .str.50 == $sub.ref(0, 73402);

const {:count 12} .str.52: ref;

axiom .str.52 == $sub.ref(0, 74438);

const {:count 15} .str.56: ref;

axiom .str.56 == $sub.ref(0, 75477);

const {:count 9} .str.58: ref;

axiom .str.58 == $sub.ref(0, 76510);

const {:count 19} .str.63: ref;

axiom .str.63 == $sub.ref(0, 77553);

const {:count 14} .str.61: ref;

axiom .str.61 == $sub.ref(0, 78591);

const {:count 12} .str.53: ref;

axiom .str.53 == $sub.ref(0, 79627);

const {:count 9} .str.59: ref;

axiom .str.59 == $sub.ref(0, 80660);

const {:count 9} .str.60: ref;

axiom .str.60 == $sub.ref(0, 81693);

const {:count 50} .str.2: ref;

axiom .str.2 == $sub.ref(0, 82767);

const {:count 5} .str.3: ref;

axiom .str.3 == $sub.ref(0, 83796);

const {:count 13} .str.4: ref;

axiom .str.4 == $sub.ref(0, 84833);

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 19} .str.5: ref;

axiom .str.5 == $sub.ref(0, 85876);

const {:count 100} .str.6: ref;

axiom .str.6 == $sub.ref(0, 87000);

const {:count 5} .str.7: ref;

axiom .str.7 == $sub.ref(0, 88029);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 41} .str.8: ref;

axiom .str.8 == $sub.ref(0, 89094);

const {:count 46} .str.9: ref;

axiom .str.9 == $sub.ref(0, 90164);

const {:count 31} .str.24: ref;

axiom .str.24 == $sub.ref(0, 91219);

const {:count 31} .str.25: ref;

axiom .str.25 == $sub.ref(0, 92274);

const {:count 36} .str.26: ref;

axiom .str.26 == $sub.ref(0, 93334);

const {:count 33} .str.27: ref;

axiom .str.27 == $sub.ref(0, 94391);

const {:count 38} .str.28: ref;

axiom .str.28 == $sub.ref(0, 95453);

const {:count 36} .str.29: ref;

axiom .str.29 == $sub.ref(0, 96513);

const {:count 36} .str.30: ref;

axiom .str.30 == $sub.ref(0, 97573);

const {:count 33} .str.31: ref;

axiom .str.31 == $sub.ref(0, 98630);

const {:count 34} .str.32: ref;

axiom .str.32 == $sub.ref(0, 99688);

const {:count 34} .str.33: ref;

axiom .str.33 == $sub.ref(0, 100746);

const {:count 39} .str.34: ref;

axiom .str.34 == $sub.ref(0, 101809);

const {:count 46} .str.35: ref;

axiom .str.35 == $sub.ref(0, 102879);

const {:count 34} .str.36: ref;

axiom .str.36 == $sub.ref(0, 103937);

const {:count 39} .str.37: ref;

axiom .str.37 == $sub.ref(0, 105000);

const {:count 23} .str.38: ref;

axiom .str.38 == $sub.ref(0, 106047);

const {:count 23} .str.39: ref;

axiom .str.39 == $sub.ref(0, 107094);

const {:count 29} .str.40: ref;

axiom .str.40 == $sub.ref(0, 108147);

const {:count 29} .str.41: ref;

axiom .str.41 == $sub.ref(0, 109200);

const {:count 19} .str.42: ref;

axiom .str.42 == $sub.ref(0, 110243);

const {:count 19} .str.43: ref;

axiom .str.43 == $sub.ref(0, 111286);

const {:count 23} .str.44: ref;

axiom .str.44 == $sub.ref(0, 112333);

const {:count 23} .str.45: ref;

axiom .str.45 == $sub.ref(0, 113380);

const {:count 91} .str.46: ref;

axiom .str.46 == $sub.ref(0, 114495);

const {:count 45} .str.19: ref;

axiom .str.19 == $sub.ref(0, 115564);

const {:count 43} .str.20: ref;

axiom .str.20 == $sub.ref(0, 116631);

const {:count 23} .str.21: ref;

axiom .str.21 == $sub.ref(0, 117678);

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 118719);

const {:count 9} .str.23: ref;

axiom .str.23 == $sub.ref(0, 119752);

const {:count 101} .str.10: ref;

axiom .str.10 == $sub.ref(0, 120877);

const {:count 8} .str.11: ref;

axiom .str.11 == $sub.ref(0, 121909);

const {:count 14} .str.12: ref;

axiom .str.12 == $sub.ref(0, 122947);

const {:count 17} .str.13: ref;

axiom .str.13 == $sub.ref(0, 123988);

const .str.14: ref;

axiom .str.14 == $sub.ref(0, 125013);

const {:count 16} .str.15: ref;

axiom .str.15 == $sub.ref(0, 126053);

const {:count 15} .str.16: ref;

axiom .str.16 == $sub.ref(0, 127092);

const {:count 55} .str.17: ref;

axiom .str.17 == $sub.ref(0, 128171);

const {:count 44} .str.18: ref;

axiom .str.18 == $sub.ref(0, 129239);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const .str: ref;

axiom .str == $sub.ref(0, 130319);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 131351);

const {:count 3} .str.1.146: ref;

axiom .str.1.146 == $sub.ref(0, 132378);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 133416);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 134444);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 135476);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 136508);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const rp_do_poll: ref;

axiom rp_do_poll == $sub.ref(0, 137540);

procedure rp_do_poll($i0: i64);
  free requires assertsPassed;
  modifies $M.2, $M.5, $M.7, $M.8, $CurrAddr;



implementation rp_do_poll($i0: i64)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i25: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i16;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i35: i32;
  var $i44: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i8;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i66: i8;
  var $i67: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i45: i32;
  var $i46: i32;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $i95: i32;
  var $i94: i32;
  var $i111: i32;
  var $i8: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i3: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i64;
  var $i118: i64;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} {:cexpr "rp_do_poll:arg:dummy"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $M.0;
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32(0, $i1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i115 := atomic_read(rp_num_ports_open);
    call {:si_unique_call 32} {:cexpr "tmp___4"} boogie_si_record_i32($i115);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    return;

  $bb55:
    assume $i116 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.2, jiffies);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i117, 2);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_12 := mod_timer(rocket_timer, $i118);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $p5, $i6, $i7, $i9, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i25, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i35, $i44, $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i66, $i67, $i82, $i83, $i84, $i45, $i46, $i85, $p86, $i87, $i88, $i89, $p91, $i92, $i93, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $i110, $i95, $i94, $i111, $i8, $i112, $i113, $i114, $i3 := rp_do_poll_loop_$bb4($i4, $p5, $i6, $i7, $i9, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i25, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i35, $i44, $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i66, $i67, $i82, $i83, $i84, $i45, $i46, $i85, $p86, $i87, $i88, $i89, $p91, $i92, $i93, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $i110, $i95, $i94, $i111, $i8, $i112, $i113, $i114, $i3);
    goto $bb4_last;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i4, 8));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.1, $p5);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i3);
    $p11 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i9, 136)), $mul.ref(8, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, $p11);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    $p36 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i9, 136)), $mul.ref(32, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p36);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i41 := sInB($i40);
    call {:si_unique_call 4} {:cexpr "tmp___1"} boogie_si_record_i8($i41);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 15);
    call {:si_unique_call 5} {:cexpr "CtlMask"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    $i35 := $i43;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i35, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i3);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref($i85, 4));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.2, $p86);
    call {:si_unique_call 23} {:cexpr "xmitmask"} boogie_si_record_i32($i87);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i111 := $i3;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i8 := $i111;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i8, 1);
    call {:si_unique_call 2} {:cexpr "ctrl"} boogie_si_record_i32($i112);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i113 := $M.0;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i112, $i113);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i114 == 1);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb52:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i112;
    goto $bb52_dummy;

  $bb38:
    assume $i88 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i3);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i89, 104)), $mul.ref(88, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.2, $p91);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i93 := $ult.i64(0, $i92);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i94 := $i3;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i111 := $i94;
    goto $bb51;

  $bb40:
    assume $i93 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb43;

  $bb43:
    call $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $i110, $i95 := rp_do_poll_loop_$bb43($i87, $p91, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $i110, $i95, $i3);
    goto $bb43_last;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i96 := $shl.i32(1, $i95);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, $i87);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i95, 1);
    call {:si_unique_call 30} {:cexpr "i"} boogie_si_record_i32($i107);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i107);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.2, $p91);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i110 := $ult.i64($i108, $i109);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i110 == 1);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i94 := $i3;
    goto $bb42;

  $bb48:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i95 := $i107;
    goto $bb48_dummy;

  $bb45:
    assume $i98 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i95, 24);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i100 := $lshr.i32($i99, 3);
    call {:si_unique_call 24} {:cexpr "aiop"} boogie_si_record_i32($i100);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i95, 7);
    call {:si_unique_call 25} {:cexpr "ch"} boogie_si_record_i32($i101);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i102 := GetLineNumber($i3, $i100, $i101);
    call {:si_unique_call 27} {:cexpr "tmp___3"} boogie_si_record_i8($i102);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    call {:si_unique_call 28} {:cexpr "line"} boogie_si_record_i32($i103);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref($i104, 8));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.3, $p105);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} rp_do_transmit($p106);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i35, 0;
    goto $bb19;

  $bb19:
    call $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i66, $i67, $i82, $i83, $i84, $i45, $i46 := rp_do_poll_loop_$bb19($i9, $p47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i66, $i67, $i82, $i83, $i84, $i45, $i46, $i3);
    goto $bb19_last;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p47 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i9, 136)), $mul.ref(128, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.2, $p47);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i46);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 4));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    call {:si_unique_call 12} {:cexpr "bit"} boogie_si_record_i32($i51);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i45, $i51);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i45;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i46, 1);
    call {:si_unique_call 22} {:cexpr "aiop"} boogie_si_record_i32($i83);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i82, 0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i84 == 1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb35:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i45, $i46 := $i82, $i83;
    goto $bb35_dummy;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i54 := $xor.i32($i51, $sub.i32(0, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, $i45);
    call {:si_unique_call 13} {:cexpr "CtlMask"} boogie_si_record_i32($i55);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i46);
    $p58 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i9, 136)), $mul.ref(76, 1)), $mul.ref($i56, 4));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.2, $p58);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i63 := sInB($i62);
    call {:si_unique_call 15} {:cexpr "AiopMask"} boogie_si_record_i8($i63);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i82 := $i55;
    goto $bb34;

  $bb23:
    assume $i65 == 1;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i66, $i67 := $i63, 0;
    goto $bb26;

  $bb26:
    call $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i66, $i67 := rp_do_poll_loop_$bb26($i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i66, $i67, $i46, $i3);
    goto $bb26_last;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i66);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i66);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i77 := $ashr.i32($i76, 1);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    call {:si_unique_call 20} {:cexpr "AiopMask"} boogie_si_record_i8($i78);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i67, 1);
    call {:si_unique_call 21} {:cexpr "ch"} boogie_si_record_i32($i79);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i78);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i66, $i67 := $i78, $i79;
    goto $bb31_dummy;

  $bb28:
    assume $i70 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i71 := GetLineNumber($i3, $i46, $i67);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i8($i71);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    call {:si_unique_call 18} {:cexpr "line"} boogie_si_record_i32($i72);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref($i73, 8));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.3, $p74);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} rp_handle_port($p75);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb10:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i9, 136)), $mul.ref(16, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    $p26 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i9, 136)), $mul.ref(20, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i31 := sInW($i30);
    call {:si_unique_call 10} {:cexpr "tmp___0"} boogie_si_record_i16($i31);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i33 := $ashr.i32($i32, 8);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 15);
    call {:si_unique_call 11} {:cexpr "CtlMask"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    $i25 := $i34;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i35 := $i25;
    goto $bb15;

  $bb12:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i9, 136)), $mul.ref(24, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, $p17);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i22 := sInW($i21);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i16($i22);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2340);
    call {:si_unique_call 8} {:cexpr "CtlMask"} boogie_si_record_i32($i24);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb14;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb8;

  $bb48_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  $bb31_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  $bb35_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_62;

  $bb52_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;
}



const sInW: ref;

axiom sInW == $sub.ref(0, 138572);

procedure sInW($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation sInW($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} {:cexpr "sInW:arg:port"} boogie_si_record_i16($i0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i2 := inw_p($i1);
    call {:si_unique_call 36} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sInB: ref;

axiom sInB == $sub.ref(0, 139604);

procedure sInB($i0: i16) returns ($r: i8);
  free requires assertsPassed;



implementation sInB($i0: i16) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} {:cexpr "sInB:arg:port"} boogie_si_record_i16($i0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i2 := inb_p($i1);
    call {:si_unique_call 39} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const GetLineNumber: ref;

axiom GetLineNumber == $sub.ref(0, 140636);

procedure GetLineNumber($i0: i32, $i1: i32, $i2: i32) returns ($r: i8);
  free requires assertsPassed;



implementation GetLineNumber($i0: i32, $i1: i32, $i2: i32) returns ($r: i8)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} {:cexpr "GetLineNumber:arg:ctrl"} boogie_si_record_i32($i0);
    call {:si_unique_call 41} {:cexpr "GetLineNumber:arg:aiop"} boogie_si_record_i32($i1);
    call {:si_unique_call 42} {:cexpr "GetLineNumber:arg:ch"} boogie_si_record_i32($i2);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i0, 5);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 3);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i3, $i4);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $i2);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref($i7, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.4, $p8);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rp_handle_port: ref;

axiom rp_handle_port == $sub.ref(0, 141668);

procedure rp_handle_port($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.7, $M.8, $CurrAddr;



implementation rp_handle_port($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i16;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p43: ref;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.2, $p4);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 2147483648);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(56, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i15 := sInB($i14);
    call {:si_unique_call 45} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 63);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i17, $i19);
    call {:si_unique_call 46} {:cexpr "IntMask"} boogie_si_record_i32($i20);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.2, $p21);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i26 := sInW($i25);
    call {:si_unique_call 48} {:cexpr "tmp___0"} boogie_si_record_i16($i26);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    call {:si_unique_call 49} {:cexpr "ChanStatus"} boogie_si_record_i32($i27);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i20, 32);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i20, 4);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i27, 8);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i27, 8);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1292, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p41, $i40);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(424, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} __wake_up($p43, 1, 1, $0.ref);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1292, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.2, $p34);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb15;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} tty_port_tty_hangup($p37, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} rp_do_receive($p0, $p9, $i27);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_13 := printk.ref(.str.47);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_do_transmit: ref;

axiom rp_do_transmit == $sub.ref(0, 142700);

procedure rp_do_transmit($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.5;



implementation rp_do_transmit($p0: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i8;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i8;
  var $i109: i8;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $i114: i8;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $i120: i8;
  var $i121: i8;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p5 := tty_port_tty_get($p4);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} ldv_spin_lock();
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i31 := sInB($i30);
    call {:si_unique_call 58} {:cexpr "tmp"} boogie_si_record_i8($i31);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(255, $i32);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p34, $i33);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p5);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(1316, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.2, $p36);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i39 == 1);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $p89, $i90, $i91, $p92, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $i103 := rp_do_transmit_loop_$bb11($p0, $p36, $p40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $p89, $i90, $i91, $p92, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $i103);
    goto $bb11_last;

  $bb14:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    call {:si_unique_call 59} {:cexpr "_min1"} boogie_si_record_i32($i41);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    call {:si_unique_call 60} {:cexpr "_min2"} boogie_si_record_i32($i43);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i41, $i43);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.2, $p46);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(4096, $i47);
    call {:si_unique_call 61} {:cexpr "_min2___0"} boogie_si_record_i32($i48);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i45, $i48);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i51 := $sle.i32($i50, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i51 == 1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.2, $p52);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i54 := $sle.i32($i53, 0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i50, $sub.i32(0, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i32($i55, 2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i50, 1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.2, $p85);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, $i50);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p88, $i87);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.2, $p89);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 4095);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p92, $i91);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.2, $p93);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i94, $i50);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p96, $i95);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.2, $p97);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i98, $i50);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p100, $i99);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.2, $p36);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb33_dummy;

  $bb12:
    assume $i103 == 1;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.2, $p104);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.2, $p124);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i126 := $sle.i32($i125, 255);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} spin_unlock_irqrestore($p127, $u0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} tty_kref_put($p5);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i126 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} tty_wakeup($p5);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i106 == 1;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.2, $p107);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i109 := $lshr.i8($i108, 3);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i110 := $and.i8($i109, 3);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i112 := $mul.i32($i111, 8);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.2, $p113);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i115 := $lshr.i8($i114, 5);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i112, $i116);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i117);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.2, $p119);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i121 := $and.i8($i120, 7);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i64($i121);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p123 := $add.ref(xmit_flags, $mul.ref($i122, 8));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} clear_bit($i118, $p123);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i68 == 1;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.2, $p69);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.2, $p74);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.2, $p76);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, $i50);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, $sub.i64(0, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p75, $mul.ref($i80, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.2, $p81);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} sOutB($i73, $i84);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i56 == 1;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.2, $p57);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.2, $p59);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p60, $mul.ref($i63, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i65 := $sdiv.i32($i50, 2);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} outsw($i58, $p64, $i66);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb22;

  $bb18:
    assume $i49 == 1;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i50 := $i45;
    goto $bb20;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i45 := $i41;
    goto $bb17;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb9;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_14 := printk.ref.ref(.str.48, .str.49);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.2, $p9);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i8($i10, 3);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, 3);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 8);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.2, $p15);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i8($i16, 5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i14, $i18);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.2, $p21);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 7);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p25 := $add.ref(xmit_flags, $mul.ref($i24, 8));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} clear_bit($i20, $p25);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 143732);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 144764);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 69} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 70} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 145796);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p1 := external_alloc();
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 146828);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 75} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i32.ref($p0: ref, p.1: i32, p.2: i64, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i32.ref($p0: ref, p.1: i32, p.2: i64, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 76} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 77} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 78} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 79} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 83} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 85} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 147860);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 89} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 148892);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 90} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    return;
}



const outsw: ref;

axiom outsw == $sub.ref(0, 149924);

procedure outsw($i0: i32, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation outsw($i0: i32, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "outsw:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 92} {:cexpr "outsw:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 93} vslice_dummy_var_15 := devirtbounce.1(0, $i0, $p1, $i2);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    return;
}



const sOutB: ref;

axiom sOutB == $sub.ref(0, 150956);

procedure sOutB($i0: i16, $i1: i8);
  free requires assertsPassed;



implementation sOutB($i0: i16, $i1: i8)
{
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "sOutB:arg:port"} boogie_si_record_i16($i0);
    call {:si_unique_call 95} {:cexpr "sOutB:arg:value"} boogie_si_record_i8($i1);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} outb_p($i3, $i4);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    return;
}



const tty_wakeup: ref;

axiom tty_wakeup == $sub.ref(0, 151988);

procedure tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 153020);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.5;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_spin_unlock();
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 154052);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 155084);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 100} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 156116);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 157148);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    return;
}



const outb_p: ref;

axiom outb_p == $sub.ref(0, 158180);

procedure outb_p($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb_p($i0: i8, $i1: i32)
{
  var $i2: i32;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} {:cexpr "outb_p:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 105} {:cexpr "outb_p:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} outb($i3, $i1);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} slow_down_io();
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 159212);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 109} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 110} devirtbounce.2(0, $i0, $i1);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    return;
}



const slow_down_io: ref;

axiom slow_down_io == $sub.ref(0, 160244);

procedure slow_down_io();
  free requires assertsPassed;



implementation slow_down_io()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.2, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(208, 1)));
    call {:si_unique_call 111} devirtbounce.3($p0);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 161276);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const rp_do_receive: ref;

axiom rp_do_receive == $sub.ref(0, 162308);

procedure rp_do_receive($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.2, $M.7, $M.8, $CurrAddr;



implementation rp_do_receive($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i16;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i52: i32;
  var $i53: i1;
  var $i55: i32;
  var $i56: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i8;
  var $i57: i8;
  var $i54: i8;
  var $i51: i8;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $i68: i32;
  var $i27: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i16;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i16;
  var $i80: i32;
  var $i81: i16;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i64;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i16;
  var $i100: i32;
  var $i101: i16;
  var $i102: i8;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 115} {:cexpr "rp_do_receive:arg:ChanStatus"} boogie_si_record_i32($i2);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(52, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i9 := sInW($i8);
    call {:si_unique_call 117} {:cexpr "tmp"} boogie_si_record_i16($i9);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    call {:si_unique_call 118} {:cexpr "ToRecv"} boogie_si_record_i32($i10);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i2, 9984);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i2;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 32768);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i10);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i84 := tty_prepare_flip_string($p82, $p3, $i83);
    call {:si_unique_call 122} {:cexpr "space"} boogie_si_record_i32($i84);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i84, $i10);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i10;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i88 := $ashr.i32($i87, 1);
    call {:si_unique_call 135} {:cexpr "wRecv"} boogie_si_record_i32($i88);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i87, 1);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} tty_flip_buffer_push($p107);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb56:
    assume $i96 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.2, $p97);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i102 := sInB($i101);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.6, $p3);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i87);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i104, $sub.i64(0, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p103, $mul.ref($i105, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p106, $i102);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i89 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i88, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i90 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.2, $p91);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.6, $p3);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i88);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} insw($i92, $p93, $i94);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb44:
    assume $i85 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i86 := $sle.i32($i84, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i87 := $i84;
    goto $bb49;

  $bb46:
    assume $i86 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i10, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(52, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.2, $p69);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i74 := sInW($i73);
    call {:si_unique_call 132} {:cexpr "tmp___1"} boogie_si_record_i16($i74);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i76 == 1;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.2, $p77);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} sOutW($i81, 0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i27 := $i10;
    goto $bb16;

  $bb16:
    call $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i52, $i53, $i55, $i56, $i58, $i59, $i60, $i57, $i54, $i51, $p61, $i62, $i63, $i64, $i65, $i66, $i68, $i27, vslice_dummy_var_16 := rp_do_receive_loop_$bb16($p0, $p1, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i52, $i53, $i55, $i56, $i58, $i59, $i60, $i57, $i54, $i51, $p61, $i62, $i63, $i64, $i65, $i66, $i68, $i27, vslice_dummy_var_16);
    goto $bb16_last;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.2, $p28);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i33 := sInW($i32);
    call {:si_unique_call 124} {:cexpr "tmp___0"} boogie_si_record_i16($i33);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    call {:si_unique_call 125} {:cexpr "CharNStat"} boogie_si_record_i32($i34);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 2048);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i34;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, $p39);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, $i38);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.2, $p46);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, $i38);
    call {:si_unique_call 128} {:cexpr "CharNStat"} boogie_si_record_i32($i48);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 2048);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i48, 256);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i48, 1024);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i56 == 1);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i48, 512);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i57 := $i60;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i54 := $i57;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i51 := $i54;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i48);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i51);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_16 := tty_insert_flip_char($p61, $i64, $i66);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i27, 1);
    call {:si_unique_call 130} {:cexpr "ToRecv"} boogie_si_record_i32($i68);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i44 := $i68;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb24:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i44;
    goto $bb24_dummy;

  $bb36:
    assume $i59 == 1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i60 := 4;
    goto $bb38;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i57 := 2;
    goto $bb35;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i54 := 3;
    goto $bb32;

  $bb27:
    assume $i50 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb29;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i27, 1);
    call {:si_unique_call 127} {:cexpr "ToRecv"} boogie_si_record_i32($i43);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb23;

  $bb18:
    assume $i36 == 1;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i34, $sub.i32(0, 1281));
    call {:si_unique_call 126} {:cexpr "CharNStat"} boogie_si_record_i32($i37);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb20;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i2, 32768);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i2, 32768);
    call {:si_unique_call 119} {:cexpr "ChanStatus"} boogie_si_record_i32($i16);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, $p17);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} sOutW($i21, $sub.i16(0, 32768));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i22 := $i16;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;
}



const tty_port_tty_hangup: ref;

axiom tty_port_tty_hangup == $sub.ref(0, 163340);

procedure tty_port_tty_hangup($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation tty_port_tty_hangup($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "tty_port_tty_hangup:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 164372);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 140} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    return;
}



const sOutW: ref;

axiom sOutW == $sub.ref(0, 165404);

procedure sOutW($i0: i16, $i1: i16);
  free requires assertsPassed;



implementation sOutW($i0: i16, $i1: i16)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "sOutW:arg:port"} boogie_si_record_i16($i0);
    call {:si_unique_call 142} {:cexpr "sOutW:arg:value"} boogie_si_record_i16($i1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} outw_p($i3, $i4);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_char: ref;

axiom tty_insert_flip_char == $sub.ref(0, 166436);

procedure tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.2, $CurrAddr;



implementation tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i12: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i40: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i1);
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p4, $i2);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1064)), $mul.ref(0, 1)), $mul.ref(312, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i12);
    call {:si_unique_call 146} {:cexpr "change"} boogie_si_record_i32($i16);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i40 := tty_insert_flip_string_flags($p0, $p3, $p4, 1);
    call {:si_unique_call 151} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, $i21);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    call {:si_unique_call 148} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p36, $i35);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $p37 := char_buf_ptr($p7, $i32);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p3);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p37, $i38);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb12;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $p27);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p29 := flag_buf_ptr($p7, $i28);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.8, $p4);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p29, $i30);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.8, $p4);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb3;
}



const tty_prepare_flip_string: ref;

axiom tty_prepare_flip_string == $sub.ref(0, 167468);

procedure tty_prepare_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_prepare_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 152} {:cexpr "tty_prepare_flip_string:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const insw: ref;

axiom insw == $sub.ref(0, 168500);

procedure insw($i0: i32, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation insw($i0: i32, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} {:cexpr "insw:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 156} {:cexpr "insw:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 157} vslice_dummy_var_17 := devirtbounce.1(0, $i0, $p1, $i2);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 169532);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    return;
}



const flag_buf_ptr: ref;

axiom flag_buf_ptr == $sub.ref(0, 170564);

procedure flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "flag_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p2 := char_buf_ptr($p0, $i1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const char_buf_ptr: ref;

axiom char_buf_ptr == $sub.ref(0, 171596);

procedure char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "char_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const tty_insert_flip_string_flags: ref;

axiom tty_insert_flip_string_flags == $sub.ref(0, 172628);

procedure tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} {:cexpr "tty_insert_flip_string_flags:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 163} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const outw_p: ref;

axiom outw_p == $sub.ref(0, 173660);

procedure outw_p($i0: i16, $i1: i32);
  free requires assertsPassed;



implementation outw_p($i0: i16, $i1: i32)
{
  var $i2: i32;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} {:cexpr "outw_p:arg:value"} boogie_si_record_i16($i0);
    call {:si_unique_call 165} {:cexpr "outw_p:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} outw($i3, $i1);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} slow_down_io();
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    return;
}



const outw: ref;

axiom outw == $sub.ref(0, 174692);

procedure outw($i0: i16, $i1: i32);
  free requires assertsPassed;



implementation outw($i0: i16, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "outw:arg:value"} boogie_si_record_i16($i0);
    call {:si_unique_call 169} {:cexpr "outw:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 170} devirtbounce.4(0, $i0, $i1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    return;
}



const inb_p: ref;

axiom inb_p == $sub.ref(0, 175724);

procedure inb_p($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb_p($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} {:cexpr "inb_p:arg:port"} boogie_si_record_i32($i0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i1 := inb($i0);
    call {:si_unique_call 173} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} slow_down_io();
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 176756);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 176} $i1 := devirtbounce.5(0, $i0);
    call {:si_unique_call 177} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const inw_p: ref;

axiom inw_p == $sub.ref(0, 177788);

procedure inw_p($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation inw_p($i0: i32) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "inw_p:arg:port"} boogie_si_record_i32($i0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i1 := inw($i0);
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i16($i1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} slow_down_io();
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const inw: ref;

axiom inw == $sub.ref(0, 178820);

procedure inw($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation inw($i0: i32) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "inw:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 183} $i1 := devirtbounce.6(0, $i0);
    call {:si_unique_call 184} {:cexpr "value"} boogie_si_record_i16($i1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rp_open: ref;

axiom rp_open == $sub.ref(0, 179852);

procedure rp_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.5, $M.9, assertsPassed, $CurrAddr;



implementation rp_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $p52: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i16;
  var $i71: i32;
  var $i72: i16;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i16;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $p91: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i16;
  var $i103: i32;
  var $i104: i16;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i16;
  var $i110: i32;
  var $i111: i16;
  var $p113: ref;
  var $i114: i32;
  var $i115: i16;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $i119: i32;
  var $i120: i16;
  var $i121: i32;
  var $i122: i16;
  var $p123: ref;
  var $i124: i32;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $i128: i8;
  var $p129: ref;
  var $i130: i32;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $p134: ref;
  var $i135: i32;
  var $i136: i8;
  var $i137: i32;
  var $i138: i8;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i8;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i16;
  var $i150: i32;
  var $i151: i16;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i16;
  var $i159: i32;
  var $i160: i16;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i16;
  var $i169: i32;
  var $i170: i16;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $i176: i8;
  var $i177: i32;
  var $i178: i32;
  var $i179: i8;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i16;
  var $i185: i32;
  var $i186: i16;
  var $p187: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $p212: ref;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $i221: i8;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i16;
  var $i227: i32;
  var $i228: i16;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i32;
  var $i233: i1;
  var $p235: ref;
  var $i236: i8;
  var $i237: i32;
  var $i238: i32;
  var $i239: i8;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i16;
  var $i245: i32;
  var $i246: i16;
  var $p247: ref;
  var $p248: ref;
  var $i249: i64;
  var $i250: i64;
  var $i252: i32;
  var $i253: i1;
  var $i9: i32;
  var vslice_dummy_var_18: i16;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.2, $p2);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref($i4, 8));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.3, $p5);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i11 := ldv___get_free_pages_20(208, 0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 186} {:cexpr "page"} boogie_si_record_i64($i11);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.2, $p13);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 134217728);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i11);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p31, $p30);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p33, $p6);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} tty_port_tty_set($p10, $p0);
    $p34 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(420, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.2, $p34);
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i35);
    $p36 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(420, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p36);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    $p39 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(420, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p39, $i38);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p41 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i42 := constant_test_bit(31, $p41);
    call {:si_unique_call 195} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i249 := $load.i64($M.2, jiffies);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i250 := $add.i64($i249, 2);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} vslice_dummy_var_19 := mod_timer(rocket_timer, $i250);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i252 := tty_port_block_til_ready($p10, $p0, $p1);
    call {:si_unique_call 218} {:cexpr "retval"} boogie_si_record_i32($i252);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb45:
    assume $i253 == 1;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i9 := $i252;
    goto $bb3;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    $p46 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.2, $p46);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 231);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    $p52 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p52, $i50);
    $p54 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.2, $p54);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 8);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    $p60 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p60, $i58);
    $p61 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    $p66 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} out32($i65, $p67);
    $p68 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.2, $p68);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i73 := sInW($i72);
    call {:si_unique_call 198} {:cexpr "tmp___0"} boogie_si_record_i16($i73);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 8);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i76 == 1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1292, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p78, 0);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p79 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.2, $p79);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} sOutW($i83, 0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} sFlushRxFIFO($p44);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} sFlushTxFIFO($p44);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} sEnInterrupts($p44, 279);
    $p85 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.2, $p85);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 231);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    $p91 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p91, $i89);
    $p93 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.2, $p93);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i95, 8);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    $p99 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p99, $i97);
    $p100 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.2, $p100);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i16($i103);
    $p105 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} out32($i104, $p106);
    $p107 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.2, $p107);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_18 := sInW($i111);
    $p113 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.2, $p113);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} sOutW($i117, 0);
    $p118 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(24, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.2, $p118);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i119);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i16($i121);
    $p123 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(16, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.2, $p123);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 64);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i127);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} sOutB($i122, $i128);
    $p129 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(24, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.2, $p129);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    $p134 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(16, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.2, $p134);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i8($i137);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} sOutB($i133, $i138);
    $p140 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.2, $p140);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 127);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i8($i143);
    $p146 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p146, $i144);
    $p147 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.2, $p147);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i16($i150);
    $p152 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out32($i151, $p153);
    $p155 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1)), $mul.ref(6, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p155, $sub.i8(0, 118));
    $p156 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.2, $p156);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i159 := $zext.i16.i32($i158);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    $p161 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p162, $mul.ref(4, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} out32($i160, $p163);
    $p165 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1)), $mul.ref(50, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p165, 8);
    $p166 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.2, $p166);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i167);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i16($i169);
    $p171 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(48, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} out32($i170, $p173);
    $p175 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.2, $p175);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i178 := $or.i32($i177, 1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    $p181 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p181, $i179);
    $p182 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.2, $p182);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i16($i183);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i185 := $zext.i16.i32($i184);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i16($i185);
    $p187 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} out32($i186, $p188);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} set_bit(31, $p190);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.2, $p191);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i193 := $and.i32($i192, 112);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 16);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.2, $p196);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i197, 112);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 32);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.2, $p201);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 112);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 48);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.2, $p206);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 112);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 64);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} configure_r_port($p0, $p6, $0.ref);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.2, $p212);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 4111);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb37:
    assume $i215 == 1;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.2, $p217);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 4);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i220);
    $p223 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p223, $i221);
    $p224 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.2, $p224);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i226 := $trunc.i32.i16($i225);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i227 := $zext.i16.i32($i226);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i32.i16($i227);
    $p229 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} out32($i228, $p230);
    $p231 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.2, $p231);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    $p235 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.2, $p235);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i32($i236);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i238 := $or.i32($i237, 2);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i32.i8($i238);
    $p241 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p241, $i239);
    $p242 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.2, $p242);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i32.i16($i243);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i245 := $zext.i16.i32($i244);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i16($i245);
    $p247 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} out32($i246, $p248);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb39:
    assume $i233 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb34:
    assume $i209 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p210, 460800);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i204 == 1;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p205, 230400);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i199 == 1;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p200, 115200);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i194 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p195, 57600);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i76 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1292, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p77, 1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} atomic_inc(rp_num_ports_open);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} free_pages($i11, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(1312, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i18 := wait_for_completion_interruptible($p17);
    call {:si_unique_call 188} {:cexpr "retval"} boogie_si_record_i32($i18);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} free_pages($i11, 0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p20 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.2, $p20);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then $sub.i32(0, 11) else $sub.i32(0, 512));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i9 := $i25;
    goto $bb3;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb3;
}



const rp_close: ref;

axiom rp_close == $sub.ref(0, 180884);

procedure rp_close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.9, $M.5, $CurrAddr;



implementation rp_close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $i39: i8;
  var $i40: i8;
  var $i41: i64;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i16;
  var $i86: i32;
  var $i87: i16;
  var $p88: ref;
  var $i89: i32;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $p94: ref;
  var $i95: i32;
  var $i96: i16;
  var $i97: i32;
  var $i98: i16;
  var $p99: ref;
  var $i100: i32;
  var $i101: i8;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i8;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i16;
  var $i118: i32;
  var $i119: i16;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $i132: i8;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i16;
  var $i138: i32;
  var $i139: i16;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i8;
  var $i145: i8;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $i149: i8;
  var $i150: i8;
  var $i151: i32;
  var $i152: i32;
  var $i153: i64;
  var $p154: ref;
  var $i155: i8;
  var $i156: i8;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i64;
  var $i168: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $p178: ref;
  var $p179: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i8;
  var $i188: i8;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var vslice_dummy_var_20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i6 := rocket_paranoia_check($p4, .str.60);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i8 := tty_port_close_start($p5, $p0, $p1);
    call {:si_unique_call 222} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} mutex_lock_nested($p10, 0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, $p12);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i17 := sInB($i16);
    call {:si_unique_call 225} {:cexpr "tmp___1"} boogie_si_record_i8($i17);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i19, 250);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1304, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.2, $p21);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i32($i20, $i22);
    call {:si_unique_call 226} {:cexpr "timeout"} boogie_si_record_i32($i23);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} rp_wait_until_sent($p0, $i25);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.2, $p26);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i8($i27, 3);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i28, 3);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, 8);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.2, $p32);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i8($i33, 5);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i31, $i35);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.2, $p38);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i40 := $and.i8($i39, 7);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p42 := $add.ref(xmit_flags, $mul.ref($i41, 8));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} clear_bit($i37, $p42);
    $p44 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.2, $p44);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 254);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    $p50 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p50, $i48);
    $p51 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.2, $p51);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} out32($i55, $p57);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} sDisInterrupts($p11, 279);
    $p59 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.2, $p59);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 127);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    $p65 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p65, $i63);
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.2, $p66);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    $p71 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} out32($i70, $p72);
    $p74 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1)), $mul.ref(6, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p74, $sub.i8(0, 118));
    $p75 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.2, $p75);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(4, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} out32($i79, $p82);
    $p83 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(24, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.2, $p83);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    $p88 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(16, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.2, $p88);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i91, 64);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} sOutB($i87, $i93);
    $p94 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(24, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.2, $p94);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    $p99 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(16, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.2, $p99);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} sOutB($i98, $i103);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} sFlushRxFIFO($p11);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} sFlushTxFIFO($p11);
    $p104 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.2, $p104);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p108 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.2, $p108);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 253);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i8($i111);
    $p114 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p114, $i112);
    $p115 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.2, $p115);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    $p120 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} out32($i119, $p121);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.2, $p123);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 1024);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} rp_flush_buffer($p0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} tty_ldisc_flush($p0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.2, $p142);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i144 := $lshr.i8($i143, 3);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i145 := $and.i8($i144, 3);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i147 := $mul.i32($i146, 8);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.2, $p148);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i150 := $lshr.i8($i149, 5);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i147, $i151);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i152);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.2, $p154);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i156 := $and.i8($i155, 7);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i64($i156);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p158 := $add.ref(xmit_flags, $mul.ref($i157, 8));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} clear_bit($i153, $p158);
    $p159 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(416, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.2, $p159);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i161 == 1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.2, $p171);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p172);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p179 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(344, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} spin_lock_irq($p179);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.2, $p181);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i183 := $and.i64($i182, 1476395007);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p185, $i183);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1640, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.2, $p186);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i188 := $and.i8($i187, $sub.i8(0, 2));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p186, $i188);
    $p189 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(344, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} spin_unlock_irq($p189);
    $p190 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} mutex_unlock($p190);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} tty_port_tty_set($p5, $0.ref);
    $p191 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(512, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} __wake_up($p191, 1, 1, $0.ref);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1312, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} complete_all($p192);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} atomic_dec(rp_num_ports_open);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i174 == 1;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.2, $p175);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} free_pages($i177, 0);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p178, $0.ref);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i161 == 1;
    $p162 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(1048, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.2, $p162);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p170 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(424, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} __wake_up($p170, 1, 1, $0.ref);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i164 == 1;
    $p165 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(1048, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.2, $p165);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i167 := $zext.i32.i64($i166);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i168 := jiffies_to_msecs($i167);
    call {:si_unique_call 243} {:cexpr "tmp___2"} boogie_si_record_i32($i168);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_20 := msleep_interruptible($i168);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i126 == 1;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.2, $p128);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 251);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i8($i131);
    $p134 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p134, $i132);
    $p135 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.2, $p135);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i16($i136);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    $p140 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} out32($i139, $p141);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i106 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_write: ref;

axiom rp_write == $sub.ref(0, 181916);

procedure rp_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.5;



implementation rp_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i16;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i87: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i8;
  var $i131: i8;
  var $i132: i8;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $i136: i8;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $i142: i8;
  var $i143: i8;
  var $i144: i64;
  var $p145: ref;
  var $i78: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "rp_write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i2, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i8 := rocket_paranoia_check($p5, .str.59);
    call {:si_unique_call 256} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i11 := mutex_lock_interruptible_nested($p10, 0);
    call {:si_unique_call 258} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1316, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.2, $p15);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(1316, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.2, $p32);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i74, $i75, $p76 := 0, $i2, $p1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i75, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i81 := constant_test_bit(29, $p80);
    call {:si_unique_call 270} {:cexpr "tmp___2"} boogie_si_record_i32($i81);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i83 := $i74;
    assume {:branchcond $i82} true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i82 == 1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p84, $i85, $i86 := $p76, $i75, $i74;
    goto $bb41;

  $bb41:
    call $i87, $p84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $p101, $p102, $p103, $i104, $i105, $p106, $p107, $i108, $i109, $i110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $i121, $i122, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := rp_write_loop_$bb41($p5, $p80, $i87, $p84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $p101, $p102, $p103, $i104, $i105, $p106, $p107, $i108, $i109, $i110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $i121, $i122, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb41_last;

  $bb43:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.2, $p88);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32(4095, $i89);
    call {:si_unique_call 271} {:cexpr "_min2___0"} boogie_si_record_i32($i90);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i85, $i90);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i91 == 1);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i92 := $i90;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.2, $p93);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32(4096, $i94);
    call {:si_unique_call 272} {:cexpr "_min2___1"} boogie_si_record_i32($i95);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i92, $i95);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i96 == 1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i97 := $i95;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i98 := $sle.i32($i97, 0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i99 := $i86;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i97);
    call {:si_unique_call 273} {:cexpr "__len"} boogie_si_record_i64($i100);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.2, $p101);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.2, $p103);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i104);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p102, $mul.ref($i105, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.2;
    cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 274} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p106, $p84, $i100, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_2;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} ldv_spin_lock();
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.2, $p107);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, $i97);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 4095);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p111, $i110);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.2, $p112);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, $i97);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p115, $i114);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} spin_unlock_irqrestore($p116, $u0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i97);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p84, $mul.ref($i117, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($i85, $i97);
    call {:si_unique_call 277} {:cexpr "count"} boogie_si_record_i32($i119);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i86, $i97);
    call {:si_unique_call 278} {:cexpr "retval"} boogie_si_record_i32($i120);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i121 := constant_test_bit(29, $p80);
    call {:si_unique_call 280} {:cexpr "tmp___2"} boogie_si_record_i32($i121);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i87 := $i120;
    assume true;
    goto $bb42, $bb54;

  $bb54:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $p84, $i85, $i86 := $p118, $i119, $i120;
    goto $bb54_dummy;

  $bb42:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i83 := $i87;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i78 := $i83;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.2, $p146);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i148 := $sle.i32($i147, 255);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} mutex_unlock($p149);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i7 := $i78;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb61:
    assume $i148 == 1;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} tty_wakeup($p0);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb50:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i32($i99, 0);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i78 := $i99;
    goto $bb36;

  $bb55:
    assume $i123 == 1;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p124, $mul.ref(1316, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.2, $p125);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb57;

  $bb58:
    assume $i128 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.2, $p129);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i131 := $lshr.i8($i130, 3);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i132 := $and.i8($i131, 3);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i134 := $mul.i32($i133, 8);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.2, $p135);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i137 := $lshr.i8($i136, 5);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i134, $i138);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i139);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.2, $p141);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i143 := $and.i8($i142, 7);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i64($i143);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p145 := $add.ref(xmit_flags, $mul.ref($i144, 8));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} set_bit($i140, $p145);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb47:
    assume $i96 == 1;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i97 := $i92;
    goto $bb49;

  $bb44:
    assume $i91 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i92 := $i85;
    goto $bb46;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb39;

  $bb34:
    assume $i77 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i78 := $i74;
    goto $bb36;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p36);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb19;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, $p39);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb22:
    assume $i41 == 1;
    call {:si_unique_call 261} {:cexpr "rp_write:arg:_min1"} boogie_si_record_i32($i2);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    call {:si_unique_call 262} {:cexpr "_min2"} boogie_si_record_i32($i43);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i2, $i43);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i44 == 1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i45, $sub.i32(0, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 2);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i45, 1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i65 := $add.i32(0, $i45);
    call {:si_unique_call 265} {:cexpr "retval"} boogie_si_record_i32($i65);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i45);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p1, $mul.ref($i66, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i2, $i45);
    call {:si_unique_call 266} {:cexpr "count"} boogie_si_record_i32($i68);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} ldv_spin_lock();
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.2, $p69);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32($i70, $i45);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p72, $i71);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} spin_unlock_irqrestore($p73, $u0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i74, $i75, $p76 := $i65, $i68, $p67;
    goto $bb33;

  $bb30:
    assume $i53 == 1;
    $p54 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.2, $p54);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i45);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, $sub.i64(0, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p1, $mul.ref($i60, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.2, $p61);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} sOutB($i58, $i64);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i47 == 1;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i50 := $sdiv.i32($i45, 2);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} outsw($i49, $p1, $i51);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i45 := $i2;
    goto $bb26;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.2, $p19);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, $i2);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb14:
    assume $i21 == 1;
    $p22 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i27 := sInB($i26);
    call {:si_unique_call 260} {:cexpr "tmp___1"} boogie_si_record_i8($i27);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(255, $i28);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p30, $i29);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 512);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb54_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;
}



const rp_put_char: ref;

axiom rp_put_char == $sub.ref(0, 182948);

procedure rp_put_char($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.2;



implementation rp_put_char($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i8;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i8;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "rp_put_char:arg:ch"} boogie_si_record_i8($i1);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i5 := rocket_paranoia_check($p4, .str.53);
    call {:si_unique_call 286} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} mutex_lock_nested($p8, 0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} ldv_spin_lock();
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1316, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p11);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(1316, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.2, $p28);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    $p73 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.2, $p73);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} sOutB($i77, $i79);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.2, $p80);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32($i81, 1);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p83, $i82);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock_irqrestore($p84, $u0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} mutex_unlock($p85);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.2, $p38);
    call {:si_unique_call 291} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p43, $i42);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.2, $p44);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i39);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p47, $i1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 4095);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p51, $i50);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.2, $p52);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p55, $i54);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.2, $p56);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i8($i57, 3);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i59 := $and.i8($i58, 3);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i60, 8);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.2, $p62);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i8($i63, 5);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i61, $i65);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.2, $p68);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i70 := $and.i8($i69, 7);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p72 := $add.ref(xmit_flags, $mul.ref($i71, 8));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} set_bit($i67, $p72);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb12;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.2, $p15);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i23 := sInB($i22);
    call {:si_unique_call 290} {:cexpr "tmp___0"} boogie_si_record_i8($i23);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(255, $i24);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p26, $i25);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const rp_write_room: ref;

axiom rp_write_room == $sub.ref(0, 183980);

procedure rp_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rp_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i4 := rocket_paranoia_check($p3, .str.61);
    call {:si_unique_call 297} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(4095, $i8);
    call {:si_unique_call 298} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const rp_chars_in_buffer: ref;

axiom rp_chars_in_buffer == $sub.ref(0, 185012);

procedure rp_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rp_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i4 := rocket_paranoia_check($p3, .str.63);
    call {:si_unique_call 300} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const rp_ioctl: ref;

axiom rp_ioctl == $sub.ref(0, 186044);

procedure rp_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.5, $CurrAddr;



implementation rp_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i22: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "rp_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 302} {:cexpr "rp_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i2);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 5394436);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 5394436);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 5394437);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 5394438);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 5394438);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 515);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb15:
    assume $i14 == 1;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p6);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i31 := get_version($p5, $p30);
    call {:si_unique_call 310} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i22 := $i31;
    goto $bb27;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i29 := reset_rm2($p5, $p6);
    call {:si_unique_call 308} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i22 := $i29;
    goto $bb27;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p6);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i28 := get_ports($p5, $p27);
    call {:si_unique_call 306} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb27;

  $bb9:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 5394434);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 5394435);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i16 == 1);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p6);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i26 := set_config($p0, $p5, $p25);
    call {:si_unique_call 314} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i22 := $i26;
    goto $bb27;

  $bb20:
    assume $i16 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p6);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i24 := get_config($p5, $p23);
    call {:si_unique_call 312} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb27;

  $bb18:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 5394433);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb17;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p5);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i19 := copy_to_user($p6, $p18, 1648);
    call {:si_unique_call 316} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb27;

  $bb24:
    assume $i20 == 1;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 14);
    goto $bb26;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i8 := rocket_paranoia_check($p5, .str.58);
    call {:si_unique_call 304} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 6);
    goto $bb5;
}



const rp_set_termios: ref;

axiom rp_set_termios == $sub.ref(0, 187076);

procedure rp_set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.5;



implementation rp_set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i16;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i16;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i5 := rocket_paranoia_check($p4, .str.56);
    call {:si_unique_call 318} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    call {:si_unique_call 319} {:cexpr "cflag"} boogie_si_record_i32($i9);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 48);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i9, 48);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 16);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 1073741825));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p26, $i24);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} configure_r_port($p0, $p4, $p1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.2, $p28);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 4111);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.2, $p70);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 4111);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.2, $p112);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i113, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i114 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.2, $p116);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i118 := $sge.i32($i117, 0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb33;

  $bb34:
    assume $i118 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} rp_start($p0);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb21:
    assume $i73 == 1;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.2, $p75);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 4111);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb23;

  $bb24:
    assume $i78 == 1;
    $p79 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.2, $p79);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $p83 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.2, $p83);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i85, 2);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    $p89 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p89, $i87);
    $p90 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.2, $p90);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    $p95 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} out32($i94, $p96);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $p98 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.2, $p98);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, 4);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    $p104 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p104, $i102);
    $p105 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.2, $p105);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    $p110 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} out32($i109, $p111);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 4111);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb13;

  $bb14:
    assume $i36 == 1;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.2, $p38);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 251);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    $p44 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p44, $i42);
    $p45 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.2, $p45);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} out32($i49, $p51);
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.2, $p52);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p56 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.2, $p56);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 253);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    $p62 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p62, $i60);
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.2, $p63);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out32($i67, $p69);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i9, $sub.i32(0, 49));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.2, $p15);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 48);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, $i17);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p20, $i18);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_throttle: ref;

axiom rp_throttle == $sub.ref(0, 188108);

procedure rp_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation rp_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i4 := rocket_paranoia_check($p3, .str.52);
    call {:si_unique_call 327} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4096);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.2, $p23);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 253);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p30, $i27);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out32($i36, $p39);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p13);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} rp_send_xchar($p0, $i16);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_unthrottle: ref;

axiom rp_unthrottle == $sub.ref(0, 189140);

procedure rp_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation rp_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i4 := rocket_paranoia_check($p3, .str.52);
    call {:si_unique_call 331} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4096);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.2, $p23);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 2);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p30, $i27);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} out32($i36, $p39);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p13);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} rp_send_xchar($p0, $i16);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_stop: ref;

axiom rp_stop == $sub.ref(0, 190172);

procedure rp_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation rp_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i4 := rocket_paranoia_check($p3, .str.50);
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i12 := sInB($i11);
    call {:si_unique_call 337} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 254);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p24, $i21);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} out32($i30, $p33);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_start: ref;

axiom rp_start == $sub.ref(0, 191204);

procedure rp_start($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation rp_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i64;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i4 := rocket_paranoia_check($p3, .str.50);
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.2, $p8);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p15, $i12);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, $p17);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out32($i21, $p24);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.2, $p25);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i8($i26, 3);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i27, 3);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i29, 8);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.2, $p31);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i8($i32, 5);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i30, $i34);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.2, $p37);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 7);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p41 := $add.ref(xmit_flags, $mul.ref($i40, 8));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} set_bit($i36, $p41);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_hangup: ref;

axiom rp_hangup == $sub.ref(0, 192236);

procedure rp_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.2, $M.9, $CurrAddr;



implementation rp_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var $i32: i64;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i16;
  var $i74: i32;
  var $i75: i16;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i16;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i16;
  var $p93: ref;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $i100: i32;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i8;
  var $p110: ref;
  var $p112: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i4 := rocket_paranoia_check($p3, .str.55);
    call {:si_unique_call 344} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} rp_flush_buffer($p0);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} ldv_spin_lock();
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.2, $p7);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 134217728);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(420, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i8($i18, 3);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, 3);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i21, 8);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.2, $p23);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i8($i24, 5);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i22, $i26);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.2, $p29);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, 7);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p33 := $add.ref(xmit_flags, $mul.ref($i32, 8));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} clear_bit($i28, $p33);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(344, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} spin_unlock_irqrestore($p35, $u0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} tty_port_hangup($p36);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    $p39 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1)), $mul.ref(50, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p39, 10);
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(48, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} out32($i44, $p47);
    $p49 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.2, $p49);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 254);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    $p55 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p55, $i53);
    $p56 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.2, $p56);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    $p61 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} out32($i60, $p62);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} sDisInterrupts($p37, 279);
    $p64 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.2, $p64);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 127);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    $p70 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p70, $i68);
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.2, $p71);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    $p76 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} out32($i75, $p77);
    $p79 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1)), $mul.ref(6, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p79, $sub.i8(0, 118));
    $p80 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.2, $p80);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    $p85 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(88, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(4, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} out32($i84, $p87);
    $p88 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(24, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.2, $p88);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    $p93 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(16, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.2, $p93);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 64);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} sOutB($i92, $i98);
    $p99 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(24, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.2, $p99);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    $p104 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(16, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.2, $p104);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} sOutB($i103, $i108);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(688, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} clear_bit(31, $p110);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(424, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} __wake_up($p112, 1, 1, $0.ref);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} atomic_dec(rp_num_ports_open);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(344, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} spin_unlock_irqrestore($p12, $u0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_break: ref;

axiom rp_break == $sub.ref(0, 193268);

procedure rp_break($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.2;



implementation rp_break($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} {:cexpr "rp_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i5 := rocket_paranoia_check($p4, .str.62);
    call {:si_unique_call 363} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} ldv_spin_lock();
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.2, $p30);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 239);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p37, $i34);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, $p39);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} out32($i43, $p46);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} spin_unlock_irqrestore($p47, $u0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p11);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 16);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p18, $i15);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} out32($i24, $p27);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const rp_flush_buffer: ref;

axiom rp_flush_buffer == $sub.ref(0, 194300);

procedure rp_flush_buffer($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.2, $CurrAddr;



implementation rp_flush_buffer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i4 := rocket_paranoia_check($p3, .str.57);
    call {:si_unique_call 369} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} ldv_spin_lock();
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p6, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p7, 0);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} spin_unlock_irqrestore($p9, $u0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} tty_wakeup($p0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} sFlushTxFIFO($p10);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_wait_until_sent: ref;

axiom rp_wait_until_sent == $sub.ref(0, 195332);

procedure rp_wait_until_sent($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.9;



implementation rp_wait_until_sent($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i29: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var vslice_dummy_var_21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "rp_wait_until_sent:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i5 := rocket_paranoia_check($p4, .str.64);
    call {:si_unique_call 376} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.2, jiffies);
    call {:si_unique_call 377} {:cexpr "orig_jiffies"} boogie_si_record_i64($i8);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i30, $p31, $i32, $i33, $i29, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p49, $i50, $i51, vslice_dummy_var_21 := rp_wait_until_sent_loop_$bb5($i1, $p4, $i8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i30, $p31, $i32, $i33, $i29, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p49, $i50, $i51, vslice_dummy_var_21);
    goto $bb5_last;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.2, $p9);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i14 := sInB($i13);
    call {:si_unique_call 379} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    call {:si_unique_call 380} {:cexpr "txcnt"} boogie_si_record_i32($i15);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i15, 250);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1304, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i33 := $sdiv.i32($i30, $i32);
    call {:si_unique_call 383} {:cexpr "check_time"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    $i29 := $i33;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i1, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i29;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i47 := jiffies_to_msecs($i46);
    call {:si_unique_call 388} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} vslice_dummy_var_21 := msleep_interruptible($i47);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p49 := get_current();
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i50 := signal_pending($p49);
    call {:si_unique_call 392} {:cexpr "tmp___4"} boogie_si_record_i32($i50);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb25:
    assume $i51 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p52 := get_current();
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 10656)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p53, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i44 == 1;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i45 := 1;
    goto $bb24;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i8);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.2, jiffies);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i36, $i38);
    call {:si_unique_call 386} {:cexpr "exit_time"} boogie_si_record_i32($i39);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, $i29);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i29;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb21;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i42 := $i39;
    goto $bb20;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, $p17);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i22 := sInB($i21);
    call {:si_unique_call 382} {:cexpr "tmp___1"} boogie_si_record_i8($i22);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1304, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i28 := $sdiv.i32(50, $i27);
    call {:si_unique_call 385} {:cexpr "check_time"} boogie_si_record_i32($i28);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb12;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb5_last:
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_2151;
}



const rp_send_xchar: ref;

axiom rp_send_xchar == $sub.ref(0, 196364);

procedure rp_send_xchar($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation rp_send_xchar($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i8;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "rp_send_xchar:arg:ch"} boogie_si_record_i8($i1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i5 := rocket_paranoia_check($p4, .str.54);
    call {:si_unique_call 395} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i13 := sInB($i12);
    call {:si_unique_call 397} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.2, $p19);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} sOutB($i23, $i25);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_22 := sWriteTxPrioByte($p7, $i17);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rp_tiocmget: ref;

axiom rp_tiocmget == $sub.ref(0, 197396);

procedure rp_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rp_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i8;
  var $i11: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i10 := sInB($i9);
    call {:si_unique_call 401} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 402} {:cexpr "ChanStatus"} boogie_si_record_i32($i11);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 403} {:cexpr "control"} boogie_si_record_i32($i16);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i18 := sGetChanRI($p17);
    call {:si_unique_call 405} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i16, 2);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 4 else 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i16, 4);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then 2 else 0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i21, $i24);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i11, 8);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i28 := (if $i27 == 1 then 64 else 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i25, $i28);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i18, 0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 128 else 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i29, $i31);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i11, 16);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i35 := (if $i34 == 1 then 256 else 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i32, $i35);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i11, 32);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i36, $i37);
    call {:si_unique_call 406} {:cexpr "result"} boogie_si_record_i32($i38);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;
}



const rp_tiocmset: ref;

axiom rp_tiocmset == $sub.ref(0, 198428);

procedure rp_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation rp_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $p53: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p61: ref;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "rp_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 408} {:cexpr "rp_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 4);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i1, 2);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i2, 4);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i2, 2);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.2, $p55);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} out32($i59, $p62);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.2, $p46);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 251);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p53, $i50);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.2, $p34);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 253);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p41, $i38);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.2, $p22);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 4);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p29, $i26);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 2);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p17, $i14);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const out32: ref;

axiom out32 == $sub.ref(0, 199460);

procedure out32($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation out32($i0: i16, $p1: ref)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "out32:arg:port"} boogie_si_record_i16($i0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i2 := get_unaligned_le32($p1);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} outl_p($i2, $i3);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    return;
}



const get_unaligned_le32: ref;

axiom get_unaligned_le32 == $sub.ref(0, 200492);

procedure get_unaligned_le32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_unaligned_le32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i2 := __le32_to_cpup($p1);
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const outl_p: ref;

axiom outl_p == $sub.ref(0, 201524);

procedure outl_p($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation outl_p($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} {:cexpr "outl_p:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 417} {:cexpr "outl_p:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} outl($i0, $i1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} slow_down_io();
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    return;
}



const outl: ref;

axiom outl == $sub.ref(0, 202556);

procedure outl($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation outl($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "outl:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 421} {:cexpr "outl:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 422} devirtbounce.7(0, $i0, $i1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    return;
}



const __le32_to_cpup: ref;

axiom __le32_to_cpup == $sub.ref(0, 203588);

procedure __le32_to_cpup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __le32_to_cpup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.2, $p0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sGetChanRI: ref;

axiom sGetChanRI == $sub.ref(0, 204620);

procedure sGetChanRI($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sGetChanRI($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i8;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i35: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    call {:si_unique_call 423} {:cexpr "ChanNum"} boogie_si_record_i32($i4);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(52, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(12, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p36);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 4);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i35 := $i54;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i22 := $i35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(3, 4));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i45 := sInB($i44);
    call {:si_unique_call 431} {:cexpr "tmp___1"} boogie_si_record_i8($i45);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i4);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref($i47, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.10, $p48);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i46, $i50);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 432} {:cexpr "RingInd"} boogie_si_record_i32($i53);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 8);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i32 := sInB($i31);
    call {:si_unique_call 428} {:cexpr "tmp___0"} boogie_si_record_i8($i32);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 16);
    call {:si_unique_call 429} {:cexpr "RingInd"} boogie_si_record_i32($i34);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i13 := sInB($i12);
    call {:si_unique_call 425} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i4);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref($i15, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.10, $p16);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i14, $i18);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 426} {:cexpr "RingInd"} boogie_si_record_i32($i21);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;
}



const rocket_paranoia_check: ref;

axiom rocket_paranoia_check == $sub.ref(0, 205652);

procedure rocket_paranoia_check($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rocket_paranoia_check($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i4: i32;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(0, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 5394433);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_23 := printk.ref.ref(.str.51, $p1);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;
}



const sWriteTxPrioByte: ref;

axiom sWriteTxPrioByte == $sub.ref(0, 206684);

procedure sWriteTxPrioByte($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sWriteTxPrioByte($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i16;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i8;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 435} {:cexpr "sWriteTxPrioByte:arg:Data"} boogie_si_record_i8($i1);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(52, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i8 := sInB($i7);
    call {:si_unique_call 437} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.2, $p46);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} sOutB($i50, $i52);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, $p11);
    call {:si_unique_call 438} {:cexpr "IndexAddr"} boogie_si_record_i32($i12);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(76, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} sOutW($i15, $i20);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.2, $p21);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i26 := sInB($i25);
    call {:si_unique_call 441} {:cexpr "tmp"} boogie_si_record_i8($i26);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(84, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p30, $i32);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p33, $i1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i12);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} out32($i36, $p37);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(76, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.2, $p38);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p30, $i39);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p40, $sub.i8(0, 127));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p41, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i12);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} out32($i44, $p45);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb5;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 207716);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 1} true;
    call {:si_unique_call 446} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 447} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 208748);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 448} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 449} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 450} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 209780);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p0 := devirtbounce.8(0, current_task);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 210812);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 453} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 455} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 211844);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(8, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.9, $p2);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 458} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 212876);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 460} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 213908);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 463} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 214940);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 465} $i2 := devirtbounce.9(0, $p1, $i0);
    call {:si_unique_call 466} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sFlushTxFIFO: ref;

axiom sFlushTxFIFO == $sub.ref(0, 215972);

procedure sFlushTxFIFO($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sFlushTxFIFO($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $p65: ref;
  var $i66: i32;
  var $i67: i16;
  var $i68: i32;
  var $i69: i16;
  var $i70: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i16;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i16;
  var $i89: i32;
  var $i90: i16;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i16;
  var $i96: i32;
  var $i97: i16;
  var $p99: ref;
  var $i100: i32;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $p105: ref;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i16;
  var $p111: ref;
  var $i112: i32;
  var $i113: i16;
  var $i114: i32;
  var $i115: i16;
  var $p117: ref;
  var $i118: i32;
  var $i119: i16;
  var $i120: i32;
  var $i121: i16;
  var $p123: ref;
  var $i124: i32;
  var $i125: i16;
  var $i126: i32;
  var $i127: i16;
  var $p129: ref;
  var $i130: i32;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $p135: ref;
  var $i136: i32;
  var $i137: i16;
  var $i138: i32;
  var $i139: i16;
  var $p141: ref;
  var $i142: i32;
  var $i143: i16;
  var $i144: i32;
  var $i145: i16;
  var $p147: ref;
  var $i148: i32;
  var $i149: i16;
  var $i150: i32;
  var $i151: i16;
  var $p153: ref;
  var $i154: i32;
  var $i155: i16;
  var $i156: i32;
  var $i157: i16;
  var $p159: ref;
  var $i160: i32;
  var $i161: i16;
  var $i162: i32;
  var $i163: i16;
  var $p165: ref;
  var $i166: i32;
  var $i167: i16;
  var $i168: i32;
  var $i169: i16;
  var $p171: ref;
  var $i172: i32;
  var $i173: i16;
  var $i174: i32;
  var $i175: i16;
  var $p177: ref;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i16;
  var $p183: ref;
  var $i184: i32;
  var $i185: i16;
  var $i186: i32;
  var $i187: i16;
  var $p189: ref;
  var $i190: i32;
  var $i191: i16;
  var $i192: i32;
  var $i193: i16;
  var $p195: ref;
  var $i196: i32;
  var $i197: i16;
  var $i198: i32;
  var $i199: i16;
  var $p201: ref;
  var $i202: i32;
  var $i203: i16;
  var $i204: i32;
  var $i205: i16;
  var vslice_dummy_var_24: i8;
  var vslice_dummy_var_25: i8;
  var vslice_dummy_var_26: i8;
  var vslice_dummy_var_27: i8;
  var vslice_dummy_var_28: i8;
  var vslice_dummy_var_29: i8;
  var vslice_dummy_var_30: i8;
  var vslice_dummy_var_31: i8;
  var vslice_dummy_var_32: i8;
  var vslice_dummy_var_33: i8;
  var vslice_dummy_var_34: i8;
  var vslice_dummy_var_35: i8;
  var vslice_dummy_var_36: i8;
  var vslice_dummy_var_37: i8;
  var vslice_dummy_var_38: i8;
  var vslice_dummy_var_39: i8;
  var vslice_dummy_var_40: i8;
  var vslice_dummy_var_41: i8;
  var vslice_dummy_var_42: i8;
  var vslice_dummy_var_43: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(52, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i6 := sInB($i5);
    call {:si_unique_call 468} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} sStopRxProcessor($p0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_24 := sInB($i35);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.2, $p93);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_25 := sInB($i97);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.2, $p99);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_26 := sInB($i103);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.2, $p105);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_27 := sInB($i109);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.2, $p111);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_28 := sInB($i115);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.2, $p117);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_29 := sInB($i121);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.2, $p123);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i125);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_30 := sInB($i127);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.2, $p129);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_31 := sInB($i133);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.2, $p135);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i16($i136);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_32 := sInB($i139);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.2, $p141);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_33 := sInB($i145);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.2, $p147);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i16($i150);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_34 := sInB($i151);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.2, $p153);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i16($i154);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i16($i156);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_35 := sInB($i157);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.2, $p159);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i16($i160);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i161);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_36 := sInB($i163);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.2, $p165);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i16($i166);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i167);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_37 := sInB($i169);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.2, $p171);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i16($i172);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i173);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i174);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_38 := sInB($i175);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.2, $p177);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i16($i178);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i179);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_39 := sInB($i181);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.2, $p183);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i16($i184);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i186 := $zext.i16.i32($i185);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i16($i186);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_40 := sInB($i187);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.2, $p189);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i16($i190);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i191);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_41 := sInB($i193);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.2, $p195);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i16($i196);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i198 := $zext.i16.i32($i197);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i16($i198);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_42 := sInB($i199);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.2, $p201);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i16($i202);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i32($i203);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_43 := sInB($i205);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    call {:si_unique_call 473} {:cexpr "Ch"} boogie_si_record_i8($i39);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i39);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 16);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} sOutB($i44, $i47);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i39);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} sOutB($i52, $i54);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.2, $p55);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} sOutW($i59, $i64);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.2, $p65);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} sOutW($i69, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i30, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.2, $p86);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} out32($i90, $p92);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i70 == 1;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.2, $p72);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, 1);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p78, $i76);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.2, $p79);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} out32($i83, $p85);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.2, $p16);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 254);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p22, $i20);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} out32($i27, $p29);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sStopRxProcessor: ref;

axiom sStopRxProcessor == $sub.ref(0, 217004);

procedure sStopRxProcessor($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sStopRxProcessor($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p3);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p5, $i4);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1)), $mul.ref(1, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.2, $p7);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p9, $i8);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p10, 10);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1)), $mul.ref(3, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.2, $p12);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p14, $i13);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.2, $p15);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} out32($i19, $p20);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 218036);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.9, $M.5, $CurrAddr;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 500} devirtbounce.10(0, $p1, $p1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_hangup: ref;

axiom tty_port_hangup == $sub.ref(0, 219068);

procedure tty_port_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_port_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    return;
}



const sDisInterrupts: ref;

axiom sDisInterrupts == $sub.ref(0, 220100);

procedure sDisInterrupts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sDisInterrupts($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $i51: i8;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} {:cexpr "sDisInterrupts:arg:Flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p3);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 7);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i9 := $xor.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i5, $i11);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p15, $i13);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(148, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} out32($i20, $p22);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.2, $p24);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i30 := $xor.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i26, $i32);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p36, $i34);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out32($i41, $p43);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i1, 256);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i45 == 1;
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.2, $p46);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i51 := sInB($i50);
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i8($i51);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.2, $p53);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref($i55, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.11, $p56);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i52, $i58);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    call {:si_unique_call 506} {:cexpr "Mask"} boogie_si_record_i8($i60);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i60);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} sOutB($i65, $i67);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 221132);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 509} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    return;
}



const configure_r_port: ref;

axiom configure_r_port == $sub.ref(0, 222164);

procedure configure_r_port($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.2, $M.5;



implementation configure_r_port($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $p39: ref;
  var $i24: i32;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i16;
  var $p72: ref;
  var $p73: ref;
  var $i58: i32;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i16;
  var $i87: i32;
  var $i88: i16;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i16;
  var $i105: i32;
  var $i106: i16;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i16;
  var $i120: i32;
  var $i121: i16;
  var $p122: ref;
  var $p123: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i8;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i16;
  var $i136: i32;
  var $i137: i16;
  var $p138: ref;
  var $p139: ref;
  var $i124: i32;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $p143: ref;
  var $i144: i8;
  var $i145: i8;
  var $i146: i32;
  var $i147: i64;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i1;
  var $i156: i64;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $p161: ref;
  var $i162: i8;
  var $i163: i8;
  var $i164: i32;
  var $i165: i64;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i1;
  var $p174: ref;
  var $i175: i8;
  var $i176: i8;
  var $i177: i32;
  var $i178: i64;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $i185: i32;
  var $p186: ref;
  var $i187: i8;
  var $p189: ref;
  var $i190: i32;
  var $i191: i8;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i16;
  var $i197: i32;
  var $i198: i16;
  var $p199: ref;
  var $p200: ref;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $p205: ref;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i32;
  var $i211: i8;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i16;
  var $i217: i32;
  var $i218: i16;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i32;
  var $i223: i32;
  var $p224: ref;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $i229: i32;
  var $i230: i8;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i16;
  var $i236: i32;
  var $i237: i16;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $i248: i16;
  var $i249: i32;
  var $i250: i16;
  var $i251: i16;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i32;
  var $i259: i32;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $p271: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i32;
  var $i276: i1;
  var $p278: ref;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $p285: ref;
  var $p286: ref;
  var $p288: ref;
  var $i289: i32;
  var $i290: i32;
  var $i291: i1;
  var $p292: ref;
  var $i293: i32;
  var $i294: i32;
  var $p295: ref;
  var $p297: ref;
  var $i298: i32;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $i303: i32;
  var $p304: ref;
  var $p306: ref;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i311: i32;
  var $i312: i32;
  var $p313: ref;
  var $p314: ref;
  var $i315: i32;
  var $i316: i32;
  var $p317: ref;
  var $i318: i32;
  var $i319: i32;
  var $i320: i1;
  var $i321: i1;
  var $p323: ref;
  var $i324: i8;
  var $i325: i32;
  var $i326: i32;
  var $i327: i8;
  var $p329: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i16;
  var $i333: i32;
  var $i334: i16;
  var $p335: ref;
  var $p336: ref;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i32;
  var $i342: i8;
  var $p344: ref;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i8;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i16;
  var $i356: i32;
  var $i357: i16;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p362: ref;
  var $i363: i8;
  var $i364: i32;
  var $i365: i32;
  var $i366: i8;
  var $p368: ref;
  var $p369: ref;
  var $i370: i32;
  var $i371: i16;
  var $i372: i32;
  var $i373: i16;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p378: ref;
  var $i379: i32;
  var $i380: i1;
  var $p383: ref;
  var $i384: i8;
  var $i385: i32;
  var $i386: i32;
  var $i387: i8;
  var $p390: ref;
  var $p392: ref;
  var $i393: i32;
  var $i394: i16;
  var $i395: i32;
  var $i396: i16;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $i403: i32;
  var $i404: i1;
  var $i405: i1;
  var $i406: i1;
  var $i407: i1;
  var $i408: i1;
  var $i409: i1;
  var $p410: ref;
  var $i411: i32;
  var $i412: i32;
  var $i413: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    call {:si_unique_call 510} {:cexpr "cflag"} boogie_si_record_i32($i6);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 48);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 48);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    $p26 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.2, $p26);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 254);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    $p32 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p32, $i30);
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out32($i37, $p39);
    assume {:verifier.code 0} true;
    $i24 := 9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i6, 64);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    $p60 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.2, $p60);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 247);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    $p66 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p66, $i64);
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.2, $p67);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out32($i71, $p73);
    assume {:verifier.code 0} true;
    $i58 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i6, 256);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i75 == 1);
    $p126 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.2, $p126);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 251);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    $p132 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p132, $i130);
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.2, $p133);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i16($i136);
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} out32($i137, $p139);
    assume {:verifier.code 0} true;
    $i124 := $i58;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i140 := tty_get_baud_rate($p0);
    call {:si_unique_call 522} {:cexpr "tmp"} boogie_si_record_i32($i140);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $i140;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.2, $p143);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i145 := $and.i8($i144, 7);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i147, 4));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.12, $p148);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i150 := $ashr.i32($i142, 1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i151 := $add.i32($i149, $i150);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i152 := $sdiv.i32($i151, $i142);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i153 := $add.i32($i152, $sub.i32(0, 1));
    call {:si_unique_call 523} {:cexpr "divisor"} boogie_si_record_i32($i153);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i154 := $sgt.i32($i153, 8191);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i154 == 1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i153, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i170, $i171 := $i142, $i153;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i172 := $sgt.i32($i171, 8191);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i172 == 1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i171, 0);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $i183, $i184 := $i170, $i171;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i185 := $sdiv.i32($i183, $i124);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1304, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p186, $i185);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i184);
    $p189 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(140, 1)), $mul.ref(2, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p189, $i187);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i190 := $ashr.i32($i184, 8);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i8($i190);
    $p193 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(140, 1)), $mul.ref(3, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p193, $i191);
    $p194 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.2, $p194);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i16($i195);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i196);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i16($i197);
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(140, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} out32($i198, $p200);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} tty_encode_baud_rate($p0, $i183, $i183);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i6, 0);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i201 == 1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.2, $p221);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, $sub.i32(0, 3));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p224, $i223);
    $p226 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.2, $p226);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i229 := $and.i32($i228, 127);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i230 := $trunc.i32.i8($i229);
    $p232 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p232, $i230);
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.2, $p233);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i32.i16($i234);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i235);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i16($i236);
    $p238 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} out32($i237, $p239);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i240 := $and.i32($i6, 2048);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i241 == 1);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} ldv_spin_lock();
    $p246 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.2, $p246);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i16($i247);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i249 := $zext.i16.i32($i248);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i32.i16($i249);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i251 := sInW($i250);
    call {:si_unique_call 534} {:cexpr "tmp___1"} boogie_si_record_i16($i251);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i252 := $zext.i16.i32($i251);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i253 := $and.i32($i252, 8);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i254 == 1);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1292, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p256, 0);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.2, $p257);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i259 := $or.i32($i258, 4);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p260, $i259);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} spin_unlock_irqrestore($p261, $u0);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p262, 767);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.2, $p264);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 16);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.2, $p273);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i275 := $and.i32($i274, 2);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb48;

  $bb48:
    assume !($i276 == 1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.2, $p278);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i280 := $and.i32($i279, 8);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p286, 0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.2, $p288);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i290 := $and.i32($i289, 4);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i290, 0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.2, $p297);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i299 := $and.i32($i298, 1);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.2, $p314);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i316 := $and.i32($i315, 12288);
    call {:si_unique_call 536} {:cexpr "rocketMode"} boogie_si_record_i32($i316);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.2, $p317);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i319 := $and.i32($i318, 1024);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb63;

  $bb63:
    assume !($i320 == 1);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i316, 4096);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i321 == 1);
    $p362 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.2, $p362);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i363);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i365 := $and.i32($i364, 191);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i366 := $trunc.i32.i8($i365);
    $p368 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p368, $i366);
    $p369 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.2, $p369);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i32.i16($i370);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i372 := $zext.i16.i32($i371);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i373 := $trunc.i32.i16($i372);
    $p374 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p374);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out32($i373, $p375);
    $p376 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p376, 0);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i379 := $load.i32($M.2, $p378);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i384 := $load.i8($M.2, $p383);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i385 := $zext.i8.i32($i384);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i386 := $or.i32($i385, 2);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i32.i8($i386);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p390, $i387);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i393 := $load.i32($M.2, $p392);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i394 := $trunc.i32.i16($i393);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i395 := $zext.i16.i32($i394);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i396 := $trunc.i32.i16($i395);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p399 := $bitcast.ref.ref($p398);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} out32($i396, $p399);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    $p400 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(0, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.2, $p400);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p401, $mul.ref(0, 136)), $mul.ref(12, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i403 := $load.i32($M.2, $p402);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 4);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    return;

  $bb71:
    assume $i404 == 1;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i405 := $slt.i32($i316, 4096);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    $i406 := $slt.i32($i316, 8192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i316, 8192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i411 := $load.i32($M.2, $p410);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i412 := $and.i32($i411, 1024);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i413 := $ne.i32($i412, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i413 == 1);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} sSetInterfaceMode($p4, 0);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i413 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} sSetInterfaceMode($p4, 24);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb78:
    assume $i407 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} sSetInterfaceMode($p4, 8);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb76:
    assume $i406 == 1;
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i316, 4096);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i408 == 1);
    goto $bb80;

  $bb81:
    assume $i408 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} sSetInterfaceMode($p4, 16);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb74:
    assume $i405 == 1;
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i316, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i409} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb80;

  $bb83:
    assume $i409 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb67:
    assume $i380 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb62;

  $bb62:
    $p323 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.2, $p323);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i326 := $and.i32($i325, 191);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i32.i8($i326);
    $p329 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p329, $i327);
    $p330 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.2, $p330);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i16($i331);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i333 := $zext.i16.i32($i332);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i334 := $trunc.i32.i16($i333);
    $p335 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p336 := $bitcast.ref.ref($p335);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} out32($i334, $p336);
    $p338 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.2, $p338);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i341 := $or.i32($i340, 64);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i342 := $trunc.i32.i8($i341);
    $p344 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p344, $i342);
    $p346 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.2, $p346);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i349 := $and.i32($i348, 253);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i32.i8($i349);
    $p352 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p352, $i350);
    $p353 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.2, $p353);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i32.i16($i354);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i356 := $zext.i16.i32($i355);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i357 := $trunc.i32.i16($i356);
    $p358 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p359 := $bitcast.ref.ref($p358);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} out32($i357, $p359);
    $p360 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p360, 1);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb62;

  $bb55:
    assume $i300 == 1;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.2, $p301);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i303 := $or.i32($i302, 2048);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p304, $i303);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.2, $p306);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i308 := $and.i32($i307, 4);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, 0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i309 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.2, $p310);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i312 := $or.i32($i311, 512);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p313, $i312);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb52:
    assume $i291 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.2, $p292);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i294 := $or.i32($i293, 1280);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p295, $i294);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.2, $p282);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i284 := $or.i32($i283, 2048);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p285, $i284);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb47;

  $bb43:
    assume $i267 == 1;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.2, $p268);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i270 := $or.i32($i269, 1280);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p271, $i270);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i254 == 1;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1292, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p255, 1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i241 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.2, $p242);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i244 := $and.i32($i243, $sub.i32(0, 5));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p245, $i244);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i201 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.2, $p202);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i204 := $or.i32($i203, 2);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p205, $i204);
    $p207 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.2, $p207);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i210 := $or.i32($i209, 128);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    $p213 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p213, $i211);
    $p214 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.2, $p214);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i16($i215);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i32.i16($i217);
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} out32($i218, $p220);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.2, $p174);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i176 := $and.i8($i175, 7);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i177);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i178, 4));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.12, $p179);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i181 := $sdiv.i32($i180, 9600);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i182 := $add.i32($i181, $sub.i32(0, 1));
    call {:si_unique_call 527} {:cexpr "divisor"} boogie_si_record_i32($i182);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i183, $i184 := 9600, $i182;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb29;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p2);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb21;

  $bb22:
    assume $i157 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i158 := tty_termios_baud_rate($p2);
    call {:si_unique_call 525} {:cexpr "tmp___0"} boogie_si_record_i32($i158);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $i158;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.2, $p161);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i163 := $and.i8($i162, 7);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i165 := $sext.i32.i64($i164);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i165, 4));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.12, $p166);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i168 := $sdiv.i32($i167, $i160);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i168, $sub.i32(0, 1));
    call {:si_unique_call 526} {:cexpr "divisor"} boogie_si_record_i32($i169);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i170, $i171 := $i160, $i169;
    goto $bb27;

  $bb24:
    assume $i159 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i160 := 9600;
    goto $bb26;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb17;

  $bb13:
    assume $i141 == 1;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i142 := 9600;
    goto $bb15;

  $bb7:
    assume $i75 == 1;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.2, $p77);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i79, 4);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    $p83 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p83, $i81);
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.2, $p84);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out32($i88, $p90);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i58, 1);
    call {:si_unique_call 517} {:cexpr "bits"} boogie_si_record_i32($i91);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i6, 512);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i93 == 1);
    $p110 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.2, $p110);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 2);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    $p116 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p116, $i114);
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.2, $p117);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} out32($i121, $p123);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i124 := $i91;
    goto $bb12;

  $bb9:
    assume $i93 == 1;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.2, $p95);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 253);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    $p101 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p101, $i99);
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.2, $p102);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i16($i103);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i16($i105);
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out32($i106, $p108);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i41 == 1;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.2, $p43);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 8);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    $p49 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p49, $i47);
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} out32($i54, $p56);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i24, 1);
    call {:si_unique_call 514} {:cexpr "bits"} boogie_si_record_i32($i57);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 1);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    $p16 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p16, $i14);
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.2, $p17);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out32($i21, $p23);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i24 := 10;
    goto $bb3;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 223196);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 546} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 224228);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 1} true;
    call {:si_unique_call 547} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 548} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_encode_baud_rate: ref;

axiom tty_encode_baud_rate == $sub.ref(0, 225260);

procedure tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "tty_encode_baud_rate:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 550} {:cexpr "tty_encode_baud_rate:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    return;
}



const sSetInterfaceMode: ref;

axiom sSetInterfaceMode == $sub.ref(0, 226292);

procedure sSetInterfaceMode($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation sSetInterfaceMode($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} {:cexpr "sSetInterfaceMode:arg:mode"} boogie_si_record_i8($i1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(2, 4));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 24);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, $p12);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i11, $i15);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} sOutB($i9, $i19);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 227324);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 555} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 556} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} might_fault();
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 563} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i21 := _copy_to_user($p0, $p1, $i20);
    call {:si_unique_call 565} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i12 := _copy_to_user($p0, $p1, $i11);
    call {:si_unique_call 561} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const get_config: ref;

axiom get_config == $sub.ref(0, 228356);

procedure get_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation get_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i5: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p2 := $alloc($mul.ref(148, $zext.i32.i64(1)));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.2;
    call {:si_unique_call 568} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p6, 0, 148, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_4;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} mutex_lock_nested($p8, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1072, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.2, $p9);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p11, $i10);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, $p12);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(4, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p14, $i13);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(1048, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(12, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p18, $i17);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(1052, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(8, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p22, $i21);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1072, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i25 := $ashr.i32($i24, 5);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 3);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i27, 8));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p28);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(16, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p31, $i30);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} mutex_unlock($p33);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i36 := copy_to_user($p34, $p35, 148);
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;
}



const set_config: ref;

axiom set_config == $sub.ref(0, 229388);

procedure set_config($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.5, $CurrAddr;



implementation set_config($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p72: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p3 := $alloc($mul.ref(148, $zext.i32.i64(1)));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i6 := copy_from_user($p4, $p5, 148);
    call {:si_unique_call 575} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} mutex_lock_nested($p10, 0);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i11 := capable(21);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 578} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 16384));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 148)), $mul.ref(4, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.2, $p38);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 16383);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i37, $i40);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p42, $i41);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 148)), $mul.ref(12, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.2, $p43);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(1048, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p46, $i44);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 148)), $mul.ref(8, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.2, $p47);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(1052, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p50, $i48);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.2, $p51);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 112);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 16);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.2, $p56);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 112);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 32);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 112);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 48);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.2, $p66);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 112);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 64);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} mutex_unlock($p72);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} configure_r_port($p0, $p1, $0.ref);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p70, 460800);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p65, 230400);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i59 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p60, 115200);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1344, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p55, 57600);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 148)), $mul.ref(4, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i20 := $xor.i32($i17, $i19);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, $sub.i32(0, 114));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.2, $p25);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $sub.i32(0, 114));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 148)), $mul.ref(4, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.2, $p28);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 113);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i27, $i30);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p32, $i31);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} configure_r_port($p0, $p1, $0.ref);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} mutex_unlock($p34);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(704, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} mutex_unlock($p24);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const get_ports: ref;

axiom get_ports == $sub.ref(0, 230420);

procedure get_ports($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation get_ports($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $i20: i64;
  var $p23: ref;
  var $i24: i32;
  var $p27: ref;
  var $i28: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i5: i32;
  var $i36: i64;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $i45: i64;
  var $p48: ref;
  var $i49: i32;
  var $p52: ref;
  var $i53: i32;
  var $p56: ref;
  var $i57: i64;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var $i66: i64;
  var $p69: ref;
  var $i70: i32;
  var $p73: ref;
  var $i74: i32;
  var $p77: ref;
  var $i78: i64;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $i87: i64;
  var $p90: ref;
  var $i91: i32;
  var $p94: ref;
  var $i95: i32;
  var $p98: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var vslice_dummy_var_44: ref;
  var vslice_dummy_var_45: ref;
  var vslice_dummy_var_46: ref;
  var vslice_dummy_var_47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p2 := $alloc($mul.ref(840, $zext.i32.i64(1)));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.2;
    call {:si_unique_call 585} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p6, 0, 840, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_6;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p7 := $M.13;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(0, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p10, $i9);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.2, rocketModel);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p14, $i11);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_44 := strcpy($p18, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(88, 1)));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p23, $i20);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(96, 1)));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p27, $i24);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(100, 1)));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(0, 104)), $mul.ref(100, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p31, $i28);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(0, 1)));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(1, 104)), $mul.ref(0, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p39, $i36);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(1, 104)), $mul.ref(8, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_45 := strcpy($p43, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(88, 1)));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(1, 104)), $mul.ref(88, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p48, $i45);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(96, 1)));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(1, 104)), $mul.ref(96, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p52, $i49);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(100, 1)));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(1, 104)), $mul.ref(100, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p56, $i53);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(0, 1)));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(2, 104)), $mul.ref(0, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p60, $i57);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(2, 104)), $mul.ref(8, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_46 := strcpy($p64, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(88, 1)));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(2, 104)), $mul.ref(88, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p69, $i66);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(96, 1)));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(2, 104)), $mul.ref(96, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p73, $i70);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(100, 1)));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(2, 104)), $mul.ref(100, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p77, $i74);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(0, 1)));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(3, 104)), $mul.ref(0, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p81, $i78);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(3, 104)), $mul.ref(8, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_47 := strcpy($p85, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(88, 1)));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(3, 104)), $mul.ref(88, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p90, $i87);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(96, 1)));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(3, 104)), $mul.ref(96, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p94, $i91);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(100, 1)));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 840)), $mul.ref(8, 1)), $mul.ref(3, 104)), $mul.ref(100, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p98, $i95);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i34 := copy_to_user($p32, $p33, 840);
    call {:si_unique_call 589} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;
}



const reset_rm2: ref;

axiom reset_rm2 == $sub.ref(0, 231452);

procedure reset_rm2($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation reset_rm2($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i3 := capable(21);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 594} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i10 := copy_from_user($p9, $p1, 4);
    call {:si_unique_call 596} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, $p2);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, 7);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i18, 4));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.14, $p19);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1088, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.2, $p30);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1088, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.2, $p42);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.2, $p44);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i8($i45, 5);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.2, $p2);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} sPCIModemReset($p43, $i47, $i48);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1088, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.2, $p35);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.2, $p37);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i8($i38, 5);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p2);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} sModemReset($p36, $i40, $i41);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.2, $p22);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, 7);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i26, 4));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.14, $p27);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 3);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb16;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p2, 1);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb6;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const get_version: ref;

axiom get_version == $sub.ref(0, 232484);

procedure get_version($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_version($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i3 := copy_to_user($p2, driver_version, 128);
    call {:si_unique_call 600} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 233516);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 601} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 602} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 603} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 234548);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 606} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 607} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} might_fault();
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 610} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 614} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 616} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 612} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const sModemReset: ref;

axiom sModemReset == $sub.ref(0, 235580);

procedure sModemReset($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sModemReset($p0: ref, $i1: i32, $i2: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i16;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i16;
  var $i79: i32;
  var $i80: i16;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} {:cexpr "sModemReset:arg:chan"} boogie_si_record_i32($i1);
    call {:si_unique_call 619} {:cexpr "sModemReset:arg:on"} boogie_si_record_i32($i2);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(0, 4));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1024);
    call {:si_unique_call 620} {:cexpr "addr"} boogie_si_record_i32($i6);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i12 := sInB($i11);
    call {:si_unique_call 622} {:cexpr "val"} boogie_si_record_i8($i12);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 2);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.2, $p42);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(1, 1)));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i44, $i46);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p49, $i48);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.2, $p55);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} sOutB($i54, $i58);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i2, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i1);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i63, $i65);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} sOutB($i67, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.2, $p68);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(1, 1)));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i70, $i72);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p75, $i74);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.2, $p76);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.2, $p81);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} sOutB($i80, $i84);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i59 == 1;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i6, 8);
    call {:si_unique_call 628} {:cexpr "addr"} boogie_si_record_i32($i60);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(36, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i21 := sInB($i20);
    call {:si_unique_call 624} {:cexpr "val"} boogie_si_record_i8($i21);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(36, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i21);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, $sub.i32(0, 4));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 1);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} sOutB($i26, $i32);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(28, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i32($i6, 6);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} sOutB($i37, $i41);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sPCIModemReset: ref;

axiom sPCIModemReset == $sub.ref(0, 236612);

procedure sPCIModemReset($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation sPCIModemReset($p0: ref, $i1: i32, $i2: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} {:cexpr "sPCIModemReset:arg:chan"} boogie_si_record_i32($i1);
    call {:si_unique_call 632} {:cexpr "sPCIModemReset:arg:on"} boogie_si_record_i32($i2);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(0, 4));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 64);
    call {:si_unique_call 633} {:cexpr "addr"} boogie_si_record_i32($i6);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i11, $i13);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} sOutB($i15, 0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i6, 8);
    call {:si_unique_call 634} {:cexpr "addr"} boogie_si_record_i32($i8);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 237644);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 238676);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 239708);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 637} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 638} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 240740);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 241772);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const strcpy: ref;

axiom strcpy == $sub.ref(0, 242804);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 243836);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 244868);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 245900);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 640} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 1} true;
    call {:si_unique_call 641} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 642} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 246932);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 247964);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 1} true;
    call {:si_unique_call 644} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 645} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 248996);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.2, $p3);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 250028);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const tty_port_close_start: ref;

axiom tty_port_close_start == $sub.ref(0, 251060);

procedure tty_port_close_start($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_close_start($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sFlushRxFIFO: ref;

axiom sFlushRxFIFO == $sub.ref(0, 252092);

procedure sFlushRxFIFO($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation sFlushRxFIFO($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $p65: ref;
  var $i66: i32;
  var $i67: i16;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $i71: i32;
  var $i72: i16;
  var $i73: i32;
  var $i74: i16;
  var $p75: ref;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i16;
  var $p81: ref;
  var $i82: i32;
  var $i83: i16;
  var $i84: i32;
  var $i85: i16;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i16;
  var $i92: i32;
  var $i93: i16;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i16;
  var $i100: i32;
  var $i101: i16;
  var $p103: ref;
  var $i104: i32;
  var $i105: i16;
  var $i106: i32;
  var $i107: i16;
  var $p109: ref;
  var $i110: i32;
  var $i111: i16;
  var $i112: i32;
  var $i113: i16;
  var $p115: ref;
  var $i116: i32;
  var $i117: i16;
  var $i118: i32;
  var $i119: i16;
  var $p121: ref;
  var $i122: i32;
  var $i123: i16;
  var $i124: i32;
  var $i125: i16;
  var $p127: ref;
  var $i128: i32;
  var $i129: i16;
  var $i130: i32;
  var $i131: i16;
  var $p133: ref;
  var $i134: i32;
  var $i135: i16;
  var $i136: i32;
  var $i137: i16;
  var $p139: ref;
  var $i140: i32;
  var $i141: i16;
  var $i142: i32;
  var $i143: i16;
  var $p145: ref;
  var $i146: i32;
  var $i147: i16;
  var $i148: i32;
  var $i149: i16;
  var vslice_dummy_var_48: i8;
  var vslice_dummy_var_49: i8;
  var vslice_dummy_var_50: i16;
  var vslice_dummy_var_51: i8;
  var vslice_dummy_var_52: i8;
  var vslice_dummy_var_53: i8;
  var vslice_dummy_var_54: i8;
  var vslice_dummy_var_55: i8;
  var vslice_dummy_var_56: i8;
  var vslice_dummy_var_57: i8;
  var vslice_dummy_var_58: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(52, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i6 := sInW($i5);
    call {:si_unique_call 650} {:cexpr "tmp"} boogie_si_record_i16($i6);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1)), $mul.ref(50, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 8);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_50 := sInW($i35);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    call {:si_unique_call 655} {:cexpr "Ch"} boogie_si_record_i8($i39);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i39);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 8);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} sOutB($i44, $i47);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i39);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} sOutB($i52, $i54);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.2, $p55);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(72, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} sOutW($i59, $i64);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.2, $p65);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} sOutW($i69, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.2, $p70);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(72, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.2, $p75);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 2);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} sOutW($i74, $i80);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.2, $p81);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} sOutW($i85, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i30, 0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i86 == 1;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1)), $mul.ref(50, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p88, 8);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.2, $p89);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i90);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(48, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} out32($i93, $p96);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1)), $mul.ref(50, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p15, 10);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(88, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(48, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} out32($i20, $p23);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.2, $p24);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_48 := sInB($i28);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.2, $p97);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_49 := sInB($i101);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.2, $p103);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_51 := sInB($i107);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.2, $p109);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_52 := sInB($i113);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.2, $p115);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_53 := sInB($i119);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.2, $p121);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_54 := sInB($i125);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.2, $p127);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_55 := sInB($i131);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.2, $p133);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i16($i136);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_56 := sInB($i137);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.2, $p139);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i142 := $zext.i16.i32($i141);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_57 := sInB($i143);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.2, $p145);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i147);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_58 := sInB($i149);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_ldisc_flush: ref;

axiom tty_ldisc_flush == $sub.ref(0, 253124);

procedure tty_ldisc_flush($p0: ref);
  free requires assertsPassed;



implementation tty_ldisc_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    return;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 254156);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 672} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 255188);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ldv_spin_lock();
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} ldv_spin_lock_irq_4($p0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 256220);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ldv_spin_unlock();
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} ldv_spin_unlock_irq_7($p0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_set: ref;

axiom tty_port_tty_set == $sub.ref(0, 257252);

procedure tty_port_tty_set($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_port_tty_set($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    return;
}



const complete_all: ref;

axiom complete_all == $sub.ref(0, 258284);

procedure complete_all($p0: ref);
  free requires assertsPassed;



implementation complete_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_7: ref;

axiom ldv_spin_unlock_irq_7 == $sub.ref(0, 259316);

procedure ldv_spin_unlock_irq_7($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_7($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} _raw_spin_unlock_irq($p2);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 260348);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_4: ref;

axiom ldv_spin_lock_irq_4 == $sub.ref(0, 261380);

procedure ldv_spin_lock_irq_4($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_4($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} _raw_spin_lock_irq($p2);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 262412);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    return;
}



const ldv___get_free_pages_20: ref;

axiom ldv___get_free_pages_20 == $sub.ref(0, 263444);

procedure ldv___get_free_pages_20($i0: i32, $i1: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___get_free_pages_20($i0: i32, $i1: i32) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} {:cexpr "ldv___get_free_pages_20:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 680} {:cexpr "ldv___get_free_pages_20:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_check_alloc_flags($i0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i2 := __get_free_pages($i0, $i1);
    call {:si_unique_call 683} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const wait_for_completion_interruptible: ref;

axiom wait_for_completion_interruptible == $sub.ref(0, 264476);

procedure wait_for_completion_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wait_for_completion_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 684} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 685} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 265508);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.9, $M.5, $CurrAddr;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 686} devirtbounce.10(0, $p1, $p1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    return;
}



const sEnInterrupts: ref;

axiom sEnInterrupts == $sub.ref(0, 266540);

procedure sEnInterrupts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sEnInterrupts($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i8;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} {:cexpr "sEnInterrupts:arg:Flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p3);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i1);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 7);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, $i8);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p12, $i10);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.2, $p13);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(148, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out32($i17, $p19);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.2, $p21);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i1);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 16);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i23, $i26);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p30, $i28);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out32($i35, $p37);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i1, 256);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i45 := sInB($i44);
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i8($i45);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.2, $p47);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref($i49, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.10, $p50);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i46, $i52);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    call {:si_unique_call 692} {:cexpr "Mask"} boogie_si_record_i8($i54);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.2, $p55);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i54);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} sOutB($i59, $i61);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_port_block_til_ready: ref;

axiom tty_port_block_til_ready == $sub.ref(0, 267572);

procedure tty_port_block_til_ready($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_block_til_ready($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 694} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 695} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 268604);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const __get_free_pages: ref;

axiom __get_free_pages == $sub.ref(0, 269636);

procedure __get_free_pages($i0: i32, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __get_free_pages($i0: i32, $i1: i32) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 698} {:cexpr "__get_free_pages:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 699} {:cexpr "__get_free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 700} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 701} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 270668);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 702} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const carrier_raised: ref;

axiom carrier_raised == $sub.ref(0, 271700);

procedure carrier_raised($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation carrier_raised($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i9 := sInB($i8);
    call {:si_unique_call 704} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 8);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const dtr_rts: ref;

axiom dtr_rts == $sub.ref(0, 272732);

procedure dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation dtr_rts($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i4: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p79: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i16;
  var $i84: i32;
  var $i85: i16;
  var $p87: ref;
  var $p88: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} {:cexpr "dtr_rts:arg:on"} boogie_si_record_i32($i1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.2, $p49);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 251);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p56, $i53);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.2, $p58);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} out32($i62, $p65);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.2, $p67);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.2, $p72);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 253);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p79, $i76);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.2, $p81);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} out32($i85, $p88);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i69 == 1;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.2, $p7);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 4);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p14, $i11);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} out32($i20, $p23);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.2, $p25);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.2, $p30);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 2);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p37, $i34);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, $p39);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} out32($i43, $p46);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 273764);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 711} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 712} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 713} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p4 := calloc(1, $i0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 715} __VERIFIER_assume($i7);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_initialize_tty_operations_2: ref;

axiom ldv_initialize_tty_operations_2 == $sub.ref(0, 274796);

procedure ldv_initialize_tty_operations_2();
  free requires assertsPassed;
  modifies $M.15, $M.16, $M.2, $CurrAddr;



implementation ldv_initialize_tty_operations_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p0 := ldv_zalloc(512);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p2 := ldv_zalloc(1752);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.16 := $p2;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    return;
}



const ldv_tty_port_operations_1: ref;

axiom ldv_tty_port_operations_1 == $sub.ref(0, 275828);

procedure ldv_tty_port_operations_1();
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation ldv_tty_port_operations_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p0 := ldv_zalloc(1064);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 276860);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $M.24, $M.15, $M.16, $M.5, $M.25, $M.9, $M.0, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.44, $M.43, $M.42, $M.4, $M.40, $M.10, $M.11, $M.12, $M.38, $M.37, $M.33, $M.36, $M.35, $M.34, $M.14, $M.32, $M.31, $M.30, $M.29, $M.28, $M.27, $M.26, $M.1, $M.3, $M.13, $M.94, $CurrAddr, $M.39, $M.41, $M.7, $M.8, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i1;
  var $i45: i32;
  var $i46: i1;
  var $i48: i32;
  var $i49: i1;
  var $i51: i32;
  var $i52: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i8;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i8;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i8;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i8;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i8;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i8;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i169: i8;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i8;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i8;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $i323: i32;
  var $i324: i1;
  var $p325: ref;
  var $i327: i32;
  var $i328: i1;
  var $p329: ref;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i355: i32;
  var $i356: i1;
  var $p357: ref;
  var $i359: i32;
  var $i360: i1;
  var $p361: ref;
  var $i363: i32;
  var $i364: i1;
  var $p365: ref;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $i371: i32;
  var $i372: i1;
  var $p373: ref;
  var $i375: i32;
  var $i376: i1;
  var $p377: ref;
  var $i379: i32;
  var $i380: i1;
  var $p381: ref;
  var $i383: i32;
  var $i384: i1;
  var $p385: ref;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $i389: i32;
  var $i390: i1;
  var $p391: ref;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i398: i32;
  var $i399: i1;
  var $i401: i32;
  var $i402: i1;
  var $i404: i32;
  var $i405: i1;
  var $i407: i32;
  var $i408: i1;
  var $i410: i32;
  var $i411: i32;
  var $i412: i32;
  var $i413: i1;
  var $i415: i32;
  var $i416: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    call {:si_unique_call 719} $initialize();
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p0 := ldv_zalloc(1064);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p2 := ldv_zalloc(1064);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 725} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 726} $i5 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 727} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i5);
    call {:si_unique_call 728} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} $i6 := __VERIFIER_nondet_uint();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i6);
    call {:si_unique_call 731} {:cexpr "tmp___3"} boogie_si_record_i32($i6);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p7 := ldv_zalloc(1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p8 := ldv_zalloc(44);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 735} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 736} {:cexpr "tmp___6"} boogie_si_record_i32($i10);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 737} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 738} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 739} {:cexpr "tmp___7"} boogie_si_record_i32($i11);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 740} $i12 := __VERIFIER_nondet_uint();
    call {:si_unique_call 741} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i12);
    call {:si_unique_call 742} {:cexpr "tmp___8"} boogie_si_record_i32($i12);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} $i13 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 744} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i13);
    call {:si_unique_call 745} {:cexpr "tmp___9"} boogie_si_record_i8($i13);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 746} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 748} {:cexpr "tmp___10"} boogie_si_record_i32($i14);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} $i15 := __VERIFIER_nondet_char();
    call {:si_unique_call 750} {:cexpr "smack:ext:__VERIFIER_nondet_char"} boogie_si_record_i8($i15);
    call {:si_unique_call 751} {:cexpr "tmp___11"} boogie_si_record_i8($i15);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} $i16 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 753} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i16);
    call {:si_unique_call 754} {:cexpr "tmp___12"} boogie_si_record_i64($i16);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 755} $i17 := __VERIFIER_nondet_uint();
    call {:si_unique_call 756} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i17);
    call {:si_unique_call 757} {:cexpr "tmp___13"} boogie_si_record_i32($i17);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ldv_initialize();
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 760} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 762} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i45, $i46, $i48, $i49, $i51, $i52, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $p129, $i130, $i131, $p132, $i133, $i134, $i136, $i137, $p138, $i139, $i140, $i142, $i143, $p144, $i145, $i146, $i148, $i149, $p150, $i151, $i152, $i154, $i155, $p156, $i157, $i158, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $p167, $i168, $i169, $i170, $i171, $p172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $p182, $i183, $i184, $i185, $i186, $p187, $i188, $i189, $p190, $i191, $i192, $p193, $i194, $i195, $p196, $i197, $i198, $p199, $i200, $i201, $p202, $i203, $i204, $p205, $i206, $i207, $p208, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $p217, $p218, $i219, $i220, $i221, $i222, $i223, $p224, $i225, $i226, $p227, $i228, $i229, $p230, $i231, $i232, $p233, $i234, $i235, $p236, $i237, $i238, $p239, $i240, $i241, $p242, $i243, $i244, $p245, $i246, $i247, $p248, $i249, $i250, $p251, $i252, $i253, $p254, $i256, $i257, $p258, $i260, $i261, $p262, $i264, $i265, $p266, $i268, $i269, $p270, $i272, $i273, $p274, $i275, $i276, $p277, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $i295, $i296, $p297, $i299, $i300, $p301, $p302, $i303, $i304, $p305, $i307, $i308, $p309, $i311, $i312, $p313, $i315, $i316, $p317, $i319, $i320, $p321, $i323, $i324, $p325, $i327, $i328, $p329, $i331, $i332, $p333, $i335, $i336, $p337, $i339, $i340, $p341, $i343, $i344, $p345, $i347, $i348, $p349, $i351, $i352, $p353, $i355, $i356, $p357, $i359, $i360, $p361, $i363, $i364, $p365, $i367, $i368, $p369, $i371, $i372, $p373, $i375, $i376, $p377, $i379, $i380, $p381, $i383, $i384, $p385, $i386, $i387, $p388, $i389, $i390, $p391, $i392, $i393, $p394, $i395, $i396, $p397, $i398, $i399, $i401, $i402, $i404, $i405, $i407, $i408, $i410, $i411, $i412, $i413, $i415, $i416, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104 := main_loop_$bb1($p1, $p3, $i4, $i5, $i6, $p7, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i45, $i46, $i48, $i49, $i51, $i52, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $p129, $i130, $i131, $p132, $i133, $i134, $i136, $i137, $p138, $i139, $i140, $i142, $i143, $p144, $i145, $i146, $i148, $i149, $p150, $i151, $i152, $i154, $i155, $p156, $i157, $i158, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $p167, $i168, $i169, $i170, $i171, $p172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $p182, $i183, $i184, $i185, $i186, $p187, $i188, $i189, $p190, $i191, $i192, $p193, $i194, $i195, $p196, $i197, $i198, $p199, $i200, $i201, $p202, $i203, $i204, $p205, $i206, $i207, $p208, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $p217, $p218, $i219, $i220, $i221, $i222, $i223, $p224, $i225, $i226, $p227, $i228, $i229, $p230, $i231, $i232, $p233, $i234, $i235, $p236, $i237, $i238, $p239, $i240, $i241, $p242, $i243, $i244, $p245, $i246, $i247, $p248, $i249, $i250, $p251, $i252, $i253, $p254, $i256, $i257, $p258, $i260, $i261, $p262, $i264, $i265, $p266, $i268, $i269, $p270, $i272, $i273, $p274, $i275, $i276, $p277, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $i295, $i296, $p297, $i299, $i300, $p301, $p302, $i303, $i304, $p305, $i307, $i308, $p309, $i311, $i312, $p313, $i315, $i316, $p317, $i319, $i320, $p321, $i323, $i324, $p325, $i327, $i328, $p329, $i331, $i332, $p333, $i335, $i336, $p337, $i339, $i340, $p341, $i343, $i344, $p345, $i347, $i348, $p349, $i351, $i352, $p353, $i355, $i356, $p357, $i359, $i360, $p361, $i363, $i364, $p365, $i367, $i368, $p369, $i371, $i372, $p373, $i375, $i376, $p377, $i379, $i380, $p381, $i383, $i384, $p385, $i386, $i387, $p388, $i389, $i390, $p391, $i392, $i393, $p394, $i395, $i396, $p397, $i398, $i399, $i401, $i402, $i404, $i405, $i407, $i408, $i410, $i411, $i412, $i413, $i415, $i416, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_stop();
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb64_dummy;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i86 := $M.22;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb107:
    assume $i87 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 814} $i88 := __VERIFIER_nondet_int();
    call {:si_unique_call 815} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i88);
    call {:si_unique_call 816} {:cexpr "tmp___18"} boogie_si_record_i32($i88);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i88, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i88, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i88, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i88, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i88, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_stop();
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb120:
    assume $i94 == 1;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i412 := $M.22;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb398:
    assume $i413 == 1;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_104 := ldv_setup_2();
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i415 := $M.19;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i416 := $add.i32($i415, 1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $M.19 := $i416;
    call {:si_unique_call 979} {:cexpr "ref_cnt"} boogie_si_record_i32($i416);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb118:
    assume $i93 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i407 := $M.22;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i407, 4);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb395:
    assume $i408 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} vslice_dummy_var_103 := ldv_release_2();
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i410 := $M.19;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i411 := $sub.i32($i410, 1);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $M.19 := $i411;
    call {:si_unique_call 976} {:cexpr "ref_cnt"} boogie_si_record_i32($i411);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb116:
    assume $i92 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i398 := $M.22;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i398, 3);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $i401 := $M.22;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 2);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $i404 := $M.22;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i404, 5);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb392:
    assume $i405 == 1;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_102 := ldv_disconnect_2();
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb389:
    assume $i402 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_101 := ldv_disconnect_2();
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb386:
    assume $i399 == 1;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_100 := ldv_disconnect_2();
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb114:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i88, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i88, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i96 == 1);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i383 := $M.22;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 4);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $i386 := $M.22;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 1);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $i389 := $M.22;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i389, 3);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $i392 := $M.22;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 2);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $i395 := $M.22;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 5);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb383:
    assume $i396 == 1;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p397 := $M.16;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} rp_wait_until_sent($p397, $i14);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb380:
    assume $i393 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p394 := $M.16;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} rp_wait_until_sent($p394, $i14);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb377:
    assume $i390 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p391 := $M.16;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} rp_wait_until_sent($p391, $i14);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb374:
    assume $i387 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p388 := $M.16;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} rp_wait_until_sent($p388, $i14);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb371:
    assume $i384 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p385 := $M.16;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} rp_wait_until_sent($p385, $i14);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb125:
    assume $i96 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i363 := $M.22;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i363, 4);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $i367 := $M.22;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 1);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $i371 := $M.22;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 3);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $i375 := $M.22;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 2);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $i379 := $M.22;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 5);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb368:
    assume $i380 == 1;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p381 := $M.16;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_99 := rp_tiocmget($p381);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb365:
    assume $i376 == 1;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p377 := $M.16;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_98 := rp_tiocmget($p377);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb362:
    assume $i372 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p373 := $M.16;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_97 := rp_tiocmget($p373);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb359:
    assume $i368 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p369 := $M.16;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_96 := rp_tiocmget($p369);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb356:
    assume $i364 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p365 := $M.16;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_95 := rp_tiocmget($p365);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb123:
    assume $i95 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i343 := $M.22;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 4);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i347 := $M.22;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $i351 := $M.22;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 3);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i355 := $M.22;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 2);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $i359 := $M.22;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 5);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb353:
    assume $i360 == 1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p361 := $M.16;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_94 := rp_chars_in_buffer($p361);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb350:
    assume $i356 == 1;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p357 := $M.16;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_93 := rp_chars_in_buffer($p357);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb347:
    assume $i352 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p353 := $M.16;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_92 := rp_chars_in_buffer($p353);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb344:
    assume $i348 == 1;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p349 := $M.16;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_91 := rp_chars_in_buffer($p349);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb341:
    assume $i344 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p345 := $M.16;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_90 := rp_chars_in_buffer($p345);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb112:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i88, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i88, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i88, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i99 == 1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i323 := $M.22;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, 4);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $i327 := $M.22;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 1);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $i331 := $M.22;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 3);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i335 := $M.22;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 2);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $i339 := $M.22;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 5);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb338:
    assume $i340 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p341 := $M.16;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_89 := rp_break($p341, $i10);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb335:
    assume $i336 == 1;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p337 := $M.16;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_88 := rp_break($p337, $i10);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb332:
    assume $i332 == 1;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p333 := $M.16;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_87 := rp_break($p333, $i10);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb329:
    assume $i328 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p329 := $M.16;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_86 := rp_break($p329, $i10);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb326:
    assume $i324 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p325 := $M.16;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_85 := rp_break($p325, $i10);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb131:
    assume $i99 == 1;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i303 := $M.22;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 4);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i307 := $M.22;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 1);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i311 := $M.22;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 3);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $i315 := $M.22;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 2);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $i319 := $M.22;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 5);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb323:
    assume $i320 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p321 := $M.16;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_84 := rp_write_room($p321);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb320:
    assume $i316 == 1;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p317 := $M.16;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} vslice_dummy_var_83 := rp_write_room($p317);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb317:
    assume $i312 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p313 := $M.16;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_82 := rp_write_room($p313);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb314:
    assume $i308 == 1;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p309 := $M.16;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_81 := rp_write_room($p309);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb311:
    assume $i304 == 1;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p305 := $M.16;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_80 := rp_write_room($p305);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb129:
    assume $i98 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i299 := $M.22;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 3);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb308:
    assume $i300 == 1;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p301 := $M.16;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p302 := $M.15;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} rp_close($p301, $p302);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb127:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i88, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i100 == 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i295 := $M.22;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 5);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb305:
    assume $i296 == 1;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p297 := $M.16;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_79 := rp_write($p297, $p7, $i11);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb133:
    assume $i100 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i275 := $M.22;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 4);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i279 := $M.22;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 1);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i283 := $M.22;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 3);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i287 := $M.22;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 2);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $i291 := $M.22;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 5);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb302:
    assume $i292 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p293 := $M.16;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_78 := rp_tiocmset($p293, $i17, $i12);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb299:
    assume $i288 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p289 := $M.16;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_77 := rp_tiocmset($p289, $i17, $i12);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb296:
    assume $i284 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p285 := $M.16;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_76 := rp_tiocmset($p285, $i17, $i12);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb293:
    assume $i280 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p281 := $M.16;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_75 := rp_tiocmset($p281, $i17, $i12);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb290:
    assume $i276 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p277 := $M.16;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_74 := rp_tiocmset($p277, $i17, $i12);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb110:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i88, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i88, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i88, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i88, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i104 == 1);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i272 := $M.22;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 5);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb287:
    assume $i273 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p274 := $M.16;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} rp_stop($p274);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb141:
    assume $i104 == 1;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i252 := $M.22;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 4);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i256 := $M.22;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i260 := $M.22;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 3);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $i264 := $M.22;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 2);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i268 := $M.22;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 5);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb284:
    assume $i269 == 1;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p270 := $M.16;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_73 := rp_ioctl($p270, $i6, $i16);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb281:
    assume $i265 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p266 := $M.16;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_72 := rp_ioctl($p266, $i6, $i16);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb278:
    assume $i261 == 1;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p262 := $M.16;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_71 := rp_ioctl($p262, $i6, $i16);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume $i257 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p258 := $M.16;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_70 := rp_ioctl($p258, $i6, $i16);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb272:
    assume $i253 == 1;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p254 := $M.16;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_69 := rp_ioctl($p254, $i6, $i16);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb139:
    assume $i103 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i237 := $M.22;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 4);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i240 := $M.22;
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i243 := $M.22;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 3);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i246 := $M.22;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 2);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i249 := $M.22;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 5);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb269:
    assume $i250 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p251 := $M.16;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} rp_flush_buffer($p251);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb266:
    assume $i247 == 1;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p248 := $M.16;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} rp_flush_buffer($p248);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb263:
    assume $i244 == 1;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p245 := $M.16;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} rp_flush_buffer($p245);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb260:
    assume $i241 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p242 := $M.16;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} rp_flush_buffer($p242);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb257:
    assume $i238 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p239 := $M.16;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} rp_flush_buffer($p239);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb137:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i88, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i88, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i106 == 1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i222 := $M.22;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 4);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i225 := $M.22;
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 1);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i228 := $M.22;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 3);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i231 := $M.22;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 2);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i234 := $M.22;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 5);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb254:
    assume $i235 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p236 := $M.16;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} rp_set_termios($p236, $p9);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume $i232 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p233 := $M.16;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} rp_set_termios($p233, $p9);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 879} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb248:
    assume $i229 == 1;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p230 := $M.16;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} rp_set_termios($p230, $p9);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 877} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume $i226 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p227 := $M.16;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} rp_set_termios($p227, $p9);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i223 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p224 := $M.16;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} rp_set_termios($p224, $p9);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb145:
    assume $i106 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i215 := $M.22;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 2);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb236:
    assume $i216 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p217 := $M.16;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p218 := $M.15;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i219 := rp_open($p217, $p218);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.25 := $i219;
    call {:si_unique_call 870} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i219);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i220 := $M.25;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb238:
    assume $i221 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 871} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb240;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i105 == 1;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i200 := $M.22;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 4);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i203 := $M.22;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 1);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i206 := $M.22;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 3);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i209 := $M.22;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 2);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i212 := $M.22;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 5);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb233:
    assume $i213 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p214 := $M.16;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} rp_unthrottle($p214);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb230:
    assume $i210 == 1;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p211 := $M.16;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} rp_unthrottle($p211);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 866} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb227:
    assume $i207 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p208 := $M.16;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} rp_unthrottle($p208);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb224:
    assume $i204 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p205 := $M.16;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} rp_unthrottle($p205);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 862} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb221:
    assume $i201 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p202 := $M.16;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} rp_unthrottle($p202);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 860} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb135:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i88, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i88, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i88, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i109 == 1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i185 := $M.22;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 4);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i188 := $M.22;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 1);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i191 := $M.22;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 3);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i194 := $M.22;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 2);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i197 := $M.22;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 5);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb218:
    assume $i198 == 1;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p199 := $M.16;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} rp_hangup($p199);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb215:
    assume $i195 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p196 := $M.16;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} rp_hangup($p196);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb212:
    assume $i192 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p193 := $M.16;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} rp_hangup($p193);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 854} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb209:
    assume $i189 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p190 := $M.16;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} rp_hangup($p190);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 852} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb206:
    assume $i186 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p187 := $M.16;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} rp_hangup($p187);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb151:
    assume $i109 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i160 := $M.22;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 4);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i165 := $M.22;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i170 := $M.22;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 3);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i175 := $M.22;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i180 := $M.22;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 5);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb203:
    assume $i181 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p182 := $M.16;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i183 := $sext.i8.i32($i15);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i8($i183);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} rp_send_xchar($p182, $i184);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb200:
    assume $i176 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p177 := $M.16;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i178 := $sext.i8.i32($i15);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} rp_send_xchar($p177, $i179);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb197:
    assume $i171 == 1;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p172 := $M.16;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i173 := $sext.i8.i32($i15);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i8($i173);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} rp_send_xchar($p172, $i174);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb194:
    assume $i166 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p167 := $M.16;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i168 := $sext.i8.i32($i15);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i8($i168);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} rp_send_xchar($p167, $i169);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb191:
    assume $i161 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p162 := $M.16;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i163 := $sext.i8.i32($i15);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i8($i163);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} rp_send_xchar($p162, $i164);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb149:
    assume $i108 == 1;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i130 := $M.22;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 4);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i136 := $M.22;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i142 := $M.22;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 3);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i148 := $M.22;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 2);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i154 := $M.22;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 5);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb188:
    assume $i155 == 1;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p156 := $M.16;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i13);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i8($i157);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_68 := rp_put_char($p156, $i158);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i149 == 1;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p150 := $M.16;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i13);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i8($i151);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_67 := rp_put_char($p150, $i152);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb182:
    assume $i143 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p144 := $M.16;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i13);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i8($i145);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_66 := rp_put_char($p144, $i146);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb179:
    assume $i137 == 1;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p138 := $M.16;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i13);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i8($i139);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_65 := rp_put_char($p138, $i140);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb176:
    assume $i131 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p132 := $M.16;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i13);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_64 := rp_put_char($p132, $i134);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb147:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i88, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i110 == 1);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i115 := $M.22;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 4);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i118 := $M.22;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i121 := $M.22;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 3);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i124 := $M.22;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 2);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i127 := $M.22;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 5);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb173:
    assume $i128 == 1;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p129 := $M.16;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} rp_throttle($p129);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb170:
    assume $i125 == 1;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p126 := $M.16;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} rp_throttle($p126);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb167:
    assume $i122 == 1;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p123 := $M.16;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} rp_throttle($p123);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb164:
    assume $i119 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p120 := $M.16;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} rp_throttle($p120);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 822} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume $i116 == 1;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p117 := $M.16;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} rp_throttle($p117);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb153:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i88, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb122;

  $bb155:
    assume $i111 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i112 := $M.22;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 3);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb157:
    assume $i113 == 1;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p114 := $M.16;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} rp_start($p114);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i80 := $M.21;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb95:
    assume $i81 == 1;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} $i82 := __VERIFIER_nondet_int();
    call {:si_unique_call 809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i82);
    call {:si_unique_call 810} {:cexpr "tmp___17"} boogie_si_record_i32($i82);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} ldv_stop();
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb98:
    assume $i83 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i84 := $M.21;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i85 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} rp_do_poll($i5);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 812} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb3:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i63 := $M.20;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb65:
    assume $i64 == 1;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 792} $i65 := __VERIFIER_nondet_int();
    call {:si_unique_call 793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i65);
    call {:si_unique_call 794} {:cexpr "tmp___16"} boogie_si_record_i32($i65);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} ldv_stop();
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb70:
    assume $i67 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i73 := $M.20;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb83:
    assume $i74 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i75 := rp_init();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.24 := $i75;
    call {:si_unique_call 799} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i75);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i76 := $M.24;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i78 := $M.24;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb88:
    assume $i79 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 806} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ldv_check_final_state();
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb85:
    assume $i77 == 1;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_initialize_tty_operations_2();
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 804} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_tty_port_operations_1();
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i65, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb72;

  $bb73:
    assume $i68 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i69 := $M.20;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 3);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb75:
    assume $i70 == 1;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i71 := $M.19;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb77;

  $bb78:
    assume $i72 == 1;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} rp_cleanup_module();
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 796} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i24 := $M.18;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} $i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 768} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i26);
    call {:si_unique_call 769} {:cexpr "tmp___15"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_stop();
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i56 := $M.18;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb55:
    assume $i57 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i58 := ldv_activate_1();
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.23 := $i58;
    call {:si_unique_call 788} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i58);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i59 := $M.23;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i60 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 789} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i61 := $M.19;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 1);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.19 := $i62;
    call {:si_unique_call 790} {:cexpr "ref_cnt"} boogie_si_record_i32($i62);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i51 := $M.18;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 3);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb52:
    assume $i52 == 1;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_63 := ldv_shutdown_1();
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i54 := $M.19;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.19 := $i55;
    call {:si_unique_call 786} {:cexpr "ref_cnt"} boogie_si_record_i32($i55);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i48 := $M.18;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb49:
    assume $i49 == 1;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_62 := ldv_destruct_1();
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 783} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb17:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i26, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i39 := $M.18;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i42 := $M.18;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 3);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i45 := $M.18;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 2);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume $i46 == 1;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_61 := carrier_raised($p3);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i43 == 1;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_60 := carrier_raised($p3);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i40 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_59 := carrier_raised($p3);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 777} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb26:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb25;

  $bb28:
    assume $i32 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i33 := $M.18;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i35 := $M.18;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i37 := $M.18;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i38 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} dtr_rts($p1, $i4);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 775} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i36 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} dtr_rts($p1, $i4);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i34 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} dtr_rts($p1, $i4);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 771} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb64_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 766} {:cexpr "tmp___14"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 277892);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destruct_1: ref;

axiom ldv_destruct_1 == $sub.ref(0, 278924);

procedure ldv_destruct_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_destruct_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 982} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 983} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_1: ref;

axiom ldv_shutdown_1 == $sub.ref(0, 279956);

procedure ldv_shutdown_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 984} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 985} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_activate_1: ref;

axiom ldv_activate_1 == $sub.ref(0, 280988);

procedure ldv_activate_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_activate_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 986} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 987} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 282020);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const rp_cleanup_module: ref;

axiom rp_cleanup_module == $sub.ref(0, 283052);

procedure rp_cleanup_module();
  free requires assertsPassed;



implementation rp_cleanup_module()
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i6: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i64;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_105 := del_timer_sync(rocket_timer);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p1 := $M.13;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i2 := tty_unregister_driver($p1);
    call {:si_unique_call 990} {:cexpr "retval"} boogie_si_record_i32($i2);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p8, $p9, $i10, $i11, $p12, $i13, $p14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i6 := rp_cleanup_module_loop_$bb4($i7, $p8, $p9, $i10, $i11, $p12, $i13, $p14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i6);
    goto $bb4_last;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref($i7, 8));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.3, $p8);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i6, 1);
    call {:si_unique_call 995} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, 255);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $M.13;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} put_tty_driver($p23);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.1, rcktpt_io_addr);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i25 == 1);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.26, is_PCI);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, rcktpt_io_addr);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __release_region(ioport_resource, $i28, 64);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(1, 8)));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i33 == 1);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(1, 8)));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} __release_region(ioport_resource, $i36, 64);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(2, 8)));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i38 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(2, 8)));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __release_region(ioport_resource, $i41, 64);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(3, 8)));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i43 == 1);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(3, 8)));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} __release_region(ioport_resource, $i46, 64);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(4, 8)));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb50, $bb52;

  $bb52:
    assume !($i48 == 1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(4, 4)));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(4, 8)));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __release_region(ioport_resource, $i51, 64);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(5, 8)));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume !($i53 == 1);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(5, 4)));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(5, 8)));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __release_region(ioport_resource, $i56, 64);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(6, 8)));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i58 == 1);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(6, 4)));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(6, 8)));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __release_region(ioport_resource, $i61, 64);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(7, 8)));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb74, $bb76;

  $bb76:
    assume !($i63 == 1);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(7, 4)));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(7, 8)));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __release_region(ioport_resource, $i66, 64);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $M.27;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i31 := $M.27;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __release_region(ioport_resource, $i31, 4);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb75;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb67;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb59;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb51;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb35;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb27;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i21;
    goto $bb9_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p12 := $M.13;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} tty_unregister_device($p12, $i6);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i6);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref($i13, 8));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.3, $p14);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} tty_port_destroy($p16);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i6);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref($i17, 8));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.3, $p18);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} kfree($p20);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, $i2);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_106 := printk.ref.i32(.str, $i4);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5203;
}



const rp_init: ref;

axiom rp_init == $sub.ref(0, 284084);

procedure rp_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.27, $M.1, $M.14, $M.2, $M.0, $M.38, $M.12, $M.39, $M.26, $M.3, $M.41, $CurrAddr, $M.40, $M.4, assertsPassed;



implementation rp_init() returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i85: i32;
  var $i86: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p102: ref;
  var $i84: i32;
  var $i104: i64;
  var $i105: i1;
  var $i106: i64;
  var $i20: i32;
  var $p107: ref;
  var $i5: i32;
  var $i101: i32;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_107 := printk.ref.ref.ref(.str.2, .str.3, .str.4);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p1 := alloc_tty_driver(256);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.13 := $p1;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p2 := $M.13;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1008} {:cexpr "controller"} boogie_si_record_i64(0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.27;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i21 := $M.28;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, rcktpt_io_addr, $i21);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i22 := $M.29;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(1, 8)), $i22);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i23 := $M.30;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(2, 8)), $i23);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i24 := $M.31;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(3, 8)), $i24);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i25 := $M.32;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, rcktpt_type, $i27);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.33, pc104_1);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i31 := 4;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, rcktpt_type, $i31);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i32 := $M.34;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(1, 4)), $i34);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.33, pc104_2);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i38 := 4;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(1, 4)), $i38);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i39 := $M.35;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(2, 4)), $i41);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.33, pc104_3);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i43 == 1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i45 := 4;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(2, 4)), $i45);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i46 := $M.36;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(3, 4)), $i48);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.33, pc104_4);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i52 := 4;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(3, 4)), $i52);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p53 := $M.13;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p54, 8);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p55 := $M.13;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p56, .str.7);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p57 := $M.13;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p58, .str.5);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p59 := $M.13;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p60, 46);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p61 := $M.13;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p62, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p63 := $M.13;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p64, 3);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p65 := $M.13;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p66, 1);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p67 := $M.13;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.2;
    cmdloc_dummy_var_8 := $M.2;
    call {:si_unique_call 1013} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p69, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_9;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p70 := $M.13;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p72, 3261);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p73 := $M.13;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(36, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p75, 9600);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p76 := $M.13;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(40, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p78, 9600);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p79 := $M.13;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} tty_set_operations($p79, rocket_ops);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p80 := $M.13;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i81 := tty_register_driver($p80);
    call {:si_unique_call 1016} {:cexpr "ret"} boogie_si_record_i32($i81);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i85, $i86 := 0, 0;
    goto $bb34;

  $bb34:
    call $i87, $i88, $i89, $i90, $i91, $i92, $i85, $i86, $i93 := rp_init_loop_$bb34($i87, $i88, $i89, $i90, $i91, $i92, $i85, $i86, $i93);
    goto $bb34_last;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i87 := init_ISA($i86);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 1019} {:cexpr "tmp___0"} boogie_si_record_i32($i87);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i90 := $i85;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i86, 1);
    call {:si_unique_call 1021} {:cexpr "i"} boogie_si_record_i32($i91);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i92 := $sle.i32($i91, 7);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i93 := $i90;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i94 := $sle.i32($i93, 7);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, $i93);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $M.0 := $i97;
    call {:si_unique_call 1024} {:cexpr "max_board"} boogie_si_record_i32($i97);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i98 := $M.0;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $r := $i101;
    return;

  $bb45:
    assume $i99 == 1;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_110 := printk.ref(.str.9);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p102 := $M.13;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_111 := tty_unregister_driver($p102);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 6);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i104 := $M.27;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i20 := $i84;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p107 := $M.13;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} put_tty_driver($p107);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i5 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i101 := $i5;
    goto $bb49;

  $bb50:
    assume $i105 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i106 := $M.27;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} __release_region(ioport_resource, $i106, 4);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb42:
    assume $i94 == 1;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i95 := init_PCI($i93);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 1023} {:cexpr "pci_boards_found"} boogie_si_record_i32($i95);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb44;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i85, $i86 := $i90, $i91;
    goto $bb39_dummy;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i85, 1);
    call {:si_unique_call 1020} {:cexpr "isa_boards_found"} boogie_si_record_i32($i89);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb38;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i82 == 1;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_109 := printk.ref(.str.8);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i84 := $i81;
    goto $bb32;

  $bb27:
    assume $i50 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(3, 4)));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb29;

  $bb24:
    assume $i43 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(2, 4)));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb26;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(1, 4)));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb23;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.14, rcktpt_type);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb20;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i14 := $M.27;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p15 := __request_region(ioport_resource, $i14, 4, .str.5, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i18 := $M.27;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_108 := printk.ref.i64(.str.6, $i18);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 16);
    goto $bb15;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i8 := $M.27;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i10 := $M.28;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 64);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $M.27 := $i11;
    call {:si_unique_call 1009} {:cexpr "controller"} boogie_si_record_i64($i11);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5472;
}



const ldv_disconnect_2: ref;

axiom ldv_disconnect_2 == $sub.ref(0, 285116);

procedure ldv_disconnect_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1028} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1029} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_2: ref;

axiom ldv_release_2 == $sub.ref(0, 286148);

procedure ldv_release_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1031} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_setup_2: ref;

axiom ldv_setup_2 == $sub.ref(0, 287180);

procedure ldv_setup_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_setup_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1032} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1033} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 288212);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    return;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 289244);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i3 := IS_ERR($p2);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1037} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 290276);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1039} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1040} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p5 := external_alloc();
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 291308);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 292340);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const init_ISA: ref;

axiom init_ISA == $sub.ref(0, 293372);

procedure init_ISA($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.38, $M.12, $M.39, $M.26, $M.3, $CurrAddr, $M.40, $M.4, assertsPassed;



implementation init_ISA($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i1;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i16;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i8;
  var $i88: i1;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i32;
  var $i96: i64;
  var $p98: ref;
  var $i99: i1;
  var $i103: i64;
  var $p105: ref;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $i111: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $i118: i16;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i64;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i32;
  var $i127: i8;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i8;
  var $i138: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i145: i32;
  var $i146: i1;
  var $i144: i32;
  var $i147: i32;
  var $i148: i1;
  var $i101: i32;
  var $i102: i32;
  var $i149: i32;
  var $i100: i32;
  var $i150: i64;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $i156: i64;
  var $p157: ref;
  var $i158: i32;
  var $i159: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i1;
  var $i165: i32;
  var $i166: i1;
  var $i164: i32;
  var $i167: i1;
  var $i169: i32;
  var $i170: i1;
  var $i168: i32;
  var $i171: i64;
  var $p173: ref;
  var $p174: ref;
  var $i177: i64;
  var $p179: ref;
  var $p180: ref;
  var $i176: i32;
  var $i182: i64;
  var $i183: i64;
  var $p185: ref;
  var $i186: i64;
  var $p188: ref;
  var $i189: i64;
  var $p190: ref;
  var $i191: i64;
  var $i193: i64;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $p199: ref;
  var $i200: i32;
  var $i201: i64;
  var $p203: ref;
  var $i204: i32;
  var $i205: i64;
  var $i206: i64;
  var $p208: ref;
  var $i209: i64;
  var $i210: i64;
  var $i211: i64;
  var $i6: i32;
  var $i213: i64;
  var $p214: ref;
  var $i215: i64;
  var $i216: i32;
  var $i217: i32;
  var $p218: ref;
  var $i219: i64;
  var $p220: ref;
  var $i221: i64;
  var $i222: i32;
  var $i223: i32;
  var $p224: ref;
  var $i225: i64;
  var $p226: ref;
  var $i227: i64;
  var $i228: i32;
  var $i229: i32;
  var $p230: ref;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: ref;
  var vslice_dummy_var_114: ref;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1045} {:cexpr "init_ISA:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i2, 8));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i0);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i7, 8));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p10 := __request_region(ioport_resource, $i9, 64, .str.5, 0);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i0);
    $p20 := $add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i0);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i21, 4));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.14, $p22);
    $p24 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(12, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p24, $i23);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i0);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i25, 4));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.14, $p26);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i27, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p33 := .str.14;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i34 := $M.37;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.38 := 20;
    call {:si_unique_call 1049} {:cexpr "sClockPrescale"} boogie_si_record_i32(20);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i38, 4));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p39, 460800);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i0);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i40, 8));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $p41);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p44, $i43);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i213 := $sext.i32.i64($i0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i213, 8));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i215 := $load.i64($M.1, $p214);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i64.i32($i215);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i217 := $add.i32($i216, 1024);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p218, $i217);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i219 := $sext.i32.i64($i0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i219, 8));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i221 := $load.i64($M.1, $p220);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i222 := $trunc.i64.i32($i221);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i223 := $add.i32($i222, 2048);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p224, $i223);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i225 := $sext.i32.i64($i0);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i225, 8));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i227 := $load.i64($M.1, $p226);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i64.i32($i227);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i228, 3072);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p230, $i229);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i0, 1024);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i46 := $M.27;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i45, $i47);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i50 := sInitController($p20, $i0, $i48, $p49, 4, 0, 0, 0);
    call {:si_unique_call 1051} {:cexpr "num_aiops"} boogie_si_record_i32($i50);
    $p51 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(12, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.2, $p51);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 4);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i88 := $sle.i32($i50, 0);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i94 := $M.40;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i64.i32($i94);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i0);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i96, 104)), $mul.ref(100, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p98, $i95);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32(0, $i50);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i100 := 0;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref($i150, 4));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p151, 0);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i0);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i152, 4));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.14, $p153);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume !($i155 == 1);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i156, 4));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.14, $p157);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i159 == 1);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i177 := $sext.i32.i64($i0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i177, 104)), $mul.ref(8, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} vslice_dummy_var_113 := strcpy($p180, .str.16);
    assume {:verifier.code 0} true;
    $i176 := $i100;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i182 := $sext.i32.i64($i176);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i183, 104)), $mul.ref(88, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p185, $i182);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64($i0);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i186, 104)), $mul.ref(0, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p188, 4096);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i189, 8));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i191 := $load.i64($M.1, $p190);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} vslice_dummy_var_115 := printk.ref.i32.i64.i32.ref(.str.17, $i0, $i191, $i50, $p33);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i193, 104)), $mul.ref(8, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i197, 104)), $mul.ref(100, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.2, $p199);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i0);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i201, 104)), $mul.ref(100, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.2, $p203);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i205 := $sext.i32.i64($i204);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i206 := $sext.i32.i64($i0);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i206, 104)), $mul.ref(88, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.2, $p208);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i210 := $add.i64($i205, $i209);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i211 := $sub.i64($i210, 1);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} vslice_dummy_var_116 := printk.ref.ref.i32.i64(.str.18, $p196, $i200, $i211);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb52;

  $bb52:
    $p161 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(108, 1)), $mul.ref(0, 4));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.2, $p161);
    call {:si_unique_call 1063} {:cexpr "num_chan"} boogie_si_record_i32($i162);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i163 := $slt.i32(0, $i162);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} msleep(500);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32(0, $i162);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} msleep(500);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i0);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i171, 104)), $mul.ref(8, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_114 := strcpy($p174, .str.15);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i176 := $i162;
    goto $bb72;

  $bb64:
    assume $i167 == 1;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i168 := 0;
    goto $bb67;

  $bb67:
    call $i169, $i170, $i168 := init_ISA_loop_$bb67($p20, $i162, $i169, $i170, $i168);
    goto $bb67_last;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} sModemReset($p20, $i168, 0);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i168, 1);
    call {:si_unique_call 1069} {:cexpr "chan"} boogie_si_record_i32($i169);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, $i162);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i170 == 1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb69:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    $i168 := $i169;
    goto $bb69_dummy;

  $bb56:
    assume $i163 == 1;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i164 := 0;
    goto $bb59;

  $bb59:
    call $i165, $i166, $i164 := init_ISA_loop_$bb59($p20, $i162, $i165, $i166, $i164);
    goto $bb59_last;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} sModemReset($p20, $i164, 1);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i165 := $add.i32($i164, 1);
    call {:si_unique_call 1066} {:cexpr "chan"} boogie_si_record_i32($i165);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i166 := $slt.i32($i165, $i162);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i166 == 1);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb61:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    $i164 := $i165;
    goto $bb61_dummy;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb52;

  $bb35:
    assume $i99 == 1;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i101, $i102 := 0, 0;
    goto $bb38;

  $bb38:
    call $i103, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $p113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $i137, $i138, $p140, $i141, $i142, $i143, $i145, $i146, $i144, $i147, $i148, $i101, $i102, $i149 := init_ISA_loop_$bb38($i0, $i19, $i50, $i103, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $p113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $p128, $p129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $i137, $i138, $p140, $i141, $i142, $i143, $i145, $i146, $i144, $i147, $i148, $i101, $i102, $i149);
    goto $bb38_last;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    $p105 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(60, 1)), $mul.ref($i103, 4));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.2, $p105);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 56);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} sOutB($i110, $sub.i8(0, 128));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i102);
    $p113 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(60, 1)), $mul.ref($i111, 4));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.2, $p113);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 56);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} sOutB($i118, 0);
    $p119 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.2, $p119);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i102);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref($i122, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.10, $p123);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i126 := $or.i32($i121, $i125);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i8($i126);
    $p128 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p128, $i127);
    $p129 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(40, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.2, $p129);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    $p134 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.2, $p134);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} sOutB($i133, $i137);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i102);
    $p140 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(108, 1)), $mul.ref($i138, 4));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.2, $p140);
    call {:si_unique_call 1058} {:cexpr "num_chan"} boogie_si_record_i32($i141);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i101, $i141);
    call {:si_unique_call 1059} {:cexpr "total_num_chan"} boogie_si_record_i32($i142);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i143 := $slt.i32(0, $i141);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i102, 1);
    call {:si_unique_call 1062} {:cexpr "aiop"} boogie_si_record_i32($i147);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i147, $i50);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i149 := $i142;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i100 := $i149;
    goto $bb37;

  $bb48:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i101, $i102 := $i142, $i147;
    goto $bb48_dummy;

  $bb40:
    assume $i143 == 1;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i144 := 0;
    goto $bb43;

  $bb43:
    call $i145, $i146, $i144 := init_ISA_loop_$bb43($i0, $i141, $i145, $i146, $i144, $i102);
    goto $bb43_last;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} init_r_port($i0, $i102, $i144, $0.ref);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i144, 1);
    call {:si_unique_call 1061} {:cexpr "chan"} boogie_si_record_i32($i145);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i145, $i141);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i146 == 1);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb45:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i144 := $i145;
    goto $bb45_dummy;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i88 == 1;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i89, 8));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.1, $p90);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __release_region(ioport_resource, $i91, 64);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i0);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i92, 8));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p93, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb29:
    assume $i53 == 1;
    $p54 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.2, $p54);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(2, 1)));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i56, $i58);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    $p61 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p61, $i60);
    $p62 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(40, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.2, $p62);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    $p67 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.2, $p67);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} sOutB($i66, $i70);
    $p71 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.2, $p71);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(3, 1)));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i73, $i75);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    $p78 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p78, $i77);
    $p79 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(40, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.2, $p79);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    $p84 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.2, $p84);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} sOutB($i83, $i87);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.38 := 25;
    call {:si_unique_call 1048} {:cexpr "sClockPrescale"} boogie_si_record_i32(25);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i0);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i36, 4));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p37, 230400);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p33 := .str.11;
    goto $bb20;

  $bb11:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i27, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p33 := .str.13;
    goto $bb20;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb15;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p33 := .str.12;
    goto $bb20;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i0);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i13, 8));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.1, $p14);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_112 := printk.ref.i64(.str.10, $i15);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i17, 8));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p18, 0);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb69_dummy:
    assume false;
    return;

  $bb67_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5760;

  $bb61_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5747;

  $bb45_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5709;

  $bb48_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5669;
}



const init_PCI: ref;

axiom init_PCI == $sub.ref(0, 294404);

procedure init_PCI($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.2, $M.38, $M.12, $M.41, $M.26, $M.3, $CurrAddr, $M.40, $M.4, assertsPassed;



implementation init_PCI($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p5: ref;
  var $i6: i32;
  var $i15: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} {:cexpr "init_PCI:arg:boards_found"} boogie_si_record_i32($i0);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p1 := pci_get_device(4606, $sub.i32(0, 1), $0.ref);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p5, $i6 := $p1, 0;
    goto $bb4;

  $bb4:
    call $i7, $i8, $i9, $i10, $i11, $p12, $i13, $i14, $p5, $i6, $i15 := init_PCI_loop_$bb4($i0, $i7, $i8, $i9, $i10, $i11, $p12, $i13, $i14, $p5, $i6, $i15);
    goto $bb4_last;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i8 := register_PCI($i7, $p5);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 1077} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i6;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $p12 := pci_get_device(4606, $sub.i32(0, 1), $p5);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i4 := $i15;
    goto $bb3;

  $bb9:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p5, $i6 := $p12, $i11;
    goto $bb9_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i6, 1);
    call {:si_unique_call 1078} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb8;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5825;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 295436);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1081} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 296468);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1083} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 297500);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    return;
}



const register_PCI: ref;

axiom register_PCI == $sub.ref(0, 298532);

procedure register_PCI($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.2, $M.38, $M.12, $M.41, $M.26, $M.3, $CurrAddr, $M.40, $M.4, assertsPassed;



implementation register_PCI($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i64;
  var $p56: ref;
  var $i57: i64;
  var $p59: ref;
  var $p60: ref;
  var $i62: i64;
  var $p64: ref;
  var $i69: i64;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $i77: i64;
  var $p79: ref;
  var $i80: i64;
  var $p82: ref;
  var $i83: i64;
  var $p85: ref;
  var $p86: ref;
  var $i88: i64;
  var $p90: ref;
  var $i91: i64;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $p97: ref;
  var $i99: i64;
  var $p101: ref;
  var $i102: i64;
  var $p104: ref;
  var $i105: i64;
  var $p107: ref;
  var $p108: ref;
  var $i110: i64;
  var $p112: ref;
  var $i113: i64;
  var $p115: ref;
  var $i116: i64;
  var $p118: ref;
  var $p119: ref;
  var $i121: i64;
  var $p123: ref;
  var $i124: i64;
  var $p126: ref;
  var $i127: i64;
  var $p129: ref;
  var $p130: ref;
  var $i132: i64;
  var $p134: ref;
  var $i135: i64;
  var $p137: ref;
  var $i138: i64;
  var $p140: ref;
  var $p141: ref;
  var $i143: i64;
  var $p145: ref;
  var $i146: i64;
  var $p148: ref;
  var $i149: i64;
  var $p151: ref;
  var $p152: ref;
  var $i154: i64;
  var $p156: ref;
  var $i157: i64;
  var $p159: ref;
  var $i160: i64;
  var $p162: ref;
  var $p163: ref;
  var $i165: i64;
  var $p167: ref;
  var $i168: i64;
  var $p170: ref;
  var $i171: i64;
  var $p173: ref;
  var $p174: ref;
  var $i176: i64;
  var $p178: ref;
  var $i179: i64;
  var $p181: ref;
  var $i182: i64;
  var $p184: ref;
  var $p185: ref;
  var $i187: i64;
  var $p189: ref;
  var $i190: i64;
  var $p192: ref;
  var $i193: i64;
  var $p195: ref;
  var $p196: ref;
  var $i198: i64;
  var $p200: ref;
  var $i201: i64;
  var $p203: ref;
  var $i204: i64;
  var $p206: ref;
  var $p207: ref;
  var $i209: i64;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i64;
  var $p216: ref;
  var $i217: i64;
  var $p219: ref;
  var $p220: ref;
  var $i222: i64;
  var $p224: ref;
  var $i225: i32;
  var $i226: i32;
  var $i227: i64;
  var $p229: ref;
  var $i230: i64;
  var $p232: ref;
  var $p233: ref;
  var $i235: i64;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i240: i64;
  var $p242: ref;
  var $i243: i64;
  var $p245: ref;
  var $p246: ref;
  var $i248: i64;
  var $p250: ref;
  var $i251: i32;
  var $i252: i32;
  var $i253: i64;
  var $p255: ref;
  var $i256: i64;
  var $p258: ref;
  var $p259: ref;
  var $i261: i64;
  var $p263: ref;
  var $p264: ref;
  var $i265: i8;
  var $i266: i32;
  var $i267: i1;
  var $i268: i64;
  var $p269: ref;
  var $i270: i64;
  var $p272: ref;
  var $i273: i64;
  var $p274: ref;
  var $i275: i64;
  var $p277: ref;
  var $i278: i64;
  var $p280: ref;
  var $p281: ref;
  var $i283: i64;
  var $p285: ref;
  var $p286: ref;
  var $i287: i8;
  var $i288: i32;
  var $i289: i1;
  var $i290: i64;
  var $p291: ref;
  var $i292: i64;
  var $p294: ref;
  var $i295: i64;
  var $p296: ref;
  var $i297: i64;
  var $p299: ref;
  var $i300: i64;
  var $p302: ref;
  var $p303: ref;
  var $i305: i64;
  var $p307: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $p308: ref;
  var $i309: i16;
  var $i310: i32;
  var $i311: i1;
  var $i312: i1;
  var $i313: i1;
  var $i314: i1;
  var $i315: i1;
  var $i316: i1;
  var $i317: i1;
  var $i318: i1;
  var $i319: i1;
  var $i320: i1;
  var $i321: i1;
  var $p324: ref;
  var $i325: i64;
  var $i326: i64;
  var $p327: ref;
  var $p330: ref;
  var $i331: i64;
  var $i332: i32;
  var $p333: ref;
  var $i334: i16;
  var $i335: i32;
  var $i336: i1;
  var $i337: i64;
  var $p338: ref;
  var $i339: i64;
  var $i340: i32;
  var $i341: i32;
  var $i342: i16;
  var $i343: i32;
  var $i344: i32;
  var $i345: i16;
  var $i346: i16;
  var $i347: i32;
  var $i348: i32;
  var $i349: i1;
  var $i350: i64;
  var $p352: ref;
  var $i353: i32;
  var $i354: i32;
  var $i355: i32;
  var $i360: i64;
  var $p362: ref;
  var $i363: i64;
  var $p365: ref;
  var $p366: ref;
  var $i368: i64;
  var $p370: ref;
  var $p373: ref;
  var $i374: i64;
  var $i375: i64;
  var $p376: ref;
  var $i377: i64;
  var $p378: ref;
  var $i379: i64;
  var $i380: i32;
  var $i381: i32;
  var $p384: ref;
  var $i385: i64;
  var $i386: i32;
  var $i387: i64;
  var $p388: ref;
  var $i389: i64;
  var $p391: ref;
  var $i392: i64;
  var $p394: ref;
  var $p395: ref;
  var $i397: i64;
  var $p399: ref;
  var $p402: ref;
  var $i403: i64;
  var $i404: i64;
  var $p405: ref;
  var $i406: i64;
  var $p407: ref;
  var $i408: i64;
  var $i409: i32;
  var $i410: i32;
  var $p413: ref;
  var $i414: i64;
  var $i415: i32;
  var $i416: i64;
  var $p417: ref;
  var $i356: i32;
  var $i357: i32;
  var $i358: i32;
  var $i359: i32;
  var $i418: i1;
  var $i419: i64;
  var $p420: ref;
  var $i421: i8;
  var $i422: i1;
  var $i423: i64;
  var $p424: ref;
  var $i425: i64;
  var $p426: ref;
  var $i427: i1;
  var $i429: i64;
  var $p430: ref;
  var $i431: i64;
  var $i432: i32;
  var $i433: i32;
  var $i434: i32;
  var $i435: i64;
  var $p436: ref;
  var $i437: i32;
  var $i438: i1;
  var $i428: i32;
  var $i439: i64;
  var $p440: ref;
  var $p441: ref;
  var $i442: i32;
  var $i443: i1;
  var $i445: i64;
  var $p447: ref;
  var $i448: i32;
  var $i449: i1;
  var $i444: i32;
  var $p450: ref;
  var $i451: i64;
  var $p452: ref;
  var $i453: i64;
  var $i454: i64;
  var $p456: ref;
  var $p457: ref;
  var $i458: i64;
  var $p460: ref;
  var $i461: i32;
  var $i462: i64;
  var $p464: ref;
  var $i465: i32;
  var $i466: i64;
  var $i467: i64;
  var $p469: ref;
  var $i470: i64;
  var $i471: i64;
  var $i472: i64;
  var $i474: i1;
  var $i475: i64;
  var $p476: ref;
  var $i477: i64;
  var $p478: ref;
  var $i479: i1;
  var $i481: i64;
  var $p483: ref;
  var $i484: i32;
  var $i485: i16;
  var $i486: i32;
  var $i487: i32;
  var $i488: i16;
  var $i489: i64;
  var $p491: ref;
  var $i492: i32;
  var $i493: i16;
  var $i494: i32;
  var $i495: i32;
  var $i496: i16;
  var $i498: i32;
  var $i499: i1;
  var $i497: i32;
  var $i500: i32;
  var $i501: i1;
  var $i480: i32;
  var $i502: i64;
  var $p503: ref;
  var $i504: i32;
  var $i505: i1;
  var $i506: i64;
  var $p507: ref;
  var $i508: i32;
  var $i509: i1;
  var $i510: i64;
  var $p511: ref;
  var $i512: i32;
  var $i513: i1;
  var $i515: i32;
  var $i516: i1;
  var $i514: i32;
  var $i518: i32;
  var $i519: i1;
  var $i517: i32;
  var $i520: i64;
  var $p522: ref;
  var $i523: i64;
  var $i5: i32;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: ref;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: ref;
  var vslice_dummy_var_123: ref;
  var vslice_dummy_var_124: ref;
  var vslice_dummy_var_125: ref;
  var vslice_dummy_var_126: ref;
  var vslice_dummy_var_127: ref;
  var vslice_dummy_var_128: ref;
  var vslice_dummy_var_129: ref;
  var vslice_dummy_var_130: ref;
  var vslice_dummy_var_131: ref;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: ref;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: ref;
  var vslice_dummy_var_137: ref;
  var vslice_dummy_var_138: ref;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1085} {:cexpr "register_PCI:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p6 := pci_match_id(rocket_pci_ids, $p1);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i9 := pci_enable_device($p1);
    call {:si_unique_call 1088} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.2, $p13);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i0);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i15, 8));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p16, $i14);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i17, 4));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p18, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i19, 104)), $mul.ref(96, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p21, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i22 := $M.40;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i0);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i24, 104)), $mul.ref(100, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p26, $i23);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.2, $p27);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i29, 2049);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i29, 2051);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i29, 2053);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i29, 2307);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i29, 2307);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 0, 8;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i309 := $load.i16($M.2, $p308);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i310 := $zext.i16.i32($i309);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i311 := $slt.i32($i310, 2053);
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    $i312 := $slt.i32($i310, 2061);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    $i313 := $slt.i32($i310, 2307);
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i310, 2307);
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb76, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i356, $i357, $i358, $i359 := $i67, $i68, 0, 0;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i418 := $ne.i32($i65, 0);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i418 == 1);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i421 := $M.37;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i422 := $trunc.i8.i1($i421);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i422 == 1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $M.38 := 20;
    call {:si_unique_call 1129} {:cexpr "sClockPrescale"} boogie_si_record_i32(20);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i425 := $sext.i32.i64($i0);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i425, 4));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p426, 460800);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i427 := $slt.i32(0, $i356);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i427 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i439 := $sext.i32.i64($i0);
    $p440 := $add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i439, 136));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p441 := $bitcast.ref.ref($p2);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i442 := sPCIInitController($p440, $i0, $p441, $i356, $i358, 0, 0, 0, $i66, $i359);
    call {:si_unique_call 1132} {:cexpr "num_aiops"} boogie_si_record_i32($i442);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i443 := $slt.i32(0, $i356);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i443 == 1);
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i451 := $sext.i32.i64($i0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i451, 8));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i453 := $load.i64($M.1, $p452);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i454 := $sext.i32.i64($i0);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i454, 104)), $mul.ref(8, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p457 := $bitcast.ref.ref($p456);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i458 := $sext.i32.i64($i0);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i458, 104)), $mul.ref(100, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.2, $p460);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i462 := $sext.i32.i64($i0);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i462, 104)), $mul.ref(100, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i465 := $load.i32($M.2, $p464);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i466 := $sext.i32.i64($i465);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i467 := $sext.i32.i64($i0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i467, 104)), $mul.ref(88, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i470 := $load.i64($M.2, $p469);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i471 := $add.i64($i466, $i470);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i472 := $sub.i64($i471, 1);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_139 := _dev_info.ref.ref.i32.i64.i32.ref.i32.i64($p450, .str.46, $i0, $i453, $i442, $p457, $i461, $i472);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i474 := $sle.i32($i442, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i477 := $sext.i32.i64($i0);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref($i477, 4));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p478, 1);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i479 := $slt.i32(0, $i442);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i479 == 1);
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i502 := $sext.i32.i64($i0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i502, 4));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i504 := $load.i32($M.14, $p503);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i505 := $eq.i32($i504, 1);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i505} true;
    goto $bb143, $bb145;

  $bb145:
    assume !($i505 == 1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i506 := $sext.i32.i64($i0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i506, 4));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i508 := $load.i32($M.14, $p507);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i508, 2);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i509} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i509 == 1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i510 := $sext.i32.i64($i0);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i510, 4));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i512 := $load.i32($M.14, $p511);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i513 := $eq.i32($i512, 3);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i513 == 1;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i514 := 0;
    goto $bb150;

  $bb150:
    call $i515, $i516, $i514 := register_PCI_loop_$bb150($i357, $p440, $i515, $i516, $i514);
    goto $bb150_last;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} sPCIModemReset($p440, $i514, 1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i515 := $add.i32($i514, 1);
    call {:si_unique_call 1141} {:cexpr "chan"} boogie_si_record_i32($i515);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i516 := $slt.i32($i515, $i357);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} msleep(500);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i517 := 0;
    goto $bb155;

  $bb155:
    call $i518, $i519, $i517 := register_PCI_loop_$bb155($i357, $p440, $i518, $i519, $i517);
    goto $bb155_last;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} sPCIModemReset($p440, $i517, 0);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i518 := $add.i32($i517, 1);
    call {:si_unique_call 1144} {:cexpr "chan"} boogie_si_record_i32($i518);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i519 := $slt.i32($i518, $i357);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} msleep(500);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i520 := $sext.i32.i64($i0);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i520, 104)), $mul.ref(0, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i523 := $load.i64($M.2, $p522);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} rmSpeakerReset($p440, $i523);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb157:
    assume $i519 == 1;
    assume {:verifier.code 0} true;
    $i517 := $i518;
    goto $bb157_dummy;

  $bb152:
    assume $i516 == 1;
    assume {:verifier.code 0} true;
    $i514 := $i515;
    goto $bb152_dummy;

  $bb146:
    assume {:verifier.code 0} true;
    assume $i509 == 1;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i505 == 1;
    goto $bb144;

  $bb130:
    assume $i479 == 1;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i480 := 0;
    goto $bb133;

  $bb133:
    call $i481, $p483, $i484, $i485, $i486, $i487, $i488, $i489, $p491, $i492, $i493, $i494, $i495, $i496, $i498, $i499, $i497, $i500, $i501, $i480 := register_PCI_loop_$bb133($i0, $p1, $i357, $i439, $i442, $i481, $p483, $i484, $i485, $i486, $i487, $i488, $i489, $p491, $i492, $i493, $i494, $i495, $i496, $i498, $i499, $i497, $i500, $i501, $i480);
    goto $bb133_last;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i481 := $sext.i32.i64($i480);
    $p483 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i439, 136)), $mul.ref(60, 1)), $mul.ref($i481, 4));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i484 := $load.i32($M.2, $p483);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i485 := $trunc.i32.i16($i484);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i486 := $zext.i16.i32($i485);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i487 := $add.i32($i486, 56);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i488 := $trunc.i32.i16($i487);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} sOutB($i488, $sub.i8(0, 128));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i489 := $sext.i32.i64($i480);
    $p491 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i439, 136)), $mul.ref(60, 1)), $mul.ref($i489, 4));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i492 := $load.i32($M.2, $p491);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i493 := $trunc.i32.i16($i492);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i494 := $zext.i16.i32($i493);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i495 := $add.i32($i494, 56);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i496 := $trunc.i32.i16($i495);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} sOutB($i496, 0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i497 := 0;
    goto $bb135;

  $bb135:
    call $i498, $i499, $i497 := register_PCI_loop_$bb135($i0, $p1, $i357, $i498, $i499, $i497, $i480);
    goto $bb135_last;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} init_r_port($i0, $i480, $i497, $p1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i498 := $add.i32($i497, 1);
    call {:si_unique_call 1138} {:cexpr "chan"} boogie_si_record_i32($i498);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i499 := $slt.i32($i498, $i357);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i499 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i500 := $add.i32($i480, 1);
    call {:si_unique_call 1139} {:cexpr "aiop"} boogie_si_record_i32($i500);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i501 := $slt.i32($i500, $i442);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i501 == 1);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb140:
    assume $i501 == 1;
    assume {:verifier.code 0} true;
    $i480 := $i500;
    goto $bb140_dummy;

  $bb137:
    assume $i499 == 1;
    assume {:verifier.code 0} true;
    $i497 := $i498;
    goto $bb137_dummy;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb127:
    assume $i474 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i475 := $sext.i32.i64($i0);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i475, 8));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p476, 0);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb119:
    assume $i443 == 1;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i444 := 0;
    goto $bb122;

  $bb122:
    call $i445, $p447, $i448, $i449, $i444 := register_PCI_loop_$bb122($i356, $i357, $i439, $i445, $p447, $i448, $i449, $i444);
    goto $bb122_last;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i445 := $sext.i32.i64($i444);
    $p447 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i439, 136)), $mul.ref(108, 1)), $mul.ref($i445, 4));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p447, $i357);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i448 := $add.i32($i444, 1);
    call {:si_unique_call 1133} {:cexpr "aiop"} boogie_si_record_i32($i448);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i449 := $slt.i32($i448, $i356);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i449 == 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb124:
    assume $i449 == 1;
    assume {:verifier.code 0} true;
    $i444 := $i448;
    goto $bb124_dummy;

  $bb111:
    assume $i427 == 1;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i428 := 0;
    goto $bb114;

  $bb114:
    call $i429, $p430, $i431, $i432, $i433, $i434, $i435, $p436, $i437, $i438, $i428 := register_PCI_loop_$bb114($i0, $p2, $i356, $i429, $p430, $i431, $i432, $i433, $i434, $i435, $p436, $i437, $i438, $i428);
    goto $bb114_last;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i429 := $sext.i32.i64($i0);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i429, 8));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i431 := $load.i64($M.1, $p430);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i432 := $trunc.i64.i32($i431);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i433 := $mul.i32($i428, 64);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i434 := $add.i32($i432, $i433);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i435 := $sext.i32.i64($i428);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref($i435, 4));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p436, $i434);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i437 := $add.i32($i428, 1);
    call {:si_unique_call 1130} {:cexpr "aiop"} boogie_si_record_i32($i437);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i438 := $slt.i32($i437, $i356);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i438 == 1);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb116:
    assume $i438 == 1;
    assume {:verifier.code 0} true;
    $i428 := $i437;
    goto $bb116_dummy;

  $bb108:
    assume $i422 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.38 := 25;
    call {:si_unique_call 1128} {:cexpr "sClockPrescale"} boogie_si_record_i32(25);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i423 := $sext.i32.i64($i0);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i423, 4));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p424, 230400);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i418 == 1;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $M.38 := 18;
    call {:si_unique_call 1127} {:cexpr "sClockPrescale"} boogie_si_record_i32(18);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i419 := $sext.i32.i64($i0);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref($i419, 4));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p420, 921600);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i325 := $load.i64($M.2, $p324);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i326 := $sext.i32.i64($i0);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i326, 8));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p327, $i325);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.2, $p330);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i64.i32($i331);
    call {:si_unique_call 1123} {:cexpr "ConfigIO"} boogie_si_record_i32($i332);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i334 := $load.i16($M.2, $p333);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i335 := $zext.i16.i32($i334);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 2053);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    $i354, $i355 := $i68, 0;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i356, $i357, $i358, $i359 := $i67, $i354, $i332, $i355;
    goto $bb103;

  $bb97:
    assume $i336 == 1;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i337, 8));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i339 := $load.i64($M.1, $p338);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i64.i32($i339);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i341 := $add.i32($i340, 192);
    call {:si_unique_call 1124} {:cexpr "UPCIRingInd"} boogie_si_record_i32($i341);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i342 := $trunc.i32.i16($i332);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i343 := $zext.i16.i32($i342);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i344 := $add.i32($i343, 84);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i32.i16($i344);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i346 := sInW($i345);
    call {:si_unique_call 1126} {:cexpr "tmp___1"} boogie_si_record_i16($i346);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i347 := $zext.i16.i32($i346);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i348 := $and.i32($i347, 16384);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    $i353 := $i68;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i354, $i355 := $i353, $i341;
    goto $bb102;

  $bb99:
    assume $i349 == 1;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i350 := $sext.i32.i64($i0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i350, 104)), $mul.ref(88, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p352, 4);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i353 := 4;
    goto $bb101;

  $bb74:
    assume $i313 == 1;
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i310, 2061);
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i315 == 1);
    goto $bb79;

  $bb80:
    assume $i315 == 1;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i389 := $sext.i32.i64($i0);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i389, 104)), $mul.ref(0, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p391, 2060);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i392 := $sext.i32.i64($i0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i392, 104)), $mul.ref(8, 1));
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p395 := $bitcast.ref.ref($p394);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_137 := strcpy($p395, .str.45);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i397 := $sext.i32.i64($i0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i397, 104)), $mul.ref(88, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p399, 4);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i403 := $load.i64($M.2, $p402);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i404 := $sext.i32.i64($i0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i404, 8));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p405, $i403);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i406 := $sext.i32.i64($i0);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i406, 8));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i408 := $load.i64($M.1, $p407);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i409 := $trunc.i64.i32($i408);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i410 := $add.i32($i409, 192);
    call {:si_unique_call 1118} {:cexpr "UPCIRingInd"} boogie_si_record_i32($i410);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i414 := $load.i64($M.2, $p413);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i64.i32($i414);
    call {:si_unique_call 1119} {:cexpr "ConfigIO"} boogie_si_record_i32($i415);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i416 := $sext.i32.i64($i0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i416, 4));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p417, 3);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i356, $i357, $i358, $i359 := 1, $i68, $i415, $i410;
    goto $bb103;

  $bb72:
    assume $i312 == 1;
    assume {:verifier.code 0} true;
    $i316 := $slt.i32($i310, 2060);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i316 == 1);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i360 := $sext.i32.i64($i0);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i360, 104)), $mul.ref(0, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p362, 2060);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i363 := $sext.i32.i64($i0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i363, 104)), $mul.ref(8, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p365);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_138 := strcpy($p366, .str.44);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i368 := $sext.i32.i64($i0);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i368, 104)), $mul.ref(88, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p370, 8);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i374 := $load.i64($M.2, $p373);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i375 := $sext.i32.i64($i0);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i375, 8));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p376, $i374);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i377 := $sext.i32.i64($i0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref($i377, 8));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i379 := $load.i64($M.1, $p378);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i380 := $trunc.i64.i32($i379);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i381 := $add.i32($i380, 192);
    call {:si_unique_call 1121} {:cexpr "UPCIRingInd"} boogie_si_record_i32($i381);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i385 := $load.i64($M.2, $p384);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i386 := $trunc.i64.i32($i385);
    call {:si_unique_call 1122} {:cexpr "ConfigIO"} boogie_si_record_i32($i386);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i387 := $sext.i32.i64($i0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i387, 4));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p388, 3);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i356, $i357, $i358, $i359 := 1, $i68, $i386, $i381;
    goto $bb103;

  $bb82:
    assume $i316 == 1;
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i310, 2053);
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb84, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb79;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i317 == 1;
    goto $bb85;

  $bb70:
    assume $i311 == 1;
    assume {:verifier.code 0} true;
    $i318 := $slt.i32($i310, 2050);
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    $i319 := $slt.i32($i310, 2051);
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb89, $bb91;

  $bb91:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i310, 2051);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb79;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb87:
    assume $i318 == 1;
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i310, 2049);
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i321 == 1);
    goto $bb79;

  $bb95:
    assume $i321 == 1;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i179, 104)), $mul.ref(0, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p181, 2307);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i182 := $sext.i32.i64($i0);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i182, 104)), $mul.ref(8, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_117 := strcpy($p185, .str.35);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i0);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i187, 104)), $mul.ref(88, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p189, 16);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 2, 8;
    goto $bb61;

  $bb20:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i29, 2053);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb24;

  $bb25:
    assume $i36 == 1;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i0);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i80, 104)), $mul.ref(0, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p82, 2053);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i83, 104)), $mul.ref(8, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} vslice_dummy_var_118 := strcpy($p86, .str.26);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i0);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i88, 104)), $mul.ref(88, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p90, 8);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 8;
    goto $bb61;

  $bb18:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i29, 2051);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb24;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i0);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i168, 104)), $mul.ref(0, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p170, 2051);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i0);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i171, 104)), $mul.ref(8, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_119 := strcpy($p174, .str.34);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i0);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i176, 104)), $mul.ref(88, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p178, 16);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 2, 8;
    goto $bb61;

  $bb16:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i29, 2050);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i38 == 1);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i0);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i102, 104)), $mul.ref(0, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p104, 2050);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i0);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i105, 104)), $mul.ref(8, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_121 := strcpy($p108, .str.28);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i0);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i110, 104)), $mul.ref(88, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p112, 8);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 8;
    goto $bb61;

  $bb29:
    assume $i38 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i0);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i201, 104)), $mul.ref(0, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p203, 2049);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i204 := $sext.i32.i64($i0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i204, 104)), $mul.ref(8, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_120 := strcpy($p207, .str.37);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i209 := $sext.i32.i64($i0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i209, 104)), $mul.ref(88, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p211, 32);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 4, 8;
    goto $bb61;

  $bb14:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i29, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i29, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i29, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i29, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb24;

  $bb37:
    assume $i42 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i251 := $add.i32(0, 1);
    call {:si_unique_call 1097} {:cexpr "altChanRingIndicator"} boogie_si_record_i32($i251);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i252 := $add.i32(0, 1);
    call {:si_unique_call 1098} {:cexpr "fast_clock"} boogie_si_record_i32($i252);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i253 := $sext.i32.i64($i0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i253, 104)), $mul.ref(0, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p255, 15);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i256 := $sext.i32.i64($i0);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i256, 104)), $mul.ref(8, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_123 := strcpy($p259, .str.41);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i261 := $sext.i32.i64($i0);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i261, 104)), $mul.ref(88, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p263, 2);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := $i252, $i251, 1, 2;
    goto $bb61;

  $bb35:
    assume $i41 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i238 := $add.i32(0, 1);
    call {:si_unique_call 1094} {:cexpr "altChanRingIndicator"} boogie_si_record_i32($i238);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i239 := $add.i32(0, 1);
    call {:si_unique_call 1095} {:cexpr "fast_clock"} boogie_si_record_i32($i239);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i240 := $sext.i32.i64($i0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i240, 104)), $mul.ref(0, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p242, 14);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i0);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i243, 104)), $mul.ref(8, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_122 := strcpy($p246, .str.40);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i248 := $sext.i32.i64($i0);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i248, 104)), $mul.ref(88, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p250, 2);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := $i239, $i238, 1, 2;
    goto $bb61;

  $bb33:
    assume $i40 == 1;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.2, $p286);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 1);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i289 == 1);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i295 := $sext.i32.i64($i0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i295, 4));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p296, 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i297 := $sext.i32.i64($i0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i297, 104)), $mul.ref(0, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p299, 13);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i300 := $sext.i32.i64($i0);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i300, 104)), $mul.ref(8, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} vslice_dummy_var_136 := strcpy($p303, .str.43);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i305 := $sext.i32.i64($i0);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i305, 104)), $mul.ref(88, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p307, 4);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 4;
    goto $bb61;

  $bb65:
    assume $i289 == 1;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i290, 4));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p291, 2);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i292 := $sext.i32.i64($i0);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i292, 104)), $mul.ref(96, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p294, 1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb31:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i29, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i43 == 1);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.2, $p264);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i267 == 1);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i273 := $sext.i32.i64($i0);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i273, 4));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p274, 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i275, 104)), $mul.ref(0, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p277, 12);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i278 := $sext.i32.i64($i0);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i278, 104)), $mul.ref(8, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p281 := $bitcast.ref.ref($p280);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_135 := strcpy($p281, .str.42);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i283 := $sext.i32.i64($i0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i283, 104)), $mul.ref(88, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p285, 6);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 6;
    goto $bb61;

  $bb62:
    assume $i267 == 1;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i268 := $sext.i32.i64($i0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref($i268, 4));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p269, 2);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i270 := $sext.i32.i64($i0);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i270, 104)), $mul.ref(96, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p272, 1);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb39:
    assume $i43 == 1;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i225 := $add.i32(0, 1);
    call {:si_unique_call 1100} {:cexpr "altChanRingIndicator"} boogie_si_record_i32($i225);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i226 := $add.i32(0, 1);
    call {:si_unique_call 1101} {:cexpr "fast_clock"} boogie_si_record_i32($i226);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i227 := $sext.i32.i64($i0);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i227, 104)), $mul.ref(0, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p229, 11);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i230 := $sext.i32.i64($i0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i230, 104)), $mul.ref(8, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_124 := strcpy($p233, .str.39);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i235, 104)), $mul.ref(88, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p237, 8);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := $i226, $i225, 2, 4;
    goto $bb61;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i29, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i29, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i29, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i29, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i47 == 1);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i212 := $add.i32(0, 1);
    call {:si_unique_call 1105} {:cexpr "altChanRingIndicator"} boogie_si_record_i32($i212);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i213 := $add.i32(0, 1);
    call {:si_unique_call 1106} {:cexpr "fast_clock"} boogie_si_record_i32($i213);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i214 := $sext.i32.i64($i0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i214, 104)), $mul.ref(0, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p216, 10);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i217, 104)), $mul.ref(8, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_127 := strcpy($p220, .str.38);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i222, 104)), $mul.ref(88, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p224, 4);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := $i213, $i212, 1, 4;
    goto $bb61;

  $bb47:
    assume $i47 == 1;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i146, 104)), $mul.ref(0, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p148, 9);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i149, 104)), $mul.ref(8, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_126 := strcpy($p152, .str.32);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i154 := $sext.i32.i64($i0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i154, 104)), $mul.ref(88, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p156, 16);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 2, 8;
    goto $bb61;

  $bb45:
    assume $i46 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i135, 104)), $mul.ref(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p137, 8);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i138, 104)), $mul.ref(8, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} vslice_dummy_var_125 := strcpy($p141, .str.31);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i143, 104)), $mul.ref(88, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p145, 8);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 8;
    goto $bb61;

  $bb43:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i29, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i48 == 1);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i124, 104)), $mul.ref(0, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p126, 7);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i0);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i127, 104)), $mul.ref(8, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_129 := strcpy($p130, .str.30);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i0);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i132, 104)), $mul.ref(88, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p134, 4);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 4;
    goto $bb61;

  $bb49:
    assume $i48 == 1;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i113, 104)), $mul.ref(0, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p115, 6);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i116, 104)), $mul.ref(8, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_128 := strcpy($p119, .str.29);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i121, 104)), $mul.ref(88, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p123, 8);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 8;
    goto $bb61;

  $bb41:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i29, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i29, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i29, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i51 == 1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i0);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i69, 104)), $mul.ref(0, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p71, 5);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i0);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i72, 104)), $mul.ref(8, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} vslice_dummy_var_132 := strcpy($p75, .str.25);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i77, 104)), $mul.ref(88, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p79, 8);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 8;
    goto $bb61;

  $bb55:
    assume $i51 == 1;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i0);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i54, 104)), $mul.ref(0, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p56, 4);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i0);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i57, 104)), $mul.ref(8, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vslice_dummy_var_131 := strcpy($p60, .str.24);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i0);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i62, 104)), $mul.ref(88, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p64, 4);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 4;
    goto $bb61;

  $bb53:
    assume $i50 == 1;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i157, 104)), $mul.ref(0, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p159, 3);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i160, 104)), $mul.ref(8, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} vslice_dummy_var_130 := strcpy($p163, .str.33);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i165 := $sext.i32.i64($i0);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i165, 104)), $mul.ref(88, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p167, 16);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 2, 8;
    goto $bb61;

  $bb51:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i29, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i52 == 1);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i91, 104)), $mul.ref(0, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p93, 2);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i0);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i94, 104)), $mul.ref(8, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_133 := strcpy($p97, .str.27);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i0);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i99, 104)), $mul.ref(88, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p101, 8);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 1, 8;
    goto $bb61;

  $bb57:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb24;

  $bb59:
    assume $i53 == 1;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i0);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i190, 104)), $mul.ref(0, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p192, 1);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i0);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i193, 104)), $mul.ref(8, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} vslice_dummy_var_134 := strcpy($p196, .str.36);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i0);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref($i198, 104)), $mul.ref(88, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p200, 32);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i65, $i66, $i67, $i68 := 0, 0, 4, 8;
    goto $bb61;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb157_dummy:
    assume false;
    return;

  $bb155_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6416;

  $bb152_dummy:
    assume false;
    return;

  $bb150_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6408;

  $bb137_dummy:
    assume false;
    return;

  $bb135_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  $bb140_dummy:
    assume false;
    return;

  $bb133_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6363;

  $bb124_dummy:
    assume false;
    return;

  $bb122_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6320;

  $bb116_dummy:
    assume false;
    return;

  $bb114_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6297;
}



const pci_get_device: ref;

axiom pci_get_device == $sub.ref(0, 299564);

procedure pci_get_device($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_device($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} {:cexpr "pci_get_device:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1148} {:cexpr "pci_get_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p3 := external_alloc();
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_match_id: ref;

axiom pci_match_id == $sub.ref(0, 300596);

procedure pci_match_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_match_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $p2 := external_alloc();
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 301628);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sPCIInitController: ref;

axiom sPCIInitController == $sub.ref(0, 302660);

procedure sPCIInitController($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i8, $i7: i32, $i8: i32, $i9: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sPCIInitController($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i8, $i7: i32, $i8: i32, $i9: i32) returns ($r: i32)
{
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i16;
  var $p59: ref;
  var $i60: i1;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i16;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i8;
  var $i95: i32;
  var $i96: i8;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $i61: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p107: ref;
  var $i108: i32;
  var $i106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} {:cexpr "sPCIInitController:arg:CtlNum"} boogie_si_record_i32($i1);
    call {:si_unique_call 1154} {:cexpr "sPCIInitController:arg:AiopIOListSize"} boogie_si_record_i32($i3);
    call {:si_unique_call 1155} {:cexpr "sPCIInitController:arg:ConfigIO"} boogie_si_record_i32($i4);
    call {:si_unique_call 1156} {:cexpr "sPCIInitController:arg:IRQNum"} boogie_si_record_i32($i5);
    call {:si_unique_call 1157} {:cexpr "sPCIInitController:arg:Frequency"} boogie_si_record_i8($i6);
    call {:si_unique_call 1158} {:cexpr "sPCIInitController:arg:PeriodicOnly"} boogie_si_record_i32($i7);
    call {:si_unique_call 1159} {:cexpr "sPCIInitController:arg:altChanRingIndicator"} boogie_si_record_i32($i8);
    call {:si_unique_call 1160} {:cexpr "sPCIInitController:arg:UPCIRingInd"} boogie_si_record_i32($i9);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(52, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p10, $i8);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p11, $i9);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p12, $i1);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p13, 1);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p14, 1);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i4, 0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p22, 0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.41, $p2);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 58);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(20, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p25, $i24);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, aiop_intr_bits);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $p27);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(20, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.2, $p54);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} sOutW($i58, 8192);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p59, 0);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32(0, $i3);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.2, $p103);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i105 == 1);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.2, $p107);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i106 := $i108;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $r := $i106;
    return;

  $bb19:
    assume $i105 == 1;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 1);
    goto $bb21;

  $bb7:
    assume $i60 == 1;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb10;

  $bb10:
    call $i62, $p63, $i64, $i65, $p67, $i68, $i69, $p71, $i72, $i73, $p75, $i76, $p78, $i79, $i80, $i81, $i82, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $p97, $i98, $i99, $p100, $i101, $i102, $i61 := sPCIInitController_loop_$bb10($p0, $p2, $i3, $i62, $p63, $i64, $i65, $p67, $i68, $i69, $p71, $i72, $i73, $p75, $i76, $p78, $i79, $i80, $i81, $i82, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $p97, $i98, $i99, $p100, $i101, $i102, $i61);
    goto $bb10_last;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p2, $mul.ref($i62, 4));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.41, $p63);
    call {:si_unique_call 1167} {:cexpr "io"} boogie_si_record_i32($i64);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i61);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref($i65, 4));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p67, $i64);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i64, 57);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i61);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref($i69, 4));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p71, $i68);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i72 := sReadAiopID($i64);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i61);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref($i73, 4));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p75, $i72);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i61);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref($i76, 4));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.2, $p78);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, $sub.i32(0, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i81 := sReadAiopNumChan($i64);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i61);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref($i82, 4));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p84, $i81);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i64);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 60);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} sOutW($i88, 4086);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i64);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 62);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i93 := $M.38;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} sOutB($i92, $i96);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.2, $p97);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 1);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p100, $i99);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i61, 1);
    call {:si_unique_call 1172} {:cexpr "i"} boogie_si_record_i32($i101);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, $i3);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i102 == 1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i61 := $i101;
    goto $bb16_dummy;

  $bb12:
    assume $i80 == 1;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(20, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.2, $p30);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i35 := sInW($i34);
    call {:si_unique_call 1162} {:cexpr "tmp"} boogie_si_record_i16($i35);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    call {:si_unique_call 1163} {:cexpr "w"} boogie_si_record_i32($i36);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(20, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i36);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i44 := $xor.i32($i43, 1);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} sOutW($i41, $i45);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(20, 1));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.2, $p46);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i36);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} sOutW($i50, $i53);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p16, 1);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i4, 76);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(20, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p18, $i17);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i4, 84);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p20, $i19);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, upci_aiop_intr_bits);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6518;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 303692);

procedure _dev_info.ref.ref.i32.i64.i32.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: ref, p.6: i32, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i64.i32.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: ref, p.6: i32, p.7: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1173} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const init_r_port: ref;

axiom init_r_port == $sub.ref(0, 304724);

procedure init_r_port($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.40, $M.4, $CurrAddr, assertsPassed;



implementation init_r_port($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i8;
  var $i31: i8;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $i35: i8;
  var $i36: i8;
  var $i37: i8;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $p92: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i16;
  var $i97: i32;
  var $i98: i16;
  var $p100: ref;
  var $p101: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $p111: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i8;
  var $p121: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i16;
  var $i126: i32;
  var $i127: i16;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i8;
  var $p142: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i16;
  var $i147: i32;
  var $i148: i16;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: ref;
  var vslice_dummy_var_143: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1177} {:cexpr "init_r_port:arg:board"} boogie_si_record_i32($i0);
    call {:si_unique_call 1178} {:cexpr "init_r_port:arg:aiop"} boogie_si_record_i32($i1);
    call {:si_unique_call 1179} {:cexpr "init_r_port:arg:chan"} boogie_si_record_i32($i2);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i6 := SetLineNumber($i0, $i1, $i2);
    call {:si_unique_call 1181} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 1182} {:cexpr "line"} boogie_si_record_i32($i7);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i0);
    $p9 := $add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i8, 136));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p10 := kzalloc(1648, 208);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(0, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p15, 5394433);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1072, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p16, $i7);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1088, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, $p9);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i0);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.2, $p19);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i18, 7);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i20, $sub.i8(0, 8));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i23 := $or.i8($i22, $i21);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, $i23);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i1);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.2, $p25);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i24, 3);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i28 := $shl.i8($i27, 3);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i26, $sub.i8(0, 25));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i30 := $or.i8($i29, $i28);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p25, $i30);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i2);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1080, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.2, $p32);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i34 := $and.i8($i31, 7);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i35 := $shl.i8($i34, 5);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i33, 31);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i37 := $or.i8($i36, $i35);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p32, $i37);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} tty_port_init($p38);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(8, 1)), $mul.ref(336, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, rocket_port_ops);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1312, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} init_completion($p41);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $sub.i32(0, 12289));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p45, $i44);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i0);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref(pc104, $mul.ref(0, 32)), $mul.ref($i46, 8));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.42, $p47);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i7);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 8));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.33, $p50);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i52 := $slt.i64($i51, 422);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i64($i51, 485);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i51, 485);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.2, $p65);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p67, $i66);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1264, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p68, 63);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i70 := sInitChan($p9, $p69, $i1, $i2);
    call {:si_unique_call 1188} {:cexpr "tmp___1"} boogie_si_record_i32($i70);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.2, $p75);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 12288);
    call {:si_unique_call 1192} {:cexpr "rocketMode"} boogie_si_record_i32($i77);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.2, $p78);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 1024);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i81 == 1);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i77, 4096);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i82 == 1);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.2, $p135);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 191);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i138);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p142, $i139);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.2, $p144);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i146);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i16($i147);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} out32($i148, $p151);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p153, 0);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p154 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref($i8, 136)), $mul.ref(12, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.2, $p154);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 4);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} vslice_dummy_var_142 := spinlock_check($p170);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1408, 1)), $mul.ref(0, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __raw_spin_lock_init($p174, .str.21, $p4);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1480, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} __mutex_init($p175, .str.22, $p5);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i7);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref($i176, 8));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p177, $p10);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p179 := $M.13;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p3);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i181 == 1);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p183 := $0.ref;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} vslice_dummy_var_143 := tty_port_register_device($p178, $p179, $i7, $p183);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb48:
    assume $i181 == 1;
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p183 := $p182;
    goto $bb50;

  $bb28:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i77, 4096);
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i77, 8192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i77, 8192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.2, $p164);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 1024);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i167 == 1);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} sSetInterfaceMode($p169, 0);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i167 == 1;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} sSetInterfaceMode($p168, 24);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb35:
    assume $i159 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} sSetInterfaceMode($p163, 8);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb33:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i77, 4096);
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb37;

  $bb38:
    assume $i160 == 1;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} sSetInterfaceMode($p162, 16);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume $i157 == 1;
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i77, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb37;

  $bb40:
    assume $i161 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.2, $p85);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 191);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p92, $i89);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.2, $p94);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(148, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} out32($i98, $p101);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.2, $p104);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 64);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p111, $i108);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.2, $p114);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 253);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p121, $i118);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(36, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.2, $p123);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i125);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(144, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} out32($i127, $p130);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(20, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p132, 1);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb23;

  $bb19:
    assume $i71 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} vslice_dummy_var_141 := printk.ref.i32.i32.i32(.str.20, $i0, $i1, $i2);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} tty_port_destroy($p73);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p11);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} kfree($p74);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 4096);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p64, $i63);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i51, 422);
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb12;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.2, $p57);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 8192);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p11, $mul.ref(0, 1648)), $mul.ref(1076, 1));
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p60, $i59);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i51, 232);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb12;

  $bb15:
    assume $i56 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} vslice_dummy_var_140 := printk.ref.i32(.str.19, $i7);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 305756);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    return;
}



const rmSpeakerReset: ref;

axiom rmSpeakerReset == $sub.ref(0, 306788);

procedure rmSpeakerReset($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation rmSpeakerReset($p0: ref, $i1: i64)
{
  var $i2: i1;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} {:cexpr "rmSpeakerReset:arg:model"} boogie_si_record_i64($i1);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 13);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 12);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 2060);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i1, 2060);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(0, 4));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 136);
    call {:si_unique_call 1208} {:cexpr "addr"} boogie_si_record_i32($i16);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} sOutB($i19, 0);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(0, 4));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 79);
    call {:si_unique_call 1206} {:cexpr "addr"} boogie_si_record_i32($i7);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} sOutB($i10, 0);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const SetLineNumber: ref;

axiom SetLineNumber == $sub.ref(0, 307820);

procedure SetLineNumber($i0: i32, $i1: i32, $i2: i32) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.40, $M.4;



implementation SetLineNumber($i0: i32, $i1: i32, $i2: i32) returns ($r: i8)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} {:cexpr "SetLineNumber:arg:ctrl"} boogie_si_record_i32($i0);
    call {:si_unique_call 1211} {:cexpr "SetLineNumber:arg:aiop"} boogie_si_record_i32($i1);
    call {:si_unique_call 1212} {:cexpr "SetLineNumber:arg:ch"} boogie_si_record_i32($i2);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    call {:si_unique_call 1213} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i4 := $M.40;
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 1);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $M.40 := $i5;
    call {:si_unique_call 1214} {:cexpr "nextLineNumber"} boogie_si_record_i64($i5);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i8($i3);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i0, 5);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i1, 3);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i7, $i8);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i2);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref($i11, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p12, $i6);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i13 := $M.40;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i8($i13);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 308852);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1216} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} ldv_check_alloc_flags($i1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 309884);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 310916);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p2, 0);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __init_waitqueue_head($p3, .str.23, $p1);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    return;
}



const sInitChan: ref;

axiom sInitChan == $sub.ref(0, 311948);

procedure sInitChan($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sInitChan($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i8;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $i57: i8;
  var $p58: ref;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p77: ref;
  var $i78: i8;
  var $p79: ref;
  var $i80: i8;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i8;
  var $p96: ref;
  var $i97: i8;
  var $p99: ref;
  var $i100: i32;
  var $i101: i8;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i16;
  var $i107: i32;
  var $i108: i16;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i8;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i16;
  var $i129: i32;
  var $i130: i16;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i8;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i8;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i16;
  var $i151: i32;
  var $i152: i16;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $i157: i32;
  var $i158: i8;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i16;
  var $i173: i32;
  var $i174: i16;
  var $p175: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i8;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i8;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i16;
  var $i195: i32;
  var $i196: i16;
  var $p197: ref;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i32;
  var $i202: i8;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i8;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i16;
  var $i217: i32;
  var $i218: i16;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i8;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i8;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var $i238: i16;
  var $i239: i32;
  var $i240: i16;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $p244: ref;
  var $i245: i32;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $i249: i16;
  var $i250: i32;
  var $i251: i16;
  var $i252: i8;
  var $i253: i32;
  var $i254: i32;
  var $i255: i8;
  var $p256: ref;
  var $i257: i32;
  var $i258: i16;
  var $i259: i32;
  var $i260: i16;
  var $i261: i8;
  var $i262: i32;
  var $i263: i8;
  var $p264: ref;
  var $i265: i32;
  var $i266: i16;
  var $i267: i32;
  var $i268: i16;
  var $p269: ref;
  var $i270: i32;
  var $i271: i16;
  var $i272: i32;
  var $i273: i16;
  var $p274: ref;
  var $i275: i32;
  var $i276: i16;
  var $i277: i32;
  var $i278: i16;
  var $i279: i32;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i32;
  var $i284: i16;
  var $i285: i32;
  var $i286: i16;
  var $i287: i8;
  var $i288: i32;
  var $i289: i32;
  var $i290: i8;
  var $p291: ref;
  var $i292: i32;
  var $i293: i16;
  var $i294: i32;
  var $i295: i16;
  var $i296: i8;
  var $i297: i32;
  var $i298: i8;
  var $p299: ref;
  var $i300: i32;
  var $i301: i16;
  var $i302: i32;
  var $i303: i16;
  var $p304: ref;
  var $i305: i32;
  var $i306: i16;
  var $i307: i32;
  var $i308: i16;
  var $p309: ref;
  var $i310: i32;
  var $i311: i16;
  var $i312: i32;
  var $i313: i16;
  var $p314: ref;
  var $i315: i32;
  var $i316: i16;
  var $i317: i32;
  var $i318: i16;
  var $p319: ref;
  var $i320: i32;
  var $i321: i16;
  var $i322: i32;
  var $i323: i32;
  var $i324: i16;
  var $p325: ref;
  var $i326: i32;
  var $i327: i16;
  var $i328: i32;
  var $i329: i16;
  var $i330: i32;
  var $p331: ref;
  var $p332: ref;
  var $i333: i32;
  var $i334: i16;
  var $i335: i32;
  var $i336: i16;
  var $p337: ref;
  var $i338: i32;
  var $i339: i16;
  var $i340: i32;
  var $i341: i16;
  var $p342: ref;
  var $i343: i32;
  var $i344: i16;
  var $i345: i32;
  var $i346: i16;
  var $i347: i32;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i16;
  var $i352: i32;
  var $i353: i16;
  var $p354: ref;
  var $i355: i32;
  var $i356: i16;
  var $i357: i32;
  var $i358: i16;
  var $p359: ref;
  var $i360: i32;
  var $i361: i16;
  var $i362: i32;
  var $i363: i16;
  var $i364: i32;
  var $p365: ref;
  var $p367: ref;
  var $i368: i8;
  var $i369: i32;
  var $i370: i32;
  var $i371: i8;
  var $p373: ref;
  var $p374: ref;
  var $i375: i32;
  var $i376: i16;
  var $i377: i32;
  var $i378: i16;
  var $p379: ref;
  var $p380: ref;
  var $i10: i32;
  var $i381: i8;
  var $p382: ref;
  var $i383: i8;
  var $i384: i32;
  var $i385: i8;
  var $i386: i32;
  var $i387: i32;
  var $i388: i32;
  var $i389: i8;
  var $p390: ref;
  var $i391: i8;
  var $p392: ref;
  var $i393: i8;
  var $p394: ref;
  var $i395: i8;
  var $p396: ref;
  var $i397: i8;
  var $i398: i32;
  var $i399: i8;
  var $i400: i32;
  var $i401: i32;
  var $i402: i32;
  var $i403: i8;
  var $p404: ref;
  var $i405: i8;
  var $p406: ref;
  var $i407: i8;
  var $p408: ref;
  var $i409: i8;
  var $p410: ref;
  var $i411: i8;
  var $i412: i32;
  var $i413: i8;
  var $i414: i32;
  var $i415: i32;
  var $i416: i32;
  var $i417: i8;
  var $p418: ref;
  var $i419: i8;
  var $p420: ref;
  var $i421: i8;
  var $p422: ref;
  var $i423: i8;
  var $p424: ref;
  var $i425: i8;
  var $i426: i32;
  var $i427: i8;
  var $i428: i32;
  var $i429: i32;
  var $i430: i32;
  var $i431: i8;
  var $p432: ref;
  var $i433: i8;
  var $p434: ref;
  var $i435: i8;
  var $p436: ref;
  var $i437: i8;
  var $p438: ref;
  var $i439: i8;
  var $i440: i32;
  var $i441: i8;
  var $i442: i32;
  var $i443: i32;
  var $i444: i32;
  var $i445: i8;
  var $p446: ref;
  var $i447: i8;
  var $p448: ref;
  var $i449: i8;
  var $p450: ref;
  var $i451: i8;
  var $p452: ref;
  var $i453: i8;
  var $i454: i32;
  var $i455: i8;
  var $i456: i32;
  var $i457: i32;
  var $i458: i32;
  var $i459: i8;
  var $p460: ref;
  var $i461: i8;
  var $p462: ref;
  var $i463: i8;
  var $p464: ref;
  var $i465: i8;
  var $p466: ref;
  var $i467: i8;
  var $i468: i32;
  var $i469: i8;
  var $i470: i32;
  var $i471: i32;
  var $i472: i32;
  var $i473: i8;
  var $p474: ref;
  var $i475: i8;
  var $p476: ref;
  var $i477: i8;
  var $p478: ref;
  var $i479: i8;
  var $p480: ref;
  var $i481: i8;
  var $i482: i32;
  var $i483: i8;
  var $i484: i32;
  var $i485: i32;
  var $i486: i32;
  var $i487: i8;
  var $p488: ref;
  var $i489: i8;
  var $p490: ref;
  var $i491: i8;
  var $p492: ref;
  var $i493: i8;
  var $p494: ref;
  var $i495: i8;
  var $i496: i32;
  var $i497: i8;
  var $i498: i32;
  var $i499: i32;
  var $i500: i32;
  var $i501: i8;
  var $p502: ref;
  var $i503: i8;
  var $p504: ref;
  var $i505: i8;
  var $p506: ref;
  var $i507: i8;
  var $p508: ref;
  var $i509: i8;
  var $i510: i32;
  var $i511: i8;
  var $i512: i32;
  var $i513: i32;
  var $i514: i32;
  var $i515: i8;
  var $p516: ref;
  var $i517: i8;
  var $p518: ref;
  var $i519: i8;
  var $p520: ref;
  var $i521: i8;
  var $p522: ref;
  var $i523: i8;
  var $i524: i32;
  var $i525: i8;
  var $i526: i32;
  var $i527: i32;
  var $i528: i32;
  var $i529: i8;
  var $p530: ref;
  var $i531: i8;
  var $p532: ref;
  var $i533: i8;
  var $p534: ref;
  var $i535: i8;
  var $p536: ref;
  var $i537: i8;
  var $i538: i32;
  var $i539: i8;
  var $i540: i32;
  var $i541: i32;
  var $i542: i32;
  var $i543: i8;
  var $p544: ref;
  var $i545: i8;
  var $p546: ref;
  var $i547: i8;
  var $p548: ref;
  var $i549: i8;
  var $p550: ref;
  var $i551: i8;
  var $i552: i32;
  var $i553: i8;
  var $i554: i32;
  var $i555: i32;
  var $i556: i32;
  var $i557: i8;
  var $p558: ref;
  var $i559: i8;
  var $p560: ref;
  var $i561: i8;
  var $p562: ref;
  var $p563: ref;
  var $i564: i32;
  var $i565: i16;
  var $i566: i32;
  var $i567: i16;
  var $p568: ref;
  var $i569: i8;
  var $p570: ref;
  var $i571: i8;
  var $i572: i32;
  var $i573: i8;
  var $i574: i32;
  var $i575: i32;
  var $i576: i32;
  var $i577: i8;
  var $p578: ref;
  var $i579: i8;
  var $p580: ref;
  var $i581: i8;
  var $p582: ref;
  var $p583: ref;
  var $i584: i32;
  var $i585: i16;
  var $i586: i32;
  var $i587: i16;
  var $p588: ref;
  var $i589: i8;
  var $p590: ref;
  var $i591: i8;
  var $i592: i32;
  var $i593: i8;
  var $i594: i32;
  var $i595: i32;
  var $i596: i32;
  var $i597: i8;
  var $p598: ref;
  var $i599: i8;
  var $p600: ref;
  var $i601: i8;
  var $p602: ref;
  var $p603: ref;
  var $i604: i32;
  var $i605: i16;
  var $i606: i32;
  var $i607: i16;
  var $p608: ref;
  var $i609: i8;
  var $p610: ref;
  var $i611: i8;
  var $i612: i32;
  var $i613: i8;
  var $i614: i32;
  var $i615: i32;
  var $i616: i32;
  var $i617: i8;
  var $p618: ref;
  var $i619: i8;
  var $p620: ref;
  var $i621: i8;
  var $p622: ref;
  var $p623: ref;
  var $i624: i32;
  var $i625: i16;
  var $i626: i32;
  var $i627: i16;
  var $p628: ref;
  var $i629: i8;
  var $p630: ref;
  var $i631: i8;
  var $i632: i32;
  var $i633: i8;
  var $i634: i32;
  var $i635: i32;
  var $i636: i32;
  var $i637: i8;
  var $p638: ref;
  var $i639: i8;
  var $p640: ref;
  var $i641: i8;
  var $p642: ref;
  var $p643: ref;
  var $i644: i32;
  var $i645: i16;
  var $i646: i32;
  var $i647: i16;
  var $p648: ref;
  var $i649: i8;
  var $p650: ref;
  var $i651: i8;
  var $i652: i32;
  var $i653: i8;
  var $i654: i32;
  var $i655: i32;
  var $i656: i32;
  var $i657: i8;
  var $p658: ref;
  var $i659: i8;
  var $p660: ref;
  var $i661: i8;
  var $p662: ref;
  var $p663: ref;
  var $i664: i32;
  var $i665: i16;
  var $i666: i32;
  var $i667: i16;
  var $p668: ref;
  var $i669: i8;
  var $p670: ref;
  var $i671: i8;
  var $i672: i32;
  var $i673: i8;
  var $i674: i32;
  var $i675: i32;
  var $i676: i32;
  var $i677: i8;
  var $p678: ref;
  var $i679: i8;
  var $p680: ref;
  var $i681: i8;
  var $p682: ref;
  var $p683: ref;
  var $i684: i32;
  var $i685: i16;
  var $i686: i32;
  var $i687: i16;
  var $p688: ref;
  var $i689: i8;
  var $p690: ref;
  var $i691: i8;
  var $i692: i32;
  var $i693: i8;
  var $i694: i32;
  var $i695: i32;
  var $i696: i32;
  var $i697: i8;
  var $p698: ref;
  var $i699: i8;
  var $p700: ref;
  var $i701: i8;
  var $p702: ref;
  var $p703: ref;
  var $i704: i32;
  var $i705: i16;
  var $i706: i32;
  var $i707: i16;
  var $p708: ref;
  var $i709: i8;
  var $p710: ref;
  var $i711: i8;
  var $i712: i32;
  var $i713: i8;
  var $i714: i32;
  var $i715: i32;
  var $i716: i32;
  var $i717: i8;
  var $p718: ref;
  var $i719: i8;
  var $p720: ref;
  var $i721: i8;
  var $p722: ref;
  var $p723: ref;
  var $i724: i32;
  var $i725: i16;
  var $i726: i32;
  var $i727: i16;
  var $p728: ref;
  var $i729: i8;
  var $p730: ref;
  var $i731: i8;
  var $i732: i32;
  var $i733: i8;
  var $i734: i32;
  var $i735: i32;
  var $i736: i32;
  var $i737: i8;
  var $p738: ref;
  var $i739: i8;
  var $p740: ref;
  var $i741: i8;
  var $p742: ref;
  var $p743: ref;
  var $i744: i32;
  var $i745: i16;
  var $i746: i32;
  var $i747: i16;
  var $p748: ref;
  var $i749: i8;
  var $p750: ref;
  var $i751: i8;
  var $i752: i32;
  var $i753: i8;
  var $i754: i32;
  var $i755: i32;
  var $i756: i32;
  var $i757: i8;
  var $p758: ref;
  var $i759: i8;
  var $p760: ref;
  var $i761: i8;
  var $p762: ref;
  var $p763: ref;
  var $i764: i32;
  var $i765: i16;
  var $i766: i32;
  var $i767: i16;
  var $p768: ref;
  var $i769: i8;
  var $p770: ref;
  var $i771: i8;
  var $i772: i32;
  var $i773: i8;
  var $i774: i32;
  var $i775: i32;
  var $i776: i32;
  var $i777: i8;
  var $p778: ref;
  var $i779: i8;
  var $p780: ref;
  var $i781: i8;
  var $p782: ref;
  var $p783: ref;
  var $i784: i32;
  var $i785: i16;
  var $i786: i32;
  var $i787: i16;
  var $p788: ref;
  var $i789: i8;
  var $p790: ref;
  var $i791: i8;
  var $i792: i32;
  var $i793: i8;
  var $i794: i32;
  var $i795: i32;
  var $i796: i32;
  var $i797: i8;
  var $p798: ref;
  var $i799: i8;
  var $p800: ref;
  var $i801: i8;
  var $p802: ref;
  var $p803: ref;
  var $i804: i32;
  var $i805: i16;
  var $i806: i32;
  var $i807: i16;
  var $p808: ref;
  var $i809: i8;
  var $p810: ref;
  var $i811: i8;
  var $i812: i32;
  var $i813: i8;
  var $i814: i32;
  var $i815: i32;
  var $i816: i32;
  var $i817: i8;
  var $p818: ref;
  var $i819: i8;
  var $p820: ref;
  var $i821: i8;
  var $p822: ref;
  var $p823: ref;
  var $i824: i32;
  var $i825: i16;
  var $i826: i32;
  var $i827: i16;
  var $p828: ref;
  var $i829: i8;
  var $p830: ref;
  var $i831: i8;
  var $i832: i32;
  var $i833: i8;
  var $i834: i32;
  var $i835: i32;
  var $i836: i32;
  var $i837: i8;
  var $p838: ref;
  var $i839: i8;
  var $p840: ref;
  var $i841: i8;
  var $p842: ref;
  var $p843: ref;
  var $i844: i32;
  var $i845: i16;
  var $i846: i32;
  var $i847: i16;
  var $p848: ref;
  var $i849: i8;
  var $p850: ref;
  var $i851: i8;
  var $i852: i32;
  var $i853: i8;
  var $i854: i32;
  var $i855: i32;
  var $i856: i32;
  var $i857: i8;
  var $p858: ref;
  var $i859: i8;
  var $p860: ref;
  var $i861: i8;
  var $p862: ref;
  var $p863: ref;
  var $i864: i32;
  var $i865: i16;
  var $i866: i32;
  var $i867: i16;
  var $p868: ref;
  var $i869: i8;
  var $p870: ref;
  var $i871: i8;
  var $i872: i32;
  var $i873: i8;
  var $i874: i32;
  var $i875: i32;
  var $i876: i32;
  var $i877: i8;
  var $p878: ref;
  var $i879: i8;
  var $p880: ref;
  var $i881: i8;
  var $p882: ref;
  var $p883: ref;
  var $i884: i32;
  var $i885: i16;
  var $i886: i32;
  var $i887: i16;
  var $p888: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1221} {:cexpr "sInitChan:arg:AiopNum"} boogie_si_record_i32($i2);
    call {:si_unique_call 1222} {:cexpr "sInitChan:arg:ChanNum"} boogie_si_record_i32($i3);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i2);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref($i5, 4));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, $i3);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, $p0);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i2);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref($i12, 4));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(12, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p16, $i15);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p17, $i2);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p18, $i3);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i2);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref($i19, 4));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.2, $p21);
    call {:si_unique_call 1223} {:cexpr "AiopIO"} boogie_si_record_i32($i22);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 56);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p24, $i23);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i22, 57);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p26, $i25);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i22, 58);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p28, $i27);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i22, 60);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p30, $i29);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i22, 62);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p32, $i31);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 2);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i22);
    call {:si_unique_call 1224} {:cexpr "ChIOOff"} boogie_si_record_i32($i36);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p37, $i36);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i36, 32);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p39, $i38);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i36, 16);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(52, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p41, $i40);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i22);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 48);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p46, $i45);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.43, RData);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p48, $i47);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(1, 1)));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i3);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i52, 16);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i50, $i53);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p56, $i55);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(2, 1)));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p58, $i57);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(3, 1)));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p60, $i59);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p4);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} out32($i65, $p66);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i549 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(4, 1)));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p550, $i549);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i551 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(5, 1)));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i552 := $zext.i8.i32($i551);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i553 := $trunc.i32.i8($i3);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i554 := $zext.i8.i32($i553);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i555 := $mul.i32($i554, 16);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i556 := $add.i32($i552, $i555);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i557 := $trunc.i32.i8($i556);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p558, $i557);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i559 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(6, 1)));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p560, $i559);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i561 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(7, 1)));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p562, $i561);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.2, $p563);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i565 := $trunc.i32.i16($i564);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i566 := $zext.i16.i32($i565);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i567 := $trunc.i32.i16($i566);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p568 := $bitcast.ref.ref($p4);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} out32($i567, $p568);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i569 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(8, 1)));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p570, $i569);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(9, 1)));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i572 := $zext.i8.i32($i571);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i573 := $trunc.i32.i8($i3);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i574 := $zext.i8.i32($i573);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i575 := $mul.i32($i574, 16);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i576 := $add.i32($i572, $i575);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i577 := $trunc.i32.i8($i576);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p578, $i577);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i579 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(10, 1)));
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p580, $i579);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i581 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(11, 1)));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p582, $i581);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i584 := $load.i32($M.2, $p583);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i585 := $trunc.i32.i16($i584);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i586 := $zext.i16.i32($i585);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i587 := $trunc.i32.i16($i586);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p588 := $bitcast.ref.ref($p4);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} out32($i587, $p588);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i589 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(12, 1)));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p590, $i589);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i591 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(13, 1)));
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i592 := $zext.i8.i32($i591);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i593 := $trunc.i32.i8($i3);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i594 := $zext.i8.i32($i593);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i595 := $mul.i32($i594, 16);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i596 := $add.i32($i592, $i595);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i597 := $trunc.i32.i8($i596);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p598, $i597);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(14, 1)));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p600, $i599);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i601 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(15, 1)));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p602, $i601);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i604 := $load.i32($M.2, $p603);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i605 := $trunc.i32.i16($i604);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i606 := $zext.i16.i32($i605);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i607 := $trunc.i32.i16($i606);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p608 := $bitcast.ref.ref($p4);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} out32($i607, $p608);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i609 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(16, 1)));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p610, $i609);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i611 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(17, 1)));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i612 := $zext.i8.i32($i611);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i613 := $trunc.i32.i8($i3);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i614 := $zext.i8.i32($i613);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i615 := $mul.i32($i614, 16);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i616 := $add.i32($i612, $i615);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i617 := $trunc.i32.i8($i616);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p618, $i617);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i619 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(18, 1)));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p620, $i619);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i621 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(19, 1)));
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p622, $i621);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i624 := $load.i32($M.2, $p623);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i625 := $trunc.i32.i16($i624);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i626 := $zext.i16.i32($i625);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i627 := $trunc.i32.i16($i626);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p628 := $bitcast.ref.ref($p4);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} out32($i627, $p628);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i629 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(20, 1)));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p630, $i629);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i631 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(21, 1)));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i632 := $zext.i8.i32($i631);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i633 := $trunc.i32.i8($i3);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i634 := $zext.i8.i32($i633);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i635 := $mul.i32($i634, 16);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i636 := $add.i32($i632, $i635);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i637 := $trunc.i32.i8($i636);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p638, $i637);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i639 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(22, 1)));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p640, $i639);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i641 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(23, 1)));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p642, $i641);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i644 := $load.i32($M.2, $p643);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i645 := $trunc.i32.i16($i644);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i646 := $zext.i16.i32($i645);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i647 := $trunc.i32.i16($i646);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p648 := $bitcast.ref.ref($p4);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} out32($i647, $p648);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i649 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(24, 1)));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p650, $i649);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i651 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(25, 1)));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i652 := $zext.i8.i32($i651);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i653 := $trunc.i32.i8($i3);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i654 := $zext.i8.i32($i653);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i655 := $mul.i32($i654, 16);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i656 := $add.i32($i652, $i655);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i657 := $trunc.i32.i8($i656);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p658, $i657);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i659 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(26, 1)));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p660, $i659);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i661 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(27, 1)));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p662, $i661);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i664 := $load.i32($M.2, $p663);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i665 := $trunc.i32.i16($i664);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i666 := $zext.i16.i32($i665);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i667 := $trunc.i32.i16($i666);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p668 := $bitcast.ref.ref($p4);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} out32($i667, $p668);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i669 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(28, 1)));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p670, $i669);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i671 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(29, 1)));
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i672 := $zext.i8.i32($i671);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i673 := $trunc.i32.i8($i3);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i674 := $zext.i8.i32($i673);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i675 := $mul.i32($i674, 16);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i676 := $add.i32($i672, $i675);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i677 := $trunc.i32.i8($i676);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p678, $i677);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i679 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(30, 1)));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p680, $i679);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i681 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(31, 1)));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p682, $i681);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i684 := $load.i32($M.2, $p683);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i685 := $trunc.i32.i16($i684);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i686 := $zext.i16.i32($i685);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i687 := $trunc.i32.i16($i686);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p688 := $bitcast.ref.ref($p4);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} out32($i687, $p688);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i689 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(32, 1)));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p690, $i689);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i691 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(33, 1)));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i692 := $zext.i8.i32($i691);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i693 := $trunc.i32.i8($i3);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i694 := $zext.i8.i32($i693);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i695 := $mul.i32($i694, 16);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i696 := $add.i32($i692, $i695);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i697 := $trunc.i32.i8($i696);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p698, $i697);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i699 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(34, 1)));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p700, $i699);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i701 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(35, 1)));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p702, $i701);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i704 := $load.i32($M.2, $p703);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i705 := $trunc.i32.i16($i704);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i706 := $zext.i16.i32($i705);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i707 := $trunc.i32.i16($i706);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p708 := $bitcast.ref.ref($p4);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} out32($i707, $p708);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i709 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(36, 1)));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p710, $i709);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i711 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(37, 1)));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i712 := $zext.i8.i32($i711);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i713 := $trunc.i32.i8($i3);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i714 := $zext.i8.i32($i713);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i715 := $mul.i32($i714, 16);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i716 := $add.i32($i712, $i715);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i717 := $trunc.i32.i8($i716);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p718, $i717);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i719 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(38, 1)));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p720, $i719);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i721 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(39, 1)));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p722, $i721);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i724 := $load.i32($M.2, $p723);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i725 := $trunc.i32.i16($i724);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i726 := $zext.i16.i32($i725);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i727 := $trunc.i32.i16($i726);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p728 := $bitcast.ref.ref($p4);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} out32($i727, $p728);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i729 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(40, 1)));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p730, $i729);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i731 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(41, 1)));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i732 := $zext.i8.i32($i731);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i733 := $trunc.i32.i8($i3);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i734 := $zext.i8.i32($i733);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i735 := $mul.i32($i734, 16);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i736 := $add.i32($i732, $i735);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i737 := $trunc.i32.i8($i736);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p738, $i737);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i739 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(42, 1)));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p740, $i739);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i741 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(43, 1)));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p742, $i741);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i744 := $load.i32($M.2, $p743);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i745 := $trunc.i32.i16($i744);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i746 := $zext.i16.i32($i745);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i747 := $trunc.i32.i16($i746);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p748 := $bitcast.ref.ref($p4);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} out32($i747, $p748);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i749 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(44, 1)));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p750, $i749);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i751 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(45, 1)));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i752 := $zext.i8.i32($i751);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i753 := $trunc.i32.i8($i3);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i754 := $zext.i8.i32($i753);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i755 := $mul.i32($i754, 16);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i756 := $add.i32($i752, $i755);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i757 := $trunc.i32.i8($i756);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p758, $i757);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i759 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(46, 1)));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p760, $i759);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i761 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(47, 1)));
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p762, $i761);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i764 := $load.i32($M.2, $p763);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i765 := $trunc.i32.i16($i764);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i766 := $zext.i16.i32($i765);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i767 := $trunc.i32.i16($i766);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p768 := $bitcast.ref.ref($p4);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} out32($i767, $p768);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i769 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(48, 1)));
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p770, $i769);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i771 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(49, 1)));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i772 := $zext.i8.i32($i771);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i773 := $trunc.i32.i8($i3);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i774 := $zext.i8.i32($i773);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i775 := $mul.i32($i774, 16);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i776 := $add.i32($i772, $i775);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i777 := $trunc.i32.i8($i776);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p778, $i777);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i779 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(50, 1)));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p780, $i779);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i781 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(51, 1)));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p782, $i781);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i784 := $load.i32($M.2, $p783);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i785 := $trunc.i32.i16($i784);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i786 := $zext.i16.i32($i785);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i787 := $trunc.i32.i16($i786);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p788 := $bitcast.ref.ref($p4);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} out32($i787, $p788);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i789 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(52, 1)));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p790, $i789);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i791 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(53, 1)));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i792 := $zext.i8.i32($i791);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i793 := $trunc.i32.i8($i3);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i794 := $zext.i8.i32($i793);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i795 := $mul.i32($i794, 16);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i796 := $add.i32($i792, $i795);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i797 := $trunc.i32.i8($i796);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p798, $i797);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i799 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(54, 1)));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p800, $i799);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i801 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(55, 1)));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p802, $i801);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i804 := $load.i32($M.2, $p803);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i805 := $trunc.i32.i16($i804);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i806 := $zext.i16.i32($i805);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i807 := $trunc.i32.i16($i806);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p808 := $bitcast.ref.ref($p4);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} out32($i807, $p808);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i809 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(56, 1)));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p810, $i809);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i811 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(57, 1)));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i812 := $zext.i8.i32($i811);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i813 := $trunc.i32.i8($i3);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i814 := $zext.i8.i32($i813);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i815 := $mul.i32($i814, 16);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i816 := $add.i32($i812, $i815);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i817 := $trunc.i32.i8($i816);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p818, $i817);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i819 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(58, 1)));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p820, $i819);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i821 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(59, 1)));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p822, $i821);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i824 := $load.i32($M.2, $p823);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i825 := $trunc.i32.i16($i824);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i826 := $zext.i16.i32($i825);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i827 := $trunc.i32.i16($i826);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p828 := $bitcast.ref.ref($p4);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} out32($i827, $p828);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i829 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(60, 1)));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p830, $i829);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i831 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(61, 1)));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i832 := $zext.i8.i32($i831);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i833 := $trunc.i32.i8($i3);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i834 := $zext.i8.i32($i833);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i835 := $mul.i32($i834, 16);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i836 := $add.i32($i832, $i835);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i837 := $trunc.i32.i8($i836);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p838 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p838, $i837);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i839 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(62, 1)));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p840, $i839);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i841 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(63, 1)));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p842, $i841);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i844 := $load.i32($M.2, $p843);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i845 := $trunc.i32.i16($i844);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i846 := $zext.i16.i32($i845);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i847 := $trunc.i32.i16($i846);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p848 := $bitcast.ref.ref($p4);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} out32($i847, $p848);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i849 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(64, 1)));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p850, $i849);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i851 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(65, 1)));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i852 := $zext.i8.i32($i851);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i853 := $trunc.i32.i8($i3);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i854 := $zext.i8.i32($i853);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i855 := $mul.i32($i854, 16);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i856 := $add.i32($i852, $i855);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i857 := $trunc.i32.i8($i856);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p858, $i857);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i859 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(66, 1)));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p860, $i859);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i861 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(67, 1)));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p862, $i861);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i864 := $load.i32($M.2, $p863);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i865 := $trunc.i32.i16($i864);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i866 := $zext.i16.i32($i865);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i867 := $trunc.i32.i16($i866);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p868 := $bitcast.ref.ref($p4);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} out32($i867, $p868);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i869 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(68, 1)));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p870, $i869);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i871 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(69, 1)));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i872 := $zext.i8.i32($i871);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i873 := $trunc.i32.i8($i3);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i874 := $zext.i8.i32($i873);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i875 := $mul.i32($i874, 16);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i876 := $add.i32($i872, $i875);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i877 := $trunc.i32.i8($i876);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p878, $i877);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i879 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(70, 1)));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p880, $i879);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i881 := $load.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(71, 1)));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p882 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p882, $i881);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i884 := $load.i32($M.2, $p883);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i885 := $trunc.i32.i16($i884);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i886 := $zext.i16.i32($i885);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i887 := $trunc.i32.i16($i886);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p888 := $bitcast.ref.ref($p4);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} out32($i887, $p888);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(88, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.44, RRegData);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p68, $i69);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(1, 1)));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i3);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i74 := $mul.i32($i73, 16);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i71, $i74);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p68, $mul.ref(1, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p77, $i76);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(2, 1)));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p68, $mul.ref(2, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p79, $i78);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(3, 1)));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p68, $mul.ref(3, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p81, $i80);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(4, 1)));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($p68, $mul.ref(4, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p382, $i381);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i383 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(5, 1)));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i384 := $zext.i8.i32($i383);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i385 := $trunc.i32.i8($i3);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i32($i385);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i387 := $mul.i32($i386, 16);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i388 := $add.i32($i384, $i387);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i389 := $trunc.i32.i8($i388);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($p68, $mul.ref(5, 1));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p390, $i389);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i391 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(6, 1)));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($p68, $mul.ref(6, 1));
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p392, $i391);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i393 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(7, 1)));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($p68, $mul.ref(7, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p394, $i393);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(8, 1)));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($p68, $mul.ref(8, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p396, $i395);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(9, 1)));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i32($i397);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i32.i8($i3);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i400 := $zext.i8.i32($i399);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i401 := $mul.i32($i400, 16);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i402 := $add.i32($i398, $i401);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i403 := $trunc.i32.i8($i402);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($p68, $mul.ref(9, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p404, $i403);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i405 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(10, 1)));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p68, $mul.ref(10, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p406, $i405);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(11, 1)));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($p68, $mul.ref(11, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p408, $i407);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i409 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(12, 1)));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($p68, $mul.ref(12, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p410, $i409);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i411 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(13, 1)));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i32($i411);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i413 := $trunc.i32.i8($i3);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i414 := $zext.i8.i32($i413);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i415 := $mul.i32($i414, 16);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i416 := $add.i32($i412, $i415);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i417 := $trunc.i32.i8($i416);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($p68, $mul.ref(13, 1));
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p418, $i417);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(14, 1)));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($p68, $mul.ref(14, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p420, $i419);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(15, 1)));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($p68, $mul.ref(15, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p422, $i421);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i423 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(16, 1)));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p68, $mul.ref(16, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p424, $i423);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i425 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(17, 1)));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i426 := $zext.i8.i32($i425);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i32.i8($i3);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i428 := $zext.i8.i32($i427);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i429 := $mul.i32($i428, 16);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i430 := $add.i32($i426, $i429);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i431 := $trunc.i32.i8($i430);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($p68, $mul.ref(17, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p432, $i431);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i433 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(18, 1)));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($p68, $mul.ref(18, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p434, $i433);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i435 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(19, 1)));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($p68, $mul.ref(19, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p436, $i435);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i437 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(20, 1)));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($p68, $mul.ref(20, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p438, $i437);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i439 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(21, 1)));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i440 := $zext.i8.i32($i439);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i441 := $trunc.i32.i8($i3);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i442 := $zext.i8.i32($i441);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i443 := $mul.i32($i442, 16);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i444 := $add.i32($i440, $i443);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i445 := $trunc.i32.i8($i444);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($p68, $mul.ref(21, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p446, $i445);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i447 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(22, 1)));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($p68, $mul.ref(22, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p448, $i447);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i449 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(23, 1)));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($p68, $mul.ref(23, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p450, $i449);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(24, 1)));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($p68, $mul.ref(24, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p452, $i451);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(25, 1)));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i454 := $zext.i8.i32($i453);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i455 := $trunc.i32.i8($i3);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i456 := $zext.i8.i32($i455);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i457 := $mul.i32($i456, 16);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i458 := $add.i32($i454, $i457);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i32.i8($i458);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($p68, $mul.ref(25, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p460, $i459);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(26, 1)));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($p68, $mul.ref(26, 1));
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p462, $i461);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i463 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(27, 1)));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($p68, $mul.ref(27, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p464, $i463);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i465 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(28, 1)));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($p68, $mul.ref(28, 1));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p466, $i465);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i467 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(29, 1)));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i468 := $zext.i8.i32($i467);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i469 := $trunc.i32.i8($i3);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i470 := $zext.i8.i32($i469);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i471 := $mul.i32($i470, 16);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i472 := $add.i32($i468, $i471);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i473 := $trunc.i32.i8($i472);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($p68, $mul.ref(29, 1));
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p474, $i473);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i475 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(30, 1)));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($p68, $mul.ref(30, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p476, $i475);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(31, 1)));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($p68, $mul.ref(31, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p478, $i477);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i479 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(32, 1)));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($p68, $mul.ref(32, 1));
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p480, $i479);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i481 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(33, 1)));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i482 := $zext.i8.i32($i481);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i8($i3);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i484 := $zext.i8.i32($i483);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i485 := $mul.i32($i484, 16);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i486 := $add.i32($i482, $i485);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i487 := $trunc.i32.i8($i486);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($p68, $mul.ref(33, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p488, $i487);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i489 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(34, 1)));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($p68, $mul.ref(34, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p490, $i489);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i491 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(35, 1)));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($p68, $mul.ref(35, 1));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p492, $i491);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(36, 1)));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($p68, $mul.ref(36, 1));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p494, $i493);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i495 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(37, 1)));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i496 := $zext.i8.i32($i495);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i497 := $trunc.i32.i8($i3);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i498 := $zext.i8.i32($i497);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i499 := $mul.i32($i498, 16);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i500 := $add.i32($i496, $i499);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i501 := $trunc.i32.i8($i500);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($p68, $mul.ref(37, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p502, $i501);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i503 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(38, 1)));
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($p68, $mul.ref(38, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p504, $i503);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i505 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(39, 1)));
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($p68, $mul.ref(39, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p506, $i505);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i507 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(40, 1)));
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($p68, $mul.ref(40, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p508, $i507);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i509 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(41, 1)));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i510 := $zext.i8.i32($i509);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i8($i3);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i512 := $zext.i8.i32($i511);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i513 := $mul.i32($i512, 16);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i514 := $add.i32($i510, $i513);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i515 := $trunc.i32.i8($i514);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($p68, $mul.ref(41, 1));
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p516, $i515);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i517 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(42, 1)));
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($p68, $mul.ref(42, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p518, $i517);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i519 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(43, 1)));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($p68, $mul.ref(43, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p520, $i519);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i521 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(44, 1)));
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($p68, $mul.ref(44, 1));
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p522, $i521);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i523 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(45, 1)));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i524 := $zext.i8.i32($i523);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i525 := $trunc.i32.i8($i3);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i525);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i527 := $mul.i32($i526, 16);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i528 := $add.i32($i524, $i527);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i529 := $trunc.i32.i8($i528);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($p68, $mul.ref(45, 1));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p530, $i529);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i531 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(46, 1)));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($p68, $mul.ref(46, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p532, $i531);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i533 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(47, 1)));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($p68, $mul.ref(47, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p534, $i533);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i535 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(48, 1)));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($p68, $mul.ref(48, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p536, $i535);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(49, 1)));
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i538 := $zext.i8.i32($i537);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i539 := $trunc.i32.i8($i3);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i540 := $zext.i8.i32($i539);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i541 := $mul.i32($i540, 16);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i542 := $add.i32($i538, $i541);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i543 := $trunc.i32.i8($i542);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($p68, $mul.ref(49, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p544, $i543);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i545 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(50, 1)));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($p68, $mul.ref(50, 1));
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p546, $i545);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i547 := $load.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(51, 1)));
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($p68, $mul.ref(51, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p548, $i547);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i3, 4096);
    call {:si_unique_call 1227} {:cexpr "ChOff"} boogie_si_record_i32($i82);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i83 := $M.38;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 20);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := 23;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i82);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 244);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(140, 1)), $mul.ref(0, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p91, $i89);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i82, 4084);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i32($i92, 8);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(140, 1)), $mul.ref(1, 1));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p96, $i94);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i85);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(140, 1)), $mul.ref(2, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p99, $i97);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i100 := $ashr.i32($i85, 8);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(140, 1)), $mul.ref(3, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p103, $i101);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.2, $p104);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i16($i105);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(140, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out32($i108, $p110);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i82);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 240);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p116, $i114);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i82, 4080);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i118 := $lshr.i32($i117, 8);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(1, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p121, $i119);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p123, 0);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(3, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p125, 0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.2, $p126);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} out32($i130, $p132);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i82);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, 242);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(0, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p138, $i136);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i82, 4082);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i140 := $lshr.i32($i139, 8);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i140);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(1, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p143, $i141);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p145, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(3, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p147, 0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.2, $p148);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i16($i149);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} out32($i152, $p154);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i82);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i156, 128);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i8($i157);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p160, $i158);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i82, 2432);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i162 := $lshr.i32($i161, 8);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(1, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p165, $i163);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(2, 1));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p167, 0);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1)), $mul.ref(3, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p169, 0);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.2, $p170);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i171);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i16($i173);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} out32($i174, $p176);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i8($i82);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i178, 136);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i8($i179);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(156, 1)), $mul.ref(0, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p182, $i180);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i82, 2440);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i184 := $lshr.i32($i183, 8);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i8($i184);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(156, 1)), $mul.ref(1, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p187, $i185);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(156, 1)), $mul.ref(2, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p189, 0);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(156, 1)), $mul.ref(3, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p191, 0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.2, $p192);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i16($i193);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i16($i195);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(156, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} out32($i196, $p198);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i8($i82);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i200, 138);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i8($i201);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p204, $i202);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i205 := $add.i32($i82, 2442);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i206 := $lshr.i32($i205, 8);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i8($i206);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(160, 1)), $mul.ref(1, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p209, $i207);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(160, 1)), $mul.ref(2, 1));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p211, 0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(160, 1)), $mul.ref(3, 1));
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p213, 0);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.2, $p214);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i16($i215);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i32.i16($i217);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(160, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} out32($i218, $p220);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i82);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i223 := $add.i32($i222, 140);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(164, 1)), $mul.ref(0, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p226, $i224);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i227 := $add.i32($i82, 2444);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i228 := $lshr.i32($i227, 8);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i32.i8($i228);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(164, 1)), $mul.ref(1, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p231, $i229);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(164, 1)), $mul.ref(2, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p233, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(164, 1)), $mul.ref(3, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p235, 0);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.2, $p236);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i32.i16($i237);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i238);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i32.i16($i239);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(164, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p241);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} out32($i240, $p242);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i243 := $add.i32($i82, 2452);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p244, $i243);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i245 := $add.i32($i82, 2048);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(60, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p246, $i245);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.2, $p247);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i249 := $trunc.i32.i16($i248);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i250 := $zext.i16.i32($i249);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i16($i250);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i32.i8($i3);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i32($i252);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i254 := $or.i32($i253, 16);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i32.i8($i254);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} sOutB($i251, $i255);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.2, $p256);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i32.i16($i257);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i259 := $zext.i16.i32($i258);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i16($i259);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i261 := $trunc.i32.i8($i3);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i263 := $trunc.i32.i8($i262);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} sOutB($i260, $i263);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.2, $p264);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i266 := $trunc.i32.i16($i265);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i267 := $zext.i16.i32($i266);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i16($i267);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(64, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.2, $p269);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i32.i16($i270);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i271);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i32.i16($i272);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} sOutW($i268, $i273);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.2, $p274);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i32.i16($i275);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i277 := $zext.i16.i32($i276);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i278 := $trunc.i32.i16($i277);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} sOutW($i278, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i279 := $add.i32($i82, 2448);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(72, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p280, $i279);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(68, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p281, $i82);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.2, $p282);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i284 := $trunc.i32.i16($i283);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i285 := $zext.i16.i32($i284);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i16($i285);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i32.i8($i3);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i289 := $or.i32($i288, 8);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i290 := $trunc.i32.i8($i289);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} sOutB($i286, $i290);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.2, $p291);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i32.i16($i292);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i294 := $zext.i16.i32($i293);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i32.i16($i294);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i32.i8($i3);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i296);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i8($i297);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} sOutB($i295, $i298);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.2, $p299);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i301 := $trunc.i32.i16($i300);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i301);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i16($i302);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(72, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.2, $p304);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i306 := $trunc.i32.i16($i305);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i307 := $zext.i16.i32($i306);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i16($i307);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} sOutW($i303, $i308);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.2, $p309);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i32.i16($i310);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i312 := $zext.i16.i32($i311);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i16($i312);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} sOutW($i313, 0);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.2, $p314);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i32.i16($i315);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i317 := $zext.i16.i32($i316);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i32.i16($i317);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(72, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i320 := $load.i32($M.2, $p319);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i16($i320);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i322 := $zext.i16.i32($i321);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i323 := $add.i32($i322, 2);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i32.i16($i323);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} sOutW($i318, $i324);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i326 := $load.i32($M.2, $p325);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i32.i16($i326);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i328 := $zext.i16.i32($i327);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i32.i16($i328);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} sOutW($i329, 0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i82, 2454);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(76, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p331, $i330);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i333 := $load.i32($M.2, $p332);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i334 := $trunc.i32.i16($i333);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i335 := $zext.i16.i32($i334);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i32.i16($i335);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(76, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.2, $p337);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i16($i338);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i340 := $zext.i16.i32($i339);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i341 := $trunc.i32.i16($i340);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} sOutW($i336, $i341);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.2, $p342);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i344 := $trunc.i32.i16($i343);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i345 := $zext.i16.i32($i344);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i346 := $trunc.i32.i16($i345);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} sOutB($i346, 0);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i347 := $add.i32($i82, 2455);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(80, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p348, $i347);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.2, $p349);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i351 := $trunc.i32.i16($i350);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i352 := $zext.i16.i32($i351);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i353 := $trunc.i32.i16($i352);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(80, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i355 := $load.i32($M.2, $p354);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i356 := $trunc.i32.i16($i355);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i357 := $zext.i16.i32($i356);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i358 := $trunc.i32.i16($i357);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} sOutW($i353, $i358);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.2, $p359);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i361 := $trunc.i32.i16($i360);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i362 := $zext.i16.i32($i361);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i32.i16($i362);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} sOutB($i363, 0);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i364 := $add.i32($i82, 2496);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(84, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p365, $i364);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i368 := $load.i8($M.2, $p367);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i32($i368);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i370 := $or.i32($i369, 32);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i32.i8($i370);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1)), $mul.ref(2, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p373, $i371);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i375 := $load.i32($M.2, $p374);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i32.i16($i375);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i376);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i378 := $trunc.i32.i16($i377);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p380 := $bitcast.ref.ref($p379);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} out32($i378, $p380);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb13:
    assume $i84 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i85 := 47;
    goto $bb15;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const tty_port_destroy: ref;

axiom tty_port_destroy == $sub.ref(0, 312980);

procedure tty_port_destroy($p0: ref);
  free requires assertsPassed;



implementation tty_port_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 314012);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} free_($p0);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 315044);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 316076);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 317108);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_register_device: ref;

axiom tty_port_register_device == $sub.ref(0, 318140);

procedure tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} {:cexpr "tty_port_register_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p4 := external_alloc();
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 319172);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1269} $free($p0);
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 320204);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    return;
}



const sReadAiopID: ref;

axiom sReadAiopID == $sub.ref(0, 321236);

procedure sReadAiopID($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sReadAiopID($i0: i32) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i32;
  var $i4: i16;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i16;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} {:cexpr "sReadAiopID:arg:io"} boogie_si_record_i32($i0);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i32.i16($i0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 56);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} sOutB($i4, $sub.i8(0, 128));
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i0);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 56);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} sOutB($i8, 0);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i0);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 32);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i13 := sInW($i12);
    call {:si_unique_call 1274} {:cexpr "tmp"} boogie_si_record_i16($i13);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i16.i8($i13);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 7);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 1275} {:cexpr "AiopID"} boogie_si_record_i8($i17);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 6);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb3;
}



const sReadAiopNumChan: ref;

axiom sReadAiopNumChan == $sub.ref(0, 322268);

procedure sReadAiopNumChan($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sReadAiopNumChan($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1277} {:cexpr "sReadAiopNumChan:arg:io"} boogie_si_record_i32($i0);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p2, 0);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p3, 0);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p4, 52);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p5, 18);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i0);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 60);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} out32($i9, $p10);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i0);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 60);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} sOutW($i14, 0);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i0);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 62);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i19 := sInW($i18);
    call {:si_unique_call 1281} {:cexpr "tmp"} boogie_si_record_i16($i19);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    call {:si_unique_call 1282} {:cexpr "x"} boogie_si_record_i32($i20);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i0);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 60);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} sOutW($i24, 16384);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i0);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 62);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i29 := sInW($i28);
    call {:si_unique_call 1285} {:cexpr "tmp___0"} boogie_si_record_i16($i29);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, $i20);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i32 := 4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i32 := 8;
    goto $bb3;
}



const sInitController: ref;

axiom sInitController == $sub.ref(0, 323300);

procedure sInitController($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $i6: i8, $i7: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation sInitController($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $i6: i8, $i7: i32) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $i51: i1;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $i77: i32;
  var $i78: i8;
  var $i79: i16;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i8;
  var $i86: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i64;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i8;
  var $i108: i32;
  var $i109: i64;
  var $p111: ref;
  var $i112: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i118: i32;
  var $i119: i64;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i16;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i16;
  var $i130: i32;
  var $i131: i8;
  var $i132: i32;
  var $i133: i8;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $i117: i32;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i64;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i32;
  var $i146: i8;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i16;
  var $i151: i32;
  var $i152: i16;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i8;
  var $i87: i32;
  var $i88: i32;
  var $i157: i32;
  var $i158: i1;
  var $i52: i32;
  var $i53: i32;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p163: ref;
  var $i164: i32;
  var $i162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} {:cexpr "sInitController:arg:CtlNum"} boogie_si_record_i32($i1);
    call {:si_unique_call 1287} {:cexpr "sInitController:arg:MudbacIO"} boogie_si_record_i32($i2);
    call {:si_unique_call 1288} {:cexpr "sInitController:arg:AiopIOListSize"} boogie_si_record_i32($i4);
    call {:si_unique_call 1289} {:cexpr "sInitController:arg:IRQNum"} boogie_si_record_i32($i5);
    call {:si_unique_call 1290} {:cexpr "sInitController:arg:Frequency"} boogie_si_record_i8($i6);
    call {:si_unique_call 1291} {:cexpr "sInitController:arg:PeriodicOnly"} boogie_si_record_i32($i7);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, aiop_intr_bits);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(52, 1));
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p9, 0);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p10, $i1);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p11, 1);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p12, 0);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(28, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p13, $i2);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i2, 1);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p15, $i14);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, 2);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(36, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p17, $i16);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i2, 3);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p19, $i18);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(44, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p20, 0);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, 0);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(36, 1));
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(44, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.2, $p27);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} sOutB($i26, $i30);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.2, $p36);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} sOutB($i35, $i39);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(36, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.2, $p40);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(44, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.2, $p45);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 4);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} sOutB($i44, $i49);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p50, 0);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32(0, $i4);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.2, $p159);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 0);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i161 == 1);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.2, $p163);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i162 := $i164;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $r := $i162;
    return;

  $bb16:
    assume $i161 == 1;
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i162 := $sub.i32(0, 1);
    goto $bb18;

  $bb1:
    assume $i51 == 1;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i52, $i53 := 0, 0;
    goto $bb4;

  $bb4:
    call $i54, $p55, $i56, $i57, $p59, $i60, $i61, $p63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $p114, $i115, $i116, $i118, $i119, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $p137, $i117, $p138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $p153, $i154, $i155, $i156, $i87, $i88, $i157, $i158, $i52, $i53 := sInitController_loop_$bb4($p0, $i2, $p3, $i4, $i54, $p55, $i56, $i57, $p59, $i60, $i61, $p63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $p114, $i115, $i116, $i118, $i119, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $p137, $i117, $p138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $p153, $i154, $i155, $i156, $i87, $i88, $i157, $i158, $i52, $i53);
    goto $bb4_last;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p3, $mul.ref($i54, 4));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.39, $p55);
    call {:si_unique_call 1295} {:cexpr "io"} boogie_si_record_i32($i56);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i53);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref($i57, 4));
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p59, $i56);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i56, 57);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i53);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref($i61, 4));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p63, $i60);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(36, 1));
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.2, $p64);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(44, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.2, $p69);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i71 := $sext.i8.i32($i70);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i53);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i73 := $sext.i8.i32($i72);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 3);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i71, $i74);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} sOutB($i68, $i78);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i2);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i82 := $lshr.i32($i56, 6);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} sOutB($i81, $i85);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i52, 0);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.2, $p89);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i53);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref($i92, 1));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.10, $p93);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i91, $i95);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p98, $i97);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.2, $p99);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.2, $p104);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} sOutB($i103, $i107);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i108 := sReadAiopID($i56);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i53);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref($i109, 4));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p111, $i108);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i53);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref($i112, 4));
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.2, $p114);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, $sub.i32(0, 1));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i116 == 1);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i118 := sReadAiopNumChan($i56);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i53);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref($i119, 4));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p121, $i118);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i16($i56);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i123, 60);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} sOutW($i125, 4086);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i56);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i127, 62);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i130 := $M.38;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i132);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} sOutB($i129, $i133);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.2, $p134);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i135, 1);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p137, $i136);
    assume {:verifier.code 0} true;
    $i117 := $i52;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.2, $p138);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i53);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref($i141, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.11, $p142);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i140, $i144);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i8($i145);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p147, $i146);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.2, $p148);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i16($i149);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.2, $p153);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i155);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} sOutB($i152, $i156);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i87, $i88 := $i53, $i117;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i87, 1);
    call {:si_unique_call 1298} {:cexpr "i"} boogie_si_record_i32($i157);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i157, $i4);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i158 == 1);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    $i52, $i53 := $i88, $i157;
    goto $bb13_dummy;

  $bb10:
    assume $i116 == 1;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i117 := 1;
    goto $bb12;

  $bb6:
    assume $i86 == 1;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i87, $i88 := $i53, $i52;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8113;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 324332);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1306} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p3 := external_alloc();
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 325364);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1309} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 326396);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1310} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_unregister_device: ref;

axiom tty_unregister_device == $sub.ref(0, 327428);

procedure tty_unregister_device($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation tty_unregister_device($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} {:cexpr "tty_unregister_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 328460);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1313} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 1} true;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 329492);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 330524);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 331556);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 332588);

procedure __SMACK_check_overflow($i0: i32);



const __VERIFIER_nondet_char: ref;

axiom __VERIFIER_nondet_char == $sub.ref(0, 333620);

procedure __VERIFIER_nondet_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1314} $i0 := __SMACK_nondet_char();
    call {:si_unique_call 1315} {:cexpr "smack:ext:__SMACK_nondet_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1316} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i1 := $sext.i8.i32($i0);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, $sub.i32(0, 128));
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1317} __VERIFIER_assume($i6);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 1} true;
    $i4 := $sext.i8.i32($i0);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 127);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 334652);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 335684);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 336716);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1318} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 1319} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1320} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1321} __VERIFIER_assume($i6);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 337748);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 338780);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 339812);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 340844);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 341876);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 342908);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 343940);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1322} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1323} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1324} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1325} __VERIFIER_assume($i4);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 344972);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 346004);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 347036);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 348068);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1326} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1327} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1328} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1329} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1330} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1331} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1334} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1335} __VERIFIER_assume($i7);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1336} __VERIFIER_assume($i11);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 349100);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 350132);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 351164);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 352196);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 353228);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 354260);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1337} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1338} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1339} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1340} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1341} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1342} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1343} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1344} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1345} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1346} __VERIFIER_assume($i7);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1347} __VERIFIER_assume($i11);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 355292);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 356324);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 357356);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 358388);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 359420);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 360452);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 361484);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 362516);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 363548);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1348} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1349} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1350} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1351} __VERIFIER_assume($i10);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 364580);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1352} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 1353} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1354} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 365612);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1355} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1356} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1357} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 366644);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1358} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1359} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1360} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 367676);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1361} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1362} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 368708);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 369740);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1363} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1364} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 370772);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 371804);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 372836);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1365} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1366} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1367} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1368} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p6 := malloc($i5);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.2;
    call {:si_unique_call 1370} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 373868);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 374900);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.15, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.5, $M.2, $M.0, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.44, $M.43, $M.42, $M.4, $M.40, $M.10, $M.11, $M.12, $M.38, $M.37, $M.33, $M.36, $M.35, $M.34, $M.14, $M.32, $M.31, $M.30, $M.29, $M.28, $M.27, $M.26, $M.1, $M.3, $M.13, $M.94;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1371} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.15 := $0.ref;
    $M.16 := $0.ref;
    $M.18 := 0;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 1373} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 1375} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 1377} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1378} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1379} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1380} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.2 := $store.i8($M.2, driver_version, 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(1, 1)), 46);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(2, 1)), 48);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(3, 1)), 57);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(0, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(1, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(2, 1)), 45);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(3, 1)), 74);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(4, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(5, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(6, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(7, 1)), 45);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(8, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(9, 1)), 48);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(10, 1)), 48);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(11, 1)), 51);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(driver_version, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i32($M.2, rp_num_ports_open, 0);
    $M.2 := $store.i32($M.2, xmit_flags, 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(4, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(5, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(6, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(7, 4)), 0);
    $M.0 := 0;
    call {:si_unique_call 1381} {:cexpr "max_board"} boogie_si_record_i32(0);
    $M.2 := $store.i32($M.2, upci_aiop_intr_bits, 4);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(upci_aiop_intr_bits, $mul.ref(0, 16)), $mul.ref(1, 4)), 32);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(upci_aiop_intr_bits, $mul.ref(0, 16)), $mul.ref(2, 4)), 256);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(upci_aiop_intr_bits, $mul.ref(0, 16)), $mul.ref(3, 4)), 2048);
    $M.53 := $store.i32($M.53, rocket_pci_ids, 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(0, 32)), $mul.ref(4, 1)), 4);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(1, 32)), $mul.ref(4, 1)), 5);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(2, 32)), $mul.ref(4, 1)), 2053);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(3, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(3, 32)), $mul.ref(4, 1)), 2);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(4, 32)), $mul.ref(4, 1)), 2050);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(4, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(4, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(5, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(5, 32)), $mul.ref(4, 1)), 6);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(5, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(5, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(6, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(6, 32)), $mul.ref(4, 1)), 7);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(6, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(6, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(7, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(7, 32)), $mul.ref(4, 1)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(7, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(7, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(8, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(8, 32)), $mul.ref(4, 1)), 9);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(8, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(8, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(9, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(9, 32)), $mul.ref(4, 1)), 3);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(9, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(9, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(9, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(10, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(10, 32)), $mul.ref(4, 1)), 2051);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(10, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(10, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(10, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(11, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(11, 32)), $mul.ref(4, 1)), 2307);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(11, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(11, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(11, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(12, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(12, 32)), $mul.ref(4, 1)), 1);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(12, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(12, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(12, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(13, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(13, 32)), $mul.ref(4, 1)), 2049);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(13, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(13, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(13, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(14, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(14, 32)), $mul.ref(4, 1)), 10);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(14, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(14, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(14, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(15, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(15, 32)), $mul.ref(4, 1)), 11);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(15, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(15, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(15, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(16, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(16, 32)), $mul.ref(4, 1)), 14);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(16, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(16, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(16, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(17, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(17, 32)), $mul.ref(4, 1)), 15);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(17, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(17, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(17, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(18, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(18, 32)), $mul.ref(4, 1)), 12);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(18, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(18, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(18, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(19, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(19, 32)), $mul.ref(4, 1)), 13);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(19, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(19, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(19, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(20, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(20, 32)), $mul.ref(4, 1)), 2060);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(20, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(20, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(20, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(21, 32)), $mul.ref(0, 1)), 4606);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(21, 32)), $mul.ref(4, 1)), 2061);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(21, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(21, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(21, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(22, 32)), $mul.ref(0, 1)), 0);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(22, 32)), $mul.ref(4, 1)), 0);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(22, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(rocket_pci_ids, $mul.ref(0, 736)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.44 := $store.i8($M.44, RRegData, 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(1, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(2, 1)), $sub.i8(0, 10));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(3, 1)), $sub.i8(0, 126));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(4, 1)), 8);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(5, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(6, 1)), $sub.i8(0, 118));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(7, 1)), 19);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(8, 1)), 10);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(9, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(10, 1)), $sub.i8(0, 59));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(11, 1)), 17);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(12, 1)), 12);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(13, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(14, 1)), $sub.i8(0, 122));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(15, 1)), $sub.i8(0, 123));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(16, 1)), 18);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(17, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(18, 1)), 65);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(19, 1)), $sub.i8(0, 1));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(20, 1)), 20);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(21, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(22, 1)), $sub.i8(0, 126));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(23, 1)), 0);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(24, 1)), 22);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(25, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(26, 1)), $sub.i8(0, 126));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(27, 1)), 123);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(28, 1)), 24);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(29, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(30, 1)), $sub.i8(0, 118));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(31, 1)), 125);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(32, 1)), 26);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(33, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(34, 1)), $sub.i8(0, 120));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(35, 1)), $sub.i8(0, 127));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(36, 1)), 28);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(37, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(38, 1)), $sub.i8(0, 122));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(39, 1)), 122);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(40, 1)), 30);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(41, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(42, 1)), $sub.i8(0, 124));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(43, 1)), $sub.i8(0, 127));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(44, 1)), 32);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(45, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(46, 1)), $sub.i8(0, 126));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(47, 1)), 124);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(48, 1)), 34);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(49, 1)), 9);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(50, 1)), 10);
    $M.44 := $store.i8($M.44, $add.ref($add.ref(RRegData, $mul.ref(0, 52)), $mul.ref(51, 1)), 10);
    $M.43 := $store.i8($M.43, RData, 0);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(1, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(2, 1)), $sub.i8(0, 10));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(3, 1)), $sub.i8(0, 126));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(4, 1)), 2);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(5, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(6, 1)), $sub.i8(0, 122));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(7, 1)), $sub.i8(0, 5));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(8, 1)), 4);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(9, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(10, 1)), 0);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(11, 1)), 10);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(12, 1)), 6);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(13, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(14, 1)), 1);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(15, 1)), 10);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(16, 1)), 8);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(17, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(18, 1)), $sub.i8(0, 118));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(19, 1)), 19);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(20, 1)), 10);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(21, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(22, 1)), $sub.i8(0, 59));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(23, 1)), 17);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(24, 1)), 12);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(25, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(26, 1)), $sub.i8(0, 122));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(27, 1)), $sub.i8(0, 123));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(28, 1)), 14);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(29, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(30, 1)), 32);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(31, 1)), 10);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(32, 1)), 16);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(33, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(34, 1)), 33);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(35, 1)), 10);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(36, 1)), 18);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(37, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(38, 1)), 65);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(39, 1)), $sub.i8(0, 1));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(40, 1)), 20);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(41, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(42, 1)), $sub.i8(0, 126));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(43, 1)), 0);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(44, 1)), 22);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(45, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(46, 1)), $sub.i8(0, 126));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(47, 1)), 123);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(48, 1)), 24);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(49, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(50, 1)), $sub.i8(0, 118));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(51, 1)), 125);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(52, 1)), 26);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(53, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(54, 1)), $sub.i8(0, 120));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(55, 1)), $sub.i8(0, 127));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(56, 1)), 28);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(57, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(58, 1)), $sub.i8(0, 122));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(59, 1)), 122);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(60, 1)), 30);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(61, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(62, 1)), $sub.i8(0, 124));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(63, 1)), $sub.i8(0, 127));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(64, 1)), 32);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(65, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(66, 1)), $sub.i8(0, 126));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(67, 1)), 124);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(68, 1)), 34);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(69, 1)), 9);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(70, 1)), 10);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(RData, $mul.ref(0, 72)), $mul.ref(71, 1)), 10);
    $M.42 := $store.ref($M.42, pc104, pc104_1);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(pc104, $mul.ref(0, 32)), $mul.ref(1, 8)), pc104_2);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(pc104, $mul.ref(0, 32)), $mul.ref(2, 8)), pc104_3);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(pc104, $mul.ref(0, 32)), $mul.ref(3, 8)), pc104_4);
    $M.2 := $store.ref($M.2, rocket_port_ops, carrier_raised);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(rocket_port_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), dtr_rts);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(rocket_port_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(rocket_port_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(rocket_port_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.4 := $store.i8($M.4, lineNumbers, 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(1, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(2, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(3, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(5, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(9, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(10, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(11, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(13, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(15, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(16, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(17, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(18, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(19, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(20, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(21, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(22, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(23, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(25, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(26, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(27, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(28, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(29, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(30, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(31, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(33, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(34, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(35, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(37, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(38, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(39, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(40, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(41, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(42, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(43, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(44, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(45, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(46, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(47, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(48, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(49, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(50, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(51, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(52, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(53, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(54, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(55, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(56, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(57, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(58, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(59, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(60, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(61, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(62, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(63, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(64, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(65, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(66, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(67, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(68, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(69, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(70, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(71, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(72, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(73, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(74, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(75, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(76, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(77, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(78, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(79, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(80, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(81, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(82, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(83, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(84, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(85, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(86, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(87, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(88, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(89, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(90, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(91, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(92, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(93, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(94, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(95, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(96, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(97, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(98, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(99, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(100, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(101, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(102, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(103, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(104, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(105, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(106, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(107, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(108, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(109, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(110, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(111, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(112, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(113, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(114, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(115, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(116, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(117, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(118, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(119, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(120, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(121, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(122, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(123, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(124, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(125, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(126, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(127, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(128, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(129, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(130, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(131, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(132, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(133, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(134, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(135, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(136, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(137, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(138, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(139, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(140, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(141, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(142, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(143, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(144, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(145, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(146, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(147, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(148, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(149, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(150, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(151, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(152, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(153, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(154, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(155, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(156, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(157, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(158, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(159, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(160, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(161, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(162, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(163, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(164, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(165, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(166, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(167, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(168, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(169, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(170, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(171, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(172, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(173, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(174, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(175, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(176, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(177, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(178, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(179, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(180, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(181, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(182, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(183, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(184, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(185, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(186, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(187, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(188, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(189, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(190, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(191, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(192, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(193, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(194, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(195, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(196, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(197, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(198, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(199, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(200, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(201, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(202, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(203, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(204, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(205, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(206, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(207, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(208, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(209, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(210, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(211, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(212, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(213, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(214, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(215, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(216, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(217, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(218, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(219, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(220, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(221, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(222, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(223, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(224, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(225, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(226, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(227, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(228, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(229, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(230, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(231, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(232, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(233, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(234, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(235, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(236, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(237, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(238, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(239, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(240, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(241, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(242, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(243, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(244, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(245, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(246, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(247, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(248, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(249, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(250, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(251, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(252, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(253, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(254, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(lineNumbers, $mul.ref(0, 256)), $mul.ref(255, 1)), 0);
    $M.2 := $store.i64($M.2, rocketModel, 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(0, 104)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(1, 104)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(2, 104)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(3, 104)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(4, 104)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(5, 104)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(6, 104)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(1, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(34, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(39, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(41, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(42, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(43, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(46, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(47, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(49, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(50, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(51, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(53, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(54, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(55, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(57, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(58, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(59, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(60, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(61, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(62, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(63, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(65, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(66, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(67, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(68, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(69, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(70, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(71, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(72, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(73, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(74, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(75, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(76, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(77, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(78, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(8, 1)), $mul.ref(79, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(88, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(7, 104)), $mul.ref(100, 1)), 0);
    $M.40 := 0;
    call {:si_unique_call 1382} {:cexpr "nextLineNumber"} boogie_si_record_i64(0);
    $M.10 := $store.i8($M.10, sBitMapSetTbl, 1);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(1, 1)), 2);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(2, 1)), 4);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(3, 1)), 8);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(4, 1)), 16);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(5, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(6, 1)), 64);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(7, 1)), $sub.i8(0, 128));
    $M.11 := $store.i8($M.11, sBitMapClrTbl, $sub.i8(0, 2));
    $M.11 := $store.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(1, 1)), $sub.i8(0, 3));
    $M.11 := $store.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(2, 1)), $sub.i8(0, 5));
    $M.11 := $store.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(3, 1)), $sub.i8(0, 9));
    $M.11 := $store.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i8(0, 17));
    $M.11 := $store.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(5, 1)), $sub.i8(0, 33));
    $M.11 := $store.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(6, 1)), $sub.i8(0, 65));
    $M.11 := $store.i8($M.11, $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(7, 1)), 127);
    $M.2 := $store.i32($M.2, aiop_intr_bits, 1);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(aiop_intr_bits, $mul.ref(0, 16)), $mul.ref(1, 4)), 2);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(aiop_intr_bits, $mul.ref(0, 16)), $mul.ref(2, 4)), 4);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(aiop_intr_bits, $mul.ref(0, 16)), $mul.ref(3, 4)), 8);
    $M.12 := $store.i32($M.12, rp_baud_base, 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref(2, 4)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref(3, 4)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref(4, 4)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref(5, 4)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref(6, 4)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(rp_baud_base, $mul.ref(0, 32)), $mul.ref(7, 4)), 0);
    $M.38 := 20;
    call {:si_unique_call 1383} {:cexpr "sClockPrescale"} boogie_si_record_i32(20);
    $M.37 := 0;
    call {:si_unique_call 1384} {:cexpr "support_low_speed"} boogie_si_record_i8(0);
    $M.2 := $store.i32($M.2, sController, $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(0, 136)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(0, 1)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(1, 136)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(0, 1)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(2, 136)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(0, 1)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(3, 136)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(4, 136)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(5, 136)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(6, 136)), $mul.ref(128, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(16, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(36, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(48, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(52, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(56, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(60, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(60, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(76, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(76, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(76, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(76, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(92, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(92, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(92, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(92, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(108, 1)), $mul.ref(0, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(108, 1)), $mul.ref(1, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(108, 1)), $mul.ref(2, 4)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(108, 1)), $mul.ref(3, 4)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(7, 136)), $mul.ref(128, 1)), $0.ref);
    $M.33 := $store.i64($M.33, pc104_4, 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_4, $mul.ref(0, 64)), $mul.ref(1, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_4, $mul.ref(0, 64)), $mul.ref(2, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_4, $mul.ref(0, 64)), $mul.ref(3, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_4, $mul.ref(0, 64)), $mul.ref(4, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_4, $mul.ref(0, 64)), $mul.ref(5, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_4, $mul.ref(0, 64)), $mul.ref(6, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_4, $mul.ref(0, 64)), $mul.ref(7, 8)), 0);
    $M.36 := 0;
    call {:si_unique_call 1385} {:cexpr "modem4"} boogie_si_record_i64(0);
    $M.33 := $store.i64($M.33, pc104_3, 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_3, $mul.ref(0, 64)), $mul.ref(1, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_3, $mul.ref(0, 64)), $mul.ref(2, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_3, $mul.ref(0, 64)), $mul.ref(3, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_3, $mul.ref(0, 64)), $mul.ref(4, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_3, $mul.ref(0, 64)), $mul.ref(5, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_3, $mul.ref(0, 64)), $mul.ref(6, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_3, $mul.ref(0, 64)), $mul.ref(7, 8)), 0);
    $M.35 := 0;
    call {:si_unique_call 1386} {:cexpr "modem3"} boogie_si_record_i64(0);
    $M.33 := $store.i64($M.33, pc104_2, 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_2, $mul.ref(0, 64)), $mul.ref(1, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_2, $mul.ref(0, 64)), $mul.ref(2, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_2, $mul.ref(0, 64)), $mul.ref(3, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_2, $mul.ref(0, 64)), $mul.ref(4, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_2, $mul.ref(0, 64)), $mul.ref(5, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_2, $mul.ref(0, 64)), $mul.ref(6, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_2, $mul.ref(0, 64)), $mul.ref(7, 8)), 0);
    $M.34 := 0;
    call {:si_unique_call 1387} {:cexpr "modem2"} boogie_si_record_i64(0);
    $M.33 := $store.i64($M.33, pc104_1, 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_1, $mul.ref(0, 64)), $mul.ref(1, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_1, $mul.ref(0, 64)), $mul.ref(2, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_1, $mul.ref(0, 64)), $mul.ref(3, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_1, $mul.ref(0, 64)), $mul.ref(4, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_1, $mul.ref(0, 64)), $mul.ref(5, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_1, $mul.ref(0, 64)), $mul.ref(6, 8)), 0);
    $M.33 := $store.i64($M.33, $add.ref($add.ref(pc104_1, $mul.ref(0, 64)), $mul.ref(7, 8)), 0);
    $M.14 := $store.i32($M.14, rcktpt_type, 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(2, 4)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(3, 4)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(4, 4)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(5, 4)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(6, 4)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(rcktpt_type, $mul.ref(0, 32)), $mul.ref(7, 4)), 0);
    $M.32 := 0;
    call {:si_unique_call 1388} {:cexpr "modem1"} boogie_si_record_i64(0);
    $M.31 := 0;
    call {:si_unique_call 1389} {:cexpr "board4"} boogie_si_record_i64(0);
    $M.30 := 0;
    call {:si_unique_call 1390} {:cexpr "board3"} boogie_si_record_i64(0);
    $M.29 := 0;
    call {:si_unique_call 1391} {:cexpr "board2"} boogie_si_record_i64(0);
    $M.28 := 0;
    call {:si_unique_call 1392} {:cexpr "board1"} boogie_si_record_i64(0);
    $M.27 := 0;
    call {:si_unique_call 1393} {:cexpr "controller"} boogie_si_record_i64(0);
    $M.26 := $store.i32($M.26, is_PCI, 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(2, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(3, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(4, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref(is_PCI, $mul.ref(0, 32)), $mul.ref(7, 4)), 0);
    $M.1 := $store.i64($M.1, rcktpt_io_addr, 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(1, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(2, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(3, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(4, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(5, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(6, 8)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(7, 8)), 0);
    $M.3 := $store.ref($M.3, rp_table, $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(1, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(2, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(3, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(4, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(5, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(6, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(7, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(8, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(9, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(10, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(11, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(12, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(13, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(14, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(15, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(16, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(17, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(18, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(19, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(20, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(21, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(22, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(23, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(24, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(25, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(26, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(27, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(28, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(29, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(30, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(31, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(32, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(33, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(34, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(35, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(36, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(37, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(38, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(39, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(40, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(41, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(42, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(43, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(44, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(45, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(46, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(47, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(48, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(49, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(50, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(51, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(52, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(53, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(54, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(55, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(56, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(57, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(58, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(59, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(60, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(61, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(62, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(63, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(64, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(65, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(66, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(67, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(68, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(69, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(70, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(71, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(72, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(73, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(74, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(75, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(76, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(77, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(78, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(79, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(80, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(81, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(82, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(83, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(84, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(85, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(86, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(87, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(88, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(89, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(90, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(91, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(92, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(93, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(94, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(95, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(96, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(97, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(98, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(99, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(100, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(101, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(102, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(103, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(104, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(105, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(106, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(107, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(108, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(109, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(110, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(111, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(112, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(113, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(114, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(115, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(116, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(117, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(118, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(119, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(120, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(121, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(122, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(123, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(124, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(125, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(126, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(127, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(128, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(129, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(130, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(131, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(132, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(133, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(134, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(135, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(136, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(137, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(138, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(139, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(140, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(141, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(142, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(143, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(144, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(145, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(146, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(147, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(148, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(149, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(150, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(151, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(152, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(153, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(154, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(155, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(156, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(157, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(158, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(159, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(160, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(161, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(162, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(163, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(164, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(165, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(166, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(167, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(168, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(169, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(170, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(171, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(172, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(173, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(174, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(175, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(176, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(177, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(178, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(179, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(180, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(181, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(182, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(183, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(184, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(185, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(186, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(187, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(188, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(189, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(190, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(191, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(192, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(193, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(194, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(195, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(196, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(197, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(198, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(199, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(200, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(201, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(202, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(203, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(204, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(205, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(206, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(207, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(208, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(209, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(210, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(211, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(212, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(213, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(214, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(215, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(216, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(217, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(218, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(219, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(220, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(221, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(222, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(223, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(224, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(225, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(226, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(227, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(228, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(229, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(230, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(231, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(232, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(233, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(234, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(235, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(236, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(237, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(238, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(239, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(240, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(241, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(242, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(243, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(244, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(245, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(246, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(247, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(248, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(249, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(250, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(251, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(252, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(253, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(254, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(255, 8)), $0.ref);
    $M.13 := $0.ref;
    $M.94 := $store.ref($M.94, rocket_timer, $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), $i2p.i64.ref(1953723489));
    $M.94 := $store.i64($M.94, $add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), 0);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(24, 1)), boot_tvec_bases);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(32, 1)), rp_do_poll);
    $M.94 := $store.i64($M.94, $add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(40, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(48, 1)), $sub.i32(0, 1));
    $M.94 := $store.i32($M.94, $add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(52, 1)), 0);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.94 := $store.ref($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(0, 1)), .str.1);
    $M.94 := $store.ref($M.94, $add.ref($add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(24, 1)), .str.1);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(rocket_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.i8($M.2, .str.24, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(11, 1)), 52);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(12, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(15, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(18, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(19, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(20, 1)), 113);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(21, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(22, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(23, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(24, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(25, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(26, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(27, 1)), 98);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(28, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(29, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, .str.25, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(11, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(12, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(15, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(18, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(19, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(20, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(21, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(22, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(23, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(24, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(25, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(26, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(27, 1)), 98);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(28, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(29, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.25, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.2 := $store.i8($M.2, .str.26, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(11, 1)), 85);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(12, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(13, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(14, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(16, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(22, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(23, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(24, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(25, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(26, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(27, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(28, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(29, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(30, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(31, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(32, 1)), 98);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(33, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(34, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.26, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, .str.27, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(11, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(12, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(15, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(18, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(19, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(20, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(21, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(22, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(23, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(24, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(25, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(26, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(27, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(28, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(29, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(30, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(31, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, .str.28, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(11, 1)), 85);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(12, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(13, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(14, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(16, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(22, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(23, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(24, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(25, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(26, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(27, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(28, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(29, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(30, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(31, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(32, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(33, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(34, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(35, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(36, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.28, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.2 := $store.i8($M.2, .str.29, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(11, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(12, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(15, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(18, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(19, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(20, 1)), 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(21, 1)), 74);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(22, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(23, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(24, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(25, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(26, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(27, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(28, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(29, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(30, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(31, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(32, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(33, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(34, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.29, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, .str.30, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(11, 1)), 52);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(12, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(15, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(18, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(19, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(20, 1)), 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(21, 1)), 74);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(22, 1)), 52);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(23, 1)), 53);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(24, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(25, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(26, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(27, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(28, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(29, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(30, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(31, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(32, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(33, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(34, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.30, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.2 := $store.i8($M.2, .str.31, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(11, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(12, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(15, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(18, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(19, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(20, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(21, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(22, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(23, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(24, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(25, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(26, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(28, 1)), 68);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(29, 1)), 66);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(30, 1)), 55);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(31, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.31, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i8($M.2, .str.32, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(11, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(12, 1)), 54);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(13, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(14, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(15, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(16, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(18, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(19, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(20, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(21, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(22, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(23, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(24, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(25, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(26, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(27, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(28, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(29, 1)), 68);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(30, 1)), 66);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(31, 1)), 55);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(32, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, .str.33, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(11, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(12, 1)), 54);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(13, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(14, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(15, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(16, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(18, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(19, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(20, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(21, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(22, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(23, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(24, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(25, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(26, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(27, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(28, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(29, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(30, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(31, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(32, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.33, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, .str.34, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(11, 1)), 85);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(12, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(13, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(14, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(16, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(17, 1)), 54);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(18, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(19, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(20, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(21, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(22, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(23, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(24, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(25, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(26, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(27, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(28, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(29, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(30, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(31, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(32, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(33, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(34, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(35, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(36, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(37, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.34, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, .str.35, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(11, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(12, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(13, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(14, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(15, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(16, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(18, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(19, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(20, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(21, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(22, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(23, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(24, 1)), 54);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(25, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(26, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(27, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(28, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(29, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(30, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(31, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(32, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(33, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(34, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(35, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(36, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(37, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(38, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(39, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(40, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(41, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(42, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(43, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(44, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.35, $mul.ref(0, 46)), $mul.ref(45, 1)), 0);
    $M.2 := $store.i8($M.2, .str.36, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(11, 1)), 51);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(12, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(13, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(14, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(15, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(16, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(18, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(19, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(20, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(21, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(22, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(23, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(24, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(25, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(26, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(27, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(28, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(29, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(30, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(31, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(32, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.36, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.2 := $store.i8($M.2, .str.37, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(11, 1)), 85);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(12, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(13, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(14, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(16, 1)), 51);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(17, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(18, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(19, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(20, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(21, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(22, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(23, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(24, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(25, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(26, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(27, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(28, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(29, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(30, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(31, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(32, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(33, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(34, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(35, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(36, 1)), 47);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(37, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.37, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.2 := $store.i8($M.2, .str.38, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(11, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(12, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(13, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(14, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(16, 1)), 52);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.38, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, .str.39, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(11, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(12, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(13, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(14, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(16, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.39, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, .str.40, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(11, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(12, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(13, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(14, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(16, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(22, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(23, 1)), 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(24, 1)), 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(25, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(26, 1)), 51);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(27, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.40, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, .str.41, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(11, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(12, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(13, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(14, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(16, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(22, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(23, 1)), 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(24, 1)), 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(25, 1)), 52);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(26, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(27, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.41, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, .str.42, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(6, 1)), 77);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(8, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(11, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(12, 1)), 54);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(13, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.42, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, .str.43, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(6, 1)), 77);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(8, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(11, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(12, 1)), 52);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(13, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, .str.44, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(6, 1)), 77);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(8, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(11, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(12, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(13, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(14, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(16, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, .str.45, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(6, 1)), 77);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(8, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(11, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(12, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(13, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(14, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(16, 1)), 52);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(17, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(18, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.45, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.2 := $store.i8($M.2, .str.15, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(6, 1)), 77);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(8, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(11, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(12, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(13, 1)), 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(14, 1)), 65);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.15, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i8($M.2, .str.16, 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(3, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(6, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(9, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(10, 1)), 32);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(11, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(12, 1)), 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(13, 1)), 65);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.16, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    call {:si_unique_call 1394} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 375932);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 376964);

procedure devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 377996);

procedure devirtbounce.2(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 379028);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 380060);

procedure devirtbounce.4(funcPtr: ref, arg: i16, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i16, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 381092);

procedure devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 382124);

procedure devirtbounce.6(funcPtr: ref, arg: i32) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 383156);

procedure devirtbounce.7(funcPtr: ref, arg: i32, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i32, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 384188);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 385220);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1395} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 386252);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.9, $M.5, $CurrAddr;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(rp_set_termios, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(rp_close, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1396} rp_close($p1, $p2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1397} rp_set_termios($p3, $p4);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.15, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.5, $M.2, $M.0, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.44, $M.43, $M.42, $M.4, $M.40, $M.10, $M.11, $M.12, $M.38, $M.37, $M.33, $M.36, $M.35, $M.34, $M.14, $M.32, $M.31, $M.30, $M.29, $M.28, $M.27, $M.26, $M.1, $M.3, $M.13, $M.94, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1398} __SMACK_static_init();
    call {:si_unique_call 1399} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $M.24, $M.15, $M.16, $M.5, $M.25, $M.9, $M.0, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.44, $M.43, $M.42, $M.4, $M.40, $M.10, $M.11, $M.12, $M.38, $M.37, $M.33, $M.36, $M.35, $M.34, $M.14, $M.32, $M.31, $M.30, $M.29, $M.28, $M.27, $M.26, $M.1, $M.3, $M.13, $M.94, $CurrAddr, $M.39, $M.41, $M.7, $M.8;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rp_do_poll_loop_$bb43(in_$i87: i32, in_$p91: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$i95: i32, in_$i3: i32) returns (out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$i95: i32)
{

  entry:
    out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95 := in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i95;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  $bb48:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := out_$i107;
    goto $bb48_dummy;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$i110 := $ult.i64(out_$i108, out_$i109);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.2, in_$p91);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i32.i64(out_$i107);
    goto corral_source_split_146;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i95, 1);
    call {:si_unique_call 30} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_145;

  $bb46:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} rp_do_transmit(out_$p106);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.3, out_$p105);
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i104, 8));
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i103);
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    call {:si_unique_call 28} {:cexpr "line"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} out_$i102 := GetLineNumber(in_$i3, out_$i100, out_$i101);
    call {:si_unique_call 27} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i102);
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i95, 7);
    call {:si_unique_call 25} {:cexpr "ch"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i100 := $lshr.i32(out_$i99, 3);
    call {:si_unique_call 24} {:cexpr "aiop"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_136;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i99 := $and.i32(out_$i95, 24);
    goto corral_source_split_135;

  $bb45:
    assume out_$i98 == 1;
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i32(out_$i96, in_$i87);
    goto corral_source_split_131;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i96 := $shl.i32(1, out_$i95);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95 := rp_do_poll_loop_$bb43(in_$i87, in_$p91, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95, in_$i3);
    return;

  exit:
    return;
}



procedure rp_do_poll_loop_$bb43(in_$i87: i32, in_$p91: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$i95: i32, in_$i3: i32) returns (out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$i95: i32);
  modifies $M.2, $M.5;



implementation rp_do_poll_loop_$bb26(in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i8, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i66: i8, in_$i67: i32, in_$i46: i32, in_$i3: i32) returns (out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i8, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i66: i8, out_$i67: i32)
{

  entry:
    out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67 := in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i66, in_$i67;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  $bb31:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i78, out_$i79;
    goto $bb31_dummy;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i8.i32(out_$i78);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i67, 1);
    call {:si_unique_call 21} {:cexpr "ch"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    call {:si_unique_call 20} {:cexpr "AiopMask"} boogie_si_record_i8(out_$i78);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i77 := $ashr.i32(out_$i76, 1);
    goto corral_source_split_101;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i66);
    goto corral_source_split_100;

  $bb29:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} rp_handle_port(out_$p75);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.3, out_$p74);
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i73, 8));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    call {:si_unique_call 18} {:cexpr "line"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$i71 := GetLineNumber(in_$i3, in_$i46, out_$i67);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i71);
    goto corral_source_split_93;

  $bb28:
    assume out_$i70 == 1;
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 1);
    goto corral_source_split_89;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i66);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67 := rp_do_poll_loop_$bb26(out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, in_$i46, in_$i3);
    return;

  exit:
    return;
}



procedure rp_do_poll_loop_$bb26(in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i8, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i66: i8, in_$i67: i32, in_$i46: i32, in_$i3: i32) returns (out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i8, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i66: i8, out_$i67: i32);
  modifies $M.2, $M.7, $M.8, $CurrAddr;



implementation rp_do_poll_loop_$bb19(in_$i9: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i8, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i66: i8, in_$i67: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i45: i32, in_$i46: i32, in_$i3: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i8, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i66: i8, out_$i67: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i45: i32, out_$i46: i32)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46 := in_$p47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i66, in_$i67, in_$i82, in_$i83, in_$i84, in_$i45, in_$i46;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_62;

  $bb35:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i82, out_$i83;
    goto $bb35_dummy;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i82, 0);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i46, 1);
    call {:si_unique_call 22} {:cexpr "aiop"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_110;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  $bb22:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := out_$i45;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i55;
    goto $bb34;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb25;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume !(out_$i81 == 1);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i8.i32(out_$i78);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i67, 1);
    call {:si_unique_call 21} {:cexpr "ch"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    call {:si_unique_call 20} {:cexpr "AiopMask"} boogie_si_record_i8(out_$i78);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i77 := $ashr.i32(out_$i76, 1);
    goto corral_source_split_101;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i66);
    goto corral_source_split_100;

  $bb29:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} rp_handle_port(out_$p75);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.3, out_$p74);
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i73, 8));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    call {:si_unique_call 18} {:cexpr "line"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$i71 := GetLineNumber(in_$i3, out_$i46, out_$i67);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i71);
    goto corral_source_split_93;

  $bb28:
    assume out_$i70 == 1;
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 1);
    goto corral_source_split_89;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i66);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    call out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67 := rp_do_poll_loop_$bb26(out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i46, in_$i3);
    goto $bb26_last;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i63, 0;
    goto $bb26;

  $bb31:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i78, out_$i79;
    assume false;
    return;

  $bb23:
    assume out_$i65 == 1;
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} out_$i63 := sInB(out_$i62);
    call {:si_unique_call 15} {:cexpr "AiopMask"} boogie_si_record_i8(out_$i63);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i16(out_$i61);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i16(out_$i59);
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.2, out_$p58);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i46);
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i9, 136)), $mul.ref(76, 1)), $mul.ref(out_$i56, 4));
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, out_$i45);
    call {:si_unique_call 13} {:cexpr "CtlMask"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i54 := $xor.i32(out_$i51, $sub.i32(0, 1));
    goto corral_source_split_73;

  $bb21:
    assume out_$i53 == 1;
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i32(out_$i45, out_$i51);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.2, out_$p50);
    call {:si_unique_call 12} {:cexpr "bit"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(out_$i49, 4));
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i46);
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.2, out_$p47);
    goto corral_source_split_65;

  $bb20:
    out_$p47 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i9, 136)), $mul.ref(128, 1));
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46 := rp_do_poll_loop_$bb19(in_$i9, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46, in_$i3);
    return;

  exit:
    return;
}



procedure rp_do_poll_loop_$bb19(in_$i9: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i8, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i66: i8, in_$i67: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i45: i32, in_$i46: i32, in_$i3: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i8, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i66: i8, out_$i67: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i45: i32, out_$i46: i32);
  modifies $M.2, $M.7, $M.8, $CurrAddr;



implementation rp_do_poll_loop_$bb4(in_$i4: i64, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$i9: i64, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i16, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i25: i32, in_$p36: ref, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i16, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i35: i32, in_$i44: i1, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i8, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i66: i8, in_$i67: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i45: i32, in_$i46: i32, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i64, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$i95: i32, in_$i94: i32, in_$i111: i32, in_$i8: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$i9: i64, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i16, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i25: i32, out_$p36: ref, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i16, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i35: i32, out_$i44: i1, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i8, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i66: i8, out_$i67: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i45: i32, out_$i46: i32, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i64, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$i95: i32, out_$i94: i32, out_$i111: i32, out_$i8: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p5, out_$i6, out_$i7, out_$i9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i25, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i35, out_$i44, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95, out_$i94, out_$i111, out_$i8, out_$i112, out_$i113, out_$i114, out_$i3 := in_$i4, in_$p5, in_$i6, in_$i7, in_$i9, in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i25, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i35, in_$i44, in_$p47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i66, in_$i67, in_$i82, in_$i83, in_$i84, in_$i45, in_$i46, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$p91, in_$i92, in_$i93, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i95, in_$i94, in_$i111, in_$i8, in_$i112, in_$i113, in_$i114, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  $bb52:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i112;
    goto $bb52_dummy;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i112, out_$i113);
    goto corral_source_split_19;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    out_$i113 := $M.0;
    goto corral_source_split_18;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i8, 1);
    call {:si_unique_call 2} {:cexpr "ctrl"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_17;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i111;
    goto $bb8;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i3;
    goto $bb8;

  $bb6:
    assume out_$i7 == 1;
    goto corral_source_split_14;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i64(out_$i6, 0);
    goto corral_source_split_12;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i64($M.1, out_$p5);
    goto corral_source_split_11;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(out_$i4, 8));
    goto corral_source_split_10;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    goto corral_source_split_9;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_152;

  $bb39:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := out_$i3;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i94;
    goto $bb51;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i93 == 1);
    goto $bb42;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i3;
    goto $bb42;

  $bb49:
    assume !(out_$i110 == 1);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$i110 := $ult.i64(out_$i108, out_$i109);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.2, out_$p91);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i32.i64(out_$i107);
    goto corral_source_split_146;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i95, 1);
    call {:si_unique_call 30} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_145;

  $bb46:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} rp_do_transmit(out_$p106);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.3, out_$p105);
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i104, 8));
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i103);
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    call {:si_unique_call 28} {:cexpr "line"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} out_$i102 := GetLineNumber(out_$i3, out_$i100, out_$i101);
    call {:si_unique_call 27} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i102);
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i95, 7);
    call {:si_unique_call 25} {:cexpr "ch"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i100 := $lshr.i32(out_$i99, 3);
    call {:si_unique_call 24} {:cexpr "aiop"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_136;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i99 := $and.i32(out_$i95, 24);
    goto corral_source_split_135;

  $bb45:
    assume out_$i98 == 1;
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i32(out_$i96, out_$i87);
    goto corral_source_split_131;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i96 := $shl.i32(1, out_$i95);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    call out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95 := rp_do_poll_loop_$bb43(out_$i87, out_$p91, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95, out_$i3);
    goto $bb43_last;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i95 := 0;
    goto $bb43;

  $bb48:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := out_$i107;
    assume false;
    return;

  $bb40:
    assume out_$i93 == 1;
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i3;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i93 := $ult.i64(0, out_$i92);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i64($M.2, out_$p91);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(rocketModel, $mul.ref(0, 832)), $mul.ref(out_$i89, 104)), $mul.ref(88, 1));
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i3);
    goto corral_source_split_121;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.2, out_$p86);
    call {:si_unique_call 23} {:cexpr "xmitmask"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(xmit_flags, $mul.ref(0, 32)), $mul.ref(out_$i85, 4));
    goto corral_source_split_116;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i3);
    goto corral_source_split_115;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb18;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb36:
    assume !(out_$i84 == 1);
    goto corral_source_split_113;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i82, 0);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i46, 1);
    call {:si_unique_call 22} {:cexpr "aiop"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_110;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  $bb22:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := out_$i45;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i55;
    goto $bb34;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb25;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume !(out_$i81 == 1);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i8.i32(out_$i78);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i67, 1);
    call {:si_unique_call 21} {:cexpr "ch"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    call {:si_unique_call 20} {:cexpr "AiopMask"} boogie_si_record_i8(out_$i78);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i77 := $ashr.i32(out_$i76, 1);
    goto corral_source_split_101;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i66);
    goto corral_source_split_100;

  $bb29:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} rp_handle_port(out_$p75);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.3, out_$p74);
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i73, 8));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    call {:si_unique_call 18} {:cexpr "line"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$i71 := GetLineNumber(out_$i3, out_$i46, out_$i67);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i71);
    goto corral_source_split_93;

  $bb28:
    assume out_$i70 == 1;
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 1);
    goto corral_source_split_89;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i66);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    call out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67 := rp_do_poll_loop_$bb26(out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i46, out_$i3);
    goto $bb26_last;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i63, 0;
    goto $bb26;

  $bb31:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i78, out_$i79;
    assume false;
    return;

  $bb23:
    assume out_$i65 == 1;
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} out_$i63 := sInB(out_$i62);
    call {:si_unique_call 15} {:cexpr "AiopMask"} boogie_si_record_i8(out_$i63);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i16(out_$i61);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i16(out_$i59);
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.2, out_$p58);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i46);
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(out_$i9, 136)), $mul.ref(76, 1)), $mul.ref(out_$i56, 4));
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, out_$i45);
    call {:si_unique_call 13} {:cexpr "CtlMask"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i54 := $xor.i32(out_$i51, $sub.i32(0, 1));
    goto corral_source_split_73;

  $bb21:
    assume out_$i53 == 1;
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i32(out_$i45, out_$i51);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.2, out_$p50);
    call {:si_unique_call 12} {:cexpr "bit"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(out_$i49, 4));
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i46);
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.2, out_$p47);
    goto corral_source_split_65;

  $bb20:
    out_$p47 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(out_$i9, 136)), $mul.ref(128, 1));
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    call out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46 := rp_do_poll_loop_$bb19(out_$i9, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46, out_$i3);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i35, 0;
    goto $bb19;

  $bb35:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i82, out_$i83;
    assume false;
    return;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i35, 0);
    goto corral_source_split_58;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 15);
    call {:si_unique_call 5} {:cexpr "CtlMask"} boogie_si_record_i32(out_$i43);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i43;
    goto $bb15;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i25;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 15);
    call {:si_unique_call 11} {:cexpr "CtlMask"} boogie_si_record_i32(out_$i34);
    assume {:verifier.code 0} true;
    out_$i25 := out_$i34;
    goto $bb14;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i24;
    goto $bb14;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i32(out_$i23, 2340);
    call {:si_unique_call 8} {:cexpr "CtlMask"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_44;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} out_$i22 := sInW(out_$i21);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i16(out_$i22);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_40;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i16(out_$i18);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.2, out_$p17);
    goto corral_source_split_38;

  $bb12:
    assume out_$i16 == 1;
    out_$p17 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(out_$i9, 136)), $mul.ref(24, 1));
    goto corral_source_split_37;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_27;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.2, out_$p14);
    goto corral_source_split_26;

  $bb10:
    assume out_$i13 == 1;
    out_$p14 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(out_$i9, 136)), $mul.ref(16, 1));
    goto corral_source_split_25;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 1);
    goto corral_source_split_23;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.2, out_$p11);
    goto corral_source_split_22;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i3);
    out_$p11 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(out_$i9, 136)), $mul.ref(8, 1));
    goto corral_source_split_21;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i33 := $ashr.i32(out_$i32, 8);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_52;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} out_$i31 := sInW(out_$i30);
    call {:si_unique_call 10} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i31);
    goto corral_source_split_51;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    goto corral_source_split_50;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i32.i16(out_$i27);
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.2, out_$p26);
    goto corral_source_split_47;

  $bb13:
    assume !(out_$i16 == 1);
    out_$p26 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(out_$i9, 136)), $mul.ref(20, 1));
    goto corral_source_split_46;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_35;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} out_$i41 := sInB(out_$i40);
    call {:si_unique_call 4} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i41);
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i16(out_$i39);
    goto corral_source_split_33;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    goto corral_source_split_31;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.2, out_$p36);
    goto corral_source_split_30;

  $bb11:
    assume !(out_$i13 == 1);
    out_$p36 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(out_$i9, 136)), $mul.ref(32, 1));
    goto corral_source_split_29;

  $bb52_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$i6, out_$i7, out_$i9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i25, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i35, out_$i44, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95, out_$i94, out_$i111, out_$i8, out_$i112, out_$i113, out_$i114, out_$i3 := rp_do_poll_loop_$bb4(out_$i4, out_$p5, out_$i6, out_$i7, out_$i9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i25, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i35, out_$i44, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i66, out_$i67, out_$i82, out_$i83, out_$i84, out_$i45, out_$i46, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i95, out_$i94, out_$i111, out_$i8, out_$i112, out_$i113, out_$i114, out_$i3);
    return;

  exit:
    return;
}



procedure rp_do_poll_loop_$bb4(in_$i4: i64, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$i9: i64, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i16, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i25: i32, in_$p36: ref, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i16, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i35: i32, in_$i44: i1, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i71: i8, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i66: i8, in_$i67: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i45: i32, in_$i46: i32, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i64, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$i95: i32, in_$i94: i32, in_$i111: i32, in_$i8: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$i9: i64, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i16, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i25: i32, out_$p36: ref, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i16, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i35: i32, out_$i44: i1, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i71: i8, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i66: i8, out_$i67: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i45: i32, out_$i46: i32, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i64, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$i95: i32, out_$i94: i32, out_$i111: i32, out_$i8: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i3: i32);
  modifies $M.2, $M.5, $M.7, $M.8, $CurrAddr;



implementation rp_do_transmit_loop_$bb11(in_$p0: ref, in_$p36: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i16, in_$i72: i32, in_$i73: i16, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i8, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i1) returns (out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i16, out_$i72: i32, out_$i73: i16, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i8, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i1)
{

  entry:
    out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103 := in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$i90, in_$i91, in_$p92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb33_dummy;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, 0);
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.2, in_$p36);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p100, out_$i99);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i98, out_$i50);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.2, out_$p97);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p96, out_$i95);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(out_$i94, out_$i50);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.2, out_$p93);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p92, out_$i91);
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i32(out_$i90, 4095);
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.2, out_$p89);
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_368;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p88, out_$i87);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i86, out_$i50);
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.2, out_$p85);
    goto corral_source_split_364;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_363;

  $bb31:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} sOutB(out_$i73, out_$i84);
    goto corral_source_split_361;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i32.i8(out_$i83);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.2, out_$p81);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p75, $mul.ref(out_$i80, 1));
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i64(out_$i79, $sub.i64(0, 1));
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i78);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i77, out_$i50);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.2, out_$p76);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.2, out_$p74);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i32.i16(out_$i72);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i16.i32(out_$i71);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i32.i16(out_$i70);
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.2, out_$p69);
    goto corral_source_split_346;

  $bb30:
    assume out_$i68 == 1;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_343;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i50, 1);
    goto corral_source_split_342;

  $bb28:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} outsw(out_$i58, out_$p64, out_$i66);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i65);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$i65 := $sdiv.i32(out_$i50, 2);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p60, $mul.ref(out_$i63, 1));
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.2, out_$p61);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.2, out_$p59);
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.2, out_$p57);
    goto corral_source_split_331;

  $bb27:
    assume out_$i56 == 1;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(44, 1));
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$i56 := $ugt.i32(out_$i55, 2);
    goto corral_source_split_328;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i50, $sub.i32(0, 1));
    goto corral_source_split_327;

  $bb25:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i54 := $sle.i32(out_$i53, 0);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.2, out_$p52);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_323;

  $bb23:
    assume !(out_$i51 == 1);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$i51 := $sle.i32(out_$i50, 0);
    goto corral_source_split_320;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    goto $bb20;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i45;
    goto $bb20;

  $bb18:
    assume out_$i49 == 1;
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i45, out_$i48);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(4096, out_$i47);
    call {:si_unique_call 61} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.2, out_$p46);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1284, 1));
    goto corral_source_split_310;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i43;
    goto $bb17;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i41;
    goto $bb17;

  $bb15:
    assume out_$i44 == 1;
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i41, out_$i43);
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.2, out_$p42);
    call {:si_unique_call 60} {:cexpr "_min2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.2, out_$p40);
    call {:si_unique_call 59} {:cexpr "_min1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_300;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1268, 1));
    goto corral_source_split_299;

  $bb16:
    assume !(out_$i44 == 1);
    goto corral_source_split_307;

  $bb19:
    assume !(out_$i49 == 1);
    goto corral_source_split_317;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103 := rp_do_transmit_loop_$bb11(in_$p0, in_$p36, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103);
    return;

  exit:
    return;
}



procedure rp_do_transmit_loop_$bb11(in_$p0: ref, in_$p36: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i16, in_$i72: i32, in_$i73: i16, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i8, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$i101: i8, in_$i102: i32, in_$i103: i1) returns (out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i16, out_$i72: i32, out_$i73: i16, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i8, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$i101: i8, out_$i102: i32, out_$i103: i1);
  modifies $M.2;



implementation rp_do_receive_loop_$bb16(in_$p0: ref, in_$p1: ref, in_$p28: ref, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$i32: i16, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i52: i32, in_$i53: i1, in_$i55: i32, in_$i56: i1, in_$i58: i32, in_$i59: i1, in_$i60: i8, in_$i57: i8, in_$i54: i8, in_$i51: i8, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i8, in_$i65: i32, in_$i66: i8, in_$i68: i32, in_$i27: i32, in_vslice_dummy_var_16: i32) returns (out_$p28: ref, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$i32: i16, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i52: i32, out_$i53: i1, out_$i55: i32, out_$i56: i1, out_$i58: i32, out_$i59: i1, out_$i60: i8, out_$i57: i8, out_$i54: i8, out_$i51: i8, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i8, out_$i65: i32, out_$i66: i8, out_$i68: i32, out_$i27: i32, out_vslice_dummy_var_16: i32)
{

  entry:
    out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i52, out_$i53, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i57, out_$i54, out_$i51, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i68, out_$i27, out_vslice_dummy_var_16 := in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i52, in_$i53, in_$i55, in_$i56, in_$i58, in_$i59, in_$i60, in_$i57, in_$i54, in_$i51, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i68, in_$i27, in_vslice_dummy_var_16;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;

  $bb24:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i44;
    goto $bb24_dummy;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_568;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i68;
    goto $bb23;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i43;
    goto $bb23;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 127} {:cexpr "ToRecv"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_565;

  $bb21:
    assume out_$i42 == 1;
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, out_$i38);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.2, out_$p39);
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1296, 1));
    goto corral_source_split_559;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  $bb19:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := out_$i34;
    goto $bb20;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i37;
    goto $bb20;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i37 := $and.i32(out_$i34, $sub.i32(0, 1281));
    call {:si_unique_call 126} {:cexpr "CharNStat"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_556;

  $bb18:
    assume out_$i36 == 1;
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 2048);
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    call {:si_unique_call 125} {:cexpr "CharNStat"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} out_$i33 := sInW(out_$i32);
    call {:si_unique_call 124} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i33);
    goto corral_source_split_550;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i32.i16(out_$i31);
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i16.i32(out_$i30);
    goto corral_source_split_548;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.2, out_$p28);
    goto corral_source_split_546;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p1, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$i68 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 130} {:cexpr "ToRecv"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_592;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} out_vslice_dummy_var_16 := tty_insert_flip_char(out_$p61, out_$i64, out_$i66);
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i8(out_$i65);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i8.i32(out_$i51);
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i8(out_$i63);
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i8(out_$i48);
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_585;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i51 := out_$i54;
    goto $bb29;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i51 := 1;
    goto $bb29;

  $bb27:
    assume out_$i50 == 1;
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i32(out_$i48, 2048);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$i48 := $and.i32(out_$i47, out_$i38);
    call {:si_unique_call 128} {:cexpr "CharNStat"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.2, out_$p46);
    goto corral_source_split_573;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1648)), $mul.ref(1300, 1));
    goto corral_source_split_572;

  $bb22:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i57;
    goto $bb32;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    out_$i54 := 3;
    goto $bb32;

  $bb30:
    assume out_$i53 == 1;
    goto corral_source_split_594;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i32(out_$i48, 256);
    goto corral_source_split_581;

  $bb28:
    assume !(out_$i50 == 1);
    goto corral_source_split_580;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i60;
    goto $bb35;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i57 := 2;
    goto $bb35;

  $bb33:
    assume out_$i56 == 1;
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i48, 1024);
    goto corral_source_split_597;

  $bb31:
    assume !(out_$i53 == 1);
    goto corral_source_split_596;

  $bb37:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := 0;
    goto $bb38;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i60 := 4;
    goto $bb38;

  $bb36:
    assume out_$i59 == 1;
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i48, 512);
    goto corral_source_split_603;

  $bb34:
    assume !(out_$i56 == 1);
    goto corral_source_split_602;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i52, out_$i53, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i57, out_$i54, out_$i51, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i68, out_$i27, out_vslice_dummy_var_16 := rp_do_receive_loop_$bb16(in_$p0, in_$p1, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i52, out_$i53, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i57, out_$i54, out_$i51, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i68, out_$i27, out_vslice_dummy_var_16);
    return;

  exit:
    return;
}



procedure rp_do_receive_loop_$bb16(in_$p0: ref, in_$p1: ref, in_$p28: ref, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$i32: i16, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i52: i32, in_$i53: i1, in_$i55: i32, in_$i56: i1, in_$i58: i32, in_$i59: i1, in_$i60: i8, in_$i57: i8, in_$i54: i8, in_$i51: i8, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i8, in_$i65: i32, in_$i66: i8, in_$i68: i32, in_$i27: i32, in_vslice_dummy_var_16: i32) returns (out_$p28: ref, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$i32: i16, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i52: i32, out_$i53: i1, out_$i55: i32, out_$i56: i1, out_$i58: i32, out_$i59: i1, out_$i60: i8, out_$i57: i8, out_$i54: i8, out_$i51: i8, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i8, out_$i65: i32, out_$i66: i8, out_$i68: i32, out_$i27: i32, out_vslice_dummy_var_16: i32);
  modifies $M.7, $M.8, $M.2, $CurrAddr;



implementation rp_write_loop_$bb41(in_$p5: ref, in_$p80: ref, in_$i87: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i87: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$i87, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$i87, in_$p84, in_$i85, in_$i86, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$p102, in_$p103, in_$i104, in_$i105, in_$p106, in_$p107, in_$i108, in_$i109, in_$i110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb54:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$p84, out_$i85, out_$i86 := out_$p118, out_$i119, out_$i120;
    goto $bb54_dummy;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i120;
    assume true;
    goto $bb54;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 0);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} out_$i121 := constant_test_bit(29, in_$p80);
    call {:si_unique_call 280} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i86, out_$i97);
    call {:si_unique_call 278} {:cexpr "retval"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.i32(out_$i85, out_$i97);
    call {:si_unique_call 277} {:cexpr "count"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p84, $mul.ref(out_$i117, 1));
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i97);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} spin_unlock_irqrestore(out_$p116, $u0);
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1408, 1));
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p115, out_$i114);
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i113, out_$i97);
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.2, out_$p112);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p111, out_$i110);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i110 := $and.i32(out_$i109, 4095);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i108, out_$i97);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.2, out_$p107);
    goto corral_source_split_1418;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} ldv_spin_lock();
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.2;
    out_cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 274} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p106, out_$p84, out_$i100, $zext.i32.i64(1), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref(out_$p102, $mul.ref(out_$i105, 1));
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i32.i64(out_$i104);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.2, out_$p103);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.2, out_$p101);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1272, 1));
    goto corral_source_split_1409;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i97);
    call {:si_unique_call 273} {:cexpr "__len"} boogie_si_record_i64(out_$i100);
    goto corral_source_split_1408;

  $bb51:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$i99 := out_$i86;
    assume true;
    goto $bb51;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i98 := $sle.i32(out_$i97, 0);
    goto corral_source_split_1402;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i95;
    goto $bb49;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i92;
    goto $bb49;

  $bb47:
    assume out_$i96 == 1;
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i92, out_$i95);
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(4096, out_$i94);
    call {:si_unique_call 272} {:cexpr "_min2___1"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.2, out_$p93);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1280, 1));
    goto corral_source_split_1392;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i90;
    goto $bb46;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i85;
    goto $bb46;

  $bb44:
    assume out_$i91 == 1;
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i85, out_$i90);
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i32(4095, out_$i89);
    call {:si_unique_call 271} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.2, out_$p88);
    goto corral_source_split_1383;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1648)), $mul.ref(1288, 1));
    goto corral_source_split_1382;

  $bb45:
    assume !(out_$i91 == 1);
    goto corral_source_split_1389;

  $bb48:
    assume !(out_$i96 == 1);
    goto corral_source_split_1399;

  $bb54_dummy:
    call {:si_unique_call 1} out_$i87, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := rp_write_loop_$bb41(in_$p5, in_$p80, out_$i87, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure rp_write_loop_$bb41(in_$p5: ref, in_$p80: ref, in_$i87: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i87: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.5, $M.2;



implementation rp_wait_until_sent_loop_$bb5(in_$i1: i32, in_$p4: ref, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$i12: i32, in_$i13: i16, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i8, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i29: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i64, in_$i47: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_vslice_dummy_var_21: i64) returns (out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$i12: i32, out_$i13: i16, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i8, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i29: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i64, out_$i47: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_vslice_dummy_var_21: i64)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i30, out_$p31, out_$i32, out_$i33, out_$i29, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_vslice_dummy_var_21 := in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i30, in_$p31, in_$i32, in_$i33, in_$i29, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p49, in_$i50, in_$i51, in_vslice_dummy_var_21;
    goto $bb5, exit;

  $bb5:
    out_$p9 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(52, 1));
    goto corral_source_split_2151;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb26:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} out_$i50 := signal_pending(out_$p49);
    call {:si_unique_call 392} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$p49 := get_current();
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} out_vslice_dummy_var_21 := msleep_interruptible(out_$i47);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i47 := jiffies_to_msecs(out_$i46);
    call {:si_unique_call 388} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i45);
    goto corral_source_split_2210;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2209;

  $bb23:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i43;
    goto $bb24;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$i45 := 1;
    goto $bb24;

  $bb22:
    assume out_$i44 == 1;
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_2205;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  $bb14:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i29;
    goto $bb21;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i42;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  $bb19:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := out_$i29;
    goto $bb20;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i39;
    goto $bb20;

  $bb18:
    assume out_$i41 == 1;
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i39, out_$i29);
    goto corral_source_split_2198;

  $bb16:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    out_$i40 := $sle.i32(out_$i39, 0);
    goto corral_source_split_2194;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i36, out_$i38);
    call {:si_unique_call 386} {:cexpr "exit_time"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i64.i32(out_$i37);
    goto corral_source_split_2192;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.2, jiffies);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, in_$i1);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i64.i32(in_$i8);
    goto corral_source_split_2189;

  $bb13:
    assume out_$i34 == 1;
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(in_$i1, 0);
    goto corral_source_split_2186;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$i33 := $sdiv.i32(out_$i30, out_$i32);
    call {:si_unique_call 383} {:cexpr "check_time"} boogie_si_record_i32(out_$i33);
    assume {:verifier.code 0} true;
    out_$i29 := out_$i33;
    goto $bb12;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i28;
    goto $bb12;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i28 := $sdiv.i32(50, out_$i27);
    call {:si_unique_call 385} {:cexpr "check_time"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.2, out_$p26);
    goto corral_source_split_2182;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1648)), $mul.ref(1304, 1));
    goto corral_source_split_2181;

  $bb9:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i32(out_$i23, 2);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} out_$i22 := sInB(out_$i21);
    call {:si_unique_call 382} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i22);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i16(out_$i18);
    goto corral_source_split_2162;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.2, out_$p17);
    goto corral_source_split_2161;

  $bb6:
    assume out_$i16 == 1;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 1648)), $mul.ref(1096, 1)), $mul.ref(48, 1));
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    call {:si_unique_call 380} {:cexpr "txcnt"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} out_$i14 := sInB(out_$i13);
    call {:si_unique_call 379} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i32.i16(out_$i12);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i32.i16(out_$i10);
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.2, out_$p9);
    goto corral_source_split_2152;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.2, out_$p31);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1648)), $mul.ref(1304, 1));
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$i30 := $mul.i32(out_$i15, 250);
    goto corral_source_split_2171;

  $bb7:
    assume !(out_$i16 == 1);
    goto corral_source_split_2170;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i30, out_$p31, out_$i32, out_$i33, out_$i29, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_vslice_dummy_var_21 := rp_wait_until_sent_loop_$bb5(in_$i1, in_$p4, in_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i30, out_$p31, out_$i32, out_$i33, out_$i29, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_vslice_dummy_var_21);
    return;

  exit:
    return;
}



procedure rp_wait_until_sent_loop_$bb5(in_$i1: i32, in_$p4: ref, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$i12: i32, in_$i13: i16, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i8, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i29: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i64, in_$i47: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_vslice_dummy_var_21: i64) returns (out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$i12: i32, out_$i13: i16, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i8, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i29: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i64, out_$i47: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_vslice_dummy_var_21: i64);



implementation main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$i4: i32, in_$i5: i64, in_$i6: i32, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i64, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i45: i32, in_$i46: i1, in_$i48: i32, in_$i49: i1, in_$i51: i32, in_$i52: i1, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i8, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i8, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i8, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i8, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i8, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i168: i32, in_$i169: i8, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i8, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i32, in_$i184: i8, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i315: i32, in_$i316: i1, in_$p317: ref, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i323: i32, in_$i324: i1, in_$p325: ref, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$i359: i32, in_$i360: i1, in_$p361: ref, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i389: i32, in_$i390: i1, in_$p391: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$i401: i32, in_$i402: i1, in_$i404: i32, in_$i405: i1, in_$i407: i32, in_$i408: i1, in_$i410: i32, in_$i411: i32, in_$i412: i32, in_$i413: i1, in_$i415: i32, in_$i416: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32) returns (out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i45: i32, out_$i46: i1, out_$i48: i32, out_$i49: i1, out_$i51: i32, out_$i52: i1, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i8, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i8, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i8, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i8, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i8, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i168: i32, out_$i169: i8, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i8, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i32, out_$i184: i8, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i315: i32, out_$i316: i1, out_$p317: ref, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i323: i32, out_$i324: i1, out_$p325: ref, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$i359: i32, out_$i360: i1, out_$p361: ref, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i389: i32, out_$i390: i1, out_$p391: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$i401: i32, out_$i402: i1, out_$i404: i32, out_$i405: i1, out_$i407: i32, out_$i408: i1, out_$i410: i32, out_$i411: i32, out_$i412: i32, out_$i413: i1, out_$i415: i32, out_$i416: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i45, out_$i46, out_$i48, out_$i49, out_$i51, out_$i52, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$p245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$i311, out_$i312, out_$p313, out_$i315, out_$i316, out_$p317, out_$i319, out_$i320, out_$p321, out_$i323, out_$i324, out_$p325, out_$i327, out_$i328, out_$p329, out_$i331, out_$i332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$i355, out_$i356, out_$p357, out_$i359, out_$i360, out_$p361, out_$i363, out_$i364, out_$p365, out_$i367, out_$i368, out_$p369, out_$i371, out_$i372, out_$p373, out_$i375, out_$i376, out_$p377, out_$i379, out_$i380, out_$p381, out_$i383, out_$i384, out_$p385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$p391, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$i401, out_$i402, out_$i404, out_$i405, out_$i407, out_$i408, out_$i410, out_$i411, out_$i412, out_$i413, out_$i415, out_$i416, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i42, in_$i43, in_$i45, in_$i46, in_$i48, in_$i49, in_$i51, in_$i52, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$p132, in_$i133, in_$i134, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$i165, in_$i166, in_$p167, in_$i168, in_$i169, in_$i170, in_$i171, in_$p172, in_$i173, in_$i174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i181, in_$p182, in_$i183, in_$i184, in_$i185, in_$i186, in_$p187, in_$i188, in_$i189, in_$p190, in_$i191, in_$i192, in_$p193, in_$i194, in_$i195, in_$p196, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$p217, in_$p218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$p224, in_$i225, in_$i226, in_$p227, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$p233, in_$i234, in_$i235, in_$p236, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$p242, in_$i243, in_$i244, in_$p245, in_$i246, in_$i247, in_$p248, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$p254, in_$i256, in_$i257, in_$p258, in_$i260, in_$i261, in_$p262, in_$i264, in_$i265, in_$p266, in_$i268, in_$i269, in_$p270, in_$i272, in_$i273, in_$p274, in_$i275, in_$i276, in_$p277, in_$i279, in_$i280, in_$p281, in_$i283, in_$i284, in_$p285, in_$i287, in_$i288, in_$p289, in_$i291, in_$i292, in_$p293, in_$i295, in_$i296, in_$p297, in_$i299, in_$i300, in_$p301, in_$p302, in_$i303, in_$i304, in_$p305, in_$i307, in_$i308, in_$p309, in_$i311, in_$i312, in_$p313, in_$i315, in_$i316, in_$p317, in_$i319, in_$i320, in_$p321, in_$i323, in_$i324, in_$p325, in_$i327, in_$i328, in_$p329, in_$i331, in_$i332, in_$p333, in_$i335, in_$i336, in_$p337, in_$i339, in_$i340, in_$p341, in_$i343, in_$i344, in_$p345, in_$i347, in_$i348, in_$p349, in_$i351, in_$i352, in_$p353, in_$i355, in_$i356, in_$p357, in_$i359, in_$i360, in_$p361, in_$i363, in_$i364, in_$p365, in_$i367, in_$i368, in_$p369, in_$i371, in_$i372, in_$p373, in_$i375, in_$i376, in_$p377, in_$i379, in_$i380, in_$p381, in_$i383, in_$i384, in_$p385, in_$i386, in_$i387, in_$p388, in_$i389, in_$i390, in_$p391, in_$i392, in_$i393, in_$p394, in_$i395, in_$i396, in_$p397, in_$i398, in_$i399, in_$i401, in_$i402, in_$i404, in_$i405, in_$i407, in_$i408, in_$i410, in_$i411, in_$i412, in_$i413, in_$i415, in_$i416, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} out_$i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i18);
    call {:si_unique_call 766} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i18);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb64_dummy;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb15:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 775} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} dtr_rts(in_$p1, in_$i4);
    goto corral_source_split_4384;

  $bb36:
    assume out_$i38 == 1;
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 2);
    goto corral_source_split_4381;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i37 := $M.18;
    goto corral_source_split_4380;

  $bb34:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} dtr_rts(in_$p1, in_$i4);
    goto corral_source_split_4377;

  $bb33:
    assume out_$i36 == 1;
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 3);
    goto corral_source_split_4374;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i35 := $M.18;
    goto corral_source_split_4373;

  $bb31:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 771} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} dtr_rts(in_$p1, in_$i4);
    goto corral_source_split_4370;

  $bb30:
    assume out_$i34 == 1;
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 1);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i33 := $M.18;
    goto corral_source_split_4366;

  $bb28:
    assume out_$i32 == 1;
    goto corral_source_split_4365;

  $bb26:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb17:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i26, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} out_$i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 768} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i26);
    call {:si_unique_call 769} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i26);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i25 == 1;
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    out_$i24 := $M.18;
    goto corral_source_split_4344;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_4343;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_vslice_dummy_var_61 := carrier_raised(in_$p3);
    goto corral_source_split_4402;

  $bb46:
    assume out_$i46 == 1;
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 2);
    goto corral_source_split_4399;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i45 := $M.18;
    goto corral_source_split_4398;

  $bb44:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} out_vslice_dummy_var_60 := carrier_raised(in_$p3);
    goto corral_source_split_4395;

  $bb43:
    assume out_$i43 == 1;
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 3);
    goto corral_source_split_4392;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i42 := $M.18;
    goto corral_source_split_4391;

  $bb41:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 777} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} out_vslice_dummy_var_59 := carrier_raised(in_$p3);
    goto corral_source_split_4388;

  $bb40:
    assume out_$i40 == 1;
    goto corral_source_split_4387;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$i39 := $M.18;
    goto corral_source_split_4362;

  $bb27:
    assume !(out_$i31 == 1);
    goto corral_source_split_4361;

  $bb50:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 783} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_vslice_dummy_var_62 := ldv_destruct_1();
    goto corral_source_split_4406;

  $bb49:
    assume out_$i49 == 1;
    goto corral_source_split_4405;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 1);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i48 := $M.18;
    goto corral_source_split_4350;

  $bb19:
    assume out_$i28 == 1;
    goto corral_source_split_4349;

  $bb18:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i26, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb53:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.19 := out_$i55;
    call {:si_unique_call 786} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i54 := $M.19;
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_vslice_dummy_var_63 := ldv_shutdown_1();
    goto corral_source_split_4410;

  $bb52:
    assume out_$i52 == 1;
    goto corral_source_split_4409;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 3);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i51 := $M.18;
    goto corral_source_split_4354;

  $bb21:
    assume out_$i29 == 1;
    goto corral_source_split_4353;

  $bb20:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb56:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.19 := out_$i62;
    call {:si_unique_call 790} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i61, 1);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i61 := $M.19;
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.18 := 3;
    call {:si_unique_call 789} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4423;

  $bb57:
    assume out_$i60 == 1;
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i59 := $M.23;
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.23 := out_$i58;
    call {:si_unique_call 788} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_$i58 := ldv_activate_1();
    goto corral_source_split_4417;

  $bb55:
    assume out_$i57 == 1;
    goto corral_source_split_4416;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i56 := $M.18;
    goto corral_source_split_4358;

  $bb23:
    assume out_$i30 == 1;
    goto corral_source_split_4357;

  $bb22:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_stop();
    goto corral_source_split_4428;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb25;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb25;

  $bb66:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb77;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb77;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i71 := $M.19;
    goto corral_source_split_4441;

  $bb75:
    assume out_$i70 == 1;
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 3);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i69 := $M.20;
    goto corral_source_split_4437;

  $bb73:
    assume out_$i68 == 1;
    goto corral_source_split_4436;

  $bb68:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i65, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_4430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 792} out_$i65 := __VERIFIER_nondet_int();
    call {:si_unique_call 793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i65);
    call {:si_unique_call 794} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i65);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i64 == 1;
    goto corral_source_split_4430;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i63 := $M.20;
    goto corral_source_split_4340;

  $bb11:
    assume !(out_$i22 == 1);
    goto corral_source_split_4339;

  $bb84:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_4465;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i78 := $M.24;
    goto corral_source_split_4464;

  $bb86:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_tty_port_operations_1();
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 804} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_initialize_tty_operations_2();
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4457;

  $bb85:
    assume out_$i77 == 1;
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 0);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$i76 := $M.24;
    goto corral_source_split_4453;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.24 := out_$i75;
    call {:si_unique_call 799} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_4452;

  SeqInstr_15:
    goto corral_source_split_4451;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_$i75 := rp_init();
    goto SeqInstr_14;

  $bb83:
    assume out_$i74 == 1;
    goto corral_source_split_4450;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i73 := $M.20;
    goto corral_source_split_4433;

  $bb70:
    assume out_$i67 == 1;
    goto corral_source_split_4432;

  $bb69:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} ldv_stop();
    goto corral_source_split_4470;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb72;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb72;

  $bb96:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb101:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 812} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} rp_do_poll(in_$i5);
    goto corral_source_split_4479;

  $bb100:
    assume out_$i85 == 1;
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 1);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$i84 := $M.21;
    goto corral_source_split_4475;

  $bb98:
    assume out_$i83 == 1;
    goto corral_source_split_4474;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_4472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} out_$i82 := __VERIFIER_nondet_int();
    call {:si_unique_call 809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i82);
    call {:si_unique_call 810} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i82);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb95:
    assume out_$i81 == 1;
    goto corral_source_split_4472;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    out_$i80 := $M.21;
    goto corral_source_split_4332;

  $bb5:
    assume out_$i20 == 1;
    goto corral_source_split_4331;

  $bb4:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} ldv_stop();
    goto corral_source_split_4482;

  $bb99:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb108:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb158:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} rp_start(out_$p114);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$p114 := $M.16;
    goto corral_source_split_4575;

  $bb157:
    assume out_$i113 == 1;
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 3);
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$i112 := $M.22;
    goto corral_source_split_4571;

  $bb155:
    assume out_$i111 == 1;
    goto corral_source_split_4570;

  $bb153:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i88, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb147:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i88, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb135:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i88, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb110:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i88, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i88, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_4484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 814} out_$i88 := __VERIFIER_nondet_int();
    call {:si_unique_call 815} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i88);
    call {:si_unique_call 816} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i88);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume out_$i87 == 1;
    goto corral_source_split_4484;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$i86 := $M.22;
    goto corral_source_split_4336;

  $bb7:
    assume out_$i21 == 1;
    goto corral_source_split_4335;

  $bb6:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb174:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} rp_throttle(out_$p129);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$p129 := $M.16;
    goto corral_source_split_4612;

  $bb173:
    assume out_$i128 == 1;
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 5);
    goto corral_source_split_4609;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i127 := $M.22;
    goto corral_source_split_4608;

  $bb171:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} rp_throttle(out_$p126);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$p126 := $M.16;
    goto corral_source_split_4604;

  $bb170:
    assume out_$i125 == 1;
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 2);
    goto corral_source_split_4601;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i124 := $M.22;
    goto corral_source_split_4600;

  $bb168:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} rp_throttle(out_$p123);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$p123 := $M.16;
    goto corral_source_split_4596;

  $bb167:
    assume out_$i122 == 1;
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 3);
    goto corral_source_split_4593;

  $bb166:
    assume {:verifier.code 0} true;
    out_$i121 := $M.22;
    goto corral_source_split_4592;

  $bb165:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 822} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} rp_throttle(out_$p120);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$p120 := $M.16;
    goto corral_source_split_4588;

  $bb164:
    assume out_$i119 == 1;
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 1);
    goto corral_source_split_4585;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i118 := $M.22;
    goto corral_source_split_4584;

  $bb162:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} rp_throttle(out_$p117);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$p117 := $M.16;
    goto corral_source_split_4580;

  $bb161:
    assume out_$i116 == 1;
    goto corral_source_split_4579;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 4);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i115 := $M.22;
    goto corral_source_split_4567;

  $bb154:
    assume !(out_$i110 == 1);
    goto corral_source_split_4566;

  $bb189:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_vslice_dummy_var_68 := rp_put_char(out_$p156, out_$i158);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$i158 := $trunc.i32.i8(out_$i157);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(in_$i13);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$p156 := $M.16;
    goto corral_source_split_4657;

  $bb188:
    assume out_$i155 == 1;
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 5);
    goto corral_source_split_4654;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i154 := $M.22;
    goto corral_source_split_4653;

  $bb186:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_vslice_dummy_var_67 := rp_put_char(out_$p150, out_$i152);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$i152 := $trunc.i32.i8(out_$i151);
    goto corral_source_split_4649;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i32(in_$i13);
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    out_$p150 := $M.16;
    goto corral_source_split_4647;

  $bb185:
    assume out_$i149 == 1;
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 2);
    goto corral_source_split_4644;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i148 := $M.22;
    goto corral_source_split_4643;

  $bb183:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_vslice_dummy_var_66 := rp_put_char(out_$p144, out_$i146);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$i146 := $trunc.i32.i8(out_$i145);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(in_$i13);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$p144 := $M.16;
    goto corral_source_split_4637;

  $bb182:
    assume out_$i143 == 1;
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 3);
    goto corral_source_split_4634;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i142 := $M.22;
    goto corral_source_split_4633;

  $bb180:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_vslice_dummy_var_65 := rp_put_char(out_$p138, out_$i140);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i32.i8(out_$i139);
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i8.i32(in_$i13);
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$p138 := $M.16;
    goto corral_source_split_4627;

  $bb179:
    assume out_$i137 == 1;
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 1);
    goto corral_source_split_4624;

  $bb178:
    assume {:verifier.code 0} true;
    out_$i136 := $M.22;
    goto corral_source_split_4623;

  $bb177:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} out_vslice_dummy_var_64 := rp_put_char(out_$p132, out_$i134);
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i134 := $trunc.i32.i8(out_$i133);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i8.i32(in_$i13);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$p132 := $M.16;
    goto corral_source_split_4617;

  $bb176:
    assume out_$i131 == 1;
    goto corral_source_split_4616;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 4);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$i130 := $M.22;
    goto corral_source_split_4555;

  $bb149:
    assume out_$i108 == 1;
    goto corral_source_split_4554;

  $bb148:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i88, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb204:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} rp_send_xchar(out_$p182, out_$i184);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i184 := $trunc.i32.i8(out_$i183);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i183 := $sext.i8.i32(in_$i15);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$p182 := $M.16;
    goto corral_source_split_4704;

  $bb203:
    assume out_$i181 == 1;
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 5);
    goto corral_source_split_4701;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i180 := $M.22;
    goto corral_source_split_4700;

  $bb201:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} rp_send_xchar(out_$p177, out_$i179);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$i179 := $trunc.i32.i8(out_$i178);
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i8.i32(in_$i15);
    goto corral_source_split_4695;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$p177 := $M.16;
    goto corral_source_split_4694;

  $bb200:
    assume out_$i176 == 1;
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 2);
    goto corral_source_split_4691;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i175 := $M.22;
    goto corral_source_split_4690;

  $bb198:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} rp_send_xchar(out_$p172, out_$i174);
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i174 := $trunc.i32.i8(out_$i173);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$i173 := $sext.i8.i32(in_$i15);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    out_$p172 := $M.16;
    goto corral_source_split_4684;

  $bb197:
    assume out_$i171 == 1;
    goto corral_source_split_4683;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 3);
    goto corral_source_split_4681;

  $bb196:
    assume {:verifier.code 0} true;
    out_$i170 := $M.22;
    goto corral_source_split_4680;

  $bb195:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} rp_send_xchar(out_$p167, out_$i169);
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    out_$i169 := $trunc.i32.i8(out_$i168);
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i8.i32(in_$i15);
    goto corral_source_split_4675;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    out_$p167 := $M.16;
    goto corral_source_split_4674;

  $bb194:
    assume out_$i166 == 1;
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 1);
    goto corral_source_split_4671;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i165 := $M.22;
    goto corral_source_split_4670;

  $bb192:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} rp_send_xchar(out_$p162, out_$i164);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    out_$i164 := $trunc.i32.i8(out_$i163);
    goto corral_source_split_4666;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i8.i32(in_$i15);
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$p162 := $M.16;
    goto corral_source_split_4664;

  $bb191:
    assume out_$i161 == 1;
    goto corral_source_split_4663;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 4);
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    out_$i160 := $M.22;
    goto corral_source_split_4559;

  $bb151:
    assume out_$i109 == 1;
    goto corral_source_split_4558;

  $bb150:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i88, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb219:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4745;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} rp_hangup(out_$p199);
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    out_$p199 := $M.16;
    goto corral_source_split_4743;

  $bb218:
    assume out_$i198 == 1;
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 5);
    goto corral_source_split_4740;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i197 := $M.22;
    goto corral_source_split_4739;

  $bb216:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} rp_hangup(out_$p196);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p196 := $M.16;
    goto corral_source_split_4735;

  $bb215:
    assume out_$i195 == 1;
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 2);
    goto corral_source_split_4732;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i194 := $M.22;
    goto corral_source_split_4731;

  $bb213:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 854} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} rp_hangup(out_$p193);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$p193 := $M.16;
    goto corral_source_split_4727;

  $bb212:
    assume out_$i192 == 1;
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 3);
    goto corral_source_split_4724;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i191 := $M.22;
    goto corral_source_split_4723;

  $bb210:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 852} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} rp_hangup(out_$p190);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$p190 := $M.16;
    goto corral_source_split_4719;

  $bb209:
    assume out_$i189 == 1;
    goto corral_source_split_4718;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 1);
    goto corral_source_split_4716;

  $bb208:
    assume {:verifier.code 0} true;
    out_$i188 := $M.22;
    goto corral_source_split_4715;

  $bb207:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} rp_hangup(out_$p187);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$p187 := $M.16;
    goto corral_source_split_4711;

  $bb206:
    assume out_$i186 == 1;
    goto corral_source_split_4710;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 4);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i185 := $M.22;
    goto corral_source_split_4563;

  $bb152:
    assume !(out_$i109 == 1);
    goto corral_source_split_4562;

  $bb234:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} rp_unthrottle(out_$p214);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$p214 := $M.16;
    goto corral_source_split_4780;

  $bb233:
    assume out_$i213 == 1;
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 5);
    goto corral_source_split_4777;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i212 := $M.22;
    goto corral_source_split_4776;

  $bb231:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 866} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} rp_unthrottle(out_$p211);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$p211 := $M.16;
    goto corral_source_split_4772;

  $bb230:
    assume out_$i210 == 1;
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 2);
    goto corral_source_split_4769;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i209 := $M.22;
    goto corral_source_split_4768;

  $bb228:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} rp_unthrottle(out_$p208);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$p208 := $M.16;
    goto corral_source_split_4764;

  $bb227:
    assume out_$i207 == 1;
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 3);
    goto corral_source_split_4761;

  $bb226:
    assume {:verifier.code 0} true;
    out_$i206 := $M.22;
    goto corral_source_split_4760;

  $bb225:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 862} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} rp_unthrottle(out_$p205);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$p205 := $M.16;
    goto corral_source_split_4756;

  $bb224:
    assume out_$i204 == 1;
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 1);
    goto corral_source_split_4753;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i203 := $M.22;
    goto corral_source_split_4752;

  $bb222:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 860} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} rp_unthrottle(out_$p202);
    goto corral_source_split_4749;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    out_$p202 := $M.16;
    goto corral_source_split_4748;

  $bb221:
    assume out_$i201 == 1;
    goto corral_source_split_4747;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 4);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$i200 := $M.22;
    goto corral_source_split_4543;

  $bb143:
    assume out_$i105 == 1;
    goto corral_source_split_4542;

  $bb137:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i88, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb136:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i88, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb237:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb239:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 871} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4793;

  $bb238:
    assume out_$i221 == 1;
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 0);
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$i220 := $M.25;
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.25 := out_$i219;
    call {:si_unique_call 870} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_4788;

  SeqInstr_18:
    goto corral_source_split_4787;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} out_$i219 := rp_open(out_$p217, out_$p218);
    goto SeqInstr_17;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$p218 := $M.15;
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    out_$p217 := $M.16;
    goto corral_source_split_4785;

  $bb236:
    assume out_$i216 == 1;
    goto corral_source_split_4784;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 2);
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$i215 := $M.22;
    goto corral_source_split_4547;

  $bb145:
    assume out_$i106 == 1;
    goto corral_source_split_4546;

  $bb144:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i88, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb255:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} rp_set_termios(out_$p236, in_$p9);
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$p236 := $M.16;
    goto corral_source_split_4828;

  $bb254:
    assume out_$i235 == 1;
    goto corral_source_split_4827;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 5);
    goto corral_source_split_4825;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i234 := $M.22;
    goto corral_source_split_4824;

  $bb252:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 879} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} rp_set_termios(out_$p233, in_$p9);
    goto corral_source_split_4821;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    out_$p233 := $M.16;
    goto corral_source_split_4820;

  $bb251:
    assume out_$i232 == 1;
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 2);
    goto corral_source_split_4817;

  $bb250:
    assume {:verifier.code 0} true;
    out_$i231 := $M.22;
    goto corral_source_split_4816;

  $bb249:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 877} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} rp_set_termios(out_$p230, in_$p9);
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$p230 := $M.16;
    goto corral_source_split_4812;

  $bb248:
    assume out_$i229 == 1;
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 3);
    goto corral_source_split_4809;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i228 := $M.22;
    goto corral_source_split_4808;

  $bb246:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} rp_set_termios(out_$p227, in_$p9);
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$p227 := $M.16;
    goto corral_source_split_4804;

  $bb245:
    assume out_$i226 == 1;
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 1);
    goto corral_source_split_4801;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i225 := $M.22;
    goto corral_source_split_4800;

  $bb243:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} rp_set_termios(out_$p224, in_$p9);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$p224 := $M.16;
    goto corral_source_split_4796;

  $bb242:
    assume out_$i223 == 1;
    goto corral_source_split_4795;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 4);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    out_$i222 := $M.22;
    goto corral_source_split_4551;

  $bb146:
    assume !(out_$i106 == 1);
    goto corral_source_split_4550;

  $bb270:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4867;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} rp_flush_buffer(out_$p251);
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    out_$p251 := $M.16;
    goto corral_source_split_4865;

  $bb269:
    assume out_$i250 == 1;
    goto corral_source_split_4864;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 5);
    goto corral_source_split_4862;

  $bb268:
    assume {:verifier.code 0} true;
    out_$i249 := $M.22;
    goto corral_source_split_4861;

  $bb267:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4859;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} rp_flush_buffer(out_$p248);
    goto corral_source_split_4858;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    out_$p248 := $M.16;
    goto corral_source_split_4857;

  $bb266:
    assume out_$i247 == 1;
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 2);
    goto corral_source_split_4854;

  $bb265:
    assume {:verifier.code 0} true;
    out_$i246 := $M.22;
    goto corral_source_split_4853;

  $bb264:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} rp_flush_buffer(out_$p245);
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$p245 := $M.16;
    goto corral_source_split_4849;

  $bb263:
    assume out_$i244 == 1;
    goto corral_source_split_4848;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 3);
    goto corral_source_split_4846;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i243 := $M.22;
    goto corral_source_split_4845;

  $bb261:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} rp_flush_buffer(out_$p242);
    goto corral_source_split_4842;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    out_$p242 := $M.16;
    goto corral_source_split_4841;

  $bb260:
    assume out_$i241 == 1;
    goto corral_source_split_4840;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 1);
    goto corral_source_split_4838;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i240 := $M.22;
    goto corral_source_split_4837;

  $bb258:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} rp_flush_buffer(out_$p239);
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$p239 := $M.16;
    goto corral_source_split_4833;

  $bb257:
    assume out_$i238 == 1;
    goto corral_source_split_4832;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 4);
    goto corral_source_split_4532;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    out_$i237 := $M.22;
    goto corral_source_split_4531;

  $bb139:
    assume out_$i103 == 1;
    goto corral_source_split_4530;

  $bb138:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i88, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb285:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} out_vslice_dummy_var_73 := rp_ioctl(out_$p270, in_$i6, in_$i16);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$p270 := $M.16;
    goto corral_source_split_4902;

  $bb284:
    assume out_$i269 == 1;
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 5);
    goto corral_source_split_4899;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i268 := $M.22;
    goto corral_source_split_4898;

  $bb282:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4896;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} out_vslice_dummy_var_72 := rp_ioctl(out_$p266, in_$i6, in_$i16);
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$p266 := $M.16;
    goto corral_source_split_4894;

  $bb281:
    assume out_$i265 == 1;
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 2);
    goto corral_source_split_4891;

  $bb280:
    assume {:verifier.code 0} true;
    out_$i264 := $M.22;
    goto corral_source_split_4890;

  $bb279:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_vslice_dummy_var_71 := rp_ioctl(out_$p262, in_$i6, in_$i16);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$p262 := $M.16;
    goto corral_source_split_4886;

  $bb278:
    assume out_$i261 == 1;
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 3);
    goto corral_source_split_4883;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i260 := $M.22;
    goto corral_source_split_4882;

  $bb276:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} out_vslice_dummy_var_70 := rp_ioctl(out_$p258, in_$i6, in_$i16);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$p258 := $M.16;
    goto corral_source_split_4878;

  $bb275:
    assume out_$i257 == 1;
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 1);
    goto corral_source_split_4875;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i256 := $M.22;
    goto corral_source_split_4874;

  $bb273:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} out_vslice_dummy_var_69 := rp_ioctl(out_$p254, in_$i6, in_$i16);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$p254 := $M.16;
    goto corral_source_split_4870;

  $bb272:
    assume out_$i253 == 1;
    goto corral_source_split_4869;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 4);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$i252 := $M.22;
    goto corral_source_split_4535;

  $bb141:
    assume out_$i104 == 1;
    goto corral_source_split_4534;

  $bb140:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i88, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb288:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} rp_stop(out_$p274);
    goto corral_source_split_4908;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$p274 := $M.16;
    goto corral_source_split_4907;

  $bb287:
    assume out_$i273 == 1;
    goto corral_source_split_4906;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 5);
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$i272 := $M.22;
    goto corral_source_split_4539;

  $bb142:
    assume !(out_$i104 == 1);
    goto corral_source_split_4538;

  $bb303:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} out_vslice_dummy_var_78 := rp_tiocmset(out_$p293, in_$i17, in_$i12);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$p293 := $M.16;
    goto corral_source_split_4944;

  $bb302:
    assume out_$i292 == 1;
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 5);
    goto corral_source_split_4941;

  $bb301:
    assume {:verifier.code 0} true;
    out_$i291 := $M.22;
    goto corral_source_split_4940;

  $bb300:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} out_vslice_dummy_var_77 := rp_tiocmset(out_$p289, in_$i17, in_$i12);
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$p289 := $M.16;
    goto corral_source_split_4936;

  $bb299:
    assume out_$i288 == 1;
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 2);
    goto corral_source_split_4933;

  $bb298:
    assume {:verifier.code 0} true;
    out_$i287 := $M.22;
    goto corral_source_split_4932;

  $bb297:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} out_vslice_dummy_var_76 := rp_tiocmset(out_$p285, in_$i17, in_$i12);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$p285 := $M.16;
    goto corral_source_split_4928;

  $bb296:
    assume out_$i284 == 1;
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 3);
    goto corral_source_split_4925;

  $bb295:
    assume {:verifier.code 0} true;
    out_$i283 := $M.22;
    goto corral_source_split_4924;

  $bb294:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} out_vslice_dummy_var_75 := rp_tiocmset(out_$p281, in_$i17, in_$i12);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$p281 := $M.16;
    goto corral_source_split_4920;

  $bb293:
    assume out_$i280 == 1;
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 1);
    goto corral_source_split_4917;

  $bb292:
    assume {:verifier.code 0} true;
    out_$i279 := $M.22;
    goto corral_source_split_4916;

  $bb291:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} out_vslice_dummy_var_74 := rp_tiocmset(out_$p277, in_$i17, in_$i12);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$p277 := $M.16;
    goto corral_source_split_4912;

  $bb290:
    assume out_$i276 == 1;
    goto corral_source_split_4911;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 4);
    goto corral_source_split_4524;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    out_$i275 := $M.22;
    goto corral_source_split_4523;

  $bb133:
    assume out_$i100 == 1;
    goto corral_source_split_4522;

  $bb127:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i88, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb112:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i88, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb111:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i88, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb306:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_vslice_dummy_var_79 := rp_write(out_$p297, in_$p7, in_$i11);
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$p297 := $M.16;
    goto corral_source_split_4949;

  $bb305:
    assume out_$i296 == 1;
    goto corral_source_split_4948;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 5);
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$i295 := $M.22;
    goto corral_source_split_4527;

  $bb134:
    assume !(out_$i100 == 1);
    goto corral_source_split_4526;

  $bb309:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} rp_close(out_$p301, out_$p302);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$p302 := $M.15;
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$p301 := $M.16;
    goto corral_source_split_4954;

  $bb308:
    assume out_$i300 == 1;
    goto corral_source_split_4953;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 3);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i299 := $M.22;
    goto corral_source_split_4511;

  $bb129:
    assume out_$i98 == 1;
    goto corral_source_split_4510;

  $bb128:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i88, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb324:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} out_vslice_dummy_var_84 := rp_write_room(out_$p321);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p321 := $M.16;
    goto corral_source_split_4992;

  $bb323:
    assume out_$i320 == 1;
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 5);
    goto corral_source_split_4989;

  $bb322:
    assume {:verifier.code 0} true;
    out_$i319 := $M.22;
    goto corral_source_split_4988;

  $bb321:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_vslice_dummy_var_83 := rp_write_room(out_$p317);
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$p317 := $M.16;
    goto corral_source_split_4984;

  $bb320:
    assume out_$i316 == 1;
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, 2);
    goto corral_source_split_4981;

  $bb319:
    assume {:verifier.code 0} true;
    out_$i315 := $M.22;
    goto corral_source_split_4980;

  $bb318:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_vslice_dummy_var_82 := rp_write_room(out_$p313);
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$p313 := $M.16;
    goto corral_source_split_4976;

  $bb317:
    assume out_$i312 == 1;
    goto corral_source_split_4975;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 3);
    goto corral_source_split_4973;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i311 := $M.22;
    goto corral_source_split_4972;

  $bb315:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} out_vslice_dummy_var_81 := rp_write_room(out_$p309);
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$p309 := $M.16;
    goto corral_source_split_4968;

  $bb314:
    assume out_$i308 == 1;
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 1);
    goto corral_source_split_4965;

  $bb313:
    assume {:verifier.code 0} true;
    out_$i307 := $M.22;
    goto corral_source_split_4964;

  $bb312:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} out_vslice_dummy_var_80 := rp_write_room(out_$p305);
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$p305 := $M.16;
    goto corral_source_split_4960;

  $bb311:
    assume out_$i304 == 1;
    goto corral_source_split_4959;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 4);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$i303 := $M.22;
    goto corral_source_split_4515;

  $bb131:
    assume out_$i99 == 1;
    goto corral_source_split_4514;

  $bb130:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i88, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb339:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_vslice_dummy_var_89 := rp_break(out_$p341, in_$i10);
    goto corral_source_split_5030;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    out_$p341 := $M.16;
    goto corral_source_split_5029;

  $bb338:
    assume out_$i340 == 1;
    goto corral_source_split_5028;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 5);
    goto corral_source_split_5026;

  $bb337:
    assume {:verifier.code 0} true;
    out_$i339 := $M.22;
    goto corral_source_split_5025;

  $bb336:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5023;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} out_vslice_dummy_var_88 := rp_break(out_$p337, in_$i10);
    goto corral_source_split_5022;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    out_$p337 := $M.16;
    goto corral_source_split_5021;

  $bb335:
    assume out_$i336 == 1;
    goto corral_source_split_5020;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$i336 := $eq.i32(out_$i335, 2);
    goto corral_source_split_5018;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i335 := $M.22;
    goto corral_source_split_5017;

  $bb333:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_vslice_dummy_var_87 := rp_break(out_$p333, in_$i10);
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$p333 := $M.16;
    goto corral_source_split_5013;

  $bb332:
    assume out_$i332 == 1;
    goto corral_source_split_5012;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 3);
    goto corral_source_split_5010;

  $bb331:
    assume {:verifier.code 0} true;
    out_$i331 := $M.22;
    goto corral_source_split_5009;

  $bb330:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_vslice_dummy_var_86 := rp_break(out_$p329, in_$i10);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$p329 := $M.16;
    goto corral_source_split_5005;

  $bb329:
    assume out_$i328 == 1;
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 1);
    goto corral_source_split_5002;

  $bb328:
    assume {:verifier.code 0} true;
    out_$i327 := $M.22;
    goto corral_source_split_5001;

  $bb327:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_vslice_dummy_var_85 := rp_break(out_$p325, in_$i10);
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$p325 := $M.16;
    goto corral_source_split_4997;

  $bb326:
    assume out_$i324 == 1;
    goto corral_source_split_4996;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i323, 4);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$i323 := $M.22;
    goto corral_source_split_4519;

  $bb132:
    assume !(out_$i99 == 1);
    goto corral_source_split_4518;

  $bb354:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5068;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} out_vslice_dummy_var_94 := rp_chars_in_buffer(out_$p361);
    goto corral_source_split_5067;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    out_$p361 := $M.16;
    goto corral_source_split_5066;

  $bb353:
    assume out_$i360 == 1;
    goto corral_source_split_5065;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 5);
    goto corral_source_split_5063;

  $bb352:
    assume {:verifier.code 0} true;
    out_$i359 := $M.22;
    goto corral_source_split_5062;

  $bb351:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5060;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_vslice_dummy_var_93 := rp_chars_in_buffer(out_$p357);
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    out_$p357 := $M.16;
    goto corral_source_split_5058;

  $bb350:
    assume out_$i356 == 1;
    goto corral_source_split_5057;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$i356 := $eq.i32(out_$i355, 2);
    goto corral_source_split_5055;

  $bb349:
    assume {:verifier.code 0} true;
    out_$i355 := $M.22;
    goto corral_source_split_5054;

  $bb348:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_vslice_dummy_var_92 := rp_chars_in_buffer(out_$p353);
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$p353 := $M.16;
    goto corral_source_split_5050;

  $bb347:
    assume out_$i352 == 1;
    goto corral_source_split_5049;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 3);
    goto corral_source_split_5047;

  $bb346:
    assume {:verifier.code 0} true;
    out_$i351 := $M.22;
    goto corral_source_split_5046;

  $bb345:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_vslice_dummy_var_91 := rp_chars_in_buffer(out_$p349);
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$p349 := $M.16;
    goto corral_source_split_5042;

  $bb344:
    assume out_$i348 == 1;
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 1);
    goto corral_source_split_5039;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i347 := $M.22;
    goto corral_source_split_5038;

  $bb342:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5036;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_vslice_dummy_var_90 := rp_chars_in_buffer(out_$p345);
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$p345 := $M.16;
    goto corral_source_split_5034;

  $bb341:
    assume out_$i344 == 1;
    goto corral_source_split_5033;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 4);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i343 := $M.22;
    goto corral_source_split_4499;

  $bb123:
    assume out_$i95 == 1;
    goto corral_source_split_4498;

  $bb114:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i88, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb113:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i88, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb369:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_vslice_dummy_var_99 := rp_tiocmget(out_$p381);
    goto corral_source_split_5104;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    out_$p381 := $M.16;
    goto corral_source_split_5103;

  $bb368:
    assume out_$i380 == 1;
    goto corral_source_split_5102;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 5);
    goto corral_source_split_5100;

  $bb367:
    assume {:verifier.code 0} true;
    out_$i379 := $M.22;
    goto corral_source_split_5099;

  $bb366:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5097;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_98 := rp_tiocmget(out_$p377);
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$p377 := $M.16;
    goto corral_source_split_5095;

  $bb365:
    assume out_$i376 == 1;
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 2);
    goto corral_source_split_5092;

  $bb364:
    assume {:verifier.code 0} true;
    out_$i375 := $M.22;
    goto corral_source_split_5091;

  $bb363:
    assume !(out_$i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5089;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_vslice_dummy_var_97 := rp_tiocmget(out_$p373);
    goto corral_source_split_5088;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    out_$p373 := $M.16;
    goto corral_source_split_5087;

  $bb362:
    assume out_$i372 == 1;
    goto corral_source_split_5086;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    out_$i372 := $eq.i32(out_$i371, 3);
    goto corral_source_split_5084;

  $bb361:
    assume {:verifier.code 0} true;
    out_$i371 := $M.22;
    goto corral_source_split_5083;

  $bb360:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5081;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} out_vslice_dummy_var_96 := rp_tiocmget(out_$p369);
    goto corral_source_split_5080;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    out_$p369 := $M.16;
    goto corral_source_split_5079;

  $bb359:
    assume out_$i368 == 1;
    goto corral_source_split_5078;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 1);
    goto corral_source_split_5076;

  $bb358:
    assume {:verifier.code 0} true;
    out_$i367 := $M.22;
    goto corral_source_split_5075;

  $bb357:
    assume !(out_$i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5073;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} out_vslice_dummy_var_95 := rp_tiocmget(out_$p365);
    goto corral_source_split_5072;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    out_$p365 := $M.16;
    goto corral_source_split_5071;

  $bb356:
    assume out_$i364 == 1;
    goto corral_source_split_5070;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i364 := $eq.i32(out_$i363, 4);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i363 := $M.22;
    goto corral_source_split_4503;

  $bb125:
    assume out_$i96 == 1;
    goto corral_source_split_4502;

  $bb124:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i88, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb384:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.22 := 5;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_5142;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} rp_wait_until_sent(out_$p397, in_$i14);
    goto corral_source_split_5141;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    out_$p397 := $M.16;
    goto corral_source_split_5140;

  $bb383:
    assume out_$i396 == 1;
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$i396 := $eq.i32(out_$i395, 5);
    goto corral_source_split_5137;

  $bb382:
    assume {:verifier.code 0} true;
    out_$i395 := $M.22;
    goto corral_source_split_5136;

  $bb381:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} rp_wait_until_sent(out_$p394, in_$i14);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$p394 := $M.16;
    goto corral_source_split_5132;

  $bb380:
    assume out_$i393 == 1;
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 2);
    goto corral_source_split_5129;

  $bb379:
    assume {:verifier.code 0} true;
    out_$i392 := $M.22;
    goto corral_source_split_5128;

  $bb378:
    assume !(out_$i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} rp_wait_until_sent(out_$p391, in_$i14);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$p391 := $M.16;
    goto corral_source_split_5124;

  $bb377:
    assume out_$i390 == 1;
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    out_$i390 := $eq.i32(out_$i389, 3);
    goto corral_source_split_5121;

  $bb376:
    assume {:verifier.code 0} true;
    out_$i389 := $M.22;
    goto corral_source_split_5120;

  $bb375:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} rp_wait_until_sent(out_$p388, in_$i14);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$p388 := $M.16;
    goto corral_source_split_5116;

  $bb374:
    assume out_$i387 == 1;
    goto corral_source_split_5115;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 1);
    goto corral_source_split_5113;

  $bb373:
    assume {:verifier.code 0} true;
    out_$i386 := $M.22;
    goto corral_source_split_5112;

  $bb372:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5110;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} rp_wait_until_sent(out_$p385, in_$i14);
    goto corral_source_split_5109;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$p385 := $M.16;
    goto corral_source_split_5108;

  $bb371:
    assume out_$i384 == 1;
    goto corral_source_split_5107;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i383, 4);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$i383 := $M.22;
    goto corral_source_split_4507;

  $bb126:
    assume !(out_$i96 == 1);
    goto corral_source_split_4506;

  $bb393:
    assume !(out_$i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5160;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} out_vslice_dummy_var_102 := ldv_disconnect_2();
    goto corral_source_split_5159;

  $bb392:
    assume out_$i405 == 1;
    goto corral_source_split_5158;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    out_$i405 := $eq.i32(out_$i404, 5);
    goto corral_source_split_5156;

  $bb391:
    assume {:verifier.code 0} true;
    out_$i404 := $M.22;
    goto corral_source_split_5155;

  $bb390:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5153;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} out_vslice_dummy_var_101 := ldv_disconnect_2();
    goto corral_source_split_5152;

  $bb389:
    assume out_$i402 == 1;
    goto corral_source_split_5151;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i401, 2);
    goto corral_source_split_5149;

  $bb388:
    assume {:verifier.code 0} true;
    out_$i401 := $M.22;
    goto corral_source_split_5148;

  $bb387:
    assume !(out_$i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_5146;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} out_vslice_dummy_var_100 := ldv_disconnect_2();
    goto corral_source_split_5145;

  $bb386:
    assume out_$i399 == 1;
    goto corral_source_split_5144;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i399 := $eq.i32(out_$i398, 3);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i398 := $M.22;
    goto corral_source_split_4487;

  $bb116:
    assume out_$i92 == 1;
    goto corral_source_split_4486;

  $bb115:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i88, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb396:
    assume !(out_$i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $M.19 := out_$i411;
    call {:si_unique_call 976} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i411);
    goto corral_source_split_5167;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    out_$i411 := $sub.i32(out_$i410, 1);
    goto corral_source_split_5166;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    out_$i410 := $M.19;
    goto corral_source_split_5165;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5164;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} out_vslice_dummy_var_103 := ldv_release_2();
    goto corral_source_split_5163;

  $bb395:
    assume out_$i408 == 1;
    goto corral_source_split_5162;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$i408 := $eq.i32(out_$i407, 4);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i407 := $M.22;
    goto corral_source_split_4491;

  $bb118:
    assume out_$i93 == 1;
    goto corral_source_split_4490;

  $bb117:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i88, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb399:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $M.19 := out_$i416;
    call {:si_unique_call 979} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i416);
    goto corral_source_split_5174;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    out_$i416 := $add.i32(out_$i415, 1);
    goto corral_source_split_5173;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    out_$i415 := $M.19;
    goto corral_source_split_5172;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5171;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_vslice_dummy_var_104 := ldv_setup_2();
    goto corral_source_split_5170;

  $bb398:
    assume out_$i413 == 1;
    goto corral_source_split_5169;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i412, 1);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$i412 := $M.22;
    goto corral_source_split_4495;

  $bb120:
    assume out_$i94 == 1;
    goto corral_source_split_4494;

  $bb119:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i88, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_stop();
    goto corral_source_split_5176;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb121:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb122;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb122;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_stop();
    goto corral_source_split_5178;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb9;

  $bb64_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i45, out_$i46, out_$i48, out_$i49, out_$i51, out_$i52, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$p245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$i311, out_$i312, out_$p313, out_$i315, out_$i316, out_$p317, out_$i319, out_$i320, out_$p321, out_$i323, out_$i324, out_$p325, out_$i327, out_$i328, out_$p329, out_$i331, out_$i332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$i355, out_$i356, out_$p357, out_$i359, out_$i360, out_$p361, out_$i363, out_$i364, out_$p365, out_$i367, out_$i368, out_$p369, out_$i371, out_$i372, out_$p373, out_$i375, out_$i376, out_$p377, out_$i379, out_$i380, out_$p381, out_$i383, out_$i384, out_$p385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$p391, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$i401, out_$i402, out_$i404, out_$i405, out_$i407, out_$i408, out_$i410, out_$i411, out_$i412, out_$i413, out_$i415, out_$i416, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := main_loop_$bb1(in_$p1, in_$p3, in_$i4, in_$i5, in_$i6, in_$p7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i45, out_$i46, out_$i48, out_$i49, out_$i51, out_$i52, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$p245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$i311, out_$i312, out_$p313, out_$i315, out_$i316, out_$p317, out_$i319, out_$i320, out_$p321, out_$i323, out_$i324, out_$p325, out_$i327, out_$i328, out_$p329, out_$i331, out_$i332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$i355, out_$i356, out_$p357, out_$i359, out_$i360, out_$p361, out_$i363, out_$i364, out_$p365, out_$i367, out_$i368, out_$p369, out_$i371, out_$i372, out_$p373, out_$i375, out_$i376, out_$p377, out_$i379, out_$i380, out_$p381, out_$i383, out_$i384, out_$p385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$p391, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$i401, out_$i402, out_$i404, out_$i405, out_$i407, out_$i408, out_$i410, out_$i411, out_$i412, out_$i413, out_$i415, out_$i416, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$i4: i32, in_$i5: i64, in_$i6: i32, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i64, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i45: i32, in_$i46: i1, in_$i48: i32, in_$i49: i1, in_$i51: i32, in_$i52: i1, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i8, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i8, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i8, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i8, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i8, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i168: i32, in_$i169: i8, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i8, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i32, in_$i184: i8, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i315: i32, in_$i316: i1, in_$p317: ref, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i323: i32, in_$i324: i1, in_$p325: ref, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$i359: i32, in_$i360: i1, in_$p361: ref, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i389: i32, in_$i390: i1, in_$p391: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$i401: i32, in_$i402: i1, in_$i404: i32, in_$i405: i1, in_$i407: i32, in_$i408: i1, in_$i410: i32, in_$i411: i32, in_$i412: i32, in_$i413: i1, in_$i415: i32, in_$i416: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32) returns (out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i45: i32, out_$i46: i1, out_$i48: i32, out_$i49: i1, out_$i51: i32, out_$i52: i1, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i8, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i8, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i8, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i8, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i8, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i168: i32, out_$i169: i8, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i8, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i32, out_$i184: i8, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i315: i32, out_$i316: i1, out_$p317: ref, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i323: i32, out_$i324: i1, out_$p325: ref, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$i359: i32, out_$i360: i1, out_$p361: ref, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i389: i32, out_$i390: i1, out_$p391: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$i401: i32, out_$i402: i1, out_$i404: i32, out_$i405: i1, out_$i407: i32, out_$i408: i1, out_$i410: i32, out_$i411: i32, out_$i412: i32, out_$i413: i1, out_$i415: i32, out_$i416: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32);
  modifies $M.18, $M.2, $M.19, $M.23, $CurrAddr, $M.21, $M.15, $M.16, $M.22, $M.20, $M.24, $M.13, $M.27, $M.1, $M.14, $M.0, $M.38, $M.12, $M.39, $M.26, $M.3, $M.41, $M.40, $M.4, assertsPassed, $M.5, $M.7, $M.8, $M.9, $M.25;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation rp_cleanup_module_loop_$bb4(in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i6 := in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5203;

  $bb9:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i21;
    goto $bb9_dummy;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    out_$i22 := $sle.i32(out_$i21, 255);
    goto corral_source_split_5226;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i6, 1);
    call {:si_unique_call 995} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5225;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} kfree(out_$p20);
    goto corral_source_split_5223;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_5222;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.3, out_$p18);
    goto corral_source_split_5221;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i17, 8));
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i6);
    goto corral_source_split_5219;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} tty_port_destroy(out_$p16);
    goto corral_source_split_5218;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 1648)), $mul.ref(8, 1));
    goto corral_source_split_5217;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.3, out_$p14);
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i13, 8));
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i6);
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} tty_unregister_device(out_$p12, out_$i6);
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$p12 := $M.13;
    goto corral_source_split_5212;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_5209;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_5208;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.3, out_$p8);
    goto corral_source_split_5207;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(rp_table, $mul.ref(0, 2048)), $mul.ref(out_$i7, 8));
    goto corral_source_split_5206;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_5205;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i6 := rp_cleanup_module_loop_$bb4(out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i6);
    return;

  exit:
    return;
}



procedure rp_cleanup_module_loop_$bb4(in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i6: i32);



implementation {:SIextraRecBound 8} rp_init_loop_$bb34(in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i85: i32, in_$i86: i32, in_$i93: i32) returns (out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i85: i32, out_$i86: i32, out_$i93: i32)
{

  entry:
    out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i85, out_$i86, out_$i93 := in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i85, in_$i86, in_$i93;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5472;

  $bb39:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i85, out_$i86 := out_$i90, out_$i91;
    goto $bb39_dummy;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i90;
    assume true;
    goto $bb39;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$i92 := $sle.i32(out_$i91, 7);
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i86, 1);
    call {:si_unique_call 1021} {:cexpr "i"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_5481;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  $bb37:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := out_$i85;
    goto $bb38;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i89;
    goto $bb38;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i85, 1);
    call {:si_unique_call 1020} {:cexpr "isa_boards_found"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_5478;

  $bb36:
    assume out_$i88 == 1;
    goto corral_source_split_5477;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_5475;

  SeqInstr_21:
    call {:si_unique_call 1019} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_5474;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} out_$i87 := init_ISA(out_$i86);
    goto SeqInstr_20;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i85, out_$i86, out_$i93 := rp_init_loop_$bb34(out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i85, out_$i86, out_$i93);
    return;

  exit:
    return;
}



procedure rp_init_loop_$bb34(in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i85: i32, in_$i86: i32, in_$i93: i32) returns (out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i85: i32, out_$i86: i32, out_$i93: i32);
  modifies $M.1, $M.2, $M.38, $M.12, $M.39, $M.26, $M.3, $CurrAddr, $M.40, $M.4, assertsPassed;



implementation init_ISA_loop_$bb67(in_$p20: ref, in_$i162: i32, in_$i169: i32, in_$i170: i1, in_$i168: i32) returns (out_$i169: i32, out_$i170: i1, out_$i168: i32)
{

  entry:
    out_$i169, out_$i170, out_$i168 := in_$i169, in_$i170, in_$i168;
    goto $bb67, exit;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_5760;

  $bb69:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    out_$i168 := out_$i169;
    goto $bb69_dummy;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    out_$i170 := $slt.i32(out_$i169, in_$i162);
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i168, 1);
    call {:si_unique_call 1069} {:cexpr "chan"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_5763;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} sModemReset(in_$p20, out_$i168, 0);
    goto corral_source_split_5762;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb69_dummy:
    call {:si_unique_call 1} out_$i169, out_$i170, out_$i168 := init_ISA_loop_$bb67(in_$p20, in_$i162, out_$i169, out_$i170, out_$i168);
    return;

  exit:
    return;
}



procedure init_ISA_loop_$bb67(in_$p20: ref, in_$i162: i32, in_$i169: i32, in_$i170: i1, in_$i168: i32) returns (out_$i169: i32, out_$i170: i1, out_$i168: i32);
  modifies $M.2;



implementation init_ISA_loop_$bb59(in_$p20: ref, in_$i162: i32, in_$i165: i32, in_$i166: i1, in_$i164: i32) returns (out_$i165: i32, out_$i166: i1, out_$i164: i32)
{

  entry:
    out_$i165, out_$i166, out_$i164 := in_$i165, in_$i166, in_$i164;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5747;

  $bb61:
    assume out_$i166 == 1;
    assume {:verifier.code 0} true;
    out_$i164 := out_$i165;
    goto $bb61_dummy;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    out_$i166 := $slt.i32(out_$i165, in_$i162);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i165 := $add.i32(out_$i164, 1);
    call {:si_unique_call 1066} {:cexpr "chan"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_5750;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} sModemReset(in_$p20, out_$i164, 1);
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb61_dummy:
    call {:si_unique_call 1} out_$i165, out_$i166, out_$i164 := init_ISA_loop_$bb59(in_$p20, in_$i162, out_$i165, out_$i166, out_$i164);
    return;

  exit:
    return;
}



procedure init_ISA_loop_$bb59(in_$p20: ref, in_$i162: i32, in_$i165: i32, in_$i166: i1, in_$i164: i32) returns (out_$i165: i32, out_$i166: i1, out_$i164: i32);
  modifies $M.2;



implementation init_ISA_loop_$bb43(in_$i0: i32, in_$i141: i32, in_$i145: i32, in_$i146: i1, in_$i144: i32, in_$i102: i32) returns (out_$i145: i32, out_$i146: i1, out_$i144: i32)
{

  entry:
    out_$i145, out_$i146, out_$i144 := in_$i145, in_$i146, in_$i144;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_5709;

  $bb45:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i144 := out_$i145;
    goto $bb45_dummy;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i145, in_$i141);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$i145 := $add.i32(out_$i144, 1);
    call {:si_unique_call 1061} {:cexpr "chan"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_5712;

  SeqInstr_27:
    goto corral_source_split_5711;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} init_r_port(in_$i0, in_$i102, out_$i144, $0.ref);
    goto SeqInstr_26;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i145, out_$i146, out_$i144 := init_ISA_loop_$bb43(in_$i0, in_$i141, out_$i145, out_$i146, out_$i144, in_$i102);
    return;

  exit:
    return;
}



procedure init_ISA_loop_$bb43(in_$i0: i32, in_$i141: i32, in_$i145: i32, in_$i146: i1, in_$i144: i32, in_$i102: i32) returns (out_$i145: i32, out_$i146: i1, out_$i144: i32);
  modifies $M.2, $M.3, $M.40, $M.4, $CurrAddr, assertsPassed;



implementation init_ISA_loop_$bb38(in_$i0: i32, in_$i19: i64, in_$i50: i32, in_$i103: i64, in_$p105: ref, in_$i106: i32, in_$i107: i16, in_$i108: i32, in_$i109: i32, in_$i110: i16, in_$i111: i64, in_$p113: ref, in_$i114: i32, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$i118: i16, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i64, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i32, in_$i127: i8, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i16, in_$i132: i32, in_$i133: i16, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i8, in_$i138: i64, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i145: i32, in_$i146: i1, in_$i144: i32, in_$i147: i32, in_$i148: i1, in_$i101: i32, in_$i102: i32, in_$i149: i32) returns (out_$i103: i64, out_$p105: ref, out_$i106: i32, out_$i107: i16, out_$i108: i32, out_$i109: i32, out_$i110: i16, out_$i111: i64, out_$p113: ref, out_$i114: i32, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$i118: i16, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i64, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i32, out_$i127: i8, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i16, out_$i132: i32, out_$i133: i16, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i8, out_$i138: i64, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i145: i32, out_$i146: i1, out_$i144: i32, out_$i147: i32, out_$i148: i1, out_$i101: i32, out_$i102: i32, out_$i149: i32)
{

  entry:
    out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i146, out_$i144, out_$i147, out_$i148, out_$i101, out_$i102, out_$i149 := in_$i103, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p128, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$p140, in_$i141, in_$i142, in_$i143, in_$i145, in_$i146, in_$i144, in_$i147, in_$i148, in_$i101, in_$i102, in_$i149;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5669;

  $bb48:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$i101, out_$i102 := out_$i142, out_$i147;
    goto $bb48_dummy;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$i149 := out_$i142;
    assume true;
    goto $bb48;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$i148 := $slt.i32(out_$i147, in_$i50);
    goto corral_source_split_5718;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i147 := $add.i32(out_$i102, 1);
    call {:si_unique_call 1062} {:cexpr "aiop"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_5717;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i143 == 1);
    goto $bb42;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb46:
    assume !(out_$i146 == 1);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i145, out_$i141);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$i145 := $add.i32(out_$i144, 1);
    call {:si_unique_call 1061} {:cexpr "chan"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_5712;

  SeqInstr_27:
    goto corral_source_split_5711;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} init_r_port(in_$i0, out_$i102, out_$i144, $0.ref);
    goto SeqInstr_26;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    call out_$i145, out_$i146, out_$i144 := init_ISA_loop_$bb43(in_$i0, out_$i141, out_$i145, out_$i146, out_$i144, out_$i102);
    goto $bb43_last;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$i144 := 0;
    goto $bb43;

  $bb45:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i144 := out_$i145;
    assume false;
    return;

  $bb40:
    assume out_$i143 == 1;
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(0, out_$i141);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i32(out_$i101, out_$i141);
    call {:si_unique_call 1059} {:cexpr "total_num_chan"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.2, out_$p140);
    call {:si_unique_call 1058} {:cexpr "num_chan"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_5703;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i138 := $sext.i32.i64(out_$i102);
    out_$p140 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i19, 136)), $mul.ref(108, 1)), $mul.ref(out_$i138, 4));
    goto corral_source_split_5702;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} sOutB(out_$i133, out_$i137);
    goto corral_source_split_5701;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    out_$i137 := $trunc.i32.i8(out_$i136);
    goto corral_source_split_5700;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i135);
    goto corral_source_split_5699;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i8($M.2, out_$p134);
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$i133 := $trunc.i32.i16(out_$i132);
    out_$p134 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5697;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i16.i32(out_$i131);
    goto corral_source_split_5696;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$i131 := $trunc.i32.i16(out_$i130);
    goto corral_source_split_5695;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.2, out_$p129);
    goto corral_source_split_5694;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p128, out_$i127);
    out_$p129 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i19, 136)), $mul.ref(40, 1));
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    out_$i127 := $trunc.i32.i8(out_$i126);
    out_$p128 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5692;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    out_$i126 := $or.i32(out_$i121, out_$i125);
    goto corral_source_split_5691;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i8.i32(out_$i124);
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i8($M.10, out_$p123);
    goto corral_source_split_5689;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(out_$i122, 1));
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$i122 := $sext.i32.i64(out_$i102);
    goto corral_source_split_5687;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i120);
    goto corral_source_split_5686;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i8($M.2, out_$p119);
    goto corral_source_split_5685;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} sOutB(out_$i118, 0);
    out_$p119 := $add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i19, 136)), $mul.ref(45, 1));
    goto corral_source_split_5684;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i16(out_$i117);
    goto corral_source_split_5683;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i116, 56);
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i16.i32(out_$i115);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i32.i16(out_$i114);
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.2, out_$p113);
    goto corral_source_split_5679;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i32.i64(out_$i102);
    out_$p113 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i19, 136)), $mul.ref(60, 1)), $mul.ref(out_$i111, 4));
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} sOutB(out_$i110, $sub.i8(0, 128));
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i32.i16(out_$i109);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i108, 56);
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i32(out_$i107);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i32.i16(out_$i106);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.2, out_$p105);
    goto corral_source_split_5672;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i102);
    out_$p105 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i19, 136)), $mul.ref(60, 1)), $mul.ref(out_$i103, 4));
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i146, out_$i144, out_$i147, out_$i148, out_$i101, out_$i102, out_$i149 := init_ISA_loop_$bb38(in_$i0, in_$i19, in_$i50, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p140, out_$i141, out_$i142, out_$i143, out_$i145, out_$i146, out_$i144, out_$i147, out_$i148, out_$i101, out_$i102, out_$i149);
    return;

  exit:
    return;
}



procedure init_ISA_loop_$bb38(in_$i0: i32, in_$i19: i64, in_$i50: i32, in_$i103: i64, in_$p105: ref, in_$i106: i32, in_$i107: i16, in_$i108: i32, in_$i109: i32, in_$i110: i16, in_$i111: i64, in_$p113: ref, in_$i114: i32, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$i118: i16, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i64, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i32, in_$i127: i8, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i16, in_$i132: i32, in_$i133: i16, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i8, in_$i138: i64, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i145: i32, in_$i146: i1, in_$i144: i32, in_$i147: i32, in_$i148: i1, in_$i101: i32, in_$i102: i32, in_$i149: i32) returns (out_$i103: i64, out_$p105: ref, out_$i106: i32, out_$i107: i16, out_$i108: i32, out_$i109: i32, out_$i110: i16, out_$i111: i64, out_$p113: ref, out_$i114: i32, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$i118: i16, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i64, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i32, out_$i127: i8, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i16, out_$i132: i32, out_$i133: i16, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i8, out_$i138: i64, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i145: i32, out_$i146: i1, out_$i144: i32, out_$i147: i32, out_$i148: i1, out_$i101: i32, out_$i102: i32, out_$i149: i32);
  modifies $M.2, $M.3, $M.40, $M.4, $CurrAddr, assertsPassed;



implementation init_PCI_loop_$bb4(in_$i0: i32, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p5: ref, in_$i6: i32, in_$i15: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p5: ref, out_$i6: i32, out_$i15: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p5, out_$i6, out_$i15 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$p5, in_$i6, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5825;

  $bb9:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p5, out_$i6 := out_$p12, out_$i11;
    goto $bb9_dummy;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i11;
    assume true;
    goto $bb9;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} out_$p12 := pci_get_device(4606, $sub.i32(0, 1), out_$p5);
    goto corral_source_split_5835;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i6;
    goto $bb8;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i10;
    goto $bb8;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1078} {:cexpr "count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5832;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_5829;

  SeqInstr_30:
    call {:si_unique_call 1077} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_5828;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} out_$i8 := register_PCI(out_$i7, out_$p5);
    goto SeqInstr_29;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i32(out_$i6, in_$i0);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p5, out_$i6, out_$i15 := init_PCI_loop_$bb4(in_$i0, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p5, out_$i6, out_$i15);
    return;

  exit:
    return;
}



procedure init_PCI_loop_$bb4(in_$i0: i32, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p5: ref, in_$i6: i32, in_$i15: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p5: ref, out_$i6: i32, out_$i15: i32);
  modifies $M.1, $M.14, $M.2, $M.38, $M.12, $M.41, $M.26, $M.3, $CurrAddr, $M.40, $M.4, assertsPassed;



implementation {:SIextraRecBound 2} register_PCI_loop_$bb155(in_$i357: i32, in_$p440: ref, in_$i518: i32, in_$i519: i1, in_$i517: i32) returns (out_$i518: i32, out_$i519: i1, out_$i517: i32)
{

  entry:
    out_$i518, out_$i519, out_$i517 := in_$i518, in_$i519, in_$i517;
    goto $bb155, exit;

  $bb155:
    assume {:verifier.code 0} true;
    goto corral_source_split_6416;

  $bb157:
    assume out_$i519 == 1;
    assume {:verifier.code 0} true;
    out_$i517 := out_$i518;
    goto $bb157_dummy;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    out_$i519 := $slt.i32(out_$i518, in_$i357);
    goto corral_source_split_6420;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    out_$i518 := $add.i32(out_$i517, 1);
    call {:si_unique_call 1144} {:cexpr "chan"} boogie_si_record_i32(out_$i518);
    goto corral_source_split_6419;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} sPCIModemReset(in_$p440, out_$i517, 0);
    goto corral_source_split_6418;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb157_dummy:
    call {:si_unique_call 1} out_$i518, out_$i519, out_$i517 := register_PCI_loop_$bb155(in_$i357, in_$p440, out_$i518, out_$i519, out_$i517);
    return;

  exit:
    return;
}



procedure register_PCI_loop_$bb155(in_$i357: i32, in_$p440: ref, in_$i518: i32, in_$i519: i1, in_$i517: i32) returns (out_$i518: i32, out_$i519: i1, out_$i517: i32);



implementation {:SIextraRecBound 2} register_PCI_loop_$bb150(in_$i357: i32, in_$p440: ref, in_$i515: i32, in_$i516: i1, in_$i514: i32) returns (out_$i515: i32, out_$i516: i1, out_$i514: i32)
{

  entry:
    out_$i515, out_$i516, out_$i514 := in_$i515, in_$i516, in_$i514;
    goto $bb150, exit;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_6408;

  $bb152:
    assume out_$i516 == 1;
    assume {:verifier.code 0} true;
    out_$i514 := out_$i515;
    goto $bb152_dummy;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    out_$i516 := $slt.i32(out_$i515, in_$i357);
    goto corral_source_split_6412;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    out_$i515 := $add.i32(out_$i514, 1);
    call {:si_unique_call 1141} {:cexpr "chan"} boogie_si_record_i32(out_$i515);
    goto corral_source_split_6411;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} sPCIModemReset(in_$p440, out_$i514, 1);
    goto corral_source_split_6410;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb152_dummy:
    call {:si_unique_call 1} out_$i515, out_$i516, out_$i514 := register_PCI_loop_$bb150(in_$i357, in_$p440, out_$i515, out_$i516, out_$i514);
    return;

  exit:
    return;
}



procedure register_PCI_loop_$bb150(in_$i357: i32, in_$p440: ref, in_$i515: i32, in_$i516: i1, in_$i514: i32) returns (out_$i515: i32, out_$i516: i1, out_$i514: i32);



implementation register_PCI_loop_$bb135(in_$i0: i32, in_$p1: ref, in_$i357: i32, in_$i498: i32, in_$i499: i1, in_$i497: i32, in_$i480: i32) returns (out_$i498: i32, out_$i499: i1, out_$i497: i32)
{

  entry:
    out_$i498, out_$i499, out_$i497 := in_$i498, in_$i499, in_$i497;
    goto $bb135, exit;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  $bb137:
    assume out_$i499 == 1;
    assume {:verifier.code 0} true;
    out_$i497 := out_$i498;
    goto $bb137_dummy;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i499 := $slt.i32(out_$i498, in_$i357);
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i498 := $add.i32(out_$i497, 1);
    call {:si_unique_call 1138} {:cexpr "chan"} boogie_si_record_i32(out_$i498);
    goto corral_source_split_6383;

  SeqInstr_33:
    goto corral_source_split_6382;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} init_r_port(in_$i0, in_$i480, out_$i497, in_$p1);
    goto SeqInstr_32;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb137_dummy:
    call {:si_unique_call 1} out_$i498, out_$i499, out_$i497 := register_PCI_loop_$bb135(in_$i0, in_$p1, in_$i357, out_$i498, out_$i499, out_$i497, in_$i480);
    return;

  exit:
    return;
}



procedure register_PCI_loop_$bb135(in_$i0: i32, in_$p1: ref, in_$i357: i32, in_$i498: i32, in_$i499: i1, in_$i497: i32, in_$i480: i32) returns (out_$i498: i32, out_$i499: i1, out_$i497: i32);
  modifies $M.2, $M.3, $M.40, $M.4, $CurrAddr, assertsPassed;



implementation register_PCI_loop_$bb133(in_$i0: i32, in_$p1: ref, in_$i357: i32, in_$i439: i64, in_$i442: i32, in_$i481: i64, in_$p483: ref, in_$i484: i32, in_$i485: i16, in_$i486: i32, in_$i487: i32, in_$i488: i16, in_$i489: i64, in_$p491: ref, in_$i492: i32, in_$i493: i16, in_$i494: i32, in_$i495: i32, in_$i496: i16, in_$i498: i32, in_$i499: i1, in_$i497: i32, in_$i500: i32, in_$i501: i1, in_$i480: i32) returns (out_$i481: i64, out_$p483: ref, out_$i484: i32, out_$i485: i16, out_$i486: i32, out_$i487: i32, out_$i488: i16, out_$i489: i64, out_$p491: ref, out_$i492: i32, out_$i493: i16, out_$i494: i32, out_$i495: i32, out_$i496: i16, out_$i498: i32, out_$i499: i1, out_$i497: i32, out_$i500: i32, out_$i501: i1, out_$i480: i32)
{

  entry:
    out_$i481, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i498, out_$i499, out_$i497, out_$i500, out_$i501, out_$i480 := in_$i481, in_$p483, in_$i484, in_$i485, in_$i486, in_$i487, in_$i488, in_$i489, in_$p491, in_$i492, in_$i493, in_$i494, in_$i495, in_$i496, in_$i498, in_$i499, in_$i497, in_$i500, in_$i501, in_$i480;
    goto $bb133, exit;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_6363;

  $bb140:
    assume out_$i501 == 1;
    assume {:verifier.code 0} true;
    out_$i480 := out_$i500;
    goto $bb140_dummy;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    out_$i501 := $slt.i32(out_$i500, in_$i442);
    goto corral_source_split_6387;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i500 := $add.i32(out_$i480, 1);
    call {:si_unique_call 1139} {:cexpr "aiop"} boogie_si_record_i32(out_$i500);
    goto corral_source_split_6386;

  $bb138:
    assume !(out_$i499 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i499 := $slt.i32(out_$i498, in_$i357);
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i498 := $add.i32(out_$i497, 1);
    call {:si_unique_call 1138} {:cexpr "chan"} boogie_si_record_i32(out_$i498);
    goto corral_source_split_6383;

  SeqInstr_33:
    goto corral_source_split_6382;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} init_r_port(in_$i0, out_$i480, out_$i497, in_$p1);
    goto SeqInstr_32;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb135:
    call out_$i498, out_$i499, out_$i497 := register_PCI_loop_$bb135(in_$i0, in_$p1, in_$i357, out_$i498, out_$i499, out_$i497, out_$i480);
    goto $bb135_last;

  $bb135_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$i497 := 0;
    goto $bb135;

  $bb137:
    assume out_$i499 == 1;
    assume {:verifier.code 0} true;
    out_$i497 := out_$i498;
    assume false;
    return;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} sOutB(out_$i496, 0);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i496 := $trunc.i32.i16(out_$i495);
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$i495 := $add.i32(out_$i494, 56);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$i494 := $zext.i16.i32(out_$i493);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$i493 := $trunc.i32.i16(out_$i492);
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i32($M.2, out_$p491);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$i489 := $sext.i32.i64(out_$i480);
    out_$p491 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i439, 136)), $mul.ref(60, 1)), $mul.ref(out_$i489, 4));
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} sOutB(out_$i488, $sub.i8(0, 128));
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    out_$i488 := $trunc.i32.i16(out_$i487);
    goto corral_source_split_6370;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    out_$i487 := $add.i32(out_$i486, 56);
    goto corral_source_split_6369;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    out_$i486 := $zext.i16.i32(out_$i485);
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    out_$i485 := $trunc.i32.i16(out_$i484);
    goto corral_source_split_6367;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i484 := $load.i32($M.2, out_$p483);
    goto corral_source_split_6366;

  $bb134:
    assume {:verifier.code 0} true;
    out_$i481 := $sext.i32.i64(out_$i480);
    out_$p483 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i439, 136)), $mul.ref(60, 1)), $mul.ref(out_$i481, 4));
    goto corral_source_split_6365;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb140_dummy:
    call {:si_unique_call 1} out_$i481, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i498, out_$i499, out_$i497, out_$i500, out_$i501, out_$i480 := register_PCI_loop_$bb133(in_$i0, in_$p1, in_$i357, in_$i439, in_$i442, out_$i481, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i498, out_$i499, out_$i497, out_$i500, out_$i501, out_$i480);
    return;

  exit:
    return;
}



procedure register_PCI_loop_$bb133(in_$i0: i32, in_$p1: ref, in_$i357: i32, in_$i439: i64, in_$i442: i32, in_$i481: i64, in_$p483: ref, in_$i484: i32, in_$i485: i16, in_$i486: i32, in_$i487: i32, in_$i488: i16, in_$i489: i64, in_$p491: ref, in_$i492: i32, in_$i493: i16, in_$i494: i32, in_$i495: i32, in_$i496: i16, in_$i498: i32, in_$i499: i1, in_$i497: i32, in_$i500: i32, in_$i501: i1, in_$i480: i32) returns (out_$i481: i64, out_$p483: ref, out_$i484: i32, out_$i485: i16, out_$i486: i32, out_$i487: i32, out_$i488: i16, out_$i489: i64, out_$p491: ref, out_$i492: i32, out_$i493: i16, out_$i494: i32, out_$i495: i32, out_$i496: i16, out_$i498: i32, out_$i499: i1, out_$i497: i32, out_$i500: i32, out_$i501: i1, out_$i480: i32);
  modifies $M.2, $M.3, $M.40, $M.4, $CurrAddr, assertsPassed;



implementation register_PCI_loop_$bb122(in_$i356: i32, in_$i357: i32, in_$i439: i64, in_$i445: i64, in_$p447: ref, in_$i448: i32, in_$i449: i1, in_$i444: i32) returns (out_$i445: i64, out_$p447: ref, out_$i448: i32, out_$i449: i1, out_$i444: i32)
{

  entry:
    out_$i445, out_$p447, out_$i448, out_$i449, out_$i444 := in_$i445, in_$p447, in_$i448, in_$i449, in_$i444;
    goto $bb122, exit;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_6320;

  $bb124:
    assume out_$i449 == 1;
    assume {:verifier.code 0} true;
    out_$i444 := out_$i448;
    goto $bb124_dummy;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    out_$i449 := $slt.i32(out_$i448, in_$i356);
    goto corral_source_split_6325;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$i448 := $add.i32(out_$i444, 1);
    call {:si_unique_call 1133} {:cexpr "aiop"} boogie_si_record_i32(out_$i448);
    goto corral_source_split_6324;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p447, in_$i357);
    goto corral_source_split_6323;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i445 := $sext.i32.i64(out_$i444);
    out_$p447 := $add.ref($add.ref($add.ref($add.ref(sController, $mul.ref(0, 1088)), $mul.ref(in_$i439, 136)), $mul.ref(108, 1)), $mul.ref(out_$i445, 4));
    goto corral_source_split_6322;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb124_dummy:
    call {:si_unique_call 1} out_$i445, out_$p447, out_$i448, out_$i449, out_$i444 := register_PCI_loop_$bb122(in_$i356, in_$i357, in_$i439, out_$i445, out_$p447, out_$i448, out_$i449, out_$i444);
    return;

  exit:
    return;
}



procedure register_PCI_loop_$bb122(in_$i356: i32, in_$i357: i32, in_$i439: i64, in_$i445: i64, in_$p447: ref, in_$i448: i32, in_$i449: i1, in_$i444: i32) returns (out_$i445: i64, out_$p447: ref, out_$i448: i32, out_$i449: i1, out_$i444: i32);
  modifies $M.2;



implementation register_PCI_loop_$bb114(in_$i0: i32, in_$p2: ref, in_$i356: i32, in_$i429: i64, in_$p430: ref, in_$i431: i64, in_$i432: i32, in_$i433: i32, in_$i434: i32, in_$i435: i64, in_$p436: ref, in_$i437: i32, in_$i438: i1, in_$i428: i32) returns (out_$i429: i64, out_$p430: ref, out_$i431: i64, out_$i432: i32, out_$i433: i32, out_$i434: i32, out_$i435: i64, out_$p436: ref, out_$i437: i32, out_$i438: i1, out_$i428: i32)
{

  entry:
    out_$i429, out_$p430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$p436, out_$i437, out_$i438, out_$i428 := in_$i429, in_$p430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$p436, in_$i437, in_$i438, in_$i428;
    goto $bb114, exit;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_6297;

  $bb116:
    assume out_$i438 == 1;
    assume {:verifier.code 0} true;
    out_$i428 := out_$i437;
    goto $bb116_dummy;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i438 := $slt.i32(out_$i437, in_$i356);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$i437 := $add.i32(out_$i428, 1);
    call {:si_unique_call 1130} {:cexpr "aiop"} boogie_si_record_i32(out_$i437);
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, out_$p436, out_$i434);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$p436 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(out_$i435, 4));
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i435 := $sext.i32.i64(out_$i428);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$i434 := $add.i32(out_$i432, out_$i433);
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i433 := $mul.i32(out_$i428, 64);
    goto corral_source_split_6303;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$i432 := $trunc.i64.i32(out_$i431);
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i431 := $load.i64($M.1, out_$p430);
    goto corral_source_split_6301;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    out_$p430 := $add.ref($add.ref(rcktpt_io_addr, $mul.ref(0, 64)), $mul.ref(out_$i429, 8));
    goto corral_source_split_6300;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i429 := $sext.i32.i64(in_$i0);
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116_dummy:
    call {:si_unique_call 1} out_$i429, out_$p430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$p436, out_$i437, out_$i438, out_$i428 := register_PCI_loop_$bb114(in_$i0, in_$p2, in_$i356, out_$i429, out_$p430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$p436, out_$i437, out_$i438, out_$i428);
    return;

  exit:
    return;
}



procedure register_PCI_loop_$bb114(in_$i0: i32, in_$p2: ref, in_$i356: i32, in_$i429: i64, in_$p430: ref, in_$i431: i64, in_$i432: i32, in_$i433: i32, in_$i434: i32, in_$i435: i64, in_$p436: ref, in_$i437: i32, in_$i438: i1, in_$i428: i32) returns (out_$i429: i64, out_$p430: ref, out_$i431: i64, out_$i432: i32, out_$i433: i32, out_$i434: i32, out_$i435: i64, out_$p436: ref, out_$i437: i32, out_$i438: i1, out_$i428: i32);
  modifies $M.41;



implementation sPCIInitController_loop_$bb10(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i32, in_$i73: i64, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i32, in_$i88: i16, in_$i89: i16, in_$i90: i32, in_$i91: i32, in_$i92: i16, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i61: i32) returns (out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i32, out_$i73: i64, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i32, out_$i88: i16, out_$i89: i16, out_$i90: i32, out_$i91: i32, out_$i92: i16, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i61: i32)
{

  entry:
    out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i61 := in_$i62, in_$p63, in_$i64, in_$i65, in_$p67, in_$i68, in_$i69, in_$p71, in_$i72, in_$i73, in_$p75, in_$i76, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i61;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6518;

  $bb16:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := out_$i101;
    goto $bb16_dummy;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i101, in_$i3);
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i61, 1);
    call {:si_unique_call 1172} {:cexpr "i"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p100, out_$i99);
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, 1);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.2, out_$p97);
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} sOutB(out_$i92, out_$i96);
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i32.i8(out_$i95);
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i32.i8(out_$i93);
    goto corral_source_split_6559;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    out_$i93 := $M.38;
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i92 := $trunc.i32.i16(out_$i91);
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i90, 62);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i16.i32(out_$i89);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i32.i16(out_$i64);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} sOutW(out_$i88, 4086);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i16(out_$i87);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i86, 60);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i16.i32(out_$i85);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i16(out_$i64);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p84, out_$i81);
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref(out_$i82, 4));
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i61);
    goto corral_source_split_6546;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} out_$i81 := sReadAiopNumChan(out_$i64);
    goto corral_source_split_6545;

  $bb13:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, $sub.i32(0, 1));
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.2, out_$p78);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(out_$i76, 4));
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i61);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p75, out_$i72);
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(out_$i73, 4));
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i61);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} out_$i72 := sReadAiopID(out_$i64);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p71, out_$i68);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref(out_$i69, 4));
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i61);
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i64, 57);
    goto corral_source_split_6526;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p67, out_$i64);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(out_$i65, 4));
    goto corral_source_split_6524;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i61);
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.41, out_$p63);
    call {:si_unique_call 1167} {:cexpr "io"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p2, $mul.ref(out_$i62, 4));
    goto corral_source_split_6521;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i61 := sPCIInitController_loop_$bb10(in_$p0, in_$p2, in_$i3, out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i61);
    return;

  exit:
    return;
}



procedure sPCIInitController_loop_$bb10(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i32, in_$i73: i64, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i32, in_$i88: i16, in_$i89: i16, in_$i90: i32, in_$i91: i32, in_$i92: i16, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i61: i32) returns (out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i32, out_$i73: i64, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i32, out_$i88: i16, out_$i89: i16, out_$i90: i32, out_$i91: i32, out_$i92: i16, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i61: i32);
  modifies $M.2, $CurrAddr;



implementation sInitController_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i16, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i8, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i8, in_$i79: i16, in_$i80: i32, in_$i81: i16, in_$i82: i32, in_$i83: i8, in_$i84: i32, in_$i85: i8, in_$i86: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i8, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i8, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i118: i32, in_$i119: i64, in_$p121: ref, in_$i122: i16, in_$i123: i32, in_$i124: i32, in_$i125: i16, in_$i126: i16, in_$i127: i32, in_$i128: i32, in_$i129: i16, in_$i130: i32, in_$i131: i8, in_$i132: i32, in_$i133: i8, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$p137: ref, in_$i117: i32, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$i141: i64, in_$p142: ref, in_$i143: i8, in_$i144: i32, in_$i145: i32, in_$i146: i8, in_$p147: ref, in_$p148: ref, in_$i149: i32, in_$i150: i16, in_$i151: i32, in_$i152: i16, in_$p153: ref, in_$i154: i8, in_$i155: i32, in_$i156: i8, in_$i87: i32, in_$i88: i32, in_$i157: i32, in_$i158: i1, in_$i52: i32, in_$i53: i32) returns (out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i16, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i8, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i8, out_$i79: i16, out_$i80: i32, out_$i81: i16, out_$i82: i32, out_$i83: i8, out_$i84: i32, out_$i85: i8, out_$i86: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i8, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i8, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i118: i32, out_$i119: i64, out_$p121: ref, out_$i122: i16, out_$i123: i32, out_$i124: i32, out_$i125: i16, out_$i126: i16, out_$i127: i32, out_$i128: i32, out_$i129: i16, out_$i130: i32, out_$i131: i8, out_$i132: i32, out_$i133: i8, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$p137: ref, out_$i117: i32, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$i141: i64, out_$p142: ref, out_$i143: i8, out_$i144: i32, out_$i145: i32, out_$i146: i8, out_$p147: ref, out_$p148: ref, out_$i149: i32, out_$i150: i16, out_$i151: i32, out_$i152: i16, out_$p153: ref, out_$i154: i8, out_$i155: i32, out_$i156: i8, out_$i87: i32, out_$i88: i32, out_$i157: i32, out_$i158: i1, out_$i52: i32, out_$i53: i32)
{

  entry:
    out_$i54, out_$p55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$p114, out_$i115, out_$i116, out_$i118, out_$i119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i117, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i87, out_$i88, out_$i157, out_$i158, out_$i52, out_$i53 := in_$i54, in_$p55, in_$i56, in_$i57, in_$p59, in_$i60, in_$i61, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p111, in_$i112, in_$p114, in_$i115, in_$i116, in_$i118, in_$i119, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i117, in_$p138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$i156, in_$i87, in_$i88, in_$i157, in_$i158, in_$i52, in_$i53;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8113;

  $bb13:
    assume out_$i158 == 1;
    assume {:verifier.code 0} true;
    out_$i52, out_$i53 := out_$i88, out_$i157;
    goto $bb13_dummy;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i157, in_$i4);
    goto corral_source_split_8155;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i87, 1);
    call {:si_unique_call 1298} {:cexpr "i"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_8154;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    out_$i87, out_$i88 := out_$i53, out_$i117;
    goto $bb8;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    out_$i87, out_$i88 := out_$i53, out_$i52;
    goto $bb8;

  $bb6:
    assume out_$i86 == 1;
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i52, 0);
    goto corral_source_split_8149;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} sOutB(out_$i81, out_$i85);
    goto corral_source_split_8148;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i8(out_$i84);
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i32(out_$i83);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i8(out_$i82);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$i82 := $lshr.i32(out_$i56, 6);
    goto corral_source_split_8144;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i32.i16(out_$i80);
    goto corral_source_split_8143;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i16.i32(out_$i79);
    goto corral_source_split_8142;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i32.i16(in_$i2);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} sOutB(out_$i68, out_$i78);
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i32.i8(out_$i75);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    out_$i75 := $or.i32(out_$i71, out_$i74);
    goto corral_source_split_8136;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i32(out_$i73, 3);
    goto corral_source_split_8135;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i8.i32(out_$i72);
    goto corral_source_split_8134;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i8.i32(out_$i70);
    goto corral_source_split_8132;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.2, out_$p69);
    goto corral_source_split_8131;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(44, 1));
    goto corral_source_split_8130;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i16(out_$i67);
    goto corral_source_split_8129;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    goto corral_source_split_8128;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    goto corral_source_split_8127;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.2, out_$p64);
    goto corral_source_split_8126;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(36, 1));
    goto corral_source_split_8125;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p63, out_$i60);
    goto corral_source_split_8124;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(76, 1)), $mul.ref(out_$i61, 4));
    goto corral_source_split_8123;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8122;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i56, 57);
    goto corral_source_split_8121;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p59, out_$i56);
    goto corral_source_split_8120;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(60, 1)), $mul.ref(out_$i57, 4));
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8118;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.39, out_$p55);
    call {:si_unique_call 1295} {:cexpr "io"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(in_$p3, $mul.ref(out_$i54, 4));
    goto corral_source_split_8116;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8115;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} sOutB(out_$i152, out_$i156);
    goto corral_source_split_8234;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    out_$i156 := $trunc.i32.i8(out_$i155);
    goto corral_source_split_8233;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i8.i32(out_$i154);
    goto corral_source_split_8232;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i8($M.2, out_$p153);
    goto corral_source_split_8231;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8230;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    out_$i152 := $trunc.i32.i16(out_$i151);
    goto corral_source_split_8229;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i16.i32(out_$i150);
    goto corral_source_split_8228;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    out_$i150 := $trunc.i32.i16(out_$i149);
    goto corral_source_split_8227;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.2, out_$p148);
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p147, out_$i146);
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$i146 := $trunc.i32.i8(out_$i145);
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$i145 := $and.i32(out_$i140, out_$i144);
    goto corral_source_split_8221;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i8.i32(out_$i143);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i8($M.11, out_$p142);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(sBitMapClrTbl, $mul.ref(0, 8)), $mul.ref(out_$i141, 1));
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i8.i32(out_$i139);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i8($M.2, out_$p138);
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8214;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p137, out_$i136);
    assume {:verifier.code 0} true;
    out_$i117 := out_$i52;
    goto $bb12;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$i117 := 1;
    goto $bb12;

  $bb10:
    assume out_$i116 == 1;
    goto corral_source_split_8187;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, $sub.i32(0, 1));
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.2, out_$p114);
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(out_$i112, 4));
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p111, out_$i108);
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(92, 1)), $mul.ref(out_$i109, 4));
    goto corral_source_split_8180;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8179;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} out_$i108 := sReadAiopID(out_$i56);
    goto corral_source_split_8178;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} sOutB(out_$i103, out_$i107);
    goto corral_source_split_8177;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i32.i8(out_$i106);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i8.i32(out_$i105);
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.2, out_$p104);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i16(out_$i102);
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i16.i32(out_$i101);
    goto corral_source_split_8171;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    out_$i101 := $trunc.i32.i16(out_$i100);
    goto corral_source_split_8170;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.2, out_$p99);
    goto corral_source_split_8169;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_8168;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p98, out_$i97);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8166;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$i97 := $trunc.i32.i8(out_$i96);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$i96 := $or.i32(out_$i91, out_$i95);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.10, out_$p93);
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(sBitMapSetTbl, $mul.ref(0, 8)), $mul.ref(out_$i92, 1));
    goto corral_source_split_8161;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8160;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i90);
    goto corral_source_split_8159;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.2, out_$p89);
    goto corral_source_split_8158;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(45, 1));
    goto corral_source_split_8157;

  $bb7:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(out_$i135, 1);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.2, out_$p134);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} sOutB(out_$i129, out_$i133);
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$i133 := $trunc.i32.i8(out_$i132);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i8.i32(out_$i131);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i131 := $trunc.i32.i8(out_$i130);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$i130 := $M.38;
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i129 := $trunc.i32.i16(out_$i128);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i127, 62);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i16.i32(out_$i126);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i32.i16(out_$i56);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} sOutW(out_$i125, 4086);
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    out_$i125 := $trunc.i32.i16(out_$i124);
    goto corral_source_split_8197;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i124 := $add.i32(out_$i123, 60);
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i16.i32(out_$i122);
    goto corral_source_split_8195;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i32.i16(out_$i56);
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p121, out_$i118);
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(108, 1)), $mul.ref(out_$i119, 4));
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i53);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} out_$i118 := sReadAiopNumChan(out_$i56);
    goto corral_source_split_8190;

  $bb11:
    assume !(out_$i116 == 1);
    goto corral_source_split_8189;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i54, out_$p55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$p114, out_$i115, out_$i116, out_$i118, out_$i119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i117, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i87, out_$i88, out_$i157, out_$i158, out_$i52, out_$i53 := sInitController_loop_$bb4(in_$p0, in_$i2, in_$p3, in_$i4, out_$i54, out_$p55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$p114, out_$i115, out_$i116, out_$i118, out_$i119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i117, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i87, out_$i88, out_$i157, out_$i158, out_$i52, out_$i53);
    return;

  exit:
    return;
}



procedure sInitController_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i16, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i8, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i8, in_$i79: i16, in_$i80: i32, in_$i81: i16, in_$i82: i32, in_$i83: i8, in_$i84: i32, in_$i85: i8, in_$i86: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i8, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i16, in_$i102: i32, in_$i103: i16, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i8, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i118: i32, in_$i119: i64, in_$p121: ref, in_$i122: i16, in_$i123: i32, in_$i124: i32, in_$i125: i16, in_$i126: i16, in_$i127: i32, in_$i128: i32, in_$i129: i16, in_$i130: i32, in_$i131: i8, in_$i132: i32, in_$i133: i8, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$p137: ref, in_$i117: i32, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$i141: i64, in_$p142: ref, in_$i143: i8, in_$i144: i32, in_$i145: i32, in_$i146: i8, in_$p147: ref, in_$p148: ref, in_$i149: i32, in_$i150: i16, in_$i151: i32, in_$i152: i16, in_$p153: ref, in_$i154: i8, in_$i155: i32, in_$i156: i8, in_$i87: i32, in_$i88: i32, in_$i157: i32, in_$i158: i1, in_$i52: i32, in_$i53: i32) returns (out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i16, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i8, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i8, out_$i79: i16, out_$i80: i32, out_$i81: i16, out_$i82: i32, out_$i83: i8, out_$i84: i32, out_$i85: i8, out_$i86: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i8, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i16, out_$i102: i32, out_$i103: i16, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i8, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i118: i32, out_$i119: i64, out_$p121: ref, out_$i122: i16, out_$i123: i32, out_$i124: i32, out_$i125: i16, out_$i126: i16, out_$i127: i32, out_$i128: i32, out_$i129: i16, out_$i130: i32, out_$i131: i8, out_$i132: i32, out_$i133: i8, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$p137: ref, out_$i117: i32, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$i141: i64, out_$p142: ref, out_$i143: i8, out_$i144: i32, out_$i145: i32, out_$i146: i8, out_$p147: ref, out_$p148: ref, out_$i149: i32, out_$i150: i16, out_$i151: i32, out_$i152: i16, out_$p153: ref, out_$i154: i8, out_$i155: i32, out_$i156: i8, out_$i87: i32, out_$i88: i32, out_$i157: i32, out_$i158: i1, out_$i52: i32, out_$i53: i32);
  modifies $M.2, $CurrAddr;


