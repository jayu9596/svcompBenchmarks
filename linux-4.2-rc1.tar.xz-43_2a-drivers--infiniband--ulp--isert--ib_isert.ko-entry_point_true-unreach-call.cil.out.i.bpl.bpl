var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: ref;

var $M.3: i32;

var $M.4: [ref]ref;

var $M.5: [ref]i64;

var $M.6: [ref]ref;

var $M.7: [ref]i32;

var $M.8: [ref]i32;

var $M.9: [ref]i32;

var $M.10: i32;

var $M.11: ref;

var $M.12: i32;

var $M.13: ref;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: [ref]i8;

var $M.27: ref;

var $M.28: [ref]i32;

var $M.29: [ref]i32;

var $M.30: [ref]i64;

var $M.31: [ref]i32;

var $M.32: [ref]i32;

var $M.33: [ref]ref;

var $M.34: [ref]i8;

var $M.35: [ref]i32;

var $M.36: [ref]i32;

var $M.37: [ref]ref;

var $M.38: [ref]i8;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: ref;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 723144);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 2056);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 3088);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 4116);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 5148);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 6176);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 7208);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 8236);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 9268);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 10296);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 11328);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 12356);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 13388);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 14416);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 15448);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 16476);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 17508);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 18536);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 19568);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 20596);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 21628);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 22656);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 23688);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 24716);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 25748);

const iser_target_transport_group0: ref;

axiom iser_target_transport_group0 == $sub.ref(0, 26780);

const iser_target_transport_group1: ref;

axiom iser_target_transport_group1 == $sub.ref(0, 27812);

const iser_target_transport_group2: ref;

axiom iser_target_transport_group2 == $sub.ref(0, 28844);

const iser_target_transport_group3: ref;

axiom iser_target_transport_group3 == $sub.ref(0, 29876);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 30904);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 31932);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 32960);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 33988);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 35016);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 36044);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 37072);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 38100);

const iser_target_transport: ref;

axiom iser_target_transport == $sub.ref(0, 39284);

const isert_release_wq: ref;

axiom isert_release_wq == $sub.ref(0, 40316);

const isert_comp_wq: ref;

axiom isert_comp_wq == $sub.ref(0, 41348);

const device_list: ref;

axiom device_list == $sub.ref(0, 42388);

const device_list_mutex: ref;

axiom device_list_mutex == $sub.ref(0, 43572);

const isert_debug_level: ref;

axiom isert_debug_level == $sub.ref(0, 44600);

const {:count 28} .str.28: ref;

axiom .str.28 == $sub.ref(0, 45652);

const {:count 18} .str.29: ref;

axiom .str.29 == $sub.ref(0, 46694);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 40} .str.238: ref;

axiom .str.238 == $sub.ref(0, 47758);

const {:count 23} .str.239: ref;

axiom .str.239 == $sub.ref(0, 48805);

const {:count 41} .str.240: ref;

axiom .str.240 == $sub.ref(0, 49870);

const {:count 35} .str.231: ref;

axiom .str.231 == $sub.ref(0, 50929);

const {:count 19} .str.232: ref;

axiom .str.232 == $sub.ref(0, 51972);

const {:count 41} .str.187: ref;

axiom .str.187 == $sub.ref(0, 53037);

const {:count 20} .str.188: ref;

axiom .str.188 == $sub.ref(0, 54081);

const {:count 41} .str.24: ref;

axiom .str.24 == $sub.ref(0, 55146);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 43} .str.184: ref;

axiom .str.184 == $sub.ref(0, 56213);

const {:count 19} .str.185: ref;

axiom .str.185 == $sub.ref(0, 57256);

const {:count 63} .str.186: ref;

axiom .str.186 == $sub.ref(0, 58343);

const {:count 46} .str.182: ref;

axiom .str.182 == $sub.ref(0, 59413);

const {:count 23} .str.183: ref;

axiom .str.183 == $sub.ref(0, 60460);

const {:count 48} .str.241: ref;

axiom .str.241 == $sub.ref(0, 61532);

const {:count 17} .str.242: ref;

axiom .str.242 == $sub.ref(0, 62573);

const {:count 48} .str.235: ref;

axiom .str.235 == $sub.ref(0, 63645);

const {:count 56} .str.243: ref;

axiom .str.243 == $sub.ref(0, 64725);

const {:count 69} .str.244: ref;

axiom .str.244 == $sub.ref(0, 65818);

const {:count 58} .str.245: ref;

axiom .str.245 == $sub.ref(0, 66900);

const {:count 67} .str.233: ref;

axiom .str.233 == $sub.ref(0, 67991);

const {:count 18} .str.234: ref;

axiom .str.234 == $sub.ref(0, 69033);

const {:count 55} .str.236: ref;

axiom .str.236 == $sub.ref(0, 70112);

const {:count 65} .str.237: ref;

axiom .str.237 == $sub.ref(0, 71201);

const {:count 44} .str.178: ref;

axiom .str.178 == $sub.ref(0, 72269);

const {:count 21} .str.179: ref;

axiom .str.179 == $sub.ref(0, 73314);

const {:count 35} .str.195: ref;

axiom .str.195 == $sub.ref(0, 74373);

const {:count 19} .str.196: ref;

axiom .str.196 == $sub.ref(0, 75416);

const {:count 36} .str.193: ref;

axiom .str.193 == $sub.ref(0, 76476);

const {:count 17} .str.194: ref;

axiom .str.194 == $sub.ref(0, 77517);

const {:count 54} .str.191: ref;

axiom .str.191 == $sub.ref(0, 78595);

const {:count 17} .str.192: ref;

axiom .str.192 == $sub.ref(0, 79636);

const {:count 44} .str.189: ref;

axiom .str.189 == $sub.ref(0, 80704);

const {:count 16} .str.190: ref;

axiom .str.190 == $sub.ref(0, 81744);

const {:count 45} .str.180: ref;

axiom .str.180 == $sub.ref(0, 82813);

const {:count 21} .str.181: ref;

axiom .str.181 == $sub.ref(0, 83858);

const {:count 45} .str.207: ref;

axiom .str.207 == $sub.ref(0, 84927);

const {:count 22} .str.208: ref;

axiom .str.208 == $sub.ref(0, 85973);

const {:count 52} .str.214: ref;

axiom .str.214 == $sub.ref(0, 87049);

const {:count 19} .str.215: ref;

axiom .str.215 == $sub.ref(0, 88092);

const {:count 44} .str.226: ref;

axiom .str.226 == $sub.ref(0, 89160);

const {:count 16} .str.227: ref;

axiom .str.227 == $sub.ref(0, 90200);

const {:count 53} .str.90: ref;

axiom .str.90 == $sub.ref(0, 91277);

const {:count 22} .str.91: ref;

axiom .str.91 == $sub.ref(0, 92323);

const {:count 39} .str.92: ref;

axiom .str.92 == $sub.ref(0, 93386);

const {:count 48} .str.161: ref;

axiom .str.161 == $sub.ref(0, 94458);

const {:count 16} .str.162: ref;

axiom .str.162 == $sub.ref(0, 95498);

const {:count 34} .str.163: ref;

axiom .str.163 == $sub.ref(0, 96556);

const {:count 55} .str.224: ref;

axiom .str.224 == $sub.ref(0, 97635);

const {:count 27} .str.225: ref;

axiom .str.225 == $sub.ref(0, 98686);

const {:count 52} .str.216: ref;

axiom .str.216 == $sub.ref(0, 99762);

const {:count 31} .str.217: ref;

axiom .str.217 == $sub.ref(0, 100817);

const {:count 56} .str.218: ref;

axiom .str.218 == $sub.ref(0, 101897);

const {:count 50} .str.219: ref;

axiom .str.219 == $sub.ref(0, 102971);

const {:count 41} .str.118: ref;

axiom .str.118 == $sub.ref(0, 104036);

const {:count 29} .str.119: ref;

axiom .str.119 == $sub.ref(0, 105089);

const {:count 50} .str.120: ref;

axiom .str.120 == $sub.ref(0, 106163);

const {:count 50} .str.220: ref;

axiom .str.220 == $sub.ref(0, 107237);

const {:count 21} .str.221: ref;

axiom .str.221 == $sub.ref(0, 108282);

const {:count 50} .str.222: ref;

axiom .str.222 == $sub.ref(0, 109356);

const {:count 32} .str.223: ref;

axiom .str.223 == $sub.ref(0, 110412);

const {:count 44} .str.202: ref;

axiom .str.202 == $sub.ref(0, 111480);

const {:count 19} .str.203: ref;

axiom .str.203 == $sub.ref(0, 112523);

const {:count 60} .str.204: ref;

axiom .str.204 == $sub.ref(0, 113607);

const {:count 40} .str.205: ref;

axiom .str.205 == $sub.ref(0, 114671);

const {:count 39} .str.206: ref;

axiom .str.206 == $sub.ref(0, 115734);

const {:count 21} .str.99: ref;

axiom .str.99 == $sub.ref(0, 116779);

const {:count 19} .str.139: ref;

axiom .str.139 == $sub.ref(0, 117822);

const {:count 217} .str.117: ref;

axiom .str.117 == $sub.ref(0, 119063);

const {:count 81} .str.140: ref;

axiom .str.140 == $sub.ref(0, 120168);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 21} .str.112: ref;

axiom .str.112 == $sub.ref(0, 121213);

const {:count 38} .str.113: ref;

axiom .str.113 == $sub.ref(0, 122275);

const {:count 19} .str.114: ref;

axiom .str.114 == $sub.ref(0, 123318);

const {:count 21} .str.115: ref;

axiom .str.115 == $sub.ref(0, 124363);

const {:count 22} .str.116: ref;

axiom .str.116 == $sub.ref(0, 125409);

const {:count 35} .str.95: ref;

axiom .str.95 == $sub.ref(0, 126468);

const {:count 17} .str.96: ref;

axiom .str.96 == $sub.ref(0, 127509);

const {:count 23} .str.97: ref;

axiom .str.97 == $sub.ref(0, 128556);

const {:count 25} .str.98: ref;

axiom .str.98 == $sub.ref(0, 129605);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 17} .str.250: ref;

axiom .str.250 == $sub.ref(0, 130646);

const {:count 42} .str.251: ref;

axiom .str.251 == $sub.ref(0, 131712);

const {:count 9} .str.18: ref;

axiom .str.18 == $sub.ref(0, 132745);

const {:count 30} .str.246: ref;

axiom .str.246 == $sub.ref(0, 133799);

const {:count 16} .str.247: ref;

axiom .str.247 == $sub.ref(0, 134839);

const {:count 18} .str.252: ref;

axiom .str.252 == $sub.ref(0, 135881);

const {:count 47} .str.253: ref;

axiom .str.253 == $sub.ref(0, 136952);

const {:count 27} .str.248: ref;

axiom .str.248 == $sub.ref(0, 138003);

const {:count 16} .str.249: ref;

axiom .str.249 == $sub.ref(0, 139043);

const {:count 42} .str.108: ref;

axiom .str.108 == $sub.ref(0, 140109);

const {:count 21} .str.109: ref;

axiom .str.109 == $sub.ref(0, 141154);

const {:count 50} .str.110: ref;

axiom .str.110 == $sub.ref(0, 142228);

const {:count 44} .str.111: ref;

axiom .str.111 == $sub.ref(0, 143296);

const {:count 58} .str.228: ref;

axiom .str.228 == $sub.ref(0, 144378);

const {:count 14} .str.229: ref;

axiom .str.229 == $sub.ref(0, 145416);

const {:count 47} .str.230: ref;

axiom .str.230 == $sub.ref(0, 146487);

const {:count 32} .str.209: ref;

axiom .str.209 == $sub.ref(0, 147543);

const {:count 16} .str.210: ref;

axiom .str.210 == $sub.ref(0, 148583);

const {:count 39} .str.211: ref;

axiom .str.211 == $sub.ref(0, 149646);

const {:count 6} .str.212: ref;

axiom .str.212 == $sub.ref(0, 150676);

const {:count 5} .str.213: ref;

axiom .str.213 == $sub.ref(0, 151705);

const {:count 48} .str.197: ref;

axiom .str.197 == $sub.ref(0, 152777);

const {:count 15} .str.198: ref;

axiom .str.198 == $sub.ref(0, 153816);

const {:count 27} .str.199: ref;

axiom .str.199 == $sub.ref(0, 154867);

const .str: ref;

axiom .str == $sub.ref(0, 155926);

const {:count 15} .str.1: ref;

axiom .str.1 == $sub.ref(0, 156965);

const {:count 42} .str.2: ref;

axiom .str.2 == $sub.ref(0, 158031);

const {:count 30} .str.3: ref;

axiom .str.3 == $sub.ref(0, 159085);

const {:count 41} .str.4: ref;

axiom .str.4 == $sub.ref(0, 160150);

const {:count 38} .str.5: ref;

axiom .str.5 == $sub.ref(0, 161212);

const {:count 44} .str.6: ref;

axiom .str.6 == $sub.ref(0, 162280);

const {:count 18} .str.7: ref;

axiom .str.7 == $sub.ref(0, 163322);

const {:count 46} .str.8: ref;

axiom .str.8 == $sub.ref(0, 164392);

const {:count 42} .str.9: ref;

axiom .str.9 == $sub.ref(0, 165458);

const {:count 37} .str.102: ref;

axiom .str.102 == $sub.ref(0, 166519);

const {:count 27} .str.103: ref;

axiom .str.103 == $sub.ref(0, 167570);

const {:count 34} .str.104: ref;

axiom .str.104 == $sub.ref(0, 168628);

const {:count 21} .str.105: ref;

axiom .str.105 == $sub.ref(0, 169673);

const {:count 46} .str.106: ref;

axiom .str.106 == $sub.ref(0, 170743);

const {:count 45} .str.107: ref;

axiom .str.107 == $sub.ref(0, 171812);

const {:count 24} .str.100: ref;

axiom .str.100 == $sub.ref(0, 172860);

const {:count 48} .str.101: ref;

axiom .str.101 == $sub.ref(0, 173932);

const {:count 61} .str.10: ref;

axiom .str.10 == $sub.ref(0, 175017);

const {:count 22} .str.11: ref;

axiom .str.11 == $sub.ref(0, 176063);

const {:count 36} .str.12: ref;

axiom .str.12 == $sub.ref(0, 177123);

const {:count 39} .str.13: ref;

axiom .str.13 == $sub.ref(0, 178186);

const {:count 48} .str.14: ref;

axiom .str.14 == $sub.ref(0, 179258);

const {:count 43} .str.93: ref;

axiom .str.93 == $sub.ref(0, 180325);

const {:count 18} .str.94: ref;

axiom .str.94 == $sub.ref(0, 181367);

const {:count 49} .str.85: ref;

axiom .str.85 == $sub.ref(0, 182440);

const {:count 16} .str.86: ref;

axiom .str.86 == $sub.ref(0, 183480);

const {:count 30} .str.87: ref;

axiom .str.87 == $sub.ref(0, 184534);

const {:count 24} .str.88: ref;

axiom .str.88 == $sub.ref(0, 185582);

const {:count 53} .str.89: ref;

axiom .str.89 == $sub.ref(0, 186659);

const {:count 50} .str.83: ref;

axiom .str.83 == $sub.ref(0, 187733);

const {:count 15} .str.84: ref;

axiom .str.84 == $sub.ref(0, 188772);

const {:count 46} .str.25: ref;

axiom .str.25 == $sub.ref(0, 189842);

const {:count 17} .str.26: ref;

axiom .str.26 == $sub.ref(0, 190883);

const {:count 54} .str.27: ref;

axiom .str.27 == $sub.ref(0, 191961);

const {:count 54} .str.30: ref;

axiom .str.30 == $sub.ref(0, 193039);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 194090);

const {:count 56} .str.32: ref;

axiom .str.32 == $sub.ref(0, 195170);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 93} .str.76: ref;

axiom .str.76 == $sub.ref(0, 196287);

const {:count 18} .str.77: ref;

axiom .str.77 == $sub.ref(0, 197329);

const {:count 52} .str.78: ref;

axiom .str.78 == $sub.ref(0, 198405);

const {:count 14} .str.79: ref;

axiom .str.79 == $sub.ref(0, 199443);

const {:count 35} .str.80: ref;

axiom .str.80 == $sub.ref(0, 200502);

const {:count 23} .str.81: ref;

axiom .str.81 == $sub.ref(0, 201549);

const {:count 24} .str.82: ref;

axiom .str.82 == $sub.ref(0, 202597);

const {:count 45} .str.130: ref;

axiom .str.130 == $sub.ref(0, 203666);

const {:count 16} .str.131: ref;

axiom .str.131 == $sub.ref(0, 204706);

const {:count 33} .str.132: ref;

axiom .str.132 == $sub.ref(0, 205763);

const {:count 46} .str.173: ref;

axiom .str.173 == $sub.ref(0, 206833);

const {:count 18} .str.174: ref;

axiom .str.174 == $sub.ref(0, 207875);

const {:count 53} .str.124: ref;

axiom .str.124 == $sub.ref(0, 208952);

const {:count 21} .str.125: ref;

axiom .str.125 == $sub.ref(0, 209997);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 211041);

const {:count 14} .str.128: ref;

axiom .str.128 == $sub.ref(0, 212079);

const {:count 59} .str.129: ref;

axiom .str.129 == $sub.ref(0, 213162);

const {:count 48} .str.126: ref;

axiom .str.126 == $sub.ref(0, 214234);

const {:count 20} .str.127: ref;

axiom .str.127 == $sub.ref(0, 215278);

const {:count 34} .str.164: ref;

axiom .str.164 == $sub.ref(0, 216336);

const {:count 21} .str.165: ref;

axiom .str.165 == $sub.ref(0, 217381);

const {:count 42} .str.166: ref;

axiom .str.166 == $sub.ref(0, 218447);

const {:count 56} .str.171: ref;

axiom .str.171 == $sub.ref(0, 219527);

const {:count 27} .str.172: ref;

axiom .str.172 == $sub.ref(0, 220578);

const {:count 47} .str.168: ref;

axiom .str.168 == $sub.ref(0, 221649);

const {:count 22} .str.169: ref;

axiom .str.169 == $sub.ref(0, 222695);

const {:count 82} .str.170: ref;

axiom .str.170 == $sub.ref(0, 223801);

const {:count 24} .str.167: ref;

axiom .str.167 == $sub.ref(0, 224849);

const {:count 31} .str.121: ref;

axiom .str.121 == $sub.ref(0, 225904);

const {:count 22} .str.122: ref;

axiom .str.122 == $sub.ref(0, 226950);

const {:count 32} .str.123: ref;

axiom .str.123 == $sub.ref(0, 228006);

const {:count 60} .str.133: ref;

axiom .str.133 == $sub.ref(0, 229090);

const {:count 21} .str.134: ref;

axiom .str.134 == $sub.ref(0, 230135);

const {:count 58} .str.135: ref;

axiom .str.135 == $sub.ref(0, 231217);

const {:count 71} .str.136: ref;

axiom .str.136 == $sub.ref(0, 232312);

const {:count 49} .str.137: ref;

axiom .str.137 == $sub.ref(0, 233385);

const {:count 52} .str.138: ref;

axiom .str.138 == $sub.ref(0, 234461);

const {:count 55} .str.141: ref;

axiom .str.141 == $sub.ref(0, 235540);

const {:count 17} .str.142: ref;

axiom .str.142 == $sub.ref(0, 236581);

const {:count 57} .str.143: ref;

axiom .str.143 == $sub.ref(0, 237662);

const {:count 33} .str.144: ref;

axiom .str.144 == $sub.ref(0, 238719);

const {:count 32} .str.145: ref;

axiom .str.145 == $sub.ref(0, 239775);

const {:count 44} .str.146: ref;

axiom .str.146 == $sub.ref(0, 240843);

const {:count 75} .str.147: ref;

axiom .str.147 == $sub.ref(0, 241942);

const {:count 16} .str.148: ref;

axiom .str.148 == $sub.ref(0, 242982);

const {:count 46} .str.149: ref;

axiom .str.149 == $sub.ref(0, 244052);

const {:count 62} .str.159: ref;

axiom .str.159 == $sub.ref(0, 245138);

const {:count 22} .str.160: ref;

axiom .str.160 == $sub.ref(0, 246184);

const {:count 56} .str.154: ref;

axiom .str.154 == $sub.ref(0, 247264);

const {:count 27} .str.155: ref;

axiom .str.155 == $sub.ref(0, 248315);

const {:count 90} .str.156: ref;

axiom .str.156 == $sub.ref(0, 249429);

const {:count 54} .str.157: ref;

axiom .str.157 == $sub.ref(0, 250507);

const {:count 79} .str.158: ref;

axiom .str.158 == $sub.ref(0, 251610);

const {:count 76} .str.152: ref;

axiom .str.152 == $sub.ref(0, 252710);

const {:count 22} .str.153: ref;

axiom .str.153 == $sub.ref(0, 253756);

const {:count 54} .str.150: ref;

axiom .str.150 == $sub.ref(0, 254834);

const {:count 19} .str.151: ref;

axiom .str.151 == $sub.ref(0, 255877);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 16} .str.73: ref;

axiom .str.73 == $sub.ref(0, 256917);

const {:count 32} .str.64: ref;

axiom .str.64 == $sub.ref(0, 257973);

const {:count 33} .str.74: ref;

axiom .str.74 == $sub.ref(0, 259030);

const {:count 32} .str.75: ref;

axiom .str.75 == $sub.ref(0, 260086);

const {:count 39} .str.65: ref;

axiom .str.65 == $sub.ref(0, 261149);

const {:count 15} .str.66: ref;

axiom .str.66 == $sub.ref(0, 262188);

const {:count 44} .str.67: ref;

axiom .str.67 == $sub.ref(0, 263256);

const {:count 70} .str.68: ref;

axiom .str.68 == $sub.ref(0, 264350);

const {:count 20} .str.69: ref;

axiom .str.69 == $sub.ref(0, 265394);

const {:count 60} .str.70: ref;

axiom .str.70 == $sub.ref(0, 266478);

const {:count 47} .str.71: ref;

axiom .str.71 == $sub.ref(0, 267549);

const {:count 63} .str.72: ref;

axiom .str.72 == $sub.ref(0, 268636);

const {:count 43} .str.37: ref;

axiom .str.37 == $sub.ref(0, 269703);

const {:count 19} .str.38: ref;

axiom .str.38 == $sub.ref(0, 270746);

const {:count 70} .str.39: ref;

axiom .str.39 == $sub.ref(0, 271840);

const {:count 28} .str.40: ref;

axiom .str.40 == $sub.ref(0, 272892);

const {:count 17} .str.62: ref;

axiom .str.62 == $sub.ref(0, 273933);

const {:count 36} .str.63: ref;

axiom .str.63 == $sub.ref(0, 274993);

const {:count 47} .str.48: ref;

axiom .str.48 == $sub.ref(0, 276064);

const {:count 22} .str.49: ref;

axiom .str.49 == $sub.ref(0, 277110);

const {:count 53} .str.50: ref;

axiom .str.50 == $sub.ref(0, 278187);

const {:count 43} .str.51: ref;

axiom .str.51 == $sub.ref(0, 279254);

const {:count 46} .str.44: ref;

axiom .str.44 == $sub.ref(0, 280324);

const {:count 17} .str.57: ref;

axiom .str.57 == $sub.ref(0, 281365);

const {:count 56} .str.58: ref;

axiom .str.58 == $sub.ref(0, 282445);

const {:count 41} .str.59: ref;

axiom .str.59 == $sub.ref(0, 283510);

const {:count 20} .str.60: ref;

axiom .str.60 == $sub.ref(0, 284554);

const {:count 43} .str.52: ref;

axiom .str.52 == $sub.ref(0, 285621);

const {:count 20} .str.53: ref;

axiom .str.53 == $sub.ref(0, 286665);

const {:count 50} .str.54: ref;

axiom .str.54 == $sub.ref(0, 287739);

const {:count 50} .str.55: ref;

axiom .str.55 == $sub.ref(0, 288813);

const {:count 61} .str.56: ref;

axiom .str.56 == $sub.ref(0, 289898);

const {:count 52} .str.41: ref;

axiom .str.41 == $sub.ref(0, 290974);

const {:count 18} .str.42: ref;

axiom .str.42 == $sub.ref(0, 292016);

const {:count 50} .str.43: ref;

axiom .str.43 == $sub.ref(0, 293090);

const {:count 46} .str.45: ref;

axiom .str.45 == $sub.ref(0, 294160);

const {:count 22} .str.46: ref;

axiom .str.46 == $sub.ref(0, 295206);

const {:count 52} .str.47: ref;

axiom .str.47 == $sub.ref(0, 296282);

const {:count 42} .str.33: ref;

axiom .str.33 == $sub.ref(0, 297348);

const {:count 19} .str.34: ref;

axiom .str.34 == $sub.ref(0, 298391);

const {:count 34} .str.35: ref;

axiom .str.35 == $sub.ref(0, 299449);

const {:count 37} .str.36: ref;

axiom .str.36 == $sub.ref(0, 300510);

const {:count 54} .str.19: ref;

axiom .str.19 == $sub.ref(0, 301588);

const {:count 22} .str.20: ref;

axiom .str.20 == $sub.ref(0, 302634);

const {:count 67} .str.21: ref;

axiom .str.21 == $sub.ref(0, 303725);

const {:count 45} .str.22: ref;

axiom .str.22 == $sub.ref(0, 304794);

const {:count 45} .str.23: ref;

axiom .str.23 == $sub.ref(0, 305863);

const {:count 19} .str.15: ref;

axiom .str.15 == $sub.ref(0, 306906);

const {:count 33} .str.16: ref;

axiom .str.16 == $sub.ref(0, 307963);

const {:count 28} .str.17: ref;

axiom .str.17 == $sub.ref(0, 309015);

const {:count 38} .str.175: ref;

axiom .str.175 == $sub.ref(0, 310077);

const {:count 19} .str.176: ref;

axiom .str.176 == $sub.ref(0, 311120);

const {:count 32} .str.177: ref;

axiom .str.177 == $sub.ref(0, 312176);

const {:count 12} .str.200: ref;

axiom .str.200 == $sub.ref(0, 313212);

const {:count 16} .str.201: ref;

axiom .str.201 == $sub.ref(0, 314252);

const {:count 16} .str.256: ref;

axiom .str.256 == $sub.ref(0, 315292);

const {:count 14} .str.257: ref;

axiom .str.257 == $sub.ref(0, 316330);

const {:count 46} .str.258: ref;

axiom .str.258 == $sub.ref(0, 317400);

const {:count 11} .str.259: ref;

axiom .str.259 == $sub.ref(0, 318435);

const {:count 19} .str.260: ref;

axiom .str.260 == $sub.ref(0, 319478);

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 17} .str.261: ref;

axiom .str.261 == $sub.ref(0, 320519);

const {:count 49} .str.262: ref;

axiom .str.262 == $sub.ref(0, 321592);

const {:count 59} .str.263: ref;

axiom .str.263 == $sub.ref(0, 322675);

const {:count 61} .str.254: ref;

axiom .str.254 == $sub.ref(0, 323760);

const {:count 11} .str.255: ref;

axiom .str.255 == $sub.ref(0, 324795);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 325827);

const {:count 3} .str.1.538: ref;

axiom .str.1.538 == $sub.ref(0, 326854);

const {:count 14} .str.539: ref;

axiom .str.539 == $sub.ref(0, 327892);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 328920);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 329952);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 330984);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const isert_setup_np: ref;

axiom isert_setup_np == $sub.ref(0, 332016);

procedure isert_setup_np($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation isert_setup_np($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i8: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := kzalloc(384, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} sema_init($p9, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} __mutex_init($p10, .str.199, $p2);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} INIT_LIST_HEAD($p11);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(288, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} init_completion($p12);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(264, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 8} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p15, $p16, 128, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p17 := isert_setup_id($p4);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i19 := IS_ERR($p18);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 11} {:cexpr "tmp___1"} boogie_si_record_i8($i20);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p17);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p3);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p17);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i23 := PTR_ERR($p22);
    call {:si_unique_call 13} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    call {:si_unique_call 14} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} kfree($p28);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} vslice_dummy_var_56 := printk.ref.ref(.str.197, .str.198);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const isert_accept_np: ref;

axiom isert_accept_np == $sub.ref(0, 333048);

procedure isert_accept_np($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation isert_accept_np($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i8: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i6 := down_interruptible($p5);
    call {:si_unique_call 17} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p23, $p24, $p25, $i26, $i27, $p28, $i29, $i30 := isert_accept_np_loop_$bb4($p0, $p4, $p5, $p9, $p10, $i11, $i12, $p23, $p24, $p25, $i26, $i27, $p28, $i29, $i30);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(88, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} spin_lock_bh($p9);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(12, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 2);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(88, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} spin_unlock_bh($p23);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} mutex_lock_nested($p24, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i26 := list_empty($p25);
    call {:si_unique_call 26} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(272, 1)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref($sub.ref(0, 1120), 2168));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref($sub.ref(0, 1120), 2168)), $mul.ref(1120, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} list_del_init($p36);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} mutex_unlock($p37);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p35);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p34, $mul.ref($sub.ref(0, 1120), 2168)), $mul.ref(1112, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} isert_set_conn_info($p0, $p1, $p35);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i41 := $M.1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 2);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 34} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_58 := printk.ref.ref.ref(.str.211, .str.210, $p35);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} mutex_unlock($p28);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i29 := down_interruptible($p5);
    call {:si_unique_call 29} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16_dummy;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb6;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(88, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} spin_unlock_bh($p13);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 2);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 21} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb6;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(12, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_57 := printk.ref.ref.i32(.str.209, .str.210, $i21);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const isert_free_np: ref;

axiom isert_free_np == $sub.ref(0, 334080);

procedure isert_free_np($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.12, $M.14, $M.16;



implementation isert_free_np($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p36: ref;
  var $p37: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} mutex_lock_nested($p10, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i12 := list_empty($p11);
    call {:si_unique_call 39} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} mutex_unlock($p55);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p3);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} kfree($p57);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 1);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 41} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(272, 1)), $mul.ref(0, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 1120), 2168));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p24, $mul.ref($sub.ref(0, 1120), 2168)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 1120), 2168));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 1120), 2168)), $mul.ref(1120, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i32, $i34);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p36, $p37 := $p30, $p25;
    goto $bb12;

  $bb12:
    call $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p36, $p37, vslice_dummy_var_60 := isert_free_np_loop_$bb12($i34, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p36, $p37, vslice_dummy_var_60);
    goto $bb12_last;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $M.1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, 1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 44} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} isert_connect_release($p37);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 2168)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref($sub.ref(0, 1120), 2168));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p36, $mul.ref(0, 2168)), $mul.ref(1120, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i34);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p36, $p37 := $p51, $p36;
    goto $bb17_dummy;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p37, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_60 := printk.ref.ref.ref.i32(.str.230, .str.229, $p37, $i45);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_59 := printk.ref.ref(.str.228, .str.229);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} rdma_destroy_id($p9);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_166;
}



const isert_wait_conn: ref;

axiom isert_wait_conn == $sub.ref(0, 335112);

procedure isert_wait_conn($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_wait_conn($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 50} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(1592, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} mutex_lock_nested($p11, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} isert_conn_terminate($p3);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(1592, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} mutex_unlock($p16);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} isert_wait4cmds($p0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} isert_wait4flush($p3);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} isert_wait4logout($p3);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p17 := $M.2;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(2048, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_62 := queue_work($p17, $p18);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(1592, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} mutex_unlock($p15);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_61 := printk.ref.ref.ref(.str.246, .str.247, $p3);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_free_conn: ref;

axiom isert_free_conn == $sub.ref(0, 336144);

procedure isert_free_conn($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.38, $M.39, assertsPassed, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.33;



implementation isert_free_conn($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} isert_wait4flush($p3);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} isert_put_conn($p3);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const isert_get_login_rx: ref;

axiom isert_get_login_rx == $sub.ref(0, 337176);

procedure isert_get_login_rx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_get_login_rx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i16: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 63} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2168)), $mul.ref(1232, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i13 := wait_for_completion_interruptible($p12);
    call {:si_unique_call 66} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2168)), $mul.ref(1232, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} reinit_completion($p17);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} isert_rx_login_req($p4);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i22 := $M.1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 71} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 2168)), $mul.ref(1136, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i30 := wait_for_completion_interruptible($p29);
    call {:si_unique_call 74} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $M.1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, 1);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 76} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_66 := printk.ref.ref.ref(.str.206, .str.203, $p39);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb6;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vslice_dummy_var_65 := printk.ref.ref.ref(.str.205, .str.203, $p0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_64 := printk.ref.ref.ref(.str.204, .str.203, $p4);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_63 := printk.ref.ref.ref(.str.202, .str.203, $p4);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_login_tx: ref;

axiom isert_put_login_tx == $sub.ref(0, 338208);

procedure isert_put_login_tx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_put_login_tx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i67: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} {:cexpr "isert_put_login_tx:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1328, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} isert_create_send_desc($p5, $0.ref, $p10);
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1328, 1)), $mul.ref(32, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(84, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 80} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p12, $p14, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_67 := isert_init_tx_hdrs($p5, $p10);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i2, 0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i77 := isert_post_send($p5, $p10);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 95} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  $bb30:
    assume $i78 == 1;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i67 := $i77;
    goto $bb15;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(7, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i75 := isert_rdma_post_recvl($p5);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 97} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i76 == 1;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i67 := $i75;
    goto $bb15;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i50 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2424, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1280)), $mul.ref(1256, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 1244)), $mul.ref(1241, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i68 := isert_alloc_rx_descriptors($p5);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 89} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i70 := isert_post_recv($p5, 32);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 91} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1592, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} mutex_lock_nested($p72, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 2);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1592, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} mutex_unlock($p74);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i71 == 1;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i67 := $i70;
    goto $bb15;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i69 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i67 := $i68;
    goto $bb15;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i58 == 1;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb10;

  $bb11:
    assume $i63 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i64 := isert_conn_create_fastreg_pool($p5);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 86} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i65 == 1;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_68 := printk.ref.ref.ref(.str.214, .str.215, $p5);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i67 := $i64;
    goto $bb15;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1328, 1)), $mul.ref(96, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(64, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i2);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ib_dma_sync_single_for_cpu($p9, $i21, $i22, 1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(40, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 83} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p24, $p26, $i27, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(64, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i2);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ib_dma_sync_single_for_device($p9, $i29, $i30, 1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(64, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p18, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i2);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    $p42 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(1328, 1)), $mul.ref(128, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 2);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_immediate_queue: ref;

axiom isert_immediate_queue == $sub.ref(0, 339240);

procedure isert_immediate_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_immediate_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    call {:si_unique_call 98} {:cexpr "isert_immediate_queue:arg:state"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 38);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_69 := printk.ref.ref.i32(.str.207, .str.208, $i2);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i4 := isert_put_nopin($p1, $p0, 0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 100} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb4;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const isert_response_queue: ref;

axiom isert_response_queue == $sub.ref(0, 340272);

procedure isert_response_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_response_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i20: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} {:cexpr "isert_response_queue:arg:state"} boogie_si_record_i32($i2);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 29);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 34);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 36);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 36);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} vslice_dummy_var_70 := printk.ref.ref.i32(.str.178, .str.179, $i2);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i24 := isert_put_text_rsp($p1, $p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 104} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb28;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 34);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i22 := isert_put_tm_rsp($p1, $p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 106} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb28;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i25 := isert_put_response($p0, $p1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 108} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb28;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i23 := isert_put_reject($p1, $p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 110} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb28;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i21 := isert_put_nopin($p1, $p0, 1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 112} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb28;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i2, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i17 := isert_put_logout_rsp($p1, $p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 114} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb28;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 2168)), $mul.ref(2160, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 1);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const isert_get_dataout: ref;

axiom isert_get_dataout == $sub.ref(0, 341304);

procedure isert_get_dataout($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_get_dataout($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i30: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 117} {:cexpr "isert_get_dataout:arg:recovery"} boogie_si_record_i1($i2);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p5 := iscsit_priv_cmd($p1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 672)), $mul.ref(304, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 2);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 120} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p24 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 3);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref(0, 312)), $mul.ref(296, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 122} $i27 := devirtbounce($p26, $p0, $p1, $p7);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 123} {:cexpr "rc"} boogie_si_record_i32($i27);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i35 := ib_post_send($p32, $p34, $p3);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 126} {:cexpr "rc"} boogie_si_record_i32($i35);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 131} {:cexpr "tmp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_74 := printk.ref.ref.ref(.str.237, .str.234, $p6);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i37 := $M.1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 128} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_73 := printk.ref.ref(.str.236, .str.234);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_72 := printk.ref.ref.ref(.str.235, .str.234, $p6);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb6;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(48, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_71 := printk.ref.ref.ref.i32.i32(.str.233, .str.234, $p6, $i20, $i22);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_datain: ref;

axiom isert_put_datain == $sub.ref(0, 342336);

procedure isert_put_datain($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_put_datain($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i63: i1;
  var $i64: i8;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $i27: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p4 := iscsit_priv_cmd($p1);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i12 := $M.1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 2);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 136} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 2);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(296, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 138} $i24 := devirtbounce($p23, $p0, $p1, $p6);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 139} {:cexpr "rc"} boogie_si_record_i32($i24);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i28 := isert_prot_cmd($p9, $p3);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 142} {:cexpr "tmp___1"} boogie_si_record_i8($i29);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p9, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    $p52 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i54 := ib_post_send($p51, $p53, $p2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 148} {:cexpr "rc"} boogie_si_record_i32($i54);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i63 := isert_prot_cmd($p9, $p3);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i63);
    call {:si_unique_call 153} {:cexpr "tmp___6"} boogie_si_record_i8($i64);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i67 == 1);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i75 := $M.1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i75, 2);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 157} {:cexpr "tmp___5"} boogie_si_record_i64($i79);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_80 := printk.ref.ref.ref(.str.245, .str.242, $p5);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i68 := $M.1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, 2);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 155} {:cexpr "tmp___4"} boogie_si_record_i64($i72);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i73 == 1;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_79 := printk.ref.ref.ref(.str.244, .str.242, $p5);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i65 == 1;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb22;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i56 := $M.1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 150} {:cexpr "tmp___3"} boogie_si_record_i64($i60);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i61 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_78 := printk.ref.ref(.str.243, .str.242);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} isert_create_send_desc($p9, $p5, $p33);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} iscsit_build_rsp_pdu($p1, $p0, 1, $p36);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} vslice_dummy_var_77 := isert_init_tx_hdrs($p9, $p37);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} isert_init_send_wr($p9, $p5, $p40);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p42);
    $p46 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(56, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    $p49 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(56, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb10;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_76 := printk.ref.ref.ref(.str.235, .str.242, $p5);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i27 := $i24;
    goto $bb6;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(48, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_75 := printk.ref.ref.ref.i32(.str.241, .str.242, $p5, $i19);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_response: ref;

axiom isert_put_response == $sub.ref(0, 343368);

procedure isert_put_response($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_put_response($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p52: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p60: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $p68: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i8;
  var $p74: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $i104: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p2 := iscsit_priv_cmd($p1);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} isert_create_send_desc($p6, $p3, $p12);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} iscsit_build_rsp_pdu($p1, $p0, 1, $p11);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_81 := isert_init_tx_hdrs($p6, $p13);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(72, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} isert_init_send_wr($p6, $p3, $p8);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i97 := $M.1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i98 := $sgt.i32($i97, 2);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i32($i98);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 170} {:cexpr "tmp___0"} boogie_si_record_i64($i101);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i104 := isert_post_response($p6, $p3);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 173} {:cexpr "tmp___1"} boogie_si_record_i32($i104);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $r := $i104;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i102 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_82 := printk.ref.ref(.str.231, .str.232);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(40, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 2);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(40, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 4);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(96, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(4, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(1744, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} put_unaligned_be16($i42, $p44);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(4, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 2);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(4, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i50);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(4, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, $i56);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 3);
    call {:si_unique_call 165} {:cexpr "padding"} boogie_si_record_i32($i58);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(4, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i65 := $ashr.i32($i64, 8);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $i66);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(4, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i16.i8($i71);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i72);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(4, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, $i58);
    call {:si_unique_call 166} {:cexpr "pdu_len"} boogie_si_record_i32($i79);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(1744, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i79);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i83 := ib_dma_map_single($p33, $p81, $i82, 1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i83);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(32, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i79);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p36, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i87);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p36, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i79);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p31, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p36, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(128, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 2);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb5;
}



const isert_aborted_task: ref;

axiom isert_aborted_task == $sub.ref(0, 344400);

procedure isert_aborted_task($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_aborted_task($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p2 := iscsit_priv_cmd($p1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} spin_lock_bh($p9);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i11 := list_empty($p10);
    call {:si_unique_call 177} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} spin_unlock_bh($p14);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(160, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 181} devirtbounce.1($p19, $p3, $p6);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} iscsit_stop_dataout_timer($p1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} list_del_init($p13);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_get_sup_prot_ops: ref;

axiom isert_get_sup_prot_ops == $sub.ref(0, 345432);

procedure isert_get_sup_prot_ops($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_get_sup_prot_ops($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i24: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2408, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2896)), $mul.ref(1752, 1)), $mul.ref(40, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 186} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(16, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_84 := printk.ref.ref.ref(.str.240, .str.239, $p3);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 312)), $mul.ref(4, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 183} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2168)), $mul.ref(16, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 1);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i24 := 63;
    goto $bb8;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} vslice_dummy_var_83 := printk.ref.ref.ref(.str.238, .str.239, $p3);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 346464);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 189} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 347496);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 190} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 192} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 193} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 194} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 195} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 1} true;
    call {:si_unique_call 196} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 197} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64.i32($p0: ref, p.1: ref, p.2: i32, p.3: i64, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64.i32($p0: ref, p.1: ref, p.2: i32, p.3: i64, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 198} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i32.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i32.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 200} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 201} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 202} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 206} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 207} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 210} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 1} true;
    call {:si_unique_call 212} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 213} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 214} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 215} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 1} true;
    call {:si_unique_call 216} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 217} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 219} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 1} true;
    call {:si_unique_call 220} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 221} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb17:
    assume {:verifier.code 1} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 223} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 224} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 225} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb19:
    assume {:verifier.code 1} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 226} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 227} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i64.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i64, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i64.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i64, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb20:
    assume {:verifier.code 1} true;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 228} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



procedure printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb22:
    assume {:verifier.code 1} true;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb23:
    assume {:verifier.code 1} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32);



procedure printk.ref.ref.ref.i32.i32.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: ref) returns ($r: i32);



const iscsit_priv_cmd: ref;

axiom iscsit_priv_cmd == $sub.ref(0, 348528);

procedure iscsit_priv_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iscsit_priv_cmd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 349560);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} ldv_spin_lock();
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} ldv_spin_lock_bh_6($p0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 350592);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 351624);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} __list_del_entry($p0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} INIT_LIST_HEAD($p0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 352656);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} ldv_spin_unlock();
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} ldv_spin_unlock_bh_10($p0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    return;
}



const iscsit_stop_dataout_timer: ref;

axiom iscsit_stop_dataout_timer == $sub.ref(0, 353688);

procedure iscsit_stop_dataout_timer($p0: ref);
  free requires assertsPassed;



implementation iscsit_stop_dataout_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 354720);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 240} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_10: ref;

axiom ldv_spin_unlock_bh_10 == $sub.ref(0, 355752);

procedure ldv_spin_unlock_bh_10($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_bh_10($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} _raw_spin_unlock_bh($p2);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 356784);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 357816);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 358848);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 359880);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 242} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_6: ref;

axiom ldv_spin_lock_bh_6 == $sub.ref(0, 360912);

procedure ldv_spin_lock_bh_6($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_bh_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} _raw_spin_lock_bh($p2);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 361944);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    return;
}



const isert_create_send_desc: ref;

axiom isert_create_send_desc == $sub.ref(0, 362976);

procedure isert_create_send_desc($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_create_send_desc($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ib_dma_sync_single_for_cpu($p6, $i8, 76, 1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 245} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p10, 0, 28, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 16);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i18, $i22);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i31 := $M.1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 2);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 247} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i36 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_85 := printk.ref.ref.ref(.str.182, .str.183, $p2);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const iscsit_build_rsp_pdu: ref;

axiom iscsit_build_rsp_pdu == $sub.ref(0, 364008);

procedure iscsit_build_rsp_pdu($p0: ref, $p1: ref, $i2: i1, $p3: ref);
  free requires assertsPassed;



implementation iscsit_build_rsp_pdu($p0: ref, $p1: ref, $i2: i1, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} {:cexpr "iscsit_build_rsp_pdu:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    return;
}



const isert_init_tx_hdrs: ref;

axiom isert_init_tx_hdrs == $sub.ref(0, 365040);

procedure isert_init_tx_hdrs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_init_tx_hdrs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p36: ref;
  var $i37: i64;
  var $p40: ref;
  var $i41: i32;
  var $p44: ref;
  var $i45: i32;
  var $i11: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i7 := ib_dma_map_single($p5, $p6, 76, 1);
    call {:si_unique_call 251} {:cexpr "dma_addr"} boogie_si_record_i64($i7);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i8 := ib_dma_mapping_error($p5, $i7);
    call {:si_unique_call 253} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i7);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i14);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 76);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i24);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 2);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 256} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(96, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_87 := printk.ref.ref.i64.i32.i32(.str.186, .str.185, $i37, $i41, $i45);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_86 := printk.ref.ref(.str.184, .str.185);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const put_unaligned_be16: ref;

axiom put_unaligned_be16 == $sub.ref(0, 366072);

procedure put_unaligned_be16($i0: i16, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_be16($i0: i16, $p1: ref)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "put_unaligned_be16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i4 := __fswab16($i3);
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i4);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    return;
}



const ib_dma_map_single: ref;

axiom ib_dma_map_single == $sub.ref(0, 367104);

procedure ib_dma_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation ib_dma_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "ib_dma_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 262} {:cexpr "ib_dma_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i16 := dma_map_single_attrs($p15, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 266} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 263} $i12 := devirtbounce.2($p11, $p0, $p1, $i2, $i3);
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const isert_init_send_wr: ref;

axiom isert_init_send_wr == $sub.ref(0, 368136);

procedure isert_init_send_wr($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_init_send_wr($p0: ref, $p1: ref, $p2: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 2);
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(96, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p10);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(128, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 2);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    return;
}



const isert_post_response: ref;

axiom isert_post_response == $sub.ref(0, 369168);

procedure isert_post_response($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_post_response($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i7 := ib_post_send($p4, $p6, $p2);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 269} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vslice_dummy_var_88 := printk.ref.ref.i32(.str.187, .str.188, $i7);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const ib_post_send: ref;

axiom ib_post_send == $sub.ref(0, 370200);

procedure ib_post_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.38, $M.39, $CurrAddr, assertsPassed;



implementation ib_post_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2496)), $mul.ref(624, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 271} $i7 := devirtbounce.3($p6, $p0, $p1, $p2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 272} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 371232);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 274} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p5 := get_dma_ops($p0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 278} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 280} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i14 := __phys_addr($i13);
    call {:si_unique_call 283} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 284} $i21 := devirtbounce.5($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 285} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i23 := __phys_addr($i22);
    call {:si_unique_call 287} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 281} devirtbounce.4(0, .str.24, 19, 12);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 372264);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 290} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 373296);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 374328);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 375360);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 294} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 295} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 376392);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 297} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 298} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 299} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 300} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 377424);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ib_dma_mapping_error: ref;

axiom ib_dma_mapping_error == $sub.ref(0, 378456);

procedure ib_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "ib_dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i14 := dma_mapping_error($p13, $i1);
    call {:si_unique_call 306} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 303} $i10 := devirtbounce.6($p9, $p0, $i1);
    call {:si_unique_call 304} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 379488);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p2 := get_dma_ops($p0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 310} $i9 := devirtbounce.7($p8, $p0, $i1);
    call {:si_unique_call 311} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 380520);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    return;
}



const ib_dma_sync_single_for_cpu: ref;

axiom ib_dma_sync_single_for_cpu == $sub.ref(0, 381552);

procedure ib_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "ib_dma_sync_single_for_cpu:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 314} {:cexpr "ib_dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 315} {:cexpr "ib_dma_sync_single_for_cpu:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} dma_sync_single_for_cpu($p13, $i1, $i2, $i3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 316} devirtbounce.8($p11, $p0, $i1, $i2, $i3);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 382584);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const dma_sync_single_for_cpu: ref;

axiom dma_sync_single_for_cpu == $sub.ref(0, 383616);

procedure dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} {:cexpr "dma_sync_single_for_cpu:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 319} {:cexpr "dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 320} {:cexpr "dma_sync_single_for_cpu:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $p4 := get_dma_ops($p0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 323} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 325} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} debug_dma_sync_single_for_cpu($p0, $i1, $i2, $i3);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 327} devirtbounce.9($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 326} devirtbounce.4(0, .str.24, 108, 12);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_cpu_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_sync_single_for_cpu: ref;

axiom debug_dma_sync_single_for_cpu == $sub.ref(0, 384648);

procedure debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 330} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 331} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    return;
}



const isert_prot_cmd: ref;

axiom isert_prot_cmd == $sub.ref(0, 385680);

procedure isert_prot_cmd($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation isert_prot_cmd($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(16, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(780, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;
}



const isert_put_logout_rsp: ref;

axiom isert_put_logout_rsp == $sub.ref(0, 386712);

procedure isert_put_logout_rsp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_put_logout_rsp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i23: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p2 := iscsit_priv_cmd($p0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} isert_create_send_desc($p6, $p3, $p9);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_89 := iscsit_build_logout_rsp($p0, $p1, $p12);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_90 := isert_init_tx_hdrs($p6, $p14);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} isert_init_send_wr($p6, $p3, $p8);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 2);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 338} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i23 := isert_post_response($p6, $p3);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 341} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_91 := printk.ref.ref.ref(.str.180, .str.181, $p6);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_nopin: ref;

axiom isert_put_nopin == $sub.ref(0, 387744);

procedure isert_put_nopin($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_put_nopin($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i25: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 342} {:cexpr "isert_put_nopin:arg:nopout_response"} boogie_si_record_i1($i2);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p4 := iscsit_priv_cmd($p0);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} isert_create_send_desc($p8, $p5, $p11);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i3);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} iscsit_build_nopin_rsp($p0, $p1, $p14, $i15);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_92 := isert_init_tx_hdrs($p8, $p16);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} isert_init_send_wr($p8, $p5, $p10);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 2);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 349} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i25 := isert_post_response($p8, $p5);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 352} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_93 := printk.ref.ref.ref(.str.189, .str.190, $p8);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_tm_rsp: ref;

axiom isert_put_tm_rsp == $sub.ref(0, 388776);

procedure isert_put_tm_rsp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_put_tm_rsp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i22: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p2 := iscsit_priv_cmd($p0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} isert_create_send_desc($p6, $p3, $p9);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} iscsit_build_task_mgt_rsp($p0, $p1, $p12);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_94 := isert_init_tx_hdrs($p6, $p13);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} isert_init_send_wr($p6, $p3, $p8);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i15 := $M.1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 2);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 359} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i22 := isert_post_response($p6, $p3);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 362} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_95 := printk.ref.ref.ref(.str.191, .str.192, $p6);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_reject: ref;

axiom isert_put_reject == $sub.ref(0, 389808);

procedure isert_put_reject($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_put_reject($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i52: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p2 := iscsit_priv_cmd($p0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(96, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} isert_create_send_desc($p6, $p3, $p20);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} iscsit_build_reject($p0, $p1, $p19);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_96 := isert_init_tx_hdrs($p6, $p21);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 48);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1880)), $mul.ref(144, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i31 := ib_dma_map_single($p12, $p30, 48, 1);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(32, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 48);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p15, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 48);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p15, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(128, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 2);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} isert_init_send_wr($p6, $p3, $p8);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i45 := $M.1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i45, 2);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 370} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i52 := isert_post_response($p6, $p3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 373} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i50 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_97 := printk.ref.ref.ref(.str.193, .str.194, $p6);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_text_rsp: ref;

axiom isert_put_text_rsp == $sub.ref(0, 390840);

procedure isert_put_text_rsp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_put_text_rsp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i51: i32;
  var $i15: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p2 := iscsit_priv_cmd($p0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} isert_create_send_desc($p6, $p3, $p12);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i13 := iscsit_build_text_rsp($p0, $p1, $p11, 5);
    call {:si_unique_call 377} {:cexpr "rc"} boogie_si_record_i32($i13);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_98 := isert_init_tx_hdrs($p6, $p16);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i13, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} isert_init_send_wr($p6, $p3, $p8);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 2);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 382} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i51 := isert_post_response($p6, $p3);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 385} {:cexpr "tmp___1"} boogie_si_record_i32($i51);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i15 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_99 := printk.ref.ref.ref(.str.195, .str.196, $p6);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(96, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1880)), $mul.ref(144, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i13);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i30 := ib_dma_map_single($p22, $p28, $i29, 1);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i30);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(32, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i13);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p25, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p25, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i13);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p25, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(128, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 2);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb3;
}



const iscsit_build_text_rsp: ref;

axiom iscsit_build_text_rsp == $sub.ref(0, 391872);

procedure iscsit_build_text_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_build_text_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 386} {:cexpr "iscsit_build_text_rsp:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 387} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 388} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const iscsit_build_reject: ref;

axiom iscsit_build_reject == $sub.ref(0, 392904);

procedure iscsit_build_reject($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation iscsit_build_reject($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    return;
}



const iscsit_build_task_mgt_rsp: ref;

axiom iscsit_build_task_mgt_rsp == $sub.ref(0, 393936);

procedure iscsit_build_task_mgt_rsp($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation iscsit_build_task_mgt_rsp($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    return;
}



const iscsit_build_nopin_rsp: ref;

axiom iscsit_build_nopin_rsp == $sub.ref(0, 394968);

procedure iscsit_build_nopin_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i1);
  free requires assertsPassed;



implementation iscsit_build_nopin_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "iscsit_build_nopin_rsp:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    return;
}



const iscsit_build_logout_rsp: ref;

axiom iscsit_build_logout_rsp == $sub.ref(0, 396000);

procedure iscsit_build_logout_rsp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_build_logout_rsp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 391} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 397032);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ib_dma_sync_single_for_device: ref;

axiom ib_dma_sync_single_for_device == $sub.ref(0, 398064);

procedure ib_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "ib_dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 393} {:cexpr "ib_dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 394} {:cexpr "ib_dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} dma_sync_single_for_device($p13, $i1, $i2, $i3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 395} devirtbounce.8($p11, $p0, $i1, $i2, $i3);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_conn_create_fastreg_pool: ref;

axiom isert_conn_create_fastreg_pool == $sub.ref(0, 399096);

procedure isert_conn_create_fastreg_pool($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation isert_conn_create_fastreg_pool($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i19: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i25: i32;
  var $i53: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2480)), $mul.ref(2424, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1280)), $mul.ref(1264, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1432)), $mul.ref(24, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1304)), $mul.ref(228, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 397} {:cexpr "__max2"} boogie_si_record_i32($i12);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32(16, $i12);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 4);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 2);
    call {:si_unique_call 398} {:cexpr "tag_num"} boogie_si_record_i32($i16);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32(0, $i16);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 2);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 409} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_102 := printk.ref.ref.ref.i32(.str.219, .str.217, $p0, $i51);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb7;

  $bb7:
    call $p20, $p21, $i22, $i23, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $p36, $p37, $p38, $i39, $i40, $p41, $i42, $i43, $i19 := isert_conn_create_fastreg_pool_loop_$bb7($p0, $p2, $i16, $p20, $p21, $i22, $i23, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $p36, $p37, $p38, $i39, $i40, $p41, $i42, $i43, $i19);
    goto $bb7_last;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p20 := kzalloc(48, 208);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i30 := isert_create_fr_desc($p27, $p29, $p21);
    call {:si_unique_call 403} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p32, $i33 := $p20, $i30;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p21, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1952, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} list_add_tail($p36, $p37);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i19, 1);
    call {:si_unique_call 407} {:cexpr "i"} boogie_si_record_i32($i42);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, $i16);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i42;
    goto $bb16_dummy;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} vslice_dummy_var_101 := printk.ref.ref.i32(.str.218, .str.217, $i33);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p32);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} kfree($p35);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i25 := $i33;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} isert_conn_free_fastreg_pool($p0);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i53 := $i25;
    goto $bb22;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_100 := printk.ref.ref(.str.216, .str.217);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb11;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i14 := 16;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1514;
}



const isert_alloc_rx_descriptors: ref;

axiom isert_alloc_rx_descriptors == $sub.ref(0, 400128);

procedure isert_alloc_rx_descriptors($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation isert_alloc_rx_descriptors($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $p41: ref;
  var $i42: i1;
  var $i36: i32;
  var $p37: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i32: i32;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p139: ref;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p156: ref;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i64;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $p181: ref;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $p190: ref;
  var $i191: i64;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $p198: ref;
  var $i199: i64;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p207: ref;
  var $i208: i64;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $i216: i64;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $p224: ref;
  var $i225: i64;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $p232: ref;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $i236: i64;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $p241: ref;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $p249: ref;
  var $i250: i64;
  var $p251: ref;
  var $p252: ref;
  var $i253: i64;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $p258: ref;
  var $i259: i64;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i32;
  var $p266: ref;
  var $i267: i64;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $p275: ref;
  var $i276: i64;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i282: i32;
  var $p283: ref;
  var $i284: i64;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $p292: ref;
  var $i293: i64;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i32;
  var $p300: ref;
  var $i301: i64;
  var $p302: ref;
  var $p303: ref;
  var $i304: i64;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $p309: ref;
  var $i310: i64;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i32;
  var $p317: ref;
  var $i318: i64;
  var $p319: ref;
  var $p320: ref;
  var $i321: i64;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $p326: ref;
  var $i327: i64;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $i333: i32;
  var $p334: ref;
  var $i335: i64;
  var $p336: ref;
  var $p337: ref;
  var $i338: i64;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $p343: ref;
  var $i344: i64;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $p351: ref;
  var $i352: i64;
  var $p353: ref;
  var $p354: ref;
  var $i355: i64;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $p360: ref;
  var $i361: i64;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i32;
  var $p368: ref;
  var $i369: i64;
  var $p370: ref;
  var $p371: ref;
  var $i372: i64;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $p377: ref;
  var $i378: i64;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i32;
  var $p385: ref;
  var $i386: i64;
  var $p387: ref;
  var $p388: ref;
  var $i389: i64;
  var $i390: i32;
  var $i391: i1;
  var $p392: ref;
  var $p394: ref;
  var $i395: i64;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $i401: i32;
  var $p402: ref;
  var $i403: i64;
  var $p404: ref;
  var $p405: ref;
  var $i406: i64;
  var $i407: i32;
  var $i408: i1;
  var $p409: ref;
  var $p411: ref;
  var $i412: i64;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $i418: i32;
  var $p419: ref;
  var $i420: i64;
  var $p421: ref;
  var $p422: ref;
  var $i423: i64;
  var $i424: i32;
  var $i425: i1;
  var $p426: ref;
  var $p428: ref;
  var $i429: i64;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i32;
  var $p436: ref;
  var $i437: i64;
  var $p438: ref;
  var $p439: ref;
  var $i440: i64;
  var $i441: i32;
  var $i442: i1;
  var $p443: ref;
  var $p445: ref;
  var $i446: i64;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $i452: i32;
  var $p453: ref;
  var $i454: i64;
  var $p455: ref;
  var $p456: ref;
  var $i457: i64;
  var $i458: i32;
  var $i459: i1;
  var $p460: ref;
  var $p462: ref;
  var $i463: i64;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $i469: i32;
  var $p470: ref;
  var $i471: i64;
  var $p472: ref;
  var $p473: ref;
  var $i474: i64;
  var $i475: i32;
  var $i476: i1;
  var $p477: ref;
  var $p479: ref;
  var $i480: i64;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $i486: i32;
  var $p487: ref;
  var $i488: i64;
  var $p489: ref;
  var $p490: ref;
  var $i491: i64;
  var $i492: i32;
  var $i493: i1;
  var $p494: ref;
  var $p496: ref;
  var $i497: i64;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $i503: i32;
  var $p504: ref;
  var $i505: i64;
  var $p506: ref;
  var $p507: ref;
  var $i508: i64;
  var $i509: i32;
  var $i510: i1;
  var $p511: ref;
  var $p513: ref;
  var $i514: i64;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i32;
  var $p521: ref;
  var $i522: i64;
  var $p523: ref;
  var $p524: ref;
  var $i525: i64;
  var $i526: i32;
  var $i527: i1;
  var $p528: ref;
  var $p530: ref;
  var $i531: i64;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $i537: i32;
  var $p538: ref;
  var $i539: i64;
  var $p540: ref;
  var $p541: ref;
  var $i542: i64;
  var $i543: i32;
  var $i544: i1;
  var $p545: ref;
  var $p547: ref;
  var $i548: i64;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $i554: i32;
  var $p555: ref;
  var $i556: i64;
  var $p557: ref;
  var $p558: ref;
  var $i559: i64;
  var $i560: i32;
  var $i561: i1;
  var $p562: ref;
  var $p564: ref;
  var $i565: i64;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $i571: i32;
  var $p572: ref;
  var $i573: i64;
  var $p574: ref;
  var $p575: ref;
  var $i576: i64;
  var $i577: i32;
  var $i578: i1;
  var $p579: ref;
  var $p581: ref;
  var $i582: i64;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $i588: i32;
  var $p589: ref;
  var $i590: i64;
  var $p591: ref;
  var $p592: ref;
  var $i593: i64;
  var $i594: i32;
  var $i595: i1;
  var $p596: ref;
  var $p598: ref;
  var $i599: i64;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $i605: i32;
  var $p606: ref;
  var $i607: i64;
  var $p608: ref;
  var $p609: ref;
  var $i610: i64;
  var $i611: i32;
  var $i612: i1;
  var $p613: ref;
  var $p615: ref;
  var $i616: i64;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $i622: i32;
  var $p623: ref;
  var $i624: i64;
  var $p625: ref;
  var $p626: ref;
  var $i627: i64;
  var $i628: i32;
  var $i629: i1;
  var $p630: ref;
  var $p632: ref;
  var $i633: i64;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $p638: ref;
  var $i639: i32;
  var $p640: ref;
  var $i641: i64;
  var $p642: ref;
  var $p643: ref;
  var $i644: i64;
  var $i645: i32;
  var $i646: i1;
  var $p647: ref;
  var $p649: ref;
  var $i650: i64;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $p655: ref;
  var $i656: i32;
  var $p657: ref;
  var $i658: i64;
  var $p659: ref;
  var $p660: ref;
  var $i661: i64;
  var $i662: i32;
  var $i663: i1;
  var $p664: ref;
  var $p666: ref;
  var $i667: i64;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $i673: i32;
  var $p674: ref;
  var $i675: i64;
  var $p676: ref;
  var $p677: ref;
  var $i678: i64;
  var $i679: i32;
  var $i680: i1;
  var $p681: ref;
  var $p683: ref;
  var $i684: i64;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p688: ref;
  var $p689: ref;
  var $i690: i32;
  var $p691: ref;
  var $i692: i64;
  var $p693: ref;
  var $p694: ref;
  var $i695: i64;
  var $i696: i32;
  var $i697: i1;
  var $p698: ref;
  var $p700: ref;
  var $i701: i64;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $i707: i32;
  var $p708: ref;
  var $i709: i64;
  var $p710: ref;
  var $p711: ref;
  var $i712: i64;
  var $i713: i32;
  var $i714: i1;
  var $p715: ref;
  var $p717: ref;
  var $i718: i64;
  var $p719: ref;
  var $p720: ref;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $i724: i32;
  var $p725: ref;
  var $i726: i64;
  var $p727: ref;
  var $p728: ref;
  var $i729: i64;
  var $i730: i32;
  var $i731: i1;
  var $p732: ref;
  var $p734: ref;
  var $i735: i64;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $i741: i32;
  var $p742: ref;
  var $i743: i64;
  var $p744: ref;
  var $p745: ref;
  var $i746: i64;
  var $i747: i32;
  var $i748: i1;
  var $p749: ref;
  var $p751: ref;
  var $i752: i64;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $i758: i32;
  var $p759: ref;
  var $i760: i64;
  var $p761: ref;
  var $p762: ref;
  var $i763: i64;
  var $i764: i32;
  var $i765: i1;
  var $p766: ref;
  var $p768: ref;
  var $i769: i64;
  var $p770: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $i775: i32;
  var $p776: ref;
  var $i777: i64;
  var $p778: ref;
  var $p779: ref;
  var $i780: i64;
  var $i781: i32;
  var $i782: i1;
  var $p783: ref;
  var $p785: ref;
  var $i786: i64;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $i792: i32;
  var $p793: ref;
  var $i794: i64;
  var $p795: ref;
  var $p796: ref;
  var $i797: i64;
  var $i798: i32;
  var $i799: i1;
  var $p800: ref;
  var $p802: ref;
  var $i803: i64;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $i809: i32;
  var $p810: ref;
  var $i811: i64;
  var $p812: ref;
  var $p813: ref;
  var $i814: i64;
  var $i815: i32;
  var $i816: i1;
  var $p817: ref;
  var $p819: ref;
  var $i820: i64;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $p825: ref;
  var $i826: i32;
  var $p827: ref;
  var $i828: i64;
  var $p829: ref;
  var $p830: ref;
  var $i831: i64;
  var $i832: i32;
  var $i833: i1;
  var $p834: ref;
  var $p836: ref;
  var $i837: i64;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $i843: i32;
  var $p844: ref;
  var $i845: i64;
  var $p846: ref;
  var $p847: ref;
  var $i848: i64;
  var $i849: i32;
  var $i850: i1;
  var $p851: ref;
  var $p853: ref;
  var $i854: i64;
  var $p855: ref;
  var $p856: ref;
  var $p857: ref;
  var $p858: ref;
  var $p859: ref;
  var $i860: i32;
  var $p861: ref;
  var $i862: i64;
  var $p863: ref;
  var $p864: ref;
  var $i865: i64;
  var $i866: i32;
  var $i867: i1;
  var $p868: ref;
  var $p870: ref;
  var $i871: i64;
  var $p872: ref;
  var $p873: ref;
  var $p874: ref;
  var $p875: ref;
  var $p876: ref;
  var $i877: i32;
  var $p878: ref;
  var $i879: i64;
  var $p880: ref;
  var $p881: ref;
  var $i882: i64;
  var $i883: i32;
  var $i884: i1;
  var $p885: ref;
  var $p887: ref;
  var $i888: i64;
  var $p889: ref;
  var $p890: ref;
  var $p891: ref;
  var $p892: ref;
  var $p893: ref;
  var $i894: i32;
  var $p895: ref;
  var $i896: i64;
  var $p897: ref;
  var $p898: ref;
  var $i899: i64;
  var $i900: i32;
  var $i901: i1;
  var $p902: ref;
  var $p904: ref;
  var $i905: i64;
  var $p906: ref;
  var $p907: ref;
  var $p908: ref;
  var $p909: ref;
  var $p910: ref;
  var $i911: i32;
  var $p912: ref;
  var $i913: i64;
  var $p914: ref;
  var $p915: ref;
  var $i916: i64;
  var $i917: i32;
  var $i918: i1;
  var $p919: ref;
  var $p921: ref;
  var $i922: i64;
  var $p923: ref;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $i928: i32;
  var $p929: ref;
  var $i930: i64;
  var $p931: ref;
  var $p932: ref;
  var $i933: i64;
  var $i934: i32;
  var $i935: i1;
  var $p936: ref;
  var $p938: ref;
  var $i939: i64;
  var $p940: ref;
  var $p941: ref;
  var $p942: ref;
  var $p943: ref;
  var $p944: ref;
  var $i945: i32;
  var $p946: ref;
  var $i947: i64;
  var $p948: ref;
  var $p949: ref;
  var $i950: i64;
  var $i951: i32;
  var $i952: i1;
  var $p953: ref;
  var $p955: ref;
  var $i956: i64;
  var $p957: ref;
  var $p958: ref;
  var $p959: ref;
  var $p960: ref;
  var $p961: ref;
  var $i962: i32;
  var $p963: ref;
  var $i964: i64;
  var $p965: ref;
  var $p966: ref;
  var $i967: i64;
  var $i968: i32;
  var $i969: i1;
  var $p970: ref;
  var $p972: ref;
  var $i973: i64;
  var $p974: ref;
  var $p975: ref;
  var $p976: ref;
  var $p977: ref;
  var $p978: ref;
  var $i979: i32;
  var $p980: ref;
  var $i981: i64;
  var $p982: ref;
  var $p983: ref;
  var $i984: i64;
  var $i985: i32;
  var $i986: i1;
  var $p987: ref;
  var $p989: ref;
  var $i990: i64;
  var $p991: ref;
  var $p992: ref;
  var $p993: ref;
  var $p994: ref;
  var $p995: ref;
  var $i996: i32;
  var $p997: ref;
  var $i998: i64;
  var $p999: ref;
  var $p1000: ref;
  var $i1001: i64;
  var $i1002: i32;
  var $i1003: i1;
  var $p1004: ref;
  var $p1006: ref;
  var $i1007: i64;
  var $p1008: ref;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $i1013: i32;
  var $p1014: ref;
  var $i1015: i64;
  var $p1016: ref;
  var $p1017: ref;
  var $i1018: i64;
  var $i1019: i32;
  var $i1020: i1;
  var $p1021: ref;
  var $p1023: ref;
  var $i1024: i64;
  var $p1025: ref;
  var $p1026: ref;
  var $p1027: ref;
  var $p1028: ref;
  var $p1029: ref;
  var $i1030: i32;
  var $p1031: ref;
  var $i1032: i64;
  var $p1033: ref;
  var $p1034: ref;
  var $i1035: i64;
  var $i1036: i32;
  var $i1037: i1;
  var $p1038: ref;
  var $p1040: ref;
  var $i1041: i64;
  var $p1042: ref;
  var $p1043: ref;
  var $p1044: ref;
  var $p1045: ref;
  var $p1046: ref;
  var $i1047: i32;
  var $p1048: ref;
  var $i1049: i64;
  var $p1050: ref;
  var $p1051: ref;
  var $i1052: i64;
  var $i1053: i32;
  var $i1054: i1;
  var $p1055: ref;
  var $p1057: ref;
  var $i1058: i64;
  var $p1059: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $p1063: ref;
  var $i1064: i32;
  var $p1065: ref;
  var $i1066: i64;
  var $p1067: ref;
  var $p1068: ref;
  var $i1069: i64;
  var $i1070: i32;
  var $i1071: i1;
  var $p1072: ref;
  var $p1074: ref;
  var $i1075: i64;
  var $p1076: ref;
  var $p1077: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $i1081: i32;
  var $p1082: ref;
  var $i1083: i64;
  var $p1084: ref;
  var $p1085: ref;
  var $i1086: i64;
  var $i1087: i32;
  var $i1088: i1;
  var $p1089: ref;
  var $p1091: ref;
  var $i1092: i64;
  var $p1093: ref;
  var $p1094: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $p1097: ref;
  var $i1098: i32;
  var $p1099: ref;
  var $i1100: i64;
  var $p1101: ref;
  var $p1102: ref;
  var $i1103: i64;
  var $i1104: i32;
  var $i1105: i1;
  var $p1106: ref;
  var $p1108: ref;
  var $i1109: i64;
  var $p1110: ref;
  var $p1111: ref;
  var $p1112: ref;
  var $p1113: ref;
  var $p1114: ref;
  var $i1115: i32;
  var $p1116: ref;
  var $i1117: i64;
  var $p1118: ref;
  var $p1119: ref;
  var $i1120: i64;
  var $i1121: i32;
  var $i1122: i1;
  var $p1123: ref;
  var $p1125: ref;
  var $i1126: i64;
  var $p1127: ref;
  var $p1128: ref;
  var $p1129: ref;
  var $p1130: ref;
  var $p1131: ref;
  var $i1132: i32;
  var $p1133: ref;
  var $i1134: i64;
  var $p1135: ref;
  var $p1136: ref;
  var $i1137: i64;
  var $i1138: i32;
  var $i1139: i1;
  var $p1140: ref;
  var $p1142: ref;
  var $i1143: i64;
  var $p1144: ref;
  var $p1145: ref;
  var $p1146: ref;
  var $p1147: ref;
  var $p1148: ref;
  var $i1149: i32;
  var $p1150: ref;
  var $i1151: i64;
  var $p1152: ref;
  var $p1153: ref;
  var $i1154: i64;
  var $i1155: i32;
  var $i1156: i1;
  var $p1157: ref;
  var $p1159: ref;
  var $i1160: i64;
  var $p1161: ref;
  var $p1162: ref;
  var $p1163: ref;
  var $p1164: ref;
  var $p1165: ref;
  var $i1166: i32;
  var $p1167: ref;
  var $i1168: i64;
  var $p1169: ref;
  var $p1170: ref;
  var $i1171: i64;
  var $i1172: i32;
  var $i1173: i1;
  var $p1174: ref;
  var $p1176: ref;
  var $i1177: i64;
  var $p1178: ref;
  var $p1179: ref;
  var $p1180: ref;
  var $p1181: ref;
  var $p1182: ref;
  var $i1183: i32;
  var $p1184: ref;
  var $i1185: i64;
  var $p1186: ref;
  var $p1187: ref;
  var $i1188: i64;
  var $i1189: i32;
  var $i1190: i1;
  var $p1191: ref;
  var $p1193: ref;
  var $i1194: i64;
  var $p1195: ref;
  var $p1196: ref;
  var $p1197: ref;
  var $p1198: ref;
  var $p1199: ref;
  var $i1200: i32;
  var $p1201: ref;
  var $i1202: i64;
  var $p1203: ref;
  var $p1204: ref;
  var $i1205: i64;
  var $i1206: i32;
  var $i1207: i1;
  var $p1208: ref;
  var $p1210: ref;
  var $i1211: i64;
  var $p1212: ref;
  var $p1213: ref;
  var $p1214: ref;
  var $p1215: ref;
  var $p1216: ref;
  var $i1217: i32;
  var $p1218: ref;
  var $i1219: i64;
  var $p1220: ref;
  var $p1221: ref;
  var $i1222: i64;
  var $i1223: i32;
  var $i1224: i1;
  var $p1225: ref;
  var $p1227: ref;
  var $i1228: i64;
  var $p1229: ref;
  var $p1230: ref;
  var $p1231: ref;
  var $p1232: ref;
  var $p1233: ref;
  var $i1234: i32;
  var $p1235: ref;
  var $i1236: i64;
  var $p1237: ref;
  var $p1238: ref;
  var $i1239: i64;
  var $i1240: i32;
  var $i1241: i1;
  var $p1242: ref;
  var $p1244: ref;
  var $i1245: i64;
  var $p1246: ref;
  var $p1247: ref;
  var $p1248: ref;
  var $p1249: ref;
  var $p1250: ref;
  var $i1251: i32;
  var $p1252: ref;
  var $i1253: i64;
  var $p1254: ref;
  var $p1255: ref;
  var $i1256: i64;
  var $i1257: i32;
  var $i1258: i1;
  var $p1259: ref;
  var $p1261: ref;
  var $i1262: i64;
  var $p1263: ref;
  var $p1264: ref;
  var $p1265: ref;
  var $p1266: ref;
  var $p1267: ref;
  var $i1268: i32;
  var $p1269: ref;
  var $i1270: i64;
  var $p1271: ref;
  var $p1272: ref;
  var $i1273: i64;
  var $i1274: i32;
  var $i1275: i1;
  var $p1276: ref;
  var $p1278: ref;
  var $i1279: i64;
  var $p1280: ref;
  var $p1281: ref;
  var $p1282: ref;
  var $p1283: ref;
  var $p1284: ref;
  var $i1285: i32;
  var $p1286: ref;
  var $i1287: i64;
  var $p1288: ref;
  var $p1289: ref;
  var $i1290: i64;
  var $i1291: i32;
  var $i1292: i1;
  var $p1293: ref;
  var $p1295: ref;
  var $i1296: i64;
  var $p1297: ref;
  var $p1298: ref;
  var $p1299: ref;
  var $p1300: ref;
  var $p1301: ref;
  var $i1302: i32;
  var $p1303: ref;
  var $i1304: i64;
  var $p1305: ref;
  var $p1306: ref;
  var $i1307: i64;
  var $i1308: i32;
  var $i1309: i1;
  var $p1310: ref;
  var $p1312: ref;
  var $i1313: i64;
  var $p1314: ref;
  var $p1315: ref;
  var $p1316: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $i1319: i32;
  var $p1320: ref;
  var $i1321: i64;
  var $p1322: ref;
  var $p1323: ref;
  var $i1324: i64;
  var $i1325: i32;
  var $i1326: i1;
  var $p1327: ref;
  var $p1329: ref;
  var $i1330: i64;
  var $p1331: ref;
  var $p1332: ref;
  var $p1333: ref;
  var $p1334: ref;
  var $p1335: ref;
  var $i1336: i32;
  var $p1337: ref;
  var $i1338: i64;
  var $p1339: ref;
  var $p1340: ref;
  var $i1341: i64;
  var $i1342: i32;
  var $i1343: i1;
  var $p1344: ref;
  var $p1346: ref;
  var $i1347: i64;
  var $p1348: ref;
  var $p1349: ref;
  var $p1350: ref;
  var $p1351: ref;
  var $p1352: ref;
  var $i1353: i32;
  var $p1354: ref;
  var $i1355: i64;
  var $p1356: ref;
  var $p1357: ref;
  var $i1358: i64;
  var $i1359: i32;
  var $i1360: i1;
  var $p1361: ref;
  var $p1363: ref;
  var $i1364: i64;
  var $p1365: ref;
  var $p1366: ref;
  var $p1367: ref;
  var $p1368: ref;
  var $p1369: ref;
  var $i1370: i32;
  var $p1371: ref;
  var $i1372: i64;
  var $p1373: ref;
  var $p1374: ref;
  var $i1375: i64;
  var $i1376: i32;
  var $i1377: i1;
  var $p1378: ref;
  var $p1380: ref;
  var $i1381: i64;
  var $p1382: ref;
  var $p1383: ref;
  var $p1384: ref;
  var $p1385: ref;
  var $p1386: ref;
  var $i1387: i32;
  var $p1388: ref;
  var $i1389: i64;
  var $p1390: ref;
  var $p1391: ref;
  var $i1392: i64;
  var $i1393: i32;
  var $i1394: i1;
  var $p1395: ref;
  var $p1397: ref;
  var $i1398: i64;
  var $p1399: ref;
  var $p1400: ref;
  var $p1401: ref;
  var $p1402: ref;
  var $p1403: ref;
  var $i1404: i32;
  var $p1405: ref;
  var $i1406: i64;
  var $p1407: ref;
  var $p1408: ref;
  var $i1409: i64;
  var $i1410: i32;
  var $i1411: i1;
  var $p1412: ref;
  var $p1414: ref;
  var $i1415: i64;
  var $p1416: ref;
  var $p1417: ref;
  var $p1418: ref;
  var $p1419: ref;
  var $p1420: ref;
  var $i1421: i32;
  var $p1422: ref;
  var $i1423: i64;
  var $p1424: ref;
  var $p1425: ref;
  var $i1426: i64;
  var $i1427: i32;
  var $i1428: i1;
  var $p1429: ref;
  var $p1431: ref;
  var $i1432: i64;
  var $p1433: ref;
  var $p1434: ref;
  var $p1435: ref;
  var $p1436: ref;
  var $p1437: ref;
  var $i1438: i32;
  var $p1439: ref;
  var $i1440: i64;
  var $p1441: ref;
  var $p1442: ref;
  var $i1443: i64;
  var $i1444: i32;
  var $i1445: i1;
  var $p1446: ref;
  var $p1448: ref;
  var $i1449: i64;
  var $p1450: ref;
  var $p1451: ref;
  var $p1452: ref;
  var $p1453: ref;
  var $p1454: ref;
  var $i1455: i32;
  var $p1456: ref;
  var $i1457: i64;
  var $p1458: ref;
  var $p1459: ref;
  var $i1460: i64;
  var $i1461: i32;
  var $i1462: i1;
  var $p1463: ref;
  var $p1465: ref;
  var $i1466: i64;
  var $p1467: ref;
  var $p1468: ref;
  var $p1469: ref;
  var $p1470: ref;
  var $p1471: ref;
  var $i1472: i32;
  var $p1473: ref;
  var $i1474: i64;
  var $p1475: ref;
  var $p1476: ref;
  var $i1477: i64;
  var $i1478: i32;
  var $i1479: i1;
  var $p1480: ref;
  var $p1482: ref;
  var $i1483: i64;
  var $p1484: ref;
  var $p1485: ref;
  var $p1486: ref;
  var $p1487: ref;
  var $p1488: ref;
  var $i1489: i32;
  var $p1490: ref;
  var $i1491: i64;
  var $p1492: ref;
  var $p1493: ref;
  var $i1494: i64;
  var $i1495: i32;
  var $i1496: i1;
  var $p1497: ref;
  var $p1499: ref;
  var $i1500: i64;
  var $p1501: ref;
  var $p1502: ref;
  var $p1503: ref;
  var $p1504: ref;
  var $p1505: ref;
  var $i1506: i32;
  var $p1507: ref;
  var $i1508: i64;
  var $p1509: ref;
  var $p1510: ref;
  var $i1511: i64;
  var $i1512: i32;
  var $i1513: i1;
  var $p1514: ref;
  var $p1516: ref;
  var $i1517: i64;
  var $p1518: ref;
  var $p1519: ref;
  var $p1520: ref;
  var $p1521: ref;
  var $p1522: ref;
  var $i1523: i32;
  var $p1524: ref;
  var $i1525: i64;
  var $p1526: ref;
  var $p1527: ref;
  var $i1528: i64;
  var $i1529: i32;
  var $i1530: i1;
  var $p1531: ref;
  var $p1533: ref;
  var $i1534: i64;
  var $p1535: ref;
  var $p1536: ref;
  var $p1537: ref;
  var $p1538: ref;
  var $p1539: ref;
  var $i1540: i32;
  var $p1541: ref;
  var $i1542: i64;
  var $p1543: ref;
  var $p1544: ref;
  var $i1545: i64;
  var $i1546: i32;
  var $i1547: i1;
  var $p1548: ref;
  var $p1550: ref;
  var $i1551: i64;
  var $p1552: ref;
  var $p1553: ref;
  var $p1554: ref;
  var $p1555: ref;
  var $p1556: ref;
  var $i1557: i32;
  var $p1558: ref;
  var $i1559: i64;
  var $p1560: ref;
  var $p1561: ref;
  var $i1562: i64;
  var $i1563: i32;
  var $i1564: i1;
  var $p1565: ref;
  var $p1567: ref;
  var $i1568: i64;
  var $p1569: ref;
  var $p1570: ref;
  var $p1571: ref;
  var $p1572: ref;
  var $p1573: ref;
  var $i1574: i32;
  var $p1575: ref;
  var $i1576: i64;
  var $p1577: ref;
  var $p1578: ref;
  var $i1579: i64;
  var $i1580: i32;
  var $i1581: i1;
  var $p1582: ref;
  var $p1584: ref;
  var $i1585: i64;
  var $p1586: ref;
  var $p1587: ref;
  var $p1588: ref;
  var $p1589: ref;
  var $p1590: ref;
  var $i1591: i32;
  var $p1592: ref;
  var $i1593: i64;
  var $p1594: ref;
  var $p1595: ref;
  var $i1596: i64;
  var $i1597: i32;
  var $i1598: i1;
  var $p1599: ref;
  var $p1601: ref;
  var $i1602: i64;
  var $p1603: ref;
  var $p1604: ref;
  var $p1605: ref;
  var $p1606: ref;
  var $p1607: ref;
  var $i1608: i32;
  var $p1609: ref;
  var $i1610: i64;
  var $p1611: ref;
  var $p1612: ref;
  var $i1613: i64;
  var $i1614: i32;
  var $i1615: i1;
  var $p1616: ref;
  var $p1618: ref;
  var $i1619: i64;
  var $p1620: ref;
  var $p1621: ref;
  var $p1622: ref;
  var $p1623: ref;
  var $p1624: ref;
  var $i1625: i32;
  var $p1626: ref;
  var $i1627: i64;
  var $p1628: ref;
  var $p1629: ref;
  var $i1630: i64;
  var $i1631: i32;
  var $i1632: i1;
  var $p1633: ref;
  var $p1635: ref;
  var $i1636: i64;
  var $p1637: ref;
  var $p1638: ref;
  var $p1639: ref;
  var $p1640: ref;
  var $p1641: ref;
  var $i1642: i32;
  var $p1643: ref;
  var $i1644: i64;
  var $p1645: ref;
  var $p1646: ref;
  var $i1647: i64;
  var $i1648: i32;
  var $i1649: i1;
  var $p1650: ref;
  var $p1652: ref;
  var $i1653: i64;
  var $p1654: ref;
  var $p1655: ref;
  var $p1656: ref;
  var $p1657: ref;
  var $p1658: ref;
  var $i1659: i32;
  var $p1660: ref;
  var $i1661: i64;
  var $p1662: ref;
  var $p1663: ref;
  var $i1664: i64;
  var $i1665: i32;
  var $i1666: i1;
  var $p1667: ref;
  var $p1669: ref;
  var $i1670: i64;
  var $p1671: ref;
  var $p1672: ref;
  var $p1673: ref;
  var $p1674: ref;
  var $p1675: ref;
  var $i1676: i32;
  var $p1677: ref;
  var $i1678: i64;
  var $p1679: ref;
  var $p1680: ref;
  var $i1681: i64;
  var $i1682: i32;
  var $i1683: i1;
  var $p1684: ref;
  var $p1686: ref;
  var $i1687: i64;
  var $p1688: ref;
  var $p1689: ref;
  var $p1690: ref;
  var $p1691: ref;
  var $p1692: ref;
  var $i1693: i32;
  var $p1694: ref;
  var $i1695: i64;
  var $p1696: ref;
  var $p1697: ref;
  var $i1698: i64;
  var $i1699: i32;
  var $i1700: i1;
  var $p1701: ref;
  var $p1703: ref;
  var $i1704: i64;
  var $p1705: ref;
  var $p1706: ref;
  var $p1707: ref;
  var $p1708: ref;
  var $p1709: ref;
  var $i1710: i32;
  var $p1711: ref;
  var $i1712: i64;
  var $p1713: ref;
  var $p1714: ref;
  var $i1715: i64;
  var $i1716: i32;
  var $i1717: i1;
  var $p1718: ref;
  var $p1720: ref;
  var $i1721: i64;
  var $p1722: ref;
  var $p1723: ref;
  var $p1724: ref;
  var $p1725: ref;
  var $p1726: ref;
  var $i1727: i32;
  var $p1728: ref;
  var $i1729: i64;
  var $p1730: ref;
  var $p1731: ref;
  var $i1732: i64;
  var $i1733: i32;
  var $i1734: i1;
  var $p1735: ref;
  var $p1737: ref;
  var $i1738: i64;
  var $p1739: ref;
  var $p1740: ref;
  var $p1741: ref;
  var $p1742: ref;
  var $p1743: ref;
  var $i1744: i32;
  var $p1745: ref;
  var $i1746: i64;
  var $p1747: ref;
  var $p1748: ref;
  var $i1749: i64;
  var $i1750: i32;
  var $i1751: i1;
  var $p1752: ref;
  var $p1754: ref;
  var $i1755: i64;
  var $p1756: ref;
  var $p1757: ref;
  var $p1758: ref;
  var $p1759: ref;
  var $p1760: ref;
  var $i1761: i32;
  var $p1762: ref;
  var $i1763: i64;
  var $p1764: ref;
  var $p1765: ref;
  var $i1766: i64;
  var $i1767: i32;
  var $i1768: i1;
  var $p1769: ref;
  var $p1771: ref;
  var $i1772: i64;
  var $p1773: ref;
  var $p1774: ref;
  var $p1775: ref;
  var $p1776: ref;
  var $p1777: ref;
  var $i1778: i32;
  var $p1779: ref;
  var $i1780: i64;
  var $p1781: ref;
  var $p1782: ref;
  var $i1783: i64;
  var $i1784: i32;
  var $i1785: i1;
  var $p1786: ref;
  var $p1788: ref;
  var $i1789: i64;
  var $p1790: ref;
  var $p1791: ref;
  var $p1792: ref;
  var $p1793: ref;
  var $p1794: ref;
  var $i1795: i32;
  var $p1796: ref;
  var $i1797: i64;
  var $p1798: ref;
  var $p1799: ref;
  var $i1800: i64;
  var $i1801: i32;
  var $i1802: i1;
  var $p1803: ref;
  var $p1805: ref;
  var $i1806: i64;
  var $p1807: ref;
  var $p1808: ref;
  var $p1809: ref;
  var $p1810: ref;
  var $p1811: ref;
  var $i1812: i32;
  var $p1813: ref;
  var $i1814: i64;
  var $p1815: ref;
  var $p1816: ref;
  var $i1817: i64;
  var $i1818: i32;
  var $i1819: i1;
  var $p1820: ref;
  var $p1822: ref;
  var $i1823: i64;
  var $p1824: ref;
  var $p1825: ref;
  var $p1826: ref;
  var $p1827: ref;
  var $p1828: ref;
  var $i1829: i32;
  var $p1830: ref;
  var $i1831: i64;
  var $p1832: ref;
  var $p1833: ref;
  var $i1834: i64;
  var $i1835: i32;
  var $i1836: i1;
  var $p1837: ref;
  var $p1839: ref;
  var $i1840: i64;
  var $p1841: ref;
  var $p1842: ref;
  var $p1843: ref;
  var $p1844: ref;
  var $p1845: ref;
  var $i1846: i32;
  var $p1847: ref;
  var $i1848: i64;
  var $p1849: ref;
  var $p1850: ref;
  var $i1851: i64;
  var $i1852: i32;
  var $i1853: i1;
  var $p1854: ref;
  var $p1856: ref;
  var $i1857: i64;
  var $p1858: ref;
  var $p1859: ref;
  var $p1860: ref;
  var $p1861: ref;
  var $p1862: ref;
  var $i1863: i32;
  var $p1864: ref;
  var $i1865: i64;
  var $p1866: ref;
  var $p1867: ref;
  var $i1868: i64;
  var $i1869: i32;
  var $i1870: i1;
  var $p1871: ref;
  var $p1873: ref;
  var $i1874: i64;
  var $p1875: ref;
  var $p1876: ref;
  var $p1877: ref;
  var $p1878: ref;
  var $p1879: ref;
  var $i1880: i32;
  var $p1881: ref;
  var $i1882: i64;
  var $p1883: ref;
  var $p1884: ref;
  var $i1885: i64;
  var $i1886: i32;
  var $i1887: i1;
  var $p1888: ref;
  var $p1890: ref;
  var $i1891: i64;
  var $p1892: ref;
  var $p1893: ref;
  var $p1894: ref;
  var $p1895: ref;
  var $p1896: ref;
  var $i1897: i32;
  var $p1898: ref;
  var $i1899: i64;
  var $p1900: ref;
  var $p1901: ref;
  var $i1902: i64;
  var $i1903: i32;
  var $i1904: i1;
  var $p1905: ref;
  var $p1907: ref;
  var $i1908: i64;
  var $p1909: ref;
  var $p1910: ref;
  var $p1911: ref;
  var $p1912: ref;
  var $p1913: ref;
  var $i1914: i32;
  var $p1915: ref;
  var $i1916: i64;
  var $p1917: ref;
  var $p1918: ref;
  var $i1919: i64;
  var $i1920: i32;
  var $i1921: i1;
  var $p1922: ref;
  var $p1924: ref;
  var $i1925: i64;
  var $p1926: ref;
  var $p1927: ref;
  var $p1928: ref;
  var $p1929: ref;
  var $p1930: ref;
  var $i1931: i32;
  var $p1932: ref;
  var $i1933: i64;
  var $p1934: ref;
  var $p1935: ref;
  var $i1936: i64;
  var $i1937: i32;
  var $i1938: i1;
  var $p1939: ref;
  var $p1941: ref;
  var $i1942: i64;
  var $p1943: ref;
  var $p1944: ref;
  var $p1945: ref;
  var $p1946: ref;
  var $p1947: ref;
  var $i1948: i32;
  var $p1949: ref;
  var $i1950: i64;
  var $p1951: ref;
  var $p1952: ref;
  var $i1953: i64;
  var $i1954: i32;
  var $i1955: i1;
  var $p1956: ref;
  var $p1958: ref;
  var $i1959: i64;
  var $p1960: ref;
  var $p1961: ref;
  var $p1962: ref;
  var $p1963: ref;
  var $p1964: ref;
  var $i1965: i32;
  var $p1966: ref;
  var $i1967: i64;
  var $p1968: ref;
  var $p1969: ref;
  var $i1970: i64;
  var $i1971: i32;
  var $i1972: i1;
  var $p1973: ref;
  var $p1975: ref;
  var $i1976: i64;
  var $p1977: ref;
  var $p1978: ref;
  var $p1979: ref;
  var $p1980: ref;
  var $p1981: ref;
  var $i1982: i32;
  var $p1983: ref;
  var $i1984: i64;
  var $p1985: ref;
  var $p1986: ref;
  var $i1987: i64;
  var $i1988: i32;
  var $i1989: i1;
  var $p1990: ref;
  var $p1992: ref;
  var $i1993: i64;
  var $p1994: ref;
  var $p1995: ref;
  var $p1996: ref;
  var $p1997: ref;
  var $p1998: ref;
  var $i1999: i32;
  var $p2000: ref;
  var $i2001: i64;
  var $p2002: ref;
  var $p2003: ref;
  var $i2004: i64;
  var $i2005: i32;
  var $i2006: i1;
  var $p2007: ref;
  var $p2009: ref;
  var $i2010: i64;
  var $p2011: ref;
  var $p2012: ref;
  var $p2013: ref;
  var $p2014: ref;
  var $p2015: ref;
  var $i2016: i32;
  var $p2017: ref;
  var $i2018: i64;
  var $p2019: ref;
  var $p2020: ref;
  var $i2021: i64;
  var $i2022: i32;
  var $i2023: i1;
  var $p2024: ref;
  var $p2026: ref;
  var $i2027: i64;
  var $p2028: ref;
  var $p2029: ref;
  var $p2030: ref;
  var $p2031: ref;
  var $p2032: ref;
  var $i2033: i32;
  var $p2034: ref;
  var $i2035: i64;
  var $p2036: ref;
  var $p2037: ref;
  var $i2038: i64;
  var $i2039: i32;
  var $i2040: i1;
  var $p2041: ref;
  var $p2043: ref;
  var $i2044: i64;
  var $p2045: ref;
  var $p2046: ref;
  var $p2047: ref;
  var $p2048: ref;
  var $p2049: ref;
  var $i2050: i32;
  var $p2051: ref;
  var $i2052: i64;
  var $p2053: ref;
  var $p2054: ref;
  var $i2055: i64;
  var $i2056: i32;
  var $i2057: i1;
  var $p2058: ref;
  var $p2060: ref;
  var $i2061: i64;
  var $p2062: ref;
  var $p2063: ref;
  var $p2064: ref;
  var $p2065: ref;
  var $p2066: ref;
  var $i2067: i32;
  var $p2068: ref;
  var $i2069: i64;
  var $p2070: ref;
  var $p2071: ref;
  var $i2072: i64;
  var $i2073: i32;
  var $i2074: i1;
  var $p2075: ref;
  var $p2077: ref;
  var $i2078: i64;
  var $p2079: ref;
  var $p2080: ref;
  var $p2081: ref;
  var $p2082: ref;
  var $p2083: ref;
  var $i2084: i32;
  var $p2085: ref;
  var $i2086: i64;
  var $p2087: ref;
  var $p2088: ref;
  var $i2089: i64;
  var $i2090: i32;
  var $i2091: i1;
  var $p2092: ref;
  var $p2094: ref;
  var $i2095: i64;
  var $p2096: ref;
  var $p2097: ref;
  var $p2098: ref;
  var $p2099: ref;
  var $p2100: ref;
  var $i2101: i32;
  var $p2102: ref;
  var $i2103: i64;
  var $p2104: ref;
  var $p2105: ref;
  var $i2106: i64;
  var $i2107: i32;
  var $i2108: i1;
  var $p2109: ref;
  var $p2111: ref;
  var $i2112: i64;
  var $p2113: ref;
  var $p2114: ref;
  var $p2115: ref;
  var $p2116: ref;
  var $p2117: ref;
  var $i2118: i32;
  var $p2119: ref;
  var $i2120: i64;
  var $p2121: ref;
  var $p2122: ref;
  var $i2123: i64;
  var $i2124: i32;
  var $i2125: i1;
  var $p2126: ref;
  var $p2128: ref;
  var $i2129: i64;
  var $p2130: ref;
  var $p2131: ref;
  var $p2132: ref;
  var $p2133: ref;
  var $p2134: ref;
  var $i2135: i32;
  var $p2136: ref;
  var $i2137: i64;
  var $p2138: ref;
  var $p2139: ref;
  var $i2140: i64;
  var $i2141: i32;
  var $i2142: i1;
  var $p2143: ref;
  var $p2145: ref;
  var $i2146: i64;
  var $p2147: ref;
  var $p2148: ref;
  var $p2149: ref;
  var $p2150: ref;
  var $p2151: ref;
  var $i2152: i32;
  var $p2153: ref;
  var $i2154: i64;
  var $p2155: ref;
  var $p2156: ref;
  var $i2157: i64;
  var $i2158: i32;
  var $i2159: i1;
  var $p2160: ref;
  var $p2162: ref;
  var $i2163: i64;
  var $p2164: ref;
  var $p2165: ref;
  var $p2166: ref;
  var $p2167: ref;
  var $p2168: ref;
  var $i2169: i32;
  var $p2170: ref;
  var $i2171: i64;
  var $p2172: ref;
  var $p2173: ref;
  var $i2174: i64;
  var $i2175: i32;
  var $i2176: i1;
  var $p2177: ref;
  var $p2179: ref;
  var $i2180: i64;
  var $p2181: ref;
  var $p2182: ref;
  var $p2183: ref;
  var $p2184: ref;
  var $p2185: ref;
  var $i2186: i32;
  var $p2187: ref;
  var $i2188: i64;
  var $p2189: ref;
  var $p2190: ref;
  var $i2191: i64;
  var $i2192: i32;
  var $i2193: i1;
  var $p2194: ref;
  var $p2196: ref;
  var $i2197: i64;
  var $p2198: ref;
  var $p2199: ref;
  var $p2200: ref;
  var $p2201: ref;
  var $p2202: ref;
  var $i2203: i32;
  var $p2204: ref;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p5 := kzalloc(1572864, 208);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p5);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i15 := ib_dma_map_single($p4, $p14, 8268, 2);
    call {:si_unique_call 414} {:cexpr "dma_addr"} boogie_si_record_i64($i15);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i16 := ib_dma_mapping_error($p4, $i15);
    call {:si_unique_call 416} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i15);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    $p23 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i22);
    $p24 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 8268);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    $p29 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p13, $mul.ref(1, 12296));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p30);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i49 := ib_dma_map_single($p4, $p48, 8268, 2);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i50 := ib_dma_mapping_error($p4, $i49);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i18 := 1;
    assume {:branchcond $i51} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p13, $mul.ref(1, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i49);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p13, $mul.ref(1, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    $p56 := $add.ref($add.ref($add.ref($p13, $mul.ref(1, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    $p57 := $add.ref($add.ref($add.ref($p13, $mul.ref(1, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 8268);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    $p62 := $add.ref($add.ref($add.ref($p13, $mul.ref(1, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    $i63 := $add.i64(1, 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p13, $mul.ref($i63, 12296));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i66 := ib_dma_map_single($p4, $p65, 8268, 2);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i67 := ib_dma_mapping_error($p4, $i66);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i18 := 2;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p13, $mul.ref($i63, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, $i66);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p13, $mul.ref($i63, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    $p73 := $add.ref($add.ref($add.ref($p13, $mul.ref($i63, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, $i72);
    $p74 := $add.ref($add.ref($add.ref($p13, $mul.ref($i63, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 8268);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    $p79 := $add.ref($add.ref($add.ref($p13, $mul.ref($i63, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    $i80 := $add.i64($i63, 1);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p13, $mul.ref($i80, 12296));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i83 := ib_dma_map_single($p4, $p82, 8268, 2);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i84 := ib_dma_mapping_error($p4, $i83);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i18 := 3;
    assume {:branchcond $i85} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p13, $mul.ref($i80, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p86, $i83);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p13, $mul.ref($i80, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    $p90 := $add.ref($add.ref($add.ref($p13, $mul.ref($i80, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p90, $i89);
    $p91 := $add.ref($add.ref($add.ref($p13, $mul.ref($i80, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 8268);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    $p96 := $add.ref($add.ref($add.ref($p13, $mul.ref($i80, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    $i97 := $add.i64($i80, 1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p13, $mul.ref($i97, 12296));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i100 := ib_dma_map_single($p4, $p99, 8268, 2);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i101 := ib_dma_mapping_error($p4, $i100);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i18 := 4;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p13, $mul.ref($i97, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p103, $i100);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p13, $mul.ref($i97, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.0, $p105);
    $p107 := $add.ref($add.ref($add.ref($p13, $mul.ref($i97, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p107, $i106);
    $p108 := $add.ref($add.ref($add.ref($p13, $mul.ref($i97, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 8268);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    $p113 := $add.ref($add.ref($add.ref($p13, $mul.ref($i97, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    $i114 := $add.i64($i97, 1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p13, $mul.ref($i114, 12296));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i117 := ib_dma_map_single($p4, $p116, 8268, 2);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i118 := ib_dma_mapping_error($p4, $i117);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i18 := 5;
    assume {:branchcond $i119} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p13, $mul.ref($i114, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p120, $i117);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p13, $mul.ref($i114, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    $p124 := $add.ref($add.ref($add.ref($p13, $mul.ref($i114, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p124, $i123);
    $p125 := $add.ref($add.ref($add.ref($p13, $mul.ref($i114, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 8268);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    $p130 := $add.ref($add.ref($add.ref($p13, $mul.ref($i114, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i129);
    $i131 := $add.i64($i114, 1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p13, $mul.ref($i131, 12296));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i134 := ib_dma_map_single($p4, $p133, 8268, 2);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i135 := ib_dma_mapping_error($p4, $i134);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i18 := 6;
    assume {:branchcond $i136} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p13, $mul.ref($i131, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p137, $i134);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p13, $mul.ref($i131, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    $p141 := $add.ref($add.ref($add.ref($p13, $mul.ref($i131, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p141, $i140);
    $p142 := $add.ref($add.ref($add.ref($p13, $mul.ref($i131, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, 8268);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    $p147 := $add.ref($add.ref($add.ref($p13, $mul.ref($i131, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, $i146);
    $i148 := $add.i64($i131, 1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p13, $mul.ref($i148, 12296));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i151 := ib_dma_map_single($p4, $p150, 8268, 2);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i152 := ib_dma_mapping_error($p4, $i151);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i18 := 7;
    assume {:branchcond $i153} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p13, $mul.ref($i148, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p154, $i151);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p13, $mul.ref($i148, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.0, $p156);
    $p158 := $add.ref($add.ref($add.ref($p13, $mul.ref($i148, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p158, $i157);
    $p159 := $add.ref($add.ref($add.ref($p13, $mul.ref($i148, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p159, 8268);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    $p164 := $add.ref($add.ref($add.ref($p13, $mul.ref($i148, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, $i163);
    $i165 := $add.i64($i148, 1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p13, $mul.ref($i165, 12296));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i168 := ib_dma_map_single($p4, $p167, 8268, 2);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i169 := ib_dma_mapping_error($p4, $i168);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i18 := 8;
    assume {:branchcond $i170} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p13, $mul.ref($i165, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p171, $i168);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p13, $mul.ref($i165, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i174 := $load.i64($M.0, $p173);
    $p175 := $add.ref($add.ref($add.ref($p13, $mul.ref($i165, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p175, $i174);
    $p176 := $add.ref($add.ref($add.ref($p13, $mul.ref($i165, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, 8268);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    $p181 := $add.ref($add.ref($add.ref($p13, $mul.ref($i165, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i180);
    $i182 := $add.i64($i165, 1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p13, $mul.ref($i182, 12296));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i185 := ib_dma_map_single($p4, $p184, 8268, 2);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i186 := ib_dma_mapping_error($p4, $i185);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i186, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i18 := 9;
    assume {:branchcond $i187} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p13, $mul.ref($i182, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p188, $i185);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p13, $mul.ref($i182, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i191 := $load.i64($M.0, $p190);
    $p192 := $add.ref($add.ref($add.ref($p13, $mul.ref($i182, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p192, $i191);
    $p193 := $add.ref($add.ref($add.ref($p13, $mul.ref($i182, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, 8268);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    $p198 := $add.ref($add.ref($add.ref($p13, $mul.ref($i182, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, $i197);
    $i199 := $add.i64($i182, 1);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p13, $mul.ref($i199, 12296));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i202 := ib_dma_map_single($p4, $p201, 8268, 2);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i203 := ib_dma_mapping_error($p4, $i202);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i18 := 10;
    assume {:branchcond $i204} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p13, $mul.ref($i199, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p205, $i202);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p13, $mul.ref($i199, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i208 := $load.i64($M.0, $p207);
    $p209 := $add.ref($add.ref($add.ref($p13, $mul.ref($i199, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p209, $i208);
    $p210 := $add.ref($add.ref($add.ref($p13, $mul.ref($i199, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, 8268);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    $p215 := $add.ref($add.ref($add.ref($p13, $mul.ref($i199, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, $i214);
    $i216 := $add.i64($i199, 1);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p13, $mul.ref($i216, 12296));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i219 := ib_dma_map_single($p4, $p218, 8268, 2);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i220 := ib_dma_mapping_error($p4, $i219);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i18 := 11;
    assume {:branchcond $i221} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p13, $mul.ref($i216, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p222, $i219);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p13, $mul.ref($i216, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i225 := $load.i64($M.0, $p224);
    $p226 := $add.ref($add.ref($add.ref($p13, $mul.ref($i216, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p226, $i225);
    $p227 := $add.ref($add.ref($add.ref($p13, $mul.ref($i216, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p227, 8268);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    $p232 := $add.ref($add.ref($add.ref($p13, $mul.ref($i216, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, $i231);
    $i233 := $add.i64($i216, 1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p13, $mul.ref($i233, 12296));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i236 := ib_dma_map_single($p4, $p235, 8268, 2);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i237 := ib_dma_mapping_error($p4, $i236);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i18 := 12;
    assume {:branchcond $i238} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p13, $mul.ref($i233, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p239, $i236);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p13, $mul.ref($i233, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i242 := $load.i64($M.0, $p241);
    $p243 := $add.ref($add.ref($add.ref($p13, $mul.ref($i233, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p243, $i242);
    $p244 := $add.ref($add.ref($add.ref($p13, $mul.ref($i233, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p244, 8268);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p246, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    $p249 := $add.ref($add.ref($add.ref($p13, $mul.ref($i233, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, $i248);
    $i250 := $add.i64($i233, 1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p13, $mul.ref($i250, 12296));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i253 := ib_dma_map_single($p4, $p252, 8268, 2);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i254 := ib_dma_mapping_error($p4, $i253);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i18 := 13;
    assume {:branchcond $i255} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p13, $mul.ref($i250, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p256, $i253);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p13, $mul.ref($i250, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i259 := $load.i64($M.0, $p258);
    $p260 := $add.ref($add.ref($add.ref($p13, $mul.ref($i250, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p260, $i259);
    $p261 := $add.ref($add.ref($add.ref($p13, $mul.ref($i250, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p261, 8268);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p263, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    $p266 := $add.ref($add.ref($add.ref($p13, $mul.ref($i250, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p266, $i265);
    $i267 := $add.i64($i250, 1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($p13, $mul.ref($i267, 12296));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i270 := ib_dma_map_single($p4, $p269, 8268, 2);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i271 := ib_dma_mapping_error($p4, $i270);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i18 := 14;
    assume {:branchcond $i272} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p13, $mul.ref($i267, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p273, $i270);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p13, $mul.ref($i267, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i276 := $load.i64($M.0, $p275);
    $p277 := $add.ref($add.ref($add.ref($p13, $mul.ref($i267, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p277, $i276);
    $p278 := $add.ref($add.ref($add.ref($p13, $mul.ref($i267, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p278, 8268);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p280, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    $p283 := $add.ref($add.ref($add.ref($p13, $mul.ref($i267, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p283, $i282);
    $i284 := $add.i64($i267, 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($p13, $mul.ref($i284, 12296));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i287 := ib_dma_map_single($p4, $p286, 8268, 2);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i288 := ib_dma_mapping_error($p4, $i287);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i18 := 15;
    assume {:branchcond $i289} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p13, $mul.ref($i284, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p290, $i287);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p13, $mul.ref($i284, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.0, $p292);
    $p294 := $add.ref($add.ref($add.ref($p13, $mul.ref($i284, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p294, $i293);
    $p295 := $add.ref($add.ref($add.ref($p13, $mul.ref($i284, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p295, 8268);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p297, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.0, $p298);
    $p300 := $add.ref($add.ref($add.ref($p13, $mul.ref($i284, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p300, $i299);
    $i301 := $add.i64($i284, 1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($p13, $mul.ref($i301, 12296));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i304 := ib_dma_map_single($p4, $p303, 8268, 2);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i305 := ib_dma_mapping_error($p4, $i304);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i306 := $ne.i32($i305, 0);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i18 := 16;
    assume {:branchcond $i306} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p13, $mul.ref($i301, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p307, $i304);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p13, $mul.ref($i301, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i310 := $load.i64($M.0, $p309);
    $p311 := $add.ref($add.ref($add.ref($p13, $mul.ref($i301, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p311, $i310);
    $p312 := $add.ref($add.ref($add.ref($p13, $mul.ref($i301, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p312, 8268);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.0, $p313);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p314, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p315);
    $p317 := $add.ref($add.ref($add.ref($p13, $mul.ref($i301, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p317, $i316);
    $i318 := $add.i64($i301, 1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($p13, $mul.ref($i318, 12296));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p320 := $bitcast.ref.ref($p319);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i321 := ib_dma_map_single($p4, $p320, 8268, 2);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i322 := ib_dma_mapping_error($p4, $i321);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i18 := 17;
    assume {:branchcond $i323} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p13, $mul.ref($i318, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p324, $i321);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p13, $mul.ref($i318, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i327 := $load.i64($M.0, $p326);
    $p328 := $add.ref($add.ref($add.ref($p13, $mul.ref($i318, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p328, $i327);
    $p329 := $add.ref($add.ref($add.ref($p13, $mul.ref($i318, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p329, 8268);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.0, $p330);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p331, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i333 := $load.i32($M.0, $p332);
    $p334 := $add.ref($add.ref($add.ref($p13, $mul.ref($i318, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p334, $i333);
    $i335 := $add.i64($i318, 1);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p13, $mul.ref($i335, 12296));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p336);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i338 := ib_dma_map_single($p4, $p337, 8268, 2);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i339 := ib_dma_mapping_error($p4, $i338);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 0);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i18 := 18;
    assume {:branchcond $i340} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p13, $mul.ref($i335, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p341, $i338);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p13, $mul.ref($i335, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i344 := $load.i64($M.0, $p343);
    $p345 := $add.ref($add.ref($add.ref($p13, $mul.ref($i335, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p345, $i344);
    $p346 := $add.ref($add.ref($add.ref($p13, $mul.ref($i335, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p346, 8268);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.0, $p347);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p348, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, $p349);
    $p351 := $add.ref($add.ref($add.ref($p13, $mul.ref($i335, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p351, $i350);
    $i352 := $add.i64($i335, 1);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p13, $mul.ref($i352, 12296));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p354 := $bitcast.ref.ref($p353);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i355 := ib_dma_map_single($p4, $p354, 8268, 2);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i356 := ib_dma_mapping_error($p4, $i355);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i18 := 19;
    assume {:branchcond $i357} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p13, $mul.ref($i352, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p358, $i355);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p13, $mul.ref($i352, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i361 := $load.i64($M.0, $p360);
    $p362 := $add.ref($add.ref($add.ref($p13, $mul.ref($i352, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p362, $i361);
    $p363 := $add.ref($add.ref($add.ref($p13, $mul.ref($i352, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p363, 8268);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p365, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i367 := $load.i32($M.0, $p366);
    $p368 := $add.ref($add.ref($add.ref($p13, $mul.ref($i352, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p368, $i367);
    $i369 := $add.i64($i352, 1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($p13, $mul.ref($i369, 12296));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p371 := $bitcast.ref.ref($p370);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i372 := ib_dma_map_single($p4, $p371, 8268, 2);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i373 := ib_dma_mapping_error($p4, $i372);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i18 := 20;
    assume {:branchcond $i374} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p13, $mul.ref($i369, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p375, $i372);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p13, $mul.ref($i369, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i378 := $load.i64($M.0, $p377);
    $p379 := $add.ref($add.ref($add.ref($p13, $mul.ref($i369, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p379, $i378);
    $p380 := $add.ref($add.ref($add.ref($p13, $mul.ref($i369, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p380, 8268);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.0, $p381);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p382, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    $p385 := $add.ref($add.ref($add.ref($p13, $mul.ref($i369, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p385, $i384);
    $i386 := $add.i64($i369, 1);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($p13, $mul.ref($i386, 12296));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p388 := $bitcast.ref.ref($p387);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i389 := ib_dma_map_single($p4, $p388, 8268, 2);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i390 := ib_dma_mapping_error($p4, $i389);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i391 := $ne.i32($i390, 0);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i18 := 21;
    assume {:branchcond $i391} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p13, $mul.ref($i386, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p392, $i389);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p13, $mul.ref($i386, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i395 := $load.i64($M.0, $p394);
    $p396 := $add.ref($add.ref($add.ref($p13, $mul.ref($i386, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p396, $i395);
    $p397 := $add.ref($add.ref($add.ref($p13, $mul.ref($i386, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p397, 8268);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p399 := $load.ref($M.0, $p398);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p399, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i401 := $load.i32($M.0, $p400);
    $p402 := $add.ref($add.ref($add.ref($p13, $mul.ref($i386, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p402, $i401);
    $i403 := $add.i64($i386, 1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($p13, $mul.ref($i403, 12296));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i406 := ib_dma_map_single($p4, $p405, 8268, 2);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i407 := ib_dma_mapping_error($p4, $i406);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i408 := $ne.i32($i407, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i18 := 22;
    assume {:branchcond $i408} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p13, $mul.ref($i403, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p409, $i406);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p13, $mul.ref($i403, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i412 := $load.i64($M.0, $p411);
    $p413 := $add.ref($add.ref($add.ref($p13, $mul.ref($i403, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p413, $i412);
    $p414 := $add.ref($add.ref($add.ref($p13, $mul.ref($i403, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p414, 8268);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p416, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i418 := $load.i32($M.0, $p417);
    $p419 := $add.ref($add.ref($add.ref($p13, $mul.ref($i403, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p419, $i418);
    $i420 := $add.i64($i403, 1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($p13, $mul.ref($i420, 12296));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p422 := $bitcast.ref.ref($p421);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i423 := ib_dma_map_single($p4, $p422, 8268, 2);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i424 := ib_dma_mapping_error($p4, $i423);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i425 := $ne.i32($i424, 0);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i18 := 23;
    assume {:branchcond $i425} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p13, $mul.ref($i420, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p426, $i423);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p13, $mul.ref($i420, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i429 := $load.i64($M.0, $p428);
    $p430 := $add.ref($add.ref($add.ref($p13, $mul.ref($i420, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p430, $i429);
    $p431 := $add.ref($add.ref($add.ref($p13, $mul.ref($i420, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p431, 8268);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p433 := $load.ref($M.0, $p432);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p433, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i435 := $load.i32($M.0, $p434);
    $p436 := $add.ref($add.ref($add.ref($p13, $mul.ref($i420, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p436, $i435);
    $i437 := $add.i64($i420, 1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($p13, $mul.ref($i437, 12296));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p439 := $bitcast.ref.ref($p438);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i440 := ib_dma_map_single($p4, $p439, 8268, 2);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i441 := ib_dma_mapping_error($p4, $i440);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i442 := $ne.i32($i441, 0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i18 := 24;
    assume {:branchcond $i442} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p13, $mul.ref($i437, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p443, $i440);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p13, $mul.ref($i437, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i446 := $load.i64($M.0, $p445);
    $p447 := $add.ref($add.ref($add.ref($p13, $mul.ref($i437, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p447, $i446);
    $p448 := $add.ref($add.ref($add.ref($p13, $mul.ref($i437, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p448, 8268);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p450, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i452 := $load.i32($M.0, $p451);
    $p453 := $add.ref($add.ref($add.ref($p13, $mul.ref($i437, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p453, $i452);
    $i454 := $add.i64($i437, 1);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($p13, $mul.ref($i454, 12296));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p456 := $bitcast.ref.ref($p455);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i457 := ib_dma_map_single($p4, $p456, 8268, 2);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i458 := ib_dma_mapping_error($p4, $i457);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i459 := $ne.i32($i458, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i18 := 25;
    assume {:branchcond $i459} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p13, $mul.ref($i454, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p460, $i457);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p13, $mul.ref($i454, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i463 := $load.i64($M.0, $p462);
    $p464 := $add.ref($add.ref($add.ref($p13, $mul.ref($i454, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p464, $i463);
    $p465 := $add.ref($add.ref($add.ref($p13, $mul.ref($i454, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p465, 8268);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.0, $p466);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p467, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i469 := $load.i32($M.0, $p468);
    $p470 := $add.ref($add.ref($add.ref($p13, $mul.ref($i454, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p470, $i469);
    $i471 := $add.i64($i454, 1);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($p13, $mul.ref($i471, 12296));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p473 := $bitcast.ref.ref($p472);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i474 := ib_dma_map_single($p4, $p473, 8268, 2);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i475 := ib_dma_mapping_error($p4, $i474);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i476 := $ne.i32($i475, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i18 := 26;
    assume {:branchcond $i476} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p13, $mul.ref($i471, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p477, $i474);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p13, $mul.ref($i471, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i480 := $load.i64($M.0, $p479);
    $p481 := $add.ref($add.ref($add.ref($p13, $mul.ref($i471, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p481, $i480);
    $p482 := $add.ref($add.ref($add.ref($p13, $mul.ref($i471, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p482, 8268);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.0, $p483);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p484, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i486 := $load.i32($M.0, $p485);
    $p487 := $add.ref($add.ref($add.ref($p13, $mul.ref($i471, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p487, $i486);
    $i488 := $add.i64($i471, 1);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($p13, $mul.ref($i488, 12296));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p490 := $bitcast.ref.ref($p489);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i491 := ib_dma_map_single($p4, $p490, 8268, 2);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i492 := ib_dma_mapping_error($p4, $i491);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i493 := $ne.i32($i492, 0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i18 := 27;
    assume {:branchcond $i493} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p13, $mul.ref($i488, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p494, $i491);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p13, $mul.ref($i488, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i497 := $load.i64($M.0, $p496);
    $p498 := $add.ref($add.ref($add.ref($p13, $mul.ref($i488, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p498, $i497);
    $p499 := $add.ref($add.ref($add.ref($p13, $mul.ref($i488, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p499, 8268);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p501 := $load.ref($M.0, $p500);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p501, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i503 := $load.i32($M.0, $p502);
    $p504 := $add.ref($add.ref($add.ref($p13, $mul.ref($i488, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p504, $i503);
    $i505 := $add.i64($i488, 1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($p13, $mul.ref($i505, 12296));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p507 := $bitcast.ref.ref($p506);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i508 := ib_dma_map_single($p4, $p507, 8268, 2);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i509 := ib_dma_mapping_error($p4, $i508);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i510 := $ne.i32($i509, 0);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i18 := 28;
    assume {:branchcond $i510} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p13, $mul.ref($i505, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p511, $i508);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p13, $mul.ref($i505, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i514 := $load.i64($M.0, $p513);
    $p515 := $add.ref($add.ref($add.ref($p13, $mul.ref($i505, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p515, $i514);
    $p516 := $add.ref($add.ref($add.ref($p13, $mul.ref($i505, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p516, 8268);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.0, $p517);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p518, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i520 := $load.i32($M.0, $p519);
    $p521 := $add.ref($add.ref($add.ref($p13, $mul.ref($i505, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p521, $i520);
    $i522 := $add.i64($i505, 1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($p13, $mul.ref($i522, 12296));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p524 := $bitcast.ref.ref($p523);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i525 := ib_dma_map_single($p4, $p524, 8268, 2);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i526 := ib_dma_mapping_error($p4, $i525);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i527 := $ne.i32($i526, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i18 := 29;
    assume {:branchcond $i527} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p13, $mul.ref($i522, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p528, $i525);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p13, $mul.ref($i522, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i531 := $load.i64($M.0, $p530);
    $p532 := $add.ref($add.ref($add.ref($p13, $mul.ref($i522, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p532, $i531);
    $p533 := $add.ref($add.ref($add.ref($p13, $mul.ref($i522, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p533, 8268);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.0, $p534);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p535, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i537 := $load.i32($M.0, $p536);
    $p538 := $add.ref($add.ref($add.ref($p13, $mul.ref($i522, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p538, $i537);
    $i539 := $add.i64($i522, 1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($p13, $mul.ref($i539, 12296));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p541 := $bitcast.ref.ref($p540);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i542 := ib_dma_map_single($p4, $p541, 8268, 2);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i543 := ib_dma_mapping_error($p4, $i542);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i544 := $ne.i32($i543, 0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i18 := 30;
    assume {:branchcond $i544} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p13, $mul.ref($i539, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p545, $i542);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p13, $mul.ref($i539, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i548 := $load.i64($M.0, $p547);
    $p549 := $add.ref($add.ref($add.ref($p13, $mul.ref($i539, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p549, $i548);
    $p550 := $add.ref($add.ref($add.ref($p13, $mul.ref($i539, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p550, 8268);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.0, $p551);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p552, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i554 := $load.i32($M.0, $p553);
    $p555 := $add.ref($add.ref($add.ref($p13, $mul.ref($i539, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p555, $i554);
    $i556 := $add.i64($i539, 1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($p13, $mul.ref($i556, 12296));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p558 := $bitcast.ref.ref($p557);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i559 := ib_dma_map_single($p4, $p558, 8268, 2);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i560 := ib_dma_mapping_error($p4, $i559);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i561 := $ne.i32($i560, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i18 := 31;
    assume {:branchcond $i561} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p13, $mul.ref($i556, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p562, $i559);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p13, $mul.ref($i556, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i565 := $load.i64($M.0, $p564);
    $p566 := $add.ref($add.ref($add.ref($p13, $mul.ref($i556, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p566, $i565);
    $p567 := $add.ref($add.ref($add.ref($p13, $mul.ref($i556, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p567, 8268);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p569 := $load.ref($M.0, $p568);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p569, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i571 := $load.i32($M.0, $p570);
    $p572 := $add.ref($add.ref($add.ref($p13, $mul.ref($i556, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p572, $i571);
    $i573 := $add.i64($i556, 1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($p13, $mul.ref($i573, 12296));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p575 := $bitcast.ref.ref($p574);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i576 := ib_dma_map_single($p4, $p575, 8268, 2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i577 := ib_dma_mapping_error($p4, $i576);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i578 := $ne.i32($i577, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i18 := 32;
    assume {:branchcond $i578} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p13, $mul.ref($i573, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p579, $i576);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p13, $mul.ref($i573, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i582 := $load.i64($M.0, $p581);
    $p583 := $add.ref($add.ref($add.ref($p13, $mul.ref($i573, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p583, $i582);
    $p584 := $add.ref($add.ref($add.ref($p13, $mul.ref($i573, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p584, 8268);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p586 := $load.ref($M.0, $p585);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p586, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i588 := $load.i32($M.0, $p587);
    $p589 := $add.ref($add.ref($add.ref($p13, $mul.ref($i573, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p589, $i588);
    $i590 := $add.i64($i573, 1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($p13, $mul.ref($i590, 12296));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p592 := $bitcast.ref.ref($p591);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i593 := ib_dma_map_single($p4, $p592, 8268, 2);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i594 := ib_dma_mapping_error($p4, $i593);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i595 := $ne.i32($i594, 0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i18 := 33;
    assume {:branchcond $i595} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i595 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p13, $mul.ref($i590, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p596, $i593);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p13, $mul.ref($i590, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i599 := $load.i64($M.0, $p598);
    $p600 := $add.ref($add.ref($add.ref($p13, $mul.ref($i590, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p600, $i599);
    $p601 := $add.ref($add.ref($add.ref($p13, $mul.ref($i590, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p601, 8268);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.0, $p602);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p603, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i605 := $load.i32($M.0, $p604);
    $p606 := $add.ref($add.ref($add.ref($p13, $mul.ref($i590, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p606, $i605);
    $i607 := $add.i64($i590, 1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($p13, $mul.ref($i607, 12296));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p609 := $bitcast.ref.ref($p608);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i610 := ib_dma_map_single($p4, $p609, 8268, 2);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i611 := ib_dma_mapping_error($p4, $i610);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i612 := $ne.i32($i611, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i18 := 34;
    assume {:branchcond $i612} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p13, $mul.ref($i607, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p613, $i610);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p13, $mul.ref($i607, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i616 := $load.i64($M.0, $p615);
    $p617 := $add.ref($add.ref($add.ref($p13, $mul.ref($i607, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p617, $i616);
    $p618 := $add.ref($add.ref($add.ref($p13, $mul.ref($i607, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p618, 8268);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p620 := $load.ref($M.0, $p619);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p620, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i622 := $load.i32($M.0, $p621);
    $p623 := $add.ref($add.ref($add.ref($p13, $mul.ref($i607, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p623, $i622);
    $i624 := $add.i64($i607, 1);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($p13, $mul.ref($i624, 12296));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p626 := $bitcast.ref.ref($p625);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i627 := ib_dma_map_single($p4, $p626, 8268, 2);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i628 := ib_dma_mapping_error($p4, $i627);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i629 := $ne.i32($i628, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i18 := 35;
    assume {:branchcond $i629} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i629 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p13, $mul.ref($i624, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p630, $i627);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p13, $mul.ref($i624, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i633 := $load.i64($M.0, $p632);
    $p634 := $add.ref($add.ref($add.ref($p13, $mul.ref($i624, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p634, $i633);
    $p635 := $add.ref($add.ref($add.ref($p13, $mul.ref($i624, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p635, 8268);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.0, $p636);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p637, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i639 := $load.i32($M.0, $p638);
    $p640 := $add.ref($add.ref($add.ref($p13, $mul.ref($i624, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p640, $i639);
    $i641 := $add.i64($i624, 1);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($p13, $mul.ref($i641, 12296));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p643 := $bitcast.ref.ref($p642);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i644 := ib_dma_map_single($p4, $p643, 8268, 2);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i645 := ib_dma_mapping_error($p4, $i644);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i646 := $ne.i32($i645, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i18 := 36;
    assume {:branchcond $i646} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p13, $mul.ref($i641, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p647, $i644);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p13, $mul.ref($i641, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i650 := $load.i64($M.0, $p649);
    $p651 := $add.ref($add.ref($add.ref($p13, $mul.ref($i641, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p651, $i650);
    $p652 := $add.ref($add.ref($add.ref($p13, $mul.ref($i641, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p652, 8268);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p654 := $load.ref($M.0, $p653);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p654, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i656 := $load.i32($M.0, $p655);
    $p657 := $add.ref($add.ref($add.ref($p13, $mul.ref($i641, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p657, $i656);
    $i658 := $add.i64($i641, 1);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($p13, $mul.ref($i658, 12296));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p660 := $bitcast.ref.ref($p659);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i661 := ib_dma_map_single($p4, $p660, 8268, 2);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i662 := ib_dma_mapping_error($p4, $i661);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i663 := $ne.i32($i662, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i18 := 37;
    assume {:branchcond $i663} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i663 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p13, $mul.ref($i658, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p664, $i661);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p13, $mul.ref($i658, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i667 := $load.i64($M.0, $p666);
    $p668 := $add.ref($add.ref($add.ref($p13, $mul.ref($i658, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p668, $i667);
    $p669 := $add.ref($add.ref($add.ref($p13, $mul.ref($i658, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p669, 8268);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p671 := $load.ref($M.0, $p670);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p671, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i673 := $load.i32($M.0, $p672);
    $p674 := $add.ref($add.ref($add.ref($p13, $mul.ref($i658, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p674, $i673);
    $i675 := $add.i64($i658, 1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($p13, $mul.ref($i675, 12296));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p677 := $bitcast.ref.ref($p676);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i678 := ib_dma_map_single($p4, $p677, 8268, 2);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i679 := ib_dma_mapping_error($p4, $i678);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i680 := $ne.i32($i679, 0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i18 := 38;
    assume {:branchcond $i680} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p13, $mul.ref($i675, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p681, $i678);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p13, $mul.ref($i675, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i684 := $load.i64($M.0, $p683);
    $p685 := $add.ref($add.ref($add.ref($p13, $mul.ref($i675, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p685, $i684);
    $p686 := $add.ref($add.ref($add.ref($p13, $mul.ref($i675, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p686, 8268);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p688 := $load.ref($M.0, $p687);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p688, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i690 := $load.i32($M.0, $p689);
    $p691 := $add.ref($add.ref($add.ref($p13, $mul.ref($i675, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p691, $i690);
    $i692 := $add.i64($i675, 1);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($p13, $mul.ref($i692, 12296));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p694 := $bitcast.ref.ref($p693);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i695 := ib_dma_map_single($p4, $p694, 8268, 2);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i696 := ib_dma_mapping_error($p4, $i695);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i697 := $ne.i32($i696, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i18 := 39;
    assume {:branchcond $i697} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p13, $mul.ref($i692, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p698, $i695);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p13, $mul.ref($i692, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i701 := $load.i64($M.0, $p700);
    $p702 := $add.ref($add.ref($add.ref($p13, $mul.ref($i692, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p702, $i701);
    $p703 := $add.ref($add.ref($add.ref($p13, $mul.ref($i692, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p703, 8268);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p705 := $load.ref($M.0, $p704);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p705, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i707 := $load.i32($M.0, $p706);
    $p708 := $add.ref($add.ref($add.ref($p13, $mul.ref($i692, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p708, $i707);
    $i709 := $add.i64($i692, 1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($p13, $mul.ref($i709, 12296));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p711 := $bitcast.ref.ref($p710);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i712 := ib_dma_map_single($p4, $p711, 8268, 2);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i713 := ib_dma_mapping_error($p4, $i712);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i714 := $ne.i32($i713, 0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i18 := 40;
    assume {:branchcond $i714} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p13, $mul.ref($i709, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p715, $i712);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($p13, $mul.ref($i709, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i718 := $load.i64($M.0, $p717);
    $p719 := $add.ref($add.ref($add.ref($p13, $mul.ref($i709, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p719, $i718);
    $p720 := $add.ref($add.ref($add.ref($p13, $mul.ref($i709, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p720, 8268);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p722 := $load.ref($M.0, $p721);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p722, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i724 := $load.i32($M.0, $p723);
    $p725 := $add.ref($add.ref($add.ref($p13, $mul.ref($i709, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p725, $i724);
    $i726 := $add.i64($i709, 1);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($p13, $mul.ref($i726, 12296));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p728 := $bitcast.ref.ref($p727);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i729 := ib_dma_map_single($p4, $p728, 8268, 2);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i730 := ib_dma_mapping_error($p4, $i729);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i731 := $ne.i32($i730, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i18 := 41;
    assume {:branchcond $i731} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p13, $mul.ref($i726, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p732, $i729);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($p13, $mul.ref($i726, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i735 := $load.i64($M.0, $p734);
    $p736 := $add.ref($add.ref($add.ref($p13, $mul.ref($i726, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p736, $i735);
    $p737 := $add.ref($add.ref($add.ref($p13, $mul.ref($i726, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p737, 8268);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p739 := $load.ref($M.0, $p738);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p739, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i741 := $load.i32($M.0, $p740);
    $p742 := $add.ref($add.ref($add.ref($p13, $mul.ref($i726, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p742, $i741);
    $i743 := $add.i64($i726, 1);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($p13, $mul.ref($i743, 12296));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p745 := $bitcast.ref.ref($p744);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i746 := ib_dma_map_single($p4, $p745, 8268, 2);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i747 := ib_dma_mapping_error($p4, $i746);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i748 := $ne.i32($i747, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i18 := 42;
    assume {:branchcond $i748} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i748 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p13, $mul.ref($i743, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p749, $i746);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p13, $mul.ref($i743, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i752 := $load.i64($M.0, $p751);
    $p753 := $add.ref($add.ref($add.ref($p13, $mul.ref($i743, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p753, $i752);
    $p754 := $add.ref($add.ref($add.ref($p13, $mul.ref($i743, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p754, 8268);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p756 := $load.ref($M.0, $p755);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($p756, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i758 := $load.i32($M.0, $p757);
    $p759 := $add.ref($add.ref($add.ref($p13, $mul.ref($i743, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p759, $i758);
    $i760 := $add.i64($i743, 1);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($p13, $mul.ref($i760, 12296));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p762 := $bitcast.ref.ref($p761);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i763 := ib_dma_map_single($p4, $p762, 8268, 2);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i764 := ib_dma_mapping_error($p4, $i763);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i765 := $ne.i32($i764, 0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i18 := 43;
    assume {:branchcond $i765} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i765 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p13, $mul.ref($i760, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p766, $i763);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p13, $mul.ref($i760, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i769 := $load.i64($M.0, $p768);
    $p770 := $add.ref($add.ref($add.ref($p13, $mul.ref($i760, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p770, $i769);
    $p771 := $add.ref($add.ref($add.ref($p13, $mul.ref($i760, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p771, 8268);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p773 := $load.ref($M.0, $p772);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($p773, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i775 := $load.i32($M.0, $p774);
    $p776 := $add.ref($add.ref($add.ref($p13, $mul.ref($i760, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p776, $i775);
    $i777 := $add.i64($i760, 1);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($p13, $mul.ref($i777, 12296));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p779 := $bitcast.ref.ref($p778);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i780 := ib_dma_map_single($p4, $p779, 8268, 2);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i781 := ib_dma_mapping_error($p4, $i780);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i782 := $ne.i32($i781, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i18 := 44;
    assume {:branchcond $i782} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p13, $mul.ref($i777, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p783, $i780);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($p13, $mul.ref($i777, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i786 := $load.i64($M.0, $p785);
    $p787 := $add.ref($add.ref($add.ref($p13, $mul.ref($i777, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p787, $i786);
    $p788 := $add.ref($add.ref($add.ref($p13, $mul.ref($i777, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p788, 8268);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.0, $p789);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p790, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i792 := $load.i32($M.0, $p791);
    $p793 := $add.ref($add.ref($add.ref($p13, $mul.ref($i777, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p793, $i792);
    $i794 := $add.i64($i777, 1);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($p13, $mul.ref($i794, 12296));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p796 := $bitcast.ref.ref($p795);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i797 := ib_dma_map_single($p4, $p796, 8268, 2);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i798 := ib_dma_mapping_error($p4, $i797);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i799 := $ne.i32($i798, 0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i18 := 45;
    assume {:branchcond $i799} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i799 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($p13, $mul.ref($i794, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p800, $i797);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($p13, $mul.ref($i794, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i803 := $load.i64($M.0, $p802);
    $p804 := $add.ref($add.ref($add.ref($p13, $mul.ref($i794, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p804, $i803);
    $p805 := $add.ref($add.ref($add.ref($p13, $mul.ref($i794, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p805, 8268);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p807 := $load.ref($M.0, $p806);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($add.ref($p807, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i809 := $load.i32($M.0, $p808);
    $p810 := $add.ref($add.ref($add.ref($p13, $mul.ref($i794, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p810, $i809);
    $i811 := $add.i64($i794, 1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($p13, $mul.ref($i811, 12296));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p813 := $bitcast.ref.ref($p812);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i814 := ib_dma_map_single($p4, $p813, 8268, 2);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i815 := ib_dma_mapping_error($p4, $i814);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i816 := $ne.i32($i815, 0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i18 := 46;
    assume {:branchcond $i816} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i816 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p13, $mul.ref($i811, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p817, $i814);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($p13, $mul.ref($i811, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i820 := $load.i64($M.0, $p819);
    $p821 := $add.ref($add.ref($add.ref($p13, $mul.ref($i811, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p821, $i820);
    $p822 := $add.ref($add.ref($add.ref($p13, $mul.ref($i811, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p822, 8268);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p824 := $load.ref($M.0, $p823);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($p824, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i826 := $load.i32($M.0, $p825);
    $p827 := $add.ref($add.ref($add.ref($p13, $mul.ref($i811, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p827, $i826);
    $i828 := $add.i64($i811, 1);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($p13, $mul.ref($i828, 12296));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p830 := $bitcast.ref.ref($p829);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i831 := ib_dma_map_single($p4, $p830, 8268, 2);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i832 := ib_dma_mapping_error($p4, $i831);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i833 := $ne.i32($i832, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i18 := 47;
    assume {:branchcond $i833} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p13, $mul.ref($i828, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p834, $i831);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p13, $mul.ref($i828, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i837 := $load.i64($M.0, $p836);
    $p838 := $add.ref($add.ref($add.ref($p13, $mul.ref($i828, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p838, $i837);
    $p839 := $add.ref($add.ref($add.ref($p13, $mul.ref($i828, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p839, 8268);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p841 := $load.ref($M.0, $p840);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p841, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i843 := $load.i32($M.0, $p842);
    $p844 := $add.ref($add.ref($add.ref($p13, $mul.ref($i828, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p844, $i843);
    $i845 := $add.i64($i828, 1);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($p13, $mul.ref($i845, 12296));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p847 := $bitcast.ref.ref($p846);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i848 := ib_dma_map_single($p4, $p847, 8268, 2);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i849 := ib_dma_mapping_error($p4, $i848);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i850 := $ne.i32($i849, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i18 := 48;
    assume {:branchcond $i850} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i850 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p13, $mul.ref($i845, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p851, $i848);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($p13, $mul.ref($i845, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i854 := $load.i64($M.0, $p853);
    $p855 := $add.ref($add.ref($add.ref($p13, $mul.ref($i845, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p855, $i854);
    $p856 := $add.ref($add.ref($add.ref($p13, $mul.ref($i845, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p856, 8268);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p858 := $load.ref($M.0, $p857);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p858, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i860 := $load.i32($M.0, $p859);
    $p861 := $add.ref($add.ref($add.ref($p13, $mul.ref($i845, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p861, $i860);
    $i862 := $add.i64($i845, 1);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($p13, $mul.ref($i862, 12296));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p864 := $bitcast.ref.ref($p863);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i865 := ib_dma_map_single($p4, $p864, 8268, 2);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i866 := ib_dma_mapping_error($p4, $i865);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i867 := $ne.i32($i866, 0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i18 := 49;
    assume {:branchcond $i867} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i867 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p13, $mul.ref($i862, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p868, $i865);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($p13, $mul.ref($i862, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i871 := $load.i64($M.0, $p870);
    $p872 := $add.ref($add.ref($add.ref($p13, $mul.ref($i862, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p872, $i871);
    $p873 := $add.ref($add.ref($add.ref($p13, $mul.ref($i862, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p873, 8268);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p874 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p875 := $load.ref($M.0, $p874);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p875, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i877 := $load.i32($M.0, $p876);
    $p878 := $add.ref($add.ref($add.ref($p13, $mul.ref($i862, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p878, $i877);
    $i879 := $add.i64($i862, 1);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($p13, $mul.ref($i879, 12296));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p881 := $bitcast.ref.ref($p880);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i882 := ib_dma_map_single($p4, $p881, 8268, 2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i883 := ib_dma_mapping_error($p4, $i882);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i884 := $ne.i32($i883, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i18 := 50;
    assume {:branchcond $i884} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($p13, $mul.ref($i879, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p885, $i882);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref($p13, $mul.ref($i879, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i888 := $load.i64($M.0, $p887);
    $p889 := $add.ref($add.ref($add.ref($p13, $mul.ref($i879, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p889, $i888);
    $p890 := $add.ref($add.ref($add.ref($p13, $mul.ref($i879, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p890, 8268);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p892 := $load.ref($M.0, $p891);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($p892, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i894 := $load.i32($M.0, $p893);
    $p895 := $add.ref($add.ref($add.ref($p13, $mul.ref($i879, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p895, $i894);
    $i896 := $add.i64($i879, 1);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($p13, $mul.ref($i896, 12296));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p898 := $bitcast.ref.ref($p897);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i899 := ib_dma_map_single($p4, $p898, 8268, 2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i900 := ib_dma_mapping_error($p4, $i899);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i901 := $ne.i32($i900, 0);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i18 := 51;
    assume {:branchcond $i901} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i901 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p13, $mul.ref($i896, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p902, $i899);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($p13, $mul.ref($i896, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i905 := $load.i64($M.0, $p904);
    $p906 := $add.ref($add.ref($add.ref($p13, $mul.ref($i896, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p906, $i905);
    $p907 := $add.ref($add.ref($add.ref($p13, $mul.ref($i896, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p907, 8268);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p909 := $load.ref($M.0, $p908);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p910 := $add.ref($add.ref($p909, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i911 := $load.i32($M.0, $p910);
    $p912 := $add.ref($add.ref($add.ref($p13, $mul.ref($i896, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p912, $i911);
    $i913 := $add.i64($i896, 1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($p13, $mul.ref($i913, 12296));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p915 := $bitcast.ref.ref($p914);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i916 := ib_dma_map_single($p4, $p915, 8268, 2);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i917 := ib_dma_mapping_error($p4, $i916);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i918 := $ne.i32($i917, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i18 := 52;
    assume {:branchcond $i918} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i918 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($add.ref($p13, $mul.ref($i913, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p919, $i916);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($p13, $mul.ref($i913, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i922 := $load.i64($M.0, $p921);
    $p923 := $add.ref($add.ref($add.ref($p13, $mul.ref($i913, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p923, $i922);
    $p924 := $add.ref($add.ref($add.ref($p13, $mul.ref($i913, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p924, 8268);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.0, $p925);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($p926, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i928 := $load.i32($M.0, $p927);
    $p929 := $add.ref($add.ref($add.ref($p13, $mul.ref($i913, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p929, $i928);
    $i930 := $add.i64($i913, 1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($p13, $mul.ref($i930, 12296));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p932 := $bitcast.ref.ref($p931);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i933 := ib_dma_map_single($p4, $p932, 8268, 2);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i934 := ib_dma_mapping_error($p4, $i933);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i935 := $ne.i32($i934, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i18 := 53;
    assume {:branchcond $i935} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i935 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($p13, $mul.ref($i930, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p936, $i933);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($p13, $mul.ref($i930, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i939 := $load.i64($M.0, $p938);
    $p940 := $add.ref($add.ref($add.ref($p13, $mul.ref($i930, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p940, $i939);
    $p941 := $add.ref($add.ref($add.ref($p13, $mul.ref($i930, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p941, 8268);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p943 := $load.ref($M.0, $p942);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p944 := $add.ref($add.ref($p943, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i945 := $load.i32($M.0, $p944);
    $p946 := $add.ref($add.ref($add.ref($p13, $mul.ref($i930, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p946, $i945);
    $i947 := $add.i64($i930, 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($p13, $mul.ref($i947, 12296));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p949 := $bitcast.ref.ref($p948);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i950 := ib_dma_map_single($p4, $p949, 8268, 2);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i951 := ib_dma_mapping_error($p4, $i950);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i952 := $ne.i32($i951, 0);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i18 := 54;
    assume {:branchcond $i952} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p13, $mul.ref($i947, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p953, $i950);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($p13, $mul.ref($i947, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i956 := $load.i64($M.0, $p955);
    $p957 := $add.ref($add.ref($add.ref($p13, $mul.ref($i947, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p957, $i956);
    $p958 := $add.ref($add.ref($add.ref($p13, $mul.ref($i947, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p958, 8268);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p960 := $load.ref($M.0, $p959);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref($p960, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i962 := $load.i32($M.0, $p961);
    $p963 := $add.ref($add.ref($add.ref($p13, $mul.ref($i947, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p963, $i962);
    $i964 := $add.i64($i947, 1);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($p13, $mul.ref($i964, 12296));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p966 := $bitcast.ref.ref($p965);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i967 := ib_dma_map_single($p4, $p966, 8268, 2);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i968 := ib_dma_mapping_error($p4, $i967);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i969 := $ne.i32($i968, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i18 := 55;
    assume {:branchcond $i969} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i969 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p970 := $add.ref($add.ref($p13, $mul.ref($i964, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p970, $i967);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p972 := $add.ref($add.ref($p13, $mul.ref($i964, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i973 := $load.i64($M.0, $p972);
    $p974 := $add.ref($add.ref($add.ref($p13, $mul.ref($i964, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p974, $i973);
    $p975 := $add.ref($add.ref($add.ref($p13, $mul.ref($i964, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p975, 8268);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p977 := $load.ref($M.0, $p976);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($p977, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i979 := $load.i32($M.0, $p978);
    $p980 := $add.ref($add.ref($add.ref($p13, $mul.ref($i964, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p980, $i979);
    $i981 := $add.i64($i964, 1);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p982 := $add.ref($p13, $mul.ref($i981, 12296));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p983 := $bitcast.ref.ref($p982);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i984 := ib_dma_map_single($p4, $p983, 8268, 2);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i985 := ib_dma_mapping_error($p4, $i984);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i986 := $ne.i32($i985, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i18 := 56;
    assume {:branchcond $i986} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i986 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($p13, $mul.ref($i981, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p987, $i984);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($add.ref($p13, $mul.ref($i981, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i990 := $load.i64($M.0, $p989);
    $p991 := $add.ref($add.ref($add.ref($p13, $mul.ref($i981, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p991, $i990);
    $p992 := $add.ref($add.ref($add.ref($p13, $mul.ref($i981, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p992, 8268);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p994 := $load.ref($M.0, $p993);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p995 := $add.ref($add.ref($p994, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i996 := $load.i32($M.0, $p995);
    $p997 := $add.ref($add.ref($add.ref($p13, $mul.ref($i981, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p997, $i996);
    $i998 := $add.i64($i981, 1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($p13, $mul.ref($i998, 12296));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p1000 := $bitcast.ref.ref($p999);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i1001 := ib_dma_map_single($p4, $p1000, 8268, 2);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i1002 := ib_dma_mapping_error($p4, $i1001);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i1003 := $ne.i32($i1002, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i18 := 57;
    assume {:branchcond $i1003} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i1003 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p1004 := $add.ref($add.ref($p13, $mul.ref($i998, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1004, $i1001);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($p13, $mul.ref($i998, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i1007 := $load.i64($M.0, $p1006);
    $p1008 := $add.ref($add.ref($add.ref($p13, $mul.ref($i998, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1008, $i1007);
    $p1009 := $add.ref($add.ref($add.ref($p13, $mul.ref($i998, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1009, 8268);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p1011 := $load.ref($M.0, $p1010);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($add.ref($p1011, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i1013 := $load.i32($M.0, $p1012);
    $p1014 := $add.ref($add.ref($add.ref($p13, $mul.ref($i998, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1014, $i1013);
    $i1015 := $add.i64($i998, 1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p1016 := $add.ref($p13, $mul.ref($i1015, 12296));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p1017 := $bitcast.ref.ref($p1016);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i1018 := ib_dma_map_single($p4, $p1017, 8268, 2);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i1019 := ib_dma_mapping_error($p4, $i1018);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i1020 := $ne.i32($i1019, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i18 := 58;
    assume {:branchcond $i1020} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i1020 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($add.ref($p13, $mul.ref($i1015, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1021, $i1018);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($add.ref($p13, $mul.ref($i1015, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i1024 := $load.i64($M.0, $p1023);
    $p1025 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1015, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1025, $i1024);
    $p1026 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1015, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1026, 8268);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p1027 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p1028 := $load.ref($M.0, $p1027);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($add.ref($p1028, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i1030 := $load.i32($M.0, $p1029);
    $p1031 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1015, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1031, $i1030);
    $i1032 := $add.i64($i1015, 1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p1033 := $add.ref($p13, $mul.ref($i1032, 12296));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p1034 := $bitcast.ref.ref($p1033);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i1035 := ib_dma_map_single($p4, $p1034, 8268, 2);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i1036 := ib_dma_mapping_error($p4, $i1035);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i1037 := $ne.i32($i1036, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i18 := 59;
    assume {:branchcond $i1037} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i1037 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p1038 := $add.ref($add.ref($p13, $mul.ref($i1032, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1038, $i1035);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p1040 := $add.ref($add.ref($p13, $mul.ref($i1032, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i1041 := $load.i64($M.0, $p1040);
    $p1042 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1032, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1042, $i1041);
    $p1043 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1032, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1043, 8268);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p1045 := $load.ref($M.0, $p1044);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p1045, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i1047 := $load.i32($M.0, $p1046);
    $p1048 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1032, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1048, $i1047);
    $i1049 := $add.i64($i1032, 1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p1050 := $add.ref($p13, $mul.ref($i1049, 12296));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p1051 := $bitcast.ref.ref($p1050);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i1052 := ib_dma_map_single($p4, $p1051, 8268, 2);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i1053 := ib_dma_mapping_error($p4, $i1052);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i1054 := $ne.i32($i1053, 0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i18 := 60;
    assume {:branchcond $i1054} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i1054 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p1055 := $add.ref($add.ref($p13, $mul.ref($i1049, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1055, $i1052);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p1057 := $add.ref($add.ref($p13, $mul.ref($i1049, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i1058 := $load.i64($M.0, $p1057);
    $p1059 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1049, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1059, $i1058);
    $p1060 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1049, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1060, 8268);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p1061 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p1062 := $load.ref($M.0, $p1061);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p1063 := $add.ref($add.ref($p1062, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i1064 := $load.i32($M.0, $p1063);
    $p1065 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1049, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1065, $i1064);
    $i1066 := $add.i64($i1049, 1);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p1067 := $add.ref($p13, $mul.ref($i1066, 12296));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p1068 := $bitcast.ref.ref($p1067);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i1069 := ib_dma_map_single($p4, $p1068, 8268, 2);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i1070 := ib_dma_mapping_error($p4, $i1069);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i1071 := $ne.i32($i1070, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i18 := 61;
    assume {:branchcond $i1071} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p1072 := $add.ref($add.ref($p13, $mul.ref($i1066, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1072, $i1069);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p1074 := $add.ref($add.ref($p13, $mul.ref($i1066, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i1075 := $load.i64($M.0, $p1074);
    $p1076 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1066, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1076, $i1075);
    $p1077 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1066, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1077, 8268);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p1078 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p1079 := $load.ref($M.0, $p1078);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($add.ref($p1079, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i1081 := $load.i32($M.0, $p1080);
    $p1082 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1066, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1082, $i1081);
    $i1083 := $add.i64($i1066, 1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($p13, $mul.ref($i1083, 12296));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p1085 := $bitcast.ref.ref($p1084);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i1086 := ib_dma_map_single($p4, $p1085, 8268, 2);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i1087 := ib_dma_mapping_error($p4, $i1086);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i1088 := $ne.i32($i1087, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i18 := 62;
    assume {:branchcond $i1088} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i1088 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p1089 := $add.ref($add.ref($p13, $mul.ref($i1083, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1089, $i1086);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p1091 := $add.ref($add.ref($p13, $mul.ref($i1083, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i1092 := $load.i64($M.0, $p1091);
    $p1093 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1083, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1093, $i1092);
    $p1094 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1083, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1094, 8268);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p1095 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p1096 := $load.ref($M.0, $p1095);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p1097 := $add.ref($add.ref($p1096, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i1098 := $load.i32($M.0, $p1097);
    $p1099 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1083, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1099, $i1098);
    $i1100 := $add.i64($i1083, 1);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($p13, $mul.ref($i1100, 12296));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p1102 := $bitcast.ref.ref($p1101);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i1103 := ib_dma_map_single($p4, $p1102, 8268, 2);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i1104 := ib_dma_mapping_error($p4, $i1103);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i1105 := $ne.i32($i1104, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i18 := 63;
    assume {:branchcond $i1105} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i1105 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p1106 := $add.ref($add.ref($p13, $mul.ref($i1100, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1106, $i1103);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($add.ref($p13, $mul.ref($i1100, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i1109 := $load.i64($M.0, $p1108);
    $p1110 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1100, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1110, $i1109);
    $p1111 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1100, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1111, 8268);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p1112 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p1113 := $load.ref($M.0, $p1112);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p1114 := $add.ref($add.ref($p1113, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i1115 := $load.i32($M.0, $p1114);
    $p1116 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1100, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1116, $i1115);
    $i1117 := $add.i64($i1100, 1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p1118 := $add.ref($p13, $mul.ref($i1117, 12296));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p1119 := $bitcast.ref.ref($p1118);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i1120 := ib_dma_map_single($p4, $p1119, 8268, 2);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i1121 := ib_dma_mapping_error($p4, $i1120);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i1122 := $ne.i32($i1121, 0);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i18 := 64;
    assume {:branchcond $i1122} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i1122 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p1123 := $add.ref($add.ref($p13, $mul.ref($i1117, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1123, $i1120);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($p13, $mul.ref($i1117, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i1126 := $load.i64($M.0, $p1125);
    $p1127 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1117, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1127, $i1126);
    $p1128 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1117, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1128, 8268);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p1129 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p1130 := $load.ref($M.0, $p1129);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($p1130, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i1132 := $load.i32($M.0, $p1131);
    $p1133 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1117, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1133, $i1132);
    $i1134 := $add.i64($i1117, 1);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p1135 := $add.ref($p13, $mul.ref($i1134, 12296));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p1136 := $bitcast.ref.ref($p1135);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i1137 := ib_dma_map_single($p4, $p1136, 8268, 2);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i1138 := ib_dma_mapping_error($p4, $i1137);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i1139 := $ne.i32($i1138, 0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i18 := 65;
    assume {:branchcond $i1139} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i1139 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($p13, $mul.ref($i1134, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1140, $i1137);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p1142 := $add.ref($add.ref($p13, $mul.ref($i1134, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i1143 := $load.i64($M.0, $p1142);
    $p1144 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1134, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1144, $i1143);
    $p1145 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1134, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1145, 8268);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p1147 := $load.ref($M.0, $p1146);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p1148 := $add.ref($add.ref($p1147, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i1149 := $load.i32($M.0, $p1148);
    $p1150 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1134, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1150, $i1149);
    $i1151 := $add.i64($i1134, 1);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($p13, $mul.ref($i1151, 12296));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p1153 := $bitcast.ref.ref($p1152);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i1154 := ib_dma_map_single($p4, $p1153, 8268, 2);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i1155 := ib_dma_mapping_error($p4, $i1154);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i1156 := $ne.i32($i1155, 0);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i18 := 66;
    assume {:branchcond $i1156} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i1156 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $p1157 := $add.ref($add.ref($p13, $mul.ref($i1151, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1157, $i1154);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p1159 := $add.ref($add.ref($p13, $mul.ref($i1151, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i1160 := $load.i64($M.0, $p1159);
    $p1161 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1151, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1161, $i1160);
    $p1162 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1151, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1162, 8268);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p1163 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p1164 := $load.ref($M.0, $p1163);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p1165 := $add.ref($add.ref($p1164, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i1166 := $load.i32($M.0, $p1165);
    $p1167 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1151, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1167, $i1166);
    $i1168 := $add.i64($i1151, 1);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p1169 := $add.ref($p13, $mul.ref($i1168, 12296));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p1170 := $bitcast.ref.ref($p1169);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i1171 := ib_dma_map_single($p4, $p1170, 8268, 2);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i1172 := ib_dma_mapping_error($p4, $i1171);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i1173 := $ne.i32($i1172, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i18 := 67;
    assume {:branchcond $i1173} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i1173 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $p1174 := $add.ref($add.ref($p13, $mul.ref($i1168, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1174, $i1171);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p1176 := $add.ref($add.ref($p13, $mul.ref($i1168, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i1177 := $load.i64($M.0, $p1176);
    $p1178 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1168, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1178, $i1177);
    $p1179 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1168, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1179, 8268);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p1180 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p1181 := $load.ref($M.0, $p1180);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p1182 := $add.ref($add.ref($p1181, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i1183 := $load.i32($M.0, $p1182);
    $p1184 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1168, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1184, $i1183);
    $i1185 := $add.i64($i1168, 1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($p13, $mul.ref($i1185, 12296));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p1187 := $bitcast.ref.ref($p1186);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i1188 := ib_dma_map_single($p4, $p1187, 8268, 2);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i1189 := ib_dma_mapping_error($p4, $i1188);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i1190 := $ne.i32($i1189, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i18 := 68;
    assume {:branchcond $i1190} true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i1190 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p1191 := $add.ref($add.ref($p13, $mul.ref($i1185, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1191, $i1188);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p1193 := $add.ref($add.ref($p13, $mul.ref($i1185, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i1194 := $load.i64($M.0, $p1193);
    $p1195 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1185, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1195, $i1194);
    $p1196 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1185, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1196, 8268);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p1198 := $load.ref($M.0, $p1197);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p1199 := $add.ref($add.ref($p1198, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i1200 := $load.i32($M.0, $p1199);
    $p1201 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1185, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1201, $i1200);
    $i1202 := $add.i64($i1185, 1);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($p13, $mul.ref($i1202, 12296));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p1204 := $bitcast.ref.ref($p1203);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i1205 := ib_dma_map_single($p4, $p1204, 8268, 2);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i1206 := ib_dma_mapping_error($p4, $i1205);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i1207 := $ne.i32($i1206, 0);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i18 := 69;
    assume {:branchcond $i1207} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i1207 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p1208 := $add.ref($add.ref($p13, $mul.ref($i1202, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1208, $i1205);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p1210 := $add.ref($add.ref($p13, $mul.ref($i1202, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i1211 := $load.i64($M.0, $p1210);
    $p1212 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1202, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1212, $i1211);
    $p1213 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1202, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1213, 8268);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p1214 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p1215 := $load.ref($M.0, $p1214);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p1216 := $add.ref($add.ref($p1215, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i1217 := $load.i32($M.0, $p1216);
    $p1218 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1202, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1218, $i1217);
    $i1219 := $add.i64($i1202, 1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p1220 := $add.ref($p13, $mul.ref($i1219, 12296));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p1221 := $bitcast.ref.ref($p1220);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i1222 := ib_dma_map_single($p4, $p1221, 8268, 2);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i1223 := ib_dma_mapping_error($p4, $i1222);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i1224 := $ne.i32($i1223, 0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i18 := 70;
    assume {:branchcond $i1224} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i1224 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p1225 := $add.ref($add.ref($p13, $mul.ref($i1219, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1225, $i1222);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($add.ref($p13, $mul.ref($i1219, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i1228 := $load.i64($M.0, $p1227);
    $p1229 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1219, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1229, $i1228);
    $p1230 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1219, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1230, 8268);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p1231 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p1232 := $load.ref($M.0, $p1231);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($p1232, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i1234 := $load.i32($M.0, $p1233);
    $p1235 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1219, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1235, $i1234);
    $i1236 := $add.i64($i1219, 1);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p1237 := $add.ref($p13, $mul.ref($i1236, 12296));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p1238 := $bitcast.ref.ref($p1237);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i1239 := ib_dma_map_single($p4, $p1238, 8268, 2);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i1240 := ib_dma_mapping_error($p4, $i1239);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i1241 := $ne.i32($i1240, 0);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i18 := 71;
    assume {:branchcond $i1241} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i1241 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($p13, $mul.ref($i1236, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1242, $i1239);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p1244 := $add.ref($add.ref($p13, $mul.ref($i1236, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i1245 := $load.i64($M.0, $p1244);
    $p1246 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1236, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1246, $i1245);
    $p1247 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1236, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1247, 8268);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p1248 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p1249 := $load.ref($M.0, $p1248);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p1250 := $add.ref($add.ref($p1249, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i1251 := $load.i32($M.0, $p1250);
    $p1252 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1236, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1252, $i1251);
    $i1253 := $add.i64($i1236, 1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p1254 := $add.ref($p13, $mul.ref($i1253, 12296));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p1255 := $bitcast.ref.ref($p1254);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i1256 := ib_dma_map_single($p4, $p1255, 8268, 2);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i1257 := ib_dma_mapping_error($p4, $i1256);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i1258 := $ne.i32($i1257, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i18 := 72;
    assume {:branchcond $i1258} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i1258 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $p1259 := $add.ref($add.ref($p13, $mul.ref($i1253, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1259, $i1256);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p1261 := $add.ref($add.ref($p13, $mul.ref($i1253, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i1262 := $load.i64($M.0, $p1261);
    $p1263 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1253, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1263, $i1262);
    $p1264 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1253, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1264, 8268);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p1265 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p1266 := $load.ref($M.0, $p1265);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p1267 := $add.ref($add.ref($p1266, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i1268 := $load.i32($M.0, $p1267);
    $p1269 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1253, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1269, $i1268);
    $i1270 := $add.i64($i1253, 1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p1271 := $add.ref($p13, $mul.ref($i1270, 12296));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p1272 := $bitcast.ref.ref($p1271);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i1273 := ib_dma_map_single($p4, $p1272, 8268, 2);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i1274 := ib_dma_mapping_error($p4, $i1273);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i1275 := $ne.i32($i1274, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i18 := 73;
    assume {:branchcond $i1275} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i1275 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p1276 := $add.ref($add.ref($p13, $mul.ref($i1270, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1276, $i1273);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p1278 := $add.ref($add.ref($p13, $mul.ref($i1270, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i1279 := $load.i64($M.0, $p1278);
    $p1280 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1270, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1280, $i1279);
    $p1281 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1270, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1281, 8268);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p1283 := $load.ref($M.0, $p1282);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p1284 := $add.ref($add.ref($p1283, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i1285 := $load.i32($M.0, $p1284);
    $p1286 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1270, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1286, $i1285);
    $i1287 := $add.i64($i1270, 1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p1288 := $add.ref($p13, $mul.ref($i1287, 12296));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p1289 := $bitcast.ref.ref($p1288);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i1290 := ib_dma_map_single($p4, $p1289, 8268, 2);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i1291 := ib_dma_mapping_error($p4, $i1290);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i1292 := $ne.i32($i1291, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i18 := 74;
    assume {:branchcond $i1292} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i1292 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($p13, $mul.ref($i1287, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1293, $i1290);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($p13, $mul.ref($i1287, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i1296 := $load.i64($M.0, $p1295);
    $p1297 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1287, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1297, $i1296);
    $p1298 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1287, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1298, 8268);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p1300 := $load.ref($M.0, $p1299);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p1301 := $add.ref($add.ref($p1300, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i1302 := $load.i32($M.0, $p1301);
    $p1303 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1287, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1303, $i1302);
    $i1304 := $add.i64($i1287, 1);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p1305 := $add.ref($p13, $mul.ref($i1304, 12296));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p1306 := $bitcast.ref.ref($p1305);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i1307 := ib_dma_map_single($p4, $p1306, 8268, 2);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i1308 := ib_dma_mapping_error($p4, $i1307);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i1309 := $ne.i32($i1308, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i18 := 75;
    assume {:branchcond $i1309} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i1309 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $p1310 := $add.ref($add.ref($p13, $mul.ref($i1304, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1310, $i1307);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p1312 := $add.ref($add.ref($p13, $mul.ref($i1304, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i1313 := $load.i64($M.0, $p1312);
    $p1314 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1304, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1314, $i1313);
    $p1315 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1304, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1315, 8268);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p1317 := $load.ref($M.0, $p1316);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($add.ref($p1317, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i1319 := $load.i32($M.0, $p1318);
    $p1320 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1304, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1320, $i1319);
    $i1321 := $add.i64($i1304, 1);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p1322 := $add.ref($p13, $mul.ref($i1321, 12296));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $p1323 := $bitcast.ref.ref($p1322);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i1324 := ib_dma_map_single($p4, $p1323, 8268, 2);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i1325 := ib_dma_mapping_error($p4, $i1324);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i1326 := $ne.i32($i1325, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i18 := 76;
    assume {:branchcond $i1326} true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i1326 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $p1327 := $add.ref($add.ref($p13, $mul.ref($i1321, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1327, $i1324);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p1329 := $add.ref($add.ref($p13, $mul.ref($i1321, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i1330 := $load.i64($M.0, $p1329);
    $p1331 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1321, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1331, $i1330);
    $p1332 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1321, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1332, 8268);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p1333 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p1334 := $load.ref($M.0, $p1333);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($add.ref($p1334, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i1336 := $load.i32($M.0, $p1335);
    $p1337 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1321, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1337, $i1336);
    $i1338 := $add.i64($i1321, 1);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p1339 := $add.ref($p13, $mul.ref($i1338, 12296));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p1340 := $bitcast.ref.ref($p1339);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i1341 := ib_dma_map_single($p4, $p1340, 8268, 2);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i1342 := ib_dma_mapping_error($p4, $i1341);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i1343 := $ne.i32($i1342, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i18 := 77;
    assume {:branchcond $i1343} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i1343 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $p1344 := $add.ref($add.ref($p13, $mul.ref($i1338, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1344, $i1341);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p1346 := $add.ref($add.ref($p13, $mul.ref($i1338, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i1347 := $load.i64($M.0, $p1346);
    $p1348 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1338, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1348, $i1347);
    $p1349 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1338, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1349, 8268);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p1350 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p1351 := $load.ref($M.0, $p1350);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p1352 := $add.ref($add.ref($p1351, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i1353 := $load.i32($M.0, $p1352);
    $p1354 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1338, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1354, $i1353);
    $i1355 := $add.i64($i1338, 1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p1356 := $add.ref($p13, $mul.ref($i1355, 12296));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p1357 := $bitcast.ref.ref($p1356);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i1358 := ib_dma_map_single($p4, $p1357, 8268, 2);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i1359 := ib_dma_mapping_error($p4, $i1358);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i1360 := $ne.i32($i1359, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i18 := 78;
    assume {:branchcond $i1360} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i1360 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($add.ref($p13, $mul.ref($i1355, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1361, $i1358);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p1363 := $add.ref($add.ref($p13, $mul.ref($i1355, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i1364 := $load.i64($M.0, $p1363);
    $p1365 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1355, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1365, $i1364);
    $p1366 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1355, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1366, 8268);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p1367 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p1368 := $load.ref($M.0, $p1367);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p1369 := $add.ref($add.ref($p1368, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i1370 := $load.i32($M.0, $p1369);
    $p1371 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1355, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1371, $i1370);
    $i1372 := $add.i64($i1355, 1);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p1373 := $add.ref($p13, $mul.ref($i1372, 12296));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p1374 := $bitcast.ref.ref($p1373);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i1375 := ib_dma_map_single($p4, $p1374, 8268, 2);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i1376 := ib_dma_mapping_error($p4, $i1375);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i1377 := $ne.i32($i1376, 0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i18 := 79;
    assume {:branchcond $i1377} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i1377 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $p1378 := $add.ref($add.ref($p13, $mul.ref($i1372, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1378, $i1375);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p1380 := $add.ref($add.ref($p13, $mul.ref($i1372, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i1381 := $load.i64($M.0, $p1380);
    $p1382 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1372, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1382, $i1381);
    $p1383 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1372, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1383, 8268);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p1384 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p1385 := $load.ref($M.0, $p1384);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p1386 := $add.ref($add.ref($p1385, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i1387 := $load.i32($M.0, $p1386);
    $p1388 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1372, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1388, $i1387);
    $i1389 := $add.i64($i1372, 1);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p1390 := $add.ref($p13, $mul.ref($i1389, 12296));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $p1391 := $bitcast.ref.ref($p1390);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i1392 := ib_dma_map_single($p4, $p1391, 8268, 2);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i1393 := ib_dma_mapping_error($p4, $i1392);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i1394 := $ne.i32($i1393, 0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i18 := 80;
    assume {:branchcond $i1394} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i1394 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($p13, $mul.ref($i1389, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1395, $i1392);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p1397 := $add.ref($add.ref($p13, $mul.ref($i1389, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i1398 := $load.i64($M.0, $p1397);
    $p1399 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1389, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1399, $i1398);
    $p1400 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1389, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1400, 8268);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p1401 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p1402 := $load.ref($M.0, $p1401);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p1403 := $add.ref($add.ref($p1402, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i1404 := $load.i32($M.0, $p1403);
    $p1405 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1389, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1405, $i1404);
    $i1406 := $add.i64($i1389, 1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p1407 := $add.ref($p13, $mul.ref($i1406, 12296));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $p1408 := $bitcast.ref.ref($p1407);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i1409 := ib_dma_map_single($p4, $p1408, 8268, 2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i1410 := ib_dma_mapping_error($p4, $i1409);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i1411 := $ne.i32($i1410, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i18 := 81;
    assume {:branchcond $i1411} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i1411 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $p1412 := $add.ref($add.ref($p13, $mul.ref($i1406, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1412, $i1409);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p1414 := $add.ref($add.ref($p13, $mul.ref($i1406, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i1415 := $load.i64($M.0, $p1414);
    $p1416 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1406, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1416, $i1415);
    $p1417 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1406, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1417, 8268);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p1418 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p1419 := $load.ref($M.0, $p1418);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p1420 := $add.ref($add.ref($p1419, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i1421 := $load.i32($M.0, $p1420);
    $p1422 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1406, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1422, $i1421);
    $i1423 := $add.i64($i1406, 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p1424 := $add.ref($p13, $mul.ref($i1423, 12296));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $p1425 := $bitcast.ref.ref($p1424);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i1426 := ib_dma_map_single($p4, $p1425, 8268, 2);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i1427 := ib_dma_mapping_error($p4, $i1426);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i1428 := $ne.i32($i1427, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i18 := 82;
    assume {:branchcond $i1428} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i1428 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $p1429 := $add.ref($add.ref($p13, $mul.ref($i1423, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1429, $i1426);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($p13, $mul.ref($i1423, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i1432 := $load.i64($M.0, $p1431);
    $p1433 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1423, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1433, $i1432);
    $p1434 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1423, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1434, 8268);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p1435 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p1436 := $load.ref($M.0, $p1435);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p1437 := $add.ref($add.ref($p1436, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i1438 := $load.i32($M.0, $p1437);
    $p1439 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1423, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1439, $i1438);
    $i1440 := $add.i64($i1423, 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p1441 := $add.ref($p13, $mul.ref($i1440, 12296));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p1442 := $bitcast.ref.ref($p1441);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i1443 := ib_dma_map_single($p4, $p1442, 8268, 2);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i1444 := ib_dma_mapping_error($p4, $i1443);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i1445 := $ne.i32($i1444, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i18 := 83;
    assume {:branchcond $i1445} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i1445 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $p1446 := $add.ref($add.ref($p13, $mul.ref($i1440, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1446, $i1443);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p1448 := $add.ref($add.ref($p13, $mul.ref($i1440, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i1449 := $load.i64($M.0, $p1448);
    $p1450 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1440, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1450, $i1449);
    $p1451 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1440, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1451, 8268);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p1452 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p1453 := $load.ref($M.0, $p1452);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p1454 := $add.ref($add.ref($p1453, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i1455 := $load.i32($M.0, $p1454);
    $p1456 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1440, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1456, $i1455);
    $i1457 := $add.i64($i1440, 1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p1458 := $add.ref($p13, $mul.ref($i1457, 12296));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p1459 := $bitcast.ref.ref($p1458);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i1460 := ib_dma_map_single($p4, $p1459, 8268, 2);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i1461 := ib_dma_mapping_error($p4, $i1460);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i1462 := $ne.i32($i1461, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i18 := 84;
    assume {:branchcond $i1462} true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i1462 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $p1463 := $add.ref($add.ref($p13, $mul.ref($i1457, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1463, $i1460);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p1465 := $add.ref($add.ref($p13, $mul.ref($i1457, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i1466 := $load.i64($M.0, $p1465);
    $p1467 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1457, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1467, $i1466);
    $p1468 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1457, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1468, 8268);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p1469 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p1470 := $load.ref($M.0, $p1469);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p1471 := $add.ref($add.ref($p1470, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i1472 := $load.i32($M.0, $p1471);
    $p1473 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1457, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1473, $i1472);
    $i1474 := $add.i64($i1457, 1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p1475 := $add.ref($p13, $mul.ref($i1474, 12296));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p1476 := $bitcast.ref.ref($p1475);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i1477 := ib_dma_map_single($p4, $p1476, 8268, 2);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i1478 := ib_dma_mapping_error($p4, $i1477);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i1479 := $ne.i32($i1478, 0);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i18 := 85;
    assume {:branchcond $i1479} true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i1479 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $p1480 := $add.ref($add.ref($p13, $mul.ref($i1474, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1480, $i1477);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p1482 := $add.ref($add.ref($p13, $mul.ref($i1474, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i1483 := $load.i64($M.0, $p1482);
    $p1484 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1474, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1484, $i1483);
    $p1485 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1474, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1485, 8268);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p1486 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p1487 := $load.ref($M.0, $p1486);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p1488 := $add.ref($add.ref($p1487, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i1489 := $load.i32($M.0, $p1488);
    $p1490 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1474, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1490, $i1489);
    $i1491 := $add.i64($i1474, 1);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p1492 := $add.ref($p13, $mul.ref($i1491, 12296));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $p1493 := $bitcast.ref.ref($p1492);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i1494 := ib_dma_map_single($p4, $p1493, 8268, 2);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i1495 := ib_dma_mapping_error($p4, $i1494);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i1496 := $ne.i32($i1495, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i18 := 86;
    assume {:branchcond $i1496} true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i1496 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($add.ref($p13, $mul.ref($i1491, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1497, $i1494);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p1499 := $add.ref($add.ref($p13, $mul.ref($i1491, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i1500 := $load.i64($M.0, $p1499);
    $p1501 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1491, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1501, $i1500);
    $p1502 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1491, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1502, 8268);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p1503 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p1504 := $load.ref($M.0, $p1503);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p1505 := $add.ref($add.ref($p1504, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i1506 := $load.i32($M.0, $p1505);
    $p1507 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1491, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1507, $i1506);
    $i1508 := $add.i64($i1491, 1);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p1509 := $add.ref($p13, $mul.ref($i1508, 12296));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p1510 := $bitcast.ref.ref($p1509);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i1511 := ib_dma_map_single($p4, $p1510, 8268, 2);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i1512 := ib_dma_mapping_error($p4, $i1511);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i1513 := $ne.i32($i1512, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i18 := 87;
    assume {:branchcond $i1513} true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i1513 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $p1514 := $add.ref($add.ref($p13, $mul.ref($i1508, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1514, $i1511);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p1516 := $add.ref($add.ref($p13, $mul.ref($i1508, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i1517 := $load.i64($M.0, $p1516);
    $p1518 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1508, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1518, $i1517);
    $p1519 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1508, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1519, 8268);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p1520 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p1521 := $load.ref($M.0, $p1520);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p1522 := $add.ref($add.ref($p1521, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i1523 := $load.i32($M.0, $p1522);
    $p1524 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1508, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1524, $i1523);
    $i1525 := $add.i64($i1508, 1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($p13, $mul.ref($i1525, 12296));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $p1527 := $bitcast.ref.ref($p1526);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i1528 := ib_dma_map_single($p4, $p1527, 8268, 2);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i1529 := ib_dma_mapping_error($p4, $i1528);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i1530 := $ne.i32($i1529, 0);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i18 := 88;
    assume {:branchcond $i1530} true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i1530 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $p1531 := $add.ref($add.ref($p13, $mul.ref($i1525, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1531, $i1528);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p1533 := $add.ref($add.ref($p13, $mul.ref($i1525, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i1534 := $load.i64($M.0, $p1533);
    $p1535 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1525, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1535, $i1534);
    $p1536 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1525, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1536, 8268);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p1538 := $load.ref($M.0, $p1537);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p1539 := $add.ref($add.ref($p1538, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i1540 := $load.i32($M.0, $p1539);
    $p1541 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1525, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1541, $i1540);
    $i1542 := $add.i64($i1525, 1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p1543 := $add.ref($p13, $mul.ref($i1542, 12296));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p1544 := $bitcast.ref.ref($p1543);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i1545 := ib_dma_map_single($p4, $p1544, 8268, 2);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i1546 := ib_dma_mapping_error($p4, $i1545);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i1547 := $ne.i32($i1546, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i18 := 89;
    assume {:branchcond $i1547} true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i1547 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $p1548 := $add.ref($add.ref($p13, $mul.ref($i1542, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1548, $i1545);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p1550 := $add.ref($add.ref($p13, $mul.ref($i1542, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i1551 := $load.i64($M.0, $p1550);
    $p1552 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1542, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1552, $i1551);
    $p1553 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1542, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1553, 8268);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p1554 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p1555 := $load.ref($M.0, $p1554);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p1556 := $add.ref($add.ref($p1555, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i1557 := $load.i32($M.0, $p1556);
    $p1558 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1542, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1558, $i1557);
    $i1559 := $add.i64($i1542, 1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p1560 := $add.ref($p13, $mul.ref($i1559, 12296));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $p1561 := $bitcast.ref.ref($p1560);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i1562 := ib_dma_map_single($p4, $p1561, 8268, 2);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i1563 := ib_dma_mapping_error($p4, $i1562);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i1564 := $ne.i32($i1563, 0);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i18 := 90;
    assume {:branchcond $i1564} true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i1564 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $p1565 := $add.ref($add.ref($p13, $mul.ref($i1559, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1565, $i1562);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p1567 := $add.ref($add.ref($p13, $mul.ref($i1559, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i1568 := $load.i64($M.0, $p1567);
    $p1569 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1559, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1569, $i1568);
    $p1570 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1559, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1570, 8268);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p1571 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p1572 := $load.ref($M.0, $p1571);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p1573 := $add.ref($add.ref($p1572, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i1574 := $load.i32($M.0, $p1573);
    $p1575 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1559, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1575, $i1574);
    $i1576 := $add.i64($i1559, 1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p1577 := $add.ref($p13, $mul.ref($i1576, 12296));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p1578 := $bitcast.ref.ref($p1577);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i1579 := ib_dma_map_single($p4, $p1578, 8268, 2);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i1580 := ib_dma_mapping_error($p4, $i1579);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i1581 := $ne.i32($i1580, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i18 := 91;
    assume {:branchcond $i1581} true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i1581 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $p1582 := $add.ref($add.ref($p13, $mul.ref($i1576, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1582, $i1579);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p1584 := $add.ref($add.ref($p13, $mul.ref($i1576, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i1585 := $load.i64($M.0, $p1584);
    $p1586 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1576, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1586, $i1585);
    $p1587 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1576, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1587, 8268);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p1588 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p1589 := $load.ref($M.0, $p1588);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p1590 := $add.ref($add.ref($p1589, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i1591 := $load.i32($M.0, $p1590);
    $p1592 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1576, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1592, $i1591);
    $i1593 := $add.i64($i1576, 1);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p1594 := $add.ref($p13, $mul.ref($i1593, 12296));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $p1595 := $bitcast.ref.ref($p1594);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i1596 := ib_dma_map_single($p4, $p1595, 8268, 2);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i1597 := ib_dma_mapping_error($p4, $i1596);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i1598 := $ne.i32($i1597, 0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i18 := 92;
    assume {:branchcond $i1598} true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i1598 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $p1599 := $add.ref($add.ref($p13, $mul.ref($i1593, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1599, $i1596);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p1601 := $add.ref($add.ref($p13, $mul.ref($i1593, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i1602 := $load.i64($M.0, $p1601);
    $p1603 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1593, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1603, $i1602);
    $p1604 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1593, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1604, 8268);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p1605 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p1606 := $load.ref($M.0, $p1605);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p1607 := $add.ref($add.ref($p1606, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i1608 := $load.i32($M.0, $p1607);
    $p1609 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1593, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1609, $i1608);
    $i1610 := $add.i64($i1593, 1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p1611 := $add.ref($p13, $mul.ref($i1610, 12296));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $p1612 := $bitcast.ref.ref($p1611);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i1613 := ib_dma_map_single($p4, $p1612, 8268, 2);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i1614 := ib_dma_mapping_error($p4, $i1613);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i1615 := $ne.i32($i1614, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i18 := 93;
    assume {:branchcond $i1615} true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i1615 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    $p1616 := $add.ref($add.ref($p13, $mul.ref($i1610, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1616, $i1613);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p1618 := $add.ref($add.ref($p13, $mul.ref($i1610, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i1619 := $load.i64($M.0, $p1618);
    $p1620 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1610, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1620, $i1619);
    $p1621 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1610, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1621, 8268);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p1622 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p1623 := $load.ref($M.0, $p1622);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p1624 := $add.ref($add.ref($p1623, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i1625 := $load.i32($M.0, $p1624);
    $p1626 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1610, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1626, $i1625);
    $i1627 := $add.i64($i1610, 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p1628 := $add.ref($p13, $mul.ref($i1627, 12296));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $p1629 := $bitcast.ref.ref($p1628);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i1630 := ib_dma_map_single($p4, $p1629, 8268, 2);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i1631 := ib_dma_mapping_error($p4, $i1630);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i1632 := $ne.i32($i1631, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i18 := 94;
    assume {:branchcond $i1632} true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i1632 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $p1633 := $add.ref($add.ref($p13, $mul.ref($i1627, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1633, $i1630);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p1635 := $add.ref($add.ref($p13, $mul.ref($i1627, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i1636 := $load.i64($M.0, $p1635);
    $p1637 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1627, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1637, $i1636);
    $p1638 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1627, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1638, 8268);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p1639 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p1640 := $load.ref($M.0, $p1639);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p1641 := $add.ref($add.ref($p1640, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i1642 := $load.i32($M.0, $p1641);
    $p1643 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1627, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1643, $i1642);
    $i1644 := $add.i64($i1627, 1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p1645 := $add.ref($p13, $mul.ref($i1644, 12296));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p1646 := $bitcast.ref.ref($p1645);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i1647 := ib_dma_map_single($p4, $p1646, 8268, 2);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i1648 := ib_dma_mapping_error($p4, $i1647);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i1649 := $ne.i32($i1648, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i18 := 95;
    assume {:branchcond $i1649} true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i1649 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $p1650 := $add.ref($add.ref($p13, $mul.ref($i1644, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1650, $i1647);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p1652 := $add.ref($add.ref($p13, $mul.ref($i1644, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i1653 := $load.i64($M.0, $p1652);
    $p1654 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1644, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1654, $i1653);
    $p1655 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1644, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1655, 8268);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p1656 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p1657 := $load.ref($M.0, $p1656);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p1658 := $add.ref($add.ref($p1657, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i1659 := $load.i32($M.0, $p1658);
    $p1660 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1644, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1660, $i1659);
    $i1661 := $add.i64($i1644, 1);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p1662 := $add.ref($p13, $mul.ref($i1661, 12296));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    $p1663 := $bitcast.ref.ref($p1662);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i1664 := ib_dma_map_single($p4, $p1663, 8268, 2);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i1665 := ib_dma_mapping_error($p4, $i1664);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i1666 := $ne.i32($i1665, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i18 := 96;
    assume {:branchcond $i1666} true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i1666 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    $p1667 := $add.ref($add.ref($p13, $mul.ref($i1661, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1667, $i1664);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p1669 := $add.ref($add.ref($p13, $mul.ref($i1661, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i1670 := $load.i64($M.0, $p1669);
    $p1671 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1661, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1671, $i1670);
    $p1672 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1661, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1672, 8268);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p1673 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p1674 := $load.ref($M.0, $p1673);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p1675 := $add.ref($add.ref($p1674, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i1676 := $load.i32($M.0, $p1675);
    $p1677 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1661, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1677, $i1676);
    $i1678 := $add.i64($i1661, 1);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p1679 := $add.ref($p13, $mul.ref($i1678, 12296));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p1680 := $bitcast.ref.ref($p1679);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i1681 := ib_dma_map_single($p4, $p1680, 8268, 2);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i1682 := ib_dma_mapping_error($p4, $i1681);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i1683 := $ne.i32($i1682, 0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i18 := 97;
    assume {:branchcond $i1683} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i1683 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $p1684 := $add.ref($add.ref($p13, $mul.ref($i1678, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1684, $i1681);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p1686 := $add.ref($add.ref($p13, $mul.ref($i1678, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i1687 := $load.i64($M.0, $p1686);
    $p1688 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1678, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1688, $i1687);
    $p1689 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1678, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1689, 8268);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p1690 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p1691 := $load.ref($M.0, $p1690);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p1692 := $add.ref($add.ref($p1691, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i1693 := $load.i32($M.0, $p1692);
    $p1694 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1678, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1694, $i1693);
    $i1695 := $add.i64($i1678, 1);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p1696 := $add.ref($p13, $mul.ref($i1695, 12296));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $p1697 := $bitcast.ref.ref($p1696);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i1698 := ib_dma_map_single($p4, $p1697, 8268, 2);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i1699 := ib_dma_mapping_error($p4, $i1698);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i1700 := $ne.i32($i1699, 0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i18 := 98;
    assume {:branchcond $i1700} true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i1700 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $p1701 := $add.ref($add.ref($p13, $mul.ref($i1695, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1701, $i1698);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p1703 := $add.ref($add.ref($p13, $mul.ref($i1695, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i1704 := $load.i64($M.0, $p1703);
    $p1705 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1695, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1705, $i1704);
    $p1706 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1695, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1706, 8268);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p1707 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p1708 := $load.ref($M.0, $p1707);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p1709 := $add.ref($add.ref($p1708, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i1710 := $load.i32($M.0, $p1709);
    $p1711 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1695, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1711, $i1710);
    $i1712 := $add.i64($i1695, 1);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p1713 := $add.ref($p13, $mul.ref($i1712, 12296));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $p1714 := $bitcast.ref.ref($p1713);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i1715 := ib_dma_map_single($p4, $p1714, 8268, 2);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i1716 := ib_dma_mapping_error($p4, $i1715);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i1717 := $ne.i32($i1716, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i18 := 99;
    assume {:branchcond $i1717} true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i1717 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    $p1718 := $add.ref($add.ref($p13, $mul.ref($i1712, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1718, $i1715);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p1720 := $add.ref($add.ref($p13, $mul.ref($i1712, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i1721 := $load.i64($M.0, $p1720);
    $p1722 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1712, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1722, $i1721);
    $p1723 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1712, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1723, 8268);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p1724 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p1725 := $load.ref($M.0, $p1724);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p1726 := $add.ref($add.ref($p1725, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i1727 := $load.i32($M.0, $p1726);
    $p1728 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1712, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1728, $i1727);
    $i1729 := $add.i64($i1712, 1);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p1730 := $add.ref($p13, $mul.ref($i1729, 12296));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $p1731 := $bitcast.ref.ref($p1730);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i1732 := ib_dma_map_single($p4, $p1731, 8268, 2);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i1733 := ib_dma_mapping_error($p4, $i1732);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i1734 := $ne.i32($i1733, 0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i18 := 100;
    assume {:branchcond $i1734} true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i1734 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $p1735 := $add.ref($add.ref($p13, $mul.ref($i1729, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1735, $i1732);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p1737 := $add.ref($add.ref($p13, $mul.ref($i1729, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i1738 := $load.i64($M.0, $p1737);
    $p1739 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1729, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1739, $i1738);
    $p1740 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1729, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1740, 8268);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p1741 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p1742 := $load.ref($M.0, $p1741);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p1743 := $add.ref($add.ref($p1742, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i1744 := $load.i32($M.0, $p1743);
    $p1745 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1729, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1745, $i1744);
    $i1746 := $add.i64($i1729, 1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p1747 := $add.ref($p13, $mul.ref($i1746, 12296));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p1748 := $bitcast.ref.ref($p1747);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i1749 := ib_dma_map_single($p4, $p1748, 8268, 2);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i1750 := ib_dma_mapping_error($p4, $i1749);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i1751 := $ne.i32($i1750, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i18 := 101;
    assume {:branchcond $i1751} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i1751 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $p1752 := $add.ref($add.ref($p13, $mul.ref($i1746, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1752, $i1749);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p1754 := $add.ref($add.ref($p13, $mul.ref($i1746, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i1755 := $load.i64($M.0, $p1754);
    $p1756 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1746, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1756, $i1755);
    $p1757 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1746, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1757, 8268);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p1758 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p1759 := $load.ref($M.0, $p1758);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p1760 := $add.ref($add.ref($p1759, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i1761 := $load.i32($M.0, $p1760);
    $p1762 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1746, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1762, $i1761);
    $i1763 := $add.i64($i1746, 1);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p1764 := $add.ref($p13, $mul.ref($i1763, 12296));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $p1765 := $bitcast.ref.ref($p1764);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i1766 := ib_dma_map_single($p4, $p1765, 8268, 2);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i1767 := ib_dma_mapping_error($p4, $i1766);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i1768 := $ne.i32($i1767, 0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i18 := 102;
    assume {:branchcond $i1768} true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i1768 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    $p1769 := $add.ref($add.ref($p13, $mul.ref($i1763, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1769, $i1766);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p1771 := $add.ref($add.ref($p13, $mul.ref($i1763, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i1772 := $load.i64($M.0, $p1771);
    $p1773 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1763, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1773, $i1772);
    $p1774 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1763, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1774, 8268);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p1775 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p1776 := $load.ref($M.0, $p1775);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p1777 := $add.ref($add.ref($p1776, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i1778 := $load.i32($M.0, $p1777);
    $p1779 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1763, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1779, $i1778);
    $i1780 := $add.i64($i1763, 1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p1781 := $add.ref($p13, $mul.ref($i1780, 12296));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $p1782 := $bitcast.ref.ref($p1781);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i1783 := ib_dma_map_single($p4, $p1782, 8268, 2);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i1784 := ib_dma_mapping_error($p4, $i1783);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i1785 := $ne.i32($i1784, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i18 := 103;
    assume {:branchcond $i1785} true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i1785 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $p1786 := $add.ref($add.ref($p13, $mul.ref($i1780, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1786, $i1783);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p1788 := $add.ref($add.ref($p13, $mul.ref($i1780, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i1789 := $load.i64($M.0, $p1788);
    $p1790 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1780, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1790, $i1789);
    $p1791 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1780, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1791, 8268);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p1792 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p1793 := $load.ref($M.0, $p1792);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p1794 := $add.ref($add.ref($p1793, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i1795 := $load.i32($M.0, $p1794);
    $p1796 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1780, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1796, $i1795);
    $i1797 := $add.i64($i1780, 1);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p1798 := $add.ref($p13, $mul.ref($i1797, 12296));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p1799 := $bitcast.ref.ref($p1798);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i1800 := ib_dma_map_single($p4, $p1799, 8268, 2);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i1801 := ib_dma_mapping_error($p4, $i1800);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i1802 := $ne.i32($i1801, 0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i18 := 104;
    assume {:branchcond $i1802} true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i1802 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    $p1803 := $add.ref($add.ref($p13, $mul.ref($i1797, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1803, $i1800);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p1805 := $add.ref($add.ref($p13, $mul.ref($i1797, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i1806 := $load.i64($M.0, $p1805);
    $p1807 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1797, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1807, $i1806);
    $p1808 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1797, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1808, 8268);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p1809 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p1810 := $load.ref($M.0, $p1809);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p1811 := $add.ref($add.ref($p1810, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i1812 := $load.i32($M.0, $p1811);
    $p1813 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1797, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1813, $i1812);
    $i1814 := $add.i64($i1797, 1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p1815 := $add.ref($p13, $mul.ref($i1814, 12296));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $p1816 := $bitcast.ref.ref($p1815);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i1817 := ib_dma_map_single($p4, $p1816, 8268, 2);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i1818 := ib_dma_mapping_error($p4, $i1817);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i1819 := $ne.i32($i1818, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i18 := 105;
    assume {:branchcond $i1819} true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i1819 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    $p1820 := $add.ref($add.ref($p13, $mul.ref($i1814, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1820, $i1817);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p1822 := $add.ref($add.ref($p13, $mul.ref($i1814, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i1823 := $load.i64($M.0, $p1822);
    $p1824 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1814, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1824, $i1823);
    $p1825 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1814, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1825, 8268);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p1826 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p1827 := $load.ref($M.0, $p1826);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p1828 := $add.ref($add.ref($p1827, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i1829 := $load.i32($M.0, $p1828);
    $p1830 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1814, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1830, $i1829);
    $i1831 := $add.i64($i1814, 1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p1832 := $add.ref($p13, $mul.ref($i1831, 12296));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $p1833 := $bitcast.ref.ref($p1832);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i1834 := ib_dma_map_single($p4, $p1833, 8268, 2);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i1835 := ib_dma_mapping_error($p4, $i1834);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i1836 := $ne.i32($i1835, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i18 := 106;
    assume {:branchcond $i1836} true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i1836 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $p1837 := $add.ref($add.ref($p13, $mul.ref($i1831, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1837, $i1834);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p1839 := $add.ref($add.ref($p13, $mul.ref($i1831, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i1840 := $load.i64($M.0, $p1839);
    $p1841 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1831, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1841, $i1840);
    $p1842 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1831, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1842, 8268);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p1843 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p1844 := $load.ref($M.0, $p1843);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p1845 := $add.ref($add.ref($p1844, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i1846 := $load.i32($M.0, $p1845);
    $p1847 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1831, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1847, $i1846);
    $i1848 := $add.i64($i1831, 1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p1849 := $add.ref($p13, $mul.ref($i1848, 12296));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $p1850 := $bitcast.ref.ref($p1849);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i1851 := ib_dma_map_single($p4, $p1850, 8268, 2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i1852 := ib_dma_mapping_error($p4, $i1851);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i1853 := $ne.i32($i1852, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i18 := 107;
    assume {:branchcond $i1853} true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i1853 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    $p1854 := $add.ref($add.ref($p13, $mul.ref($i1848, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1854, $i1851);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p1856 := $add.ref($add.ref($p13, $mul.ref($i1848, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i1857 := $load.i64($M.0, $p1856);
    $p1858 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1848, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1858, $i1857);
    $p1859 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1848, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1859, 8268);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p1860 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p1861 := $load.ref($M.0, $p1860);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p1862 := $add.ref($add.ref($p1861, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i1863 := $load.i32($M.0, $p1862);
    $p1864 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1848, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1864, $i1863);
    $i1865 := $add.i64($i1848, 1);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p1866 := $add.ref($p13, $mul.ref($i1865, 12296));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $p1867 := $bitcast.ref.ref($p1866);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i1868 := ib_dma_map_single($p4, $p1867, 8268, 2);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i1869 := ib_dma_mapping_error($p4, $i1868);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i1870 := $ne.i32($i1869, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i18 := 108;
    assume {:branchcond $i1870} true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i1870 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    $p1871 := $add.ref($add.ref($p13, $mul.ref($i1865, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1871, $i1868);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p1873 := $add.ref($add.ref($p13, $mul.ref($i1865, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i1874 := $load.i64($M.0, $p1873);
    $p1875 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1865, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1875, $i1874);
    $p1876 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1865, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1876, 8268);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p1877 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p1878 := $load.ref($M.0, $p1877);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p1879 := $add.ref($add.ref($p1878, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i1880 := $load.i32($M.0, $p1879);
    $p1881 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1865, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1881, $i1880);
    $i1882 := $add.i64($i1865, 1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p1883 := $add.ref($p13, $mul.ref($i1882, 12296));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $p1884 := $bitcast.ref.ref($p1883);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i1885 := ib_dma_map_single($p4, $p1884, 8268, 2);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i1886 := ib_dma_mapping_error($p4, $i1885);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i1887 := $ne.i32($i1886, 0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i18 := 109;
    assume {:branchcond $i1887} true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i1887 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    $p1888 := $add.ref($add.ref($p13, $mul.ref($i1882, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1888, $i1885);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p1890 := $add.ref($add.ref($p13, $mul.ref($i1882, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i1891 := $load.i64($M.0, $p1890);
    $p1892 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1882, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1892, $i1891);
    $p1893 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1882, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1893, 8268);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p1894 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p1895 := $load.ref($M.0, $p1894);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p1896 := $add.ref($add.ref($p1895, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i1897 := $load.i32($M.0, $p1896);
    $p1898 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1882, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1898, $i1897);
    $i1899 := $add.i64($i1882, 1);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p1900 := $add.ref($p13, $mul.ref($i1899, 12296));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $p1901 := $bitcast.ref.ref($p1900);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i1902 := ib_dma_map_single($p4, $p1901, 8268, 2);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i1903 := ib_dma_mapping_error($p4, $i1902);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i1904 := $ne.i32($i1903, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i18 := 110;
    assume {:branchcond $i1904} true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i1904 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    $p1905 := $add.ref($add.ref($p13, $mul.ref($i1899, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1905, $i1902);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p1907 := $add.ref($add.ref($p13, $mul.ref($i1899, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i1908 := $load.i64($M.0, $p1907);
    $p1909 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1899, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1909, $i1908);
    $p1910 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1899, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1910, 8268);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p1911 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p1912 := $load.ref($M.0, $p1911);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p1913 := $add.ref($add.ref($p1912, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i1914 := $load.i32($M.0, $p1913);
    $p1915 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1899, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1915, $i1914);
    $i1916 := $add.i64($i1899, 1);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p1917 := $add.ref($p13, $mul.ref($i1916, 12296));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $p1918 := $bitcast.ref.ref($p1917);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i1919 := ib_dma_map_single($p4, $p1918, 8268, 2);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i1920 := ib_dma_mapping_error($p4, $i1919);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i1921 := $ne.i32($i1920, 0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i18 := 111;
    assume {:branchcond $i1921} true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i1921 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    $p1922 := $add.ref($add.ref($p13, $mul.ref($i1916, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1922, $i1919);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p1924 := $add.ref($add.ref($p13, $mul.ref($i1916, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i1925 := $load.i64($M.0, $p1924);
    $p1926 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1916, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1926, $i1925);
    $p1927 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1916, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1927, 8268);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p1928 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p1929 := $load.ref($M.0, $p1928);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p1930 := $add.ref($add.ref($p1929, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i1931 := $load.i32($M.0, $p1930);
    $p1932 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1916, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1932, $i1931);
    $i1933 := $add.i64($i1916, 1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p1934 := $add.ref($p13, $mul.ref($i1933, 12296));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    $p1935 := $bitcast.ref.ref($p1934);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i1936 := ib_dma_map_single($p4, $p1935, 8268, 2);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i1937 := ib_dma_mapping_error($p4, $i1936);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i1938 := $ne.i32($i1937, 0);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i18 := 112;
    assume {:branchcond $i1938} true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i1938 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $p1939 := $add.ref($add.ref($p13, $mul.ref($i1933, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1939, $i1936);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p1941 := $add.ref($add.ref($p13, $mul.ref($i1933, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i1942 := $load.i64($M.0, $p1941);
    $p1943 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1933, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1943, $i1942);
    $p1944 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1933, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1944, 8268);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p1945 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p1946 := $load.ref($M.0, $p1945);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p1947 := $add.ref($add.ref($p1946, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i1948 := $load.i32($M.0, $p1947);
    $p1949 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1933, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1949, $i1948);
    $i1950 := $add.i64($i1933, 1);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p1951 := $add.ref($p13, $mul.ref($i1950, 12296));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $p1952 := $bitcast.ref.ref($p1951);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i1953 := ib_dma_map_single($p4, $p1952, 8268, 2);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i1954 := ib_dma_mapping_error($p4, $i1953);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i1955 := $ne.i32($i1954, 0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i18 := 113;
    assume {:branchcond $i1955} true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i1955 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    $p1956 := $add.ref($add.ref($p13, $mul.ref($i1950, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1956, $i1953);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p1958 := $add.ref($add.ref($p13, $mul.ref($i1950, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i1959 := $load.i64($M.0, $p1958);
    $p1960 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1950, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1960, $i1959);
    $p1961 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1950, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1961, 8268);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p1962 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p1963 := $load.ref($M.0, $p1962);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p1964 := $add.ref($add.ref($p1963, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i1965 := $load.i32($M.0, $p1964);
    $p1966 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1950, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1966, $i1965);
    $i1967 := $add.i64($i1950, 1);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p1968 := $add.ref($p13, $mul.ref($i1967, 12296));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    $p1969 := $bitcast.ref.ref($p1968);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i1970 := ib_dma_map_single($p4, $p1969, 8268, 2);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i1971 := ib_dma_mapping_error($p4, $i1970);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i1972 := $ne.i32($i1971, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i18 := 114;
    assume {:branchcond $i1972} true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i1972 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $p1973 := $add.ref($add.ref($p13, $mul.ref($i1967, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1973, $i1970);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p1975 := $add.ref($add.ref($p13, $mul.ref($i1967, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i1976 := $load.i64($M.0, $p1975);
    $p1977 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1967, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1977, $i1976);
    $p1978 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1967, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1978, 8268);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p1979 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p1980 := $load.ref($M.0, $p1979);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p1981 := $add.ref($add.ref($p1980, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i1982 := $load.i32($M.0, $p1981);
    $p1983 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1967, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1983, $i1982);
    $i1984 := $add.i64($i1967, 1);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p1985 := $add.ref($p13, $mul.ref($i1984, 12296));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $p1986 := $bitcast.ref.ref($p1985);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i1987 := ib_dma_map_single($p4, $p1986, 8268, 2);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i1988 := ib_dma_mapping_error($p4, $i1987);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i1989 := $ne.i32($i1988, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i18 := 115;
    assume {:branchcond $i1989} true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i1989 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $p1990 := $add.ref($add.ref($p13, $mul.ref($i1984, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1990, $i1987);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p1992 := $add.ref($add.ref($p13, $mul.ref($i1984, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i1993 := $load.i64($M.0, $p1992);
    $p1994 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1984, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1994, $i1993);
    $p1995 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1984, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1995, 8268);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p1996 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p1997 := $load.ref($M.0, $p1996);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p1998 := $add.ref($add.ref($p1997, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i1999 := $load.i32($M.0, $p1998);
    $p2000 := $add.ref($add.ref($add.ref($p13, $mul.ref($i1984, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2000, $i1999);
    $i2001 := $add.i64($i1984, 1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p2002 := $add.ref($p13, $mul.ref($i2001, 12296));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    $p2003 := $bitcast.ref.ref($p2002);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i2004 := ib_dma_map_single($p4, $p2003, 8268, 2);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i2005 := ib_dma_mapping_error($p4, $i2004);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i2006 := $ne.i32($i2005, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i18 := 116;
    assume {:branchcond $i2006} true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i2006 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    $p2007 := $add.ref($add.ref($p13, $mul.ref($i2001, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2007, $i2004);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p2009 := $add.ref($add.ref($p13, $mul.ref($i2001, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i2010 := $load.i64($M.0, $p2009);
    $p2011 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2001, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2011, $i2010);
    $p2012 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2001, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2012, 8268);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p2013 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p2014 := $load.ref($M.0, $p2013);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p2015 := $add.ref($add.ref($p2014, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i2016 := $load.i32($M.0, $p2015);
    $p2017 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2001, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2017, $i2016);
    $i2018 := $add.i64($i2001, 1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p2019 := $add.ref($p13, $mul.ref($i2018, 12296));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    $p2020 := $bitcast.ref.ref($p2019);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i2021 := ib_dma_map_single($p4, $p2020, 8268, 2);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i2022 := ib_dma_mapping_error($p4, $i2021);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i2023 := $ne.i32($i2022, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i18 := 117;
    assume {:branchcond $i2023} true;
    goto $bb487, $bb488;

  $bb488:
    assume !($i2023 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    $p2024 := $add.ref($add.ref($p13, $mul.ref($i2018, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2024, $i2021);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p2026 := $add.ref($add.ref($p13, $mul.ref($i2018, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i2027 := $load.i64($M.0, $p2026);
    $p2028 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2018, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2028, $i2027);
    $p2029 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2018, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2029, 8268);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p2030 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p2031 := $load.ref($M.0, $p2030);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p2032 := $add.ref($add.ref($p2031, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i2033 := $load.i32($M.0, $p2032);
    $p2034 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2018, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2034, $i2033);
    $i2035 := $add.i64($i2018, 1);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p2036 := $add.ref($p13, $mul.ref($i2035, 12296));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $p2037 := $bitcast.ref.ref($p2036);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i2038 := ib_dma_map_single($p4, $p2037, 8268, 2);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i2039 := ib_dma_mapping_error($p4, $i2038);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i2040 := $ne.i32($i2039, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i18 := 118;
    assume {:branchcond $i2040} true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i2040 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    $p2041 := $add.ref($add.ref($p13, $mul.ref($i2035, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2041, $i2038);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p2043 := $add.ref($add.ref($p13, $mul.ref($i2035, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i2044 := $load.i64($M.0, $p2043);
    $p2045 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2035, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2045, $i2044);
    $p2046 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2035, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2046, 8268);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p2047 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p2048 := $load.ref($M.0, $p2047);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p2049 := $add.ref($add.ref($p2048, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i2050 := $load.i32($M.0, $p2049);
    $p2051 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2035, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2051, $i2050);
    $i2052 := $add.i64($i2035, 1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p2053 := $add.ref($p13, $mul.ref($i2052, 12296));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p2054 := $bitcast.ref.ref($p2053);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i2055 := ib_dma_map_single($p4, $p2054, 8268, 2);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i2056 := ib_dma_mapping_error($p4, $i2055);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i2057 := $ne.i32($i2056, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i18 := 119;
    assume {:branchcond $i2057} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i2057 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $p2058 := $add.ref($add.ref($p13, $mul.ref($i2052, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2058, $i2055);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p2060 := $add.ref($add.ref($p13, $mul.ref($i2052, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i2061 := $load.i64($M.0, $p2060);
    $p2062 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2052, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2062, $i2061);
    $p2063 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2052, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2063, 8268);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p2064 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p2065 := $load.ref($M.0, $p2064);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p2066 := $add.ref($add.ref($p2065, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i2067 := $load.i32($M.0, $p2066);
    $p2068 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2052, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2068, $i2067);
    $i2069 := $add.i64($i2052, 1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p2070 := $add.ref($p13, $mul.ref($i2069, 12296));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    $p2071 := $bitcast.ref.ref($p2070);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i2072 := ib_dma_map_single($p4, $p2071, 8268, 2);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i2073 := ib_dma_mapping_error($p4, $i2072);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i2074 := $ne.i32($i2073, 0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i18 := 120;
    assume {:branchcond $i2074} true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i2074 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    $p2075 := $add.ref($add.ref($p13, $mul.ref($i2069, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2075, $i2072);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p2077 := $add.ref($add.ref($p13, $mul.ref($i2069, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i2078 := $load.i64($M.0, $p2077);
    $p2079 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2069, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2079, $i2078);
    $p2080 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2069, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2080, 8268);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p2081 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p2082 := $load.ref($M.0, $p2081);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p2083 := $add.ref($add.ref($p2082, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i2084 := $load.i32($M.0, $p2083);
    $p2085 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2069, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2085, $i2084);
    $i2086 := $add.i64($i2069, 1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p2087 := $add.ref($p13, $mul.ref($i2086, 12296));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $p2088 := $bitcast.ref.ref($p2087);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i2089 := ib_dma_map_single($p4, $p2088, 8268, 2);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i2090 := ib_dma_mapping_error($p4, $i2089);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i2091 := $ne.i32($i2090, 0);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i18 := 121;
    assume {:branchcond $i2091} true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i2091 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    $p2092 := $add.ref($add.ref($p13, $mul.ref($i2086, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2092, $i2089);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p2094 := $add.ref($add.ref($p13, $mul.ref($i2086, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i2095 := $load.i64($M.0, $p2094);
    $p2096 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2086, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2096, $i2095);
    $p2097 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2086, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2097, 8268);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p2098 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p2099 := $load.ref($M.0, $p2098);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p2100 := $add.ref($add.ref($p2099, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i2101 := $load.i32($M.0, $p2100);
    $p2102 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2086, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2102, $i2101);
    $i2103 := $add.i64($i2086, 1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p2104 := $add.ref($p13, $mul.ref($i2103, 12296));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    $p2105 := $bitcast.ref.ref($p2104);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i2106 := ib_dma_map_single($p4, $p2105, 8268, 2);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i2107 := ib_dma_mapping_error($p4, $i2106);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i2108 := $ne.i32($i2107, 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i18 := 122;
    assume {:branchcond $i2108} true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i2108 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    $p2109 := $add.ref($add.ref($p13, $mul.ref($i2103, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2109, $i2106);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p2111 := $add.ref($add.ref($p13, $mul.ref($i2103, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i2112 := $load.i64($M.0, $p2111);
    $p2113 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2103, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2113, $i2112);
    $p2114 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2103, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2114, 8268);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p2115 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p2116 := $load.ref($M.0, $p2115);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p2117 := $add.ref($add.ref($p2116, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i2118 := $load.i32($M.0, $p2117);
    $p2119 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2103, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2119, $i2118);
    $i2120 := $add.i64($i2103, 1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p2121 := $add.ref($p13, $mul.ref($i2120, 12296));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $p2122 := $bitcast.ref.ref($p2121);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i2123 := ib_dma_map_single($p4, $p2122, 8268, 2);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i2124 := ib_dma_mapping_error($p4, $i2123);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i2125 := $ne.i32($i2124, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i18 := 123;
    assume {:branchcond $i2125} true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i2125 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    $p2126 := $add.ref($add.ref($p13, $mul.ref($i2120, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2126, $i2123);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p2128 := $add.ref($add.ref($p13, $mul.ref($i2120, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i2129 := $load.i64($M.0, $p2128);
    $p2130 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2120, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2130, $i2129);
    $p2131 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2120, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2131, 8268);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p2132 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p2133 := $load.ref($M.0, $p2132);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p2134 := $add.ref($add.ref($p2133, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i2135 := $load.i32($M.0, $p2134);
    $p2136 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2120, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2136, $i2135);
    $i2137 := $add.i64($i2120, 1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p2138 := $add.ref($p13, $mul.ref($i2137, 12296));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $p2139 := $bitcast.ref.ref($p2138);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i2140 := ib_dma_map_single($p4, $p2139, 8268, 2);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i2141 := ib_dma_mapping_error($p4, $i2140);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i2142 := $ne.i32($i2141, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i18 := 124;
    assume {:branchcond $i2142} true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i2142 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    $p2143 := $add.ref($add.ref($p13, $mul.ref($i2137, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2143, $i2140);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p2145 := $add.ref($add.ref($p13, $mul.ref($i2137, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i2146 := $load.i64($M.0, $p2145);
    $p2147 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2137, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2147, $i2146);
    $p2148 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2137, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2148, 8268);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p2149 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p2150 := $load.ref($M.0, $p2149);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p2151 := $add.ref($add.ref($p2150, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i2152 := $load.i32($M.0, $p2151);
    $p2153 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2137, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2153, $i2152);
    $i2154 := $add.i64($i2137, 1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p2155 := $add.ref($p13, $mul.ref($i2154, 12296));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $p2156 := $bitcast.ref.ref($p2155);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i2157 := ib_dma_map_single($p4, $p2156, 8268, 2);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i2158 := ib_dma_mapping_error($p4, $i2157);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i2159 := $ne.i32($i2158, 0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i18 := 125;
    assume {:branchcond $i2159} true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i2159 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $p2160 := $add.ref($add.ref($p13, $mul.ref($i2154, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2160, $i2157);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p2162 := $add.ref($add.ref($p13, $mul.ref($i2154, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i2163 := $load.i64($M.0, $p2162);
    $p2164 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2154, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2164, $i2163);
    $p2165 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2154, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2165, 8268);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p2166 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p2167 := $load.ref($M.0, $p2166);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p2168 := $add.ref($add.ref($p2167, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i2169 := $load.i32($M.0, $p2168);
    $p2170 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2154, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2170, $i2169);
    $i2171 := $add.i64($i2154, 1);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p2172 := $add.ref($p13, $mul.ref($i2171, 12296));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    $p2173 := $bitcast.ref.ref($p2172);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i2174 := ib_dma_map_single($p4, $p2173, 8268, 2);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i2175 := ib_dma_mapping_error($p4, $i2174);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i2176 := $ne.i32($i2175, 0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i18 := 126;
    assume {:branchcond $i2176} true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i2176 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    $p2177 := $add.ref($add.ref($p13, $mul.ref($i2171, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2177, $i2174);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p2179 := $add.ref($add.ref($p13, $mul.ref($i2171, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i2180 := $load.i64($M.0, $p2179);
    $p2181 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2171, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2181, $i2180);
    $p2182 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2171, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2182, 8268);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p2183 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p2184 := $load.ref($M.0, $p2183);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p2185 := $add.ref($add.ref($p2184, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i2186 := $load.i32($M.0, $p2185);
    $p2187 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2171, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2187, $i2186);
    $i2188 := $add.i64($i2171, 1);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p2189 := $add.ref($p13, $mul.ref($i2188, 12296));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $p2190 := $bitcast.ref.ref($p2189);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i2191 := ib_dma_map_single($p4, $p2190, 8268, 2);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i2192 := ib_dma_mapping_error($p4, $i2191);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i2193 := $ne.i32($i2192, 0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i18 := 127;
    assume {:branchcond $i2193} true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i2193 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    $p2194 := $add.ref($add.ref($p13, $mul.ref($i2188, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2194, $i2191);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p2196 := $add.ref($add.ref($p13, $mul.ref($i2188, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i2197 := $load.i64($M.0, $p2196);
    $p2198 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2188, 12296)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2198, $i2197);
    $p2199 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2188, 12296)), $mul.ref(8280, 1)), $mul.ref(8, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2199, 8268);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p2200 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p2201 := $load.ref($M.0, $p2200);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p2202 := $add.ref($add.ref($p2201, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i2203 := $load.i32($M.0, $p2202);
    $p2204 := $add.ref($add.ref($add.ref($p13, $mul.ref($i2188, 12296)), $mul.ref(8280, 1)), $mul.ref(12, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2204, $i2203);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(72, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb527:
    assume {:verifier.code 0} true;
    assume $i2193 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32(0, $i18);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} kfree($p45);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $0.ref);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_103 := printk.ref.ref.ref(.str.224, .str.225, $p0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 12);
    goto $bb14;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i36, $p37 := 0, $p34;
    goto $bb18;

  $bb18:
    call $p38, $i39, $i40, $p41, $i42, $i36, $p37 := isert_alloc_rx_descriptors_loop_$bb18($p4, $i18, $p38, $i39, $i40, $p41, $i42, $i36, $p37);
    goto $bb18_last;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} ib_dma_unmap_single($p4, $i39, 8268, 2);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i36, 1);
    call {:si_unique_call 420} {:cexpr "j"} boogie_si_record_i32($i40);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref(1, 12296));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, $i18);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i36, $p37 := $i40, $p41;
    goto $bb20_dummy;

  $bb523:
    assume {:verifier.code 0} true;
    assume $i2176 == 1;
    goto $bb8;

  $bb519:
    assume {:verifier.code 0} true;
    assume $i2159 == 1;
    goto $bb8;

  $bb515:
    assume {:verifier.code 0} true;
    assume $i2142 == 1;
    goto $bb8;

  $bb511:
    assume {:verifier.code 0} true;
    assume $i2125 == 1;
    goto $bb8;

  $bb507:
    assume {:verifier.code 0} true;
    assume $i2108 == 1;
    goto $bb8;

  $bb503:
    assume {:verifier.code 0} true;
    assume $i2091 == 1;
    goto $bb8;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i2074 == 1;
    goto $bb8;

  $bb495:
    assume {:verifier.code 0} true;
    assume $i2057 == 1;
    goto $bb8;

  $bb491:
    assume {:verifier.code 0} true;
    assume $i2040 == 1;
    goto $bb8;

  $bb487:
    assume {:verifier.code 0} true;
    assume $i2023 == 1;
    goto $bb8;

  $bb483:
    assume {:verifier.code 0} true;
    assume $i2006 == 1;
    goto $bb8;

  $bb479:
    assume {:verifier.code 0} true;
    assume $i1989 == 1;
    goto $bb8;

  $bb475:
    assume {:verifier.code 0} true;
    assume $i1972 == 1;
    goto $bb8;

  $bb471:
    assume {:verifier.code 0} true;
    assume $i1955 == 1;
    goto $bb8;

  $bb467:
    assume {:verifier.code 0} true;
    assume $i1938 == 1;
    goto $bb8;

  $bb463:
    assume {:verifier.code 0} true;
    assume $i1921 == 1;
    goto $bb8;

  $bb459:
    assume {:verifier.code 0} true;
    assume $i1904 == 1;
    goto $bb8;

  $bb455:
    assume {:verifier.code 0} true;
    assume $i1887 == 1;
    goto $bb8;

  $bb451:
    assume {:verifier.code 0} true;
    assume $i1870 == 1;
    goto $bb8;

  $bb447:
    assume {:verifier.code 0} true;
    assume $i1853 == 1;
    goto $bb8;

  $bb443:
    assume {:verifier.code 0} true;
    assume $i1836 == 1;
    goto $bb8;

  $bb439:
    assume {:verifier.code 0} true;
    assume $i1819 == 1;
    goto $bb8;

  $bb435:
    assume {:verifier.code 0} true;
    assume $i1802 == 1;
    goto $bb8;

  $bb431:
    assume {:verifier.code 0} true;
    assume $i1785 == 1;
    goto $bb8;

  $bb427:
    assume {:verifier.code 0} true;
    assume $i1768 == 1;
    goto $bb8;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i1751 == 1;
    goto $bb8;

  $bb419:
    assume {:verifier.code 0} true;
    assume $i1734 == 1;
    goto $bb8;

  $bb415:
    assume {:verifier.code 0} true;
    assume $i1717 == 1;
    goto $bb8;

  $bb411:
    assume {:verifier.code 0} true;
    assume $i1700 == 1;
    goto $bb8;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i1683 == 1;
    goto $bb8;

  $bb403:
    assume {:verifier.code 0} true;
    assume $i1666 == 1;
    goto $bb8;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i1649 == 1;
    goto $bb8;

  $bb395:
    assume {:verifier.code 0} true;
    assume $i1632 == 1;
    goto $bb8;

  $bb391:
    assume {:verifier.code 0} true;
    assume $i1615 == 1;
    goto $bb8;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i1598 == 1;
    goto $bb8;

  $bb383:
    assume {:verifier.code 0} true;
    assume $i1581 == 1;
    goto $bb8;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i1564 == 1;
    goto $bb8;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i1547 == 1;
    goto $bb8;

  $bb371:
    assume {:verifier.code 0} true;
    assume $i1530 == 1;
    goto $bb8;

  $bb367:
    assume {:verifier.code 0} true;
    assume $i1513 == 1;
    goto $bb8;

  $bb363:
    assume {:verifier.code 0} true;
    assume $i1496 == 1;
    goto $bb8;

  $bb359:
    assume {:verifier.code 0} true;
    assume $i1479 == 1;
    goto $bb8;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i1462 == 1;
    goto $bb8;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i1445 == 1;
    goto $bb8;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i1428 == 1;
    goto $bb8;

  $bb343:
    assume {:verifier.code 0} true;
    assume $i1411 == 1;
    goto $bb8;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i1394 == 1;
    goto $bb8;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i1377 == 1;
    goto $bb8;

  $bb331:
    assume {:verifier.code 0} true;
    assume $i1360 == 1;
    goto $bb8;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i1343 == 1;
    goto $bb8;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i1326 == 1;
    goto $bb8;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i1309 == 1;
    goto $bb8;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i1292 == 1;
    goto $bb8;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i1275 == 1;
    goto $bb8;

  $bb307:
    assume {:verifier.code 0} true;
    assume $i1258 == 1;
    goto $bb8;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i1241 == 1;
    goto $bb8;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i1224 == 1;
    goto $bb8;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i1207 == 1;
    goto $bb8;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i1190 == 1;
    goto $bb8;

  $bb287:
    assume {:verifier.code 0} true;
    assume $i1173 == 1;
    goto $bb8;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i1156 == 1;
    goto $bb8;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i1139 == 1;
    goto $bb8;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i1122 == 1;
    goto $bb8;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i1105 == 1;
    goto $bb8;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i1088 == 1;
    goto $bb8;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i1071 == 1;
    goto $bb8;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i1054 == 1;
    goto $bb8;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i1037 == 1;
    goto $bb8;

  $bb251:
    assume {:verifier.code 0} true;
    assume $i1020 == 1;
    goto $bb8;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i1003 == 1;
    goto $bb8;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i986 == 1;
    goto $bb8;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i969 == 1;
    goto $bb8;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i952 == 1;
    goto $bb8;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i935 == 1;
    goto $bb8;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i918 == 1;
    goto $bb8;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i901 == 1;
    goto $bb8;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i884 == 1;
    goto $bb8;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i867 == 1;
    goto $bb8;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i850 == 1;
    goto $bb8;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i833 == 1;
    goto $bb8;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i816 == 1;
    goto $bb8;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i799 == 1;
    goto $bb8;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i782 == 1;
    goto $bb8;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i765 == 1;
    goto $bb8;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i748 == 1;
    goto $bb8;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i731 == 1;
    goto $bb8;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i714 == 1;
    goto $bb8;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i697 == 1;
    goto $bb8;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i680 == 1;
    goto $bb8;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i663 == 1;
    goto $bb8;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i646 == 1;
    goto $bb8;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i629 == 1;
    goto $bb8;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i612 == 1;
    goto $bb8;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i595 == 1;
    goto $bb8;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i578 == 1;
    goto $bb8;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i561 == 1;
    goto $bb8;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i544 == 1;
    goto $bb8;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i527 == 1;
    goto $bb8;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb8;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i493 == 1;
    goto $bb8;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i476 == 1;
    goto $bb8;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i459 == 1;
    goto $bb8;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i442 == 1;
    goto $bb8;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i425 == 1;
    goto $bb8;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i408 == 1;
    goto $bb8;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i391 == 1;
    goto $bb8;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i374 == 1;
    goto $bb8;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb8;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb8;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb8;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb8;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i289 == 1;
    goto $bb8;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i272 == 1;
    goto $bb8;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb8;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb8;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i221 == 1;
    goto $bb8;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb8;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb8;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb8;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb8;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb8;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb8;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb8;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb8;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb8;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb8;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;
}



const isert_post_recv: ref;

axiom isert_post_recv == $sub.ref(0, 401160);

procedure isert_post_recv($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_post_recv($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i7: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p29: ref;
  var $i30: i32;
  var $p8: ref;
  var $i9: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 675} {:cexpr "isert_post_recv:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(72, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 676} {:cexpr "rx_head"} boogie_si_record_i32($i4);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(88, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p8, $i9 := $p5, $i4;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1), 32)), $mul.ref(0, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, $i1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(88, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i41 := ib_post_recv($p38, $p40, $p2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 680} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i48 := $M.1;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 2);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 683} {:cexpr "tmp"} boogie_si_record_i64($i52);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(72, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i9);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_105 := printk.ref.ref.i32(.str.163, .str.162, $i1);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_104 := printk.ref.ref.i32(.str.161, .str.162, $i41);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i45, $i1);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i10, $i11, $p12 := $i4, 0, $p5;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $p16, $i17, $p18, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i10, $i11, $p12, $p29, $i30 := isert_post_recv_loop_$bb4($p0, $i1, $p13, $p14, $i15, $p16, $i17, $p18, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i10, $i11, $p12, $p29, $i30);
    goto $bb4_last;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i10);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 12296));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref($i15, 12296)), $mul.ref(8280, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p12, $mul.ref(1, 32));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p22);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i10, 1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 127);
    call {:si_unique_call 677} {:cexpr "rx_head"} boogie_si_record_i32($i25);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i11, 1);
    call {:si_unique_call 678} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p12, $mul.ref(1, 32));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i26, $i1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p29, $i30 := $p27, $i25;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p8, $i9 := $p29, $i30;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11, $p12 := $i25, $i26, $p27;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 402192);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 403224);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    return;
}



const isert_rdma_post_recvl: ref;

axiom isert_rdma_post_recvl == $sub.ref(0, 404256);

procedure isert_rdma_post_recvl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed;



implementation isert_rdma_post_recvl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 689} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p4, 0, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(48, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i6);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 8268);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 2);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 693} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p29, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(32, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p3);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i42 := ib_post_recv($p41, $p1, $p2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 695} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb4:
    assume $i43 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_107 := printk.ref.ref.i32(.str.92, .str.91, $i42);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i46, 1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_106 := printk.ref.ref.i64.i32.i32(.str.90, .str.91, $i23, $i25, $i27);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_post_send: ref;

axiom isert_post_send == $sub.ref(0, 405288);

procedure isert_post_send($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_post_send($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p2 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ib_dma_sync_single_for_device($p7, $i9, 76, 1);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, $0.ref);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, $p12, $i11);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(96, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, $p13);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, $i17);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p19, 2);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p20, 2);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i23 := ib_post_send($p22, $p2, $p3);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 701} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_108 := printk.ref.ref.i32(.str.226, .str.227, $i23);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const ib_post_recv: ref;

axiom ib_post_recv == $sub.ref(0, 406320);

procedure ib_post_recv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.38, $M.39, $CurrAddr, assertsPassed;



implementation ib_post_recv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2496)), $mul.ref(632, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 703} $i7 := devirtbounce.10($p6, $p0, $p1, $p2);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 704} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 407352);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 706} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} ldv_check_alloc_flags($i1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p2 := ldv_undef_ptr();
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ib_dma_unmap_single: ref;

axiom ib_dma_unmap_single == $sub.ref(0, 408384);

procedure ib_dma_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} {:cexpr "ib_dma_unmap_single:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 710} {:cexpr "ib_dma_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 711} {:cexpr "ib_dma_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} dma_unmap_single_attrs($p13, $i1, $i2, $i3, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 712} devirtbounce.8($p11, $p0, $i1, $i2, $i3);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 409416);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} free_($p0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 410448);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 715} $free($p0);
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 411480);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 717} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 718} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $p5 := get_dma_ops($p0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 721} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 723} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 725} devirtbounce.11($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 724} devirtbounce.4(0, .str.24, 36, 12);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 412512);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 728} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 729} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 730} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 413544);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} ldv_error();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 414576);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 734} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 415608);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 735} __VERIFIER_error();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const isert_create_fr_desc: ref;

axiom isert_create_fr_desc == $sub.ref(0, 416640);

procedure isert_create_fr_desc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_create_fr_desc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $i21: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p3 := ib_alloc_fast_reg_page_list($p0, 256);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i8 := IS_ERR($p7);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 738} {:cexpr "tmp___1"} boogie_si_record_i8($i9);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p22 := ib_alloc_fast_reg_mr($p1, 256);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p22);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i27 := IS_ERR($p26);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 746} {:cexpr "tmp___4"} boogie_si_record_i8($i28);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, 2);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i44);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i46 := $M.1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, 2);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 755} {:cexpr "tmp___5"} boogie_si_record_i64($i50);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb9:
    assume $i51 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_111 := printk.ref.ref.ref(.str.223, .str.221, $p2);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i33 := PTR_ERR($p32);
    call {:si_unique_call 748} {:cexpr "tmp___2"} boogie_si_record_i64($i33);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_110 := printk.ref.ref.i64(.str.222, .str.221, $i33);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i38 := PTR_ERR($p37);
    call {:si_unique_call 751} {:cexpr "tmp___3"} boogie_si_record_i64($i38);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    call {:si_unique_call 752} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} ib_free_fast_reg_page_list($p54);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i21 := $i39;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i14 := PTR_ERR($p13);
    call {:si_unique_call 740} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_109 := printk.ref.ref.i64(.str.220, .str.221, $i14);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i19 := PTR_ERR($p18);
    call {:si_unique_call 743} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 417672);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} __list_add($p0, $p3, $p1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    return;
}



const isert_conn_free_fastreg_pool: ref;

axiom isert_conn_free_fastreg_pool == $sub.ref(0, 418704);

procedure isert_conn_free_fastreg_pool($p0: ref);
  free requires assertsPassed;



implementation isert_conn_free_fastreg_pool($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i64: i32;
  var $i24: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1952, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i2 := list_empty($p1);
    call {:si_unique_call 759} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 761} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1952, 1)), $mul.ref(0, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1952, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i67 := $sgt.i32($i66, $i24);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i68 := $M.1;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, 0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 773} {:cexpr "tmp___2"} boogie_si_record_i64($i72);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i73 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i75, $i24);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_116 := printk.ref.ref.i32(.str.120, .str.119, $i76);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i25, $p26, $p27 := 0, $p13, $p17;
    goto $bb11;

  $bb11:
    call $p28, $p29, $p30, $p31, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p47, $p48, $p49, $p50, $p52, $p53, $p54, $p55, $i56, $p58, $p59, $p61, $i62, $i63, $i25, $p26, $p27, $i64, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115 := isert_conn_free_fastreg_pool_loop_$bb11($i22, $p28, $p29, $p30, $p31, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p47, $p48, $p49, $p50, $p52, $p53, $p54, $p55, $i56, $p58, $p59, $p61, $i62, $i63, $i25, $p26, $p27, $i64, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115);
    goto $bb11_last;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} list_del($p28);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ib_free_fast_reg_page_list($p30);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_113 := ib_dereg_mr($p32);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p26);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} kfree($p55);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i25, 1);
    call {:si_unique_call 771} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, $i22);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i64 := $i56;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i24 := $i64;
    goto $bb10;

  $bb16:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i25, $p26, $p27 := $i56, $p27, $p59;
    goto $bb16_dummy;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ib_free_fast_reg_page_list($p41);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_114 := ib_dereg_mr($p45);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_115 := ib_destroy_mr($p50);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} kfree($p54);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_112 := printk.ref.ref.ref(.str.118, .str.119, $p0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4392;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 419736);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    return;
}



const ib_free_fast_reg_page_list: ref;

axiom ib_free_fast_reg_page_list == $sub.ref(0, 420768);

procedure ib_free_fast_reg_page_list($p0: ref);
  free requires assertsPassed;



implementation ib_free_fast_reg_page_list($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    return;
}



const ib_dereg_mr: ref;

axiom ib_dereg_mr == $sub.ref(0, 421800);

procedure ib_dereg_mr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dereg_mr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ib_destroy_mr: ref;

axiom ib_destroy_mr == $sub.ref(0, 422832);

procedure ib_destroy_mr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_destroy_mr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 777} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 778} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 423864);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    return;
}



const ib_alloc_fast_reg_page_list: ref;

axiom ib_alloc_fast_reg_page_list == $sub.ref(0, 424896);

procedure ib_alloc_fast_reg_page_list($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_alloc_fast_reg_page_list($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} {:cexpr "ib_alloc_fast_reg_page_list:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p2 := external_alloc();
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 425928);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i1 := ldv_is_err($p0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 782} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 426960);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 784} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ib_alloc_fast_reg_mr: ref;

axiom ib_alloc_fast_reg_mr == $sub.ref(0, 427992);

procedure ib_alloc_fast_reg_mr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_alloc_fast_reg_mr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} {:cexpr "ib_alloc_fast_reg_mr:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p2 := external_alloc();
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 429024);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 788} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 430056);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 431088);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_sync_single_for_device: ref;

axiom dma_sync_single_for_device == $sub.ref(0, 432120);

procedure dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 790} {:cexpr "dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 791} {:cexpr "dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p4 := get_dma_ops($p0);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 794} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 796} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} debug_dma_sync_single_for_device($p0, $i1, $i2, $i3);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 798} devirtbounce.9($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 797} devirtbounce.4(0, .str.24, 120, 12);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_device_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_sync_single_for_device: ref;

axiom debug_dma_sync_single_for_device == $sub.ref(0, 433152);

procedure debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} {:cexpr "debug_dma_sync_single_for_device:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 801} {:cexpr "debug_dma_sync_single_for_device:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 802} {:cexpr "debug_dma_sync_single_for_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_completion_interruptible: ref;

axiom wait_for_completion_interruptible == $sub.ref(0, 434184);

procedure wait_for_completion_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wait_for_completion_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const reinit_completion: ref;

axiom reinit_completion == $sub.ref(0, 435216);

procedure reinit_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation reinit_completion($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    return;
}



const isert_rx_login_req: ref;

axiom isert_rx_login_req == $sub.ref(0, 436248);

procedure isert_rx_login_req($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_rx_login_req($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i16;
  var $i87: i16;
  var $p88: ref;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i16;
  var $i93: i16;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i64;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(32, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(56, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 805} {:cexpr "rx_buflen"} boogie_si_record_i32($i5);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2480)), $mul.ref(2360, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 807} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p9);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 809} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i19);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 811} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i19, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_118 := ldv__builtin_expect($i40, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 12296)), $mul.ref(32, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 828} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p96, $p98, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i5, 8192);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i99 == 1);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i100 := 8192;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i101 := $M.1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i102 := $sgt.i32($i101, 2);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i32($i102);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 830} {:cexpr "tmp___7"} boogie_si_record_i64($i105);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 12296)), $mul.ref(80, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i100);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 832} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p109, $p111, $i112, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 2480)), $mul.ref(976, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_120 := schedule_delayed_work($p118, 0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i116 == 1;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1136, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} complete_($p117);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i106 == 1;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_119 := printk.ref.ref.i32.i32.i32(.str.140, .str.139, $i100, $i5, 8192);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i99 == 1;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i100 := $i5;
    goto $bb18;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 12296)), $mul.ref(32, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(14, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(3, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i53);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(1, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 12);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i59 := $ashr.i32($i58, 2);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(2, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i60);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(3, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(5, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i63);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(2, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(6, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i66);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(10, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 819} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p69, $p71, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i74 := __fswab32($i73);
    call {:si_unique_call 821} {:cexpr "tmp___3"} boogie_si_record_i32($i74);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(20, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(28, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i81 := __fswab32($i80);
    call {:si_unique_call 823} {:cexpr "tmp___4"} boogie_si_record_i32($i81);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i87 := __fswab16($i86);
    call {:si_unique_call 825} {:cexpr "tmp___5"} boogie_si_record_i16($i87);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, $i87);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(14, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i93 := __fswab16($i92);
    call {:si_unique_call 827} {:cexpr "tmp___6"} boogie_si_record_i16($i93);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p9, $mul.ref(0, 168)), $mul.ref(34, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, $i93);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1(1);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i26 := $xor.i1($i25, 1);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 812} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i27);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 814} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i27, 0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 817} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i37 == 1;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} warn_slowpath_null(.str.117, 1249);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_117 := printk.ref.ref.ref(.str.99, .str.139, $p0);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 437280);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 438312);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i1 := __arch_swab32($i0);
    call {:si_unique_call 838} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 439344);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 440376);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 841} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 441408);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i3 := ldv_queue_delayed_work_on_16(8192, $p0, $p1, $i2);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 844} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_16: ref;

axiom ldv_queue_delayed_work_on_16 == $sub.ref(0, 442440);

procedure ldv_queue_delayed_work_on_16($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation ldv_queue_delayed_work_on_16($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} {:cexpr "ldv_queue_delayed_work_on_16:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 846} {:cexpr "ldv_queue_delayed_work_on_16:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 848} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 849} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} activate_work_1($p8, 2);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 443472);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 851} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 852} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 444504);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.12;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.14;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.16 := $i1;
    call {:si_unique_call 859} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.14 := $i1;
    call {:si_unique_call 858} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.12 := $i1;
    call {:si_unique_call 857} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.10 := $i1;
    call {:si_unique_call 856} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 445536);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 861} $i1 := devirtbounce.12(0, $i0);
    call {:si_unique_call 862} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const isert_wait4flush: ref;

axiom isert_wait4flush == $sub.ref(0, 446568);

procedure isert_wait4flush($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_wait4flush($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 865} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1848, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} init_completion($p9);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(2128, 1)), $mul.ref(8, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $sub.i64(0, 2));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(2128, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i15 := ib_post_recv($p13, $p14, $p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 869} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1848, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} wait_for_completion($p18);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_122 := printk.ref.ref.ref(.str.251, .str.250, $p0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_121 := printk.ref.ref.ref(.str.99, .str.250, $p0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_put_conn: ref;

axiom isert_put_conn == $sub.ref(0, 447600);

procedure isert_put_conn($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.38, $M.39, assertsPassed, $M.33;



implementation isert_put_conn($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1944, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_123 := kref_put($p1, isert_release_kref);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const isert_release_kref: ref;

axiom isert_release_kref == $sub.ref(0, 448632);

procedure isert_release_kref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.12, $M.14, $M.16;



implementation isert_release_kref($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1936), 2168));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 874} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} isert_connect_release($p2);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p9 := get_current();
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p10 := get_current();
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 11744)), $mul.ref(2552, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 11744)), $mul.ref(2136, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_124 := printk.ref.ref.ref.ref.i32(.str.113, .str.114, $p2, $p12, $i14);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 449664);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.38, $M.39, assertsPassed, $M.33;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 880} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 450696);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.38, $M.39, assertsPassed, $M.33;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_125: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 882} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 884} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_125 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 888} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 889} devirtbounce.13($p2, $p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} warn_slowpath_null(.str.112, 71);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 451728);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 891} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 892} devirtbounce.14(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.18, $p2);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 452760);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p0 := devirtbounce.15(0, current_task);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const isert_connect_release: ref;

axiom isert_connect_release == $sub.ref(0, 453792);

procedure isert_connect_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.12, $M.14, $M.16;



implementation isert_connect_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 895} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 898} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} isert_free_rx_descriptors($p0);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(24, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} isert_device_put($p2);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} kfree($p43);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} isert_free_login_buf($p0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} isert_comp_put($p35);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_127 := ib_destroy_qp($p37);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} rdma_destroy_id($p24);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} isert_conn_free_fastreg_pool($p0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i15 == 1;
    call {:si_unique_call 899} devirtbounce.4(0, .str.117, 808, 12);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call isert_connect_release_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_126 := printk.ref.ref.ref(.str.115, .str.116, $p0);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const isert_free_rx_descriptors: ref;

axiom isert_free_rx_descriptors == $sub.ref(0, 454824);

procedure isert_free_rx_descriptors($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_free_rx_descriptors($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p126: ref;
  var $i127: i64;
  var $i128: i64;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p138: ref;
  var $i139: i64;
  var $i140: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i64;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $p154: ref;
  var $i155: i64;
  var $i156: i64;
  var $p158: ref;
  var $i159: i64;
  var $i160: i64;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $p166: ref;
  var $i167: i64;
  var $i168: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $p174: ref;
  var $i175: i64;
  var $i176: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i64;
  var $p182: ref;
  var $i183: i64;
  var $i184: i64;
  var $p186: ref;
  var $i187: i64;
  var $i188: i64;
  var $p190: ref;
  var $i191: i64;
  var $i192: i64;
  var $p194: ref;
  var $i195: i64;
  var $i196: i64;
  var $p198: ref;
  var $i199: i64;
  var $i200: i64;
  var $p202: ref;
  var $i203: i64;
  var $i204: i64;
  var $p206: ref;
  var $i207: i64;
  var $i208: i64;
  var $p210: ref;
  var $i211: i64;
  var $i212: i64;
  var $p214: ref;
  var $i215: i64;
  var $i216: i64;
  var $p218: ref;
  var $i219: i64;
  var $i220: i64;
  var $p222: ref;
  var $i223: i64;
  var $i224: i64;
  var $p226: ref;
  var $i227: i64;
  var $i228: i64;
  var $p230: ref;
  var $i231: i64;
  var $i232: i64;
  var $p234: ref;
  var $i235: i64;
  var $i236: i64;
  var $p238: ref;
  var $i239: i64;
  var $i240: i64;
  var $p242: ref;
  var $i243: i64;
  var $i244: i64;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $p250: ref;
  var $i251: i64;
  var $i252: i64;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $p258: ref;
  var $i259: i64;
  var $i260: i64;
  var $p262: ref;
  var $i263: i64;
  var $i264: i64;
  var $p266: ref;
  var $i267: i64;
  var $i268: i64;
  var $p270: ref;
  var $i271: i64;
  var $i272: i64;
  var $p274: ref;
  var $i275: i64;
  var $i276: i64;
  var $p278: ref;
  var $i279: i64;
  var $i280: i64;
  var $p282: ref;
  var $i283: i64;
  var $i284: i64;
  var $p286: ref;
  var $i287: i64;
  var $i288: i64;
  var $p290: ref;
  var $i291: i64;
  var $i292: i64;
  var $p294: ref;
  var $i295: i64;
  var $i296: i64;
  var $p298: ref;
  var $i299: i64;
  var $i300: i64;
  var $p302: ref;
  var $i303: i64;
  var $i304: i64;
  var $p306: ref;
  var $i307: i64;
  var $i308: i64;
  var $p310: ref;
  var $i311: i64;
  var $i312: i64;
  var $p314: ref;
  var $i315: i64;
  var $i316: i64;
  var $p318: ref;
  var $i319: i64;
  var $i320: i64;
  var $p322: ref;
  var $i323: i64;
  var $i324: i64;
  var $p326: ref;
  var $i327: i64;
  var $i328: i64;
  var $p330: ref;
  var $i331: i64;
  var $i332: i64;
  var $p334: ref;
  var $i335: i64;
  var $i336: i64;
  var $p338: ref;
  var $i339: i64;
  var $i340: i64;
  var $p342: ref;
  var $i343: i64;
  var $i344: i64;
  var $p346: ref;
  var $i347: i64;
  var $i348: i64;
  var $p350: ref;
  var $i351: i64;
  var $i352: i64;
  var $p354: ref;
  var $i355: i64;
  var $i356: i64;
  var $p358: ref;
  var $i359: i64;
  var $i360: i64;
  var $p362: ref;
  var $i363: i64;
  var $i364: i64;
  var $p366: ref;
  var $i367: i64;
  var $i368: i64;
  var $p370: ref;
  var $i371: i64;
  var $i372: i64;
  var $p374: ref;
  var $i375: i64;
  var $i376: i64;
  var $p378: ref;
  var $i379: i64;
  var $i380: i64;
  var $p382: ref;
  var $i383: i64;
  var $i384: i64;
  var $p386: ref;
  var $i387: i64;
  var $i388: i64;
  var $p390: ref;
  var $i391: i64;
  var $i392: i64;
  var $p394: ref;
  var $i395: i64;
  var $i396: i64;
  var $p398: ref;
  var $i399: i64;
  var $i400: i64;
  var $p402: ref;
  var $i403: i64;
  var $i404: i64;
  var $p406: ref;
  var $i407: i64;
  var $i408: i64;
  var $p410: ref;
  var $i411: i64;
  var $i412: i64;
  var $p414: ref;
  var $i415: i64;
  var $i416: i64;
  var $p418: ref;
  var $i419: i64;
  var $i420: i64;
  var $p422: ref;
  var $i423: i64;
  var $i424: i64;
  var $p426: ref;
  var $i427: i64;
  var $i428: i64;
  var $p430: ref;
  var $i431: i64;
  var $i432: i64;
  var $p434: ref;
  var $i435: i64;
  var $i436: i64;
  var $p438: ref;
  var $i439: i64;
  var $i440: i64;
  var $p442: ref;
  var $i443: i64;
  var $i444: i64;
  var $p446: ref;
  var $i447: i64;
  var $i448: i64;
  var $p450: ref;
  var $i451: i64;
  var $i452: i64;
  var $p454: ref;
  var $i455: i64;
  var $i456: i64;
  var $p458: ref;
  var $i459: i64;
  var $i460: i64;
  var $p462: ref;
  var $i463: i64;
  var $i464: i64;
  var $p466: ref;
  var $i467: i64;
  var $i468: i64;
  var $p470: ref;
  var $i471: i64;
  var $i472: i64;
  var $p474: ref;
  var $i475: i64;
  var $i476: i64;
  var $p478: ref;
  var $i479: i64;
  var $i480: i64;
  var $p482: ref;
  var $i483: i64;
  var $i484: i64;
  var $p486: ref;
  var $i487: i64;
  var $i488: i64;
  var $p490: ref;
  var $i491: i64;
  var $i492: i64;
  var $p494: ref;
  var $i495: i64;
  var $i496: i64;
  var $p498: ref;
  var $i499: i64;
  var $i500: i64;
  var $p502: ref;
  var $i503: i64;
  var $i504: i64;
  var $p506: ref;
  var $i507: i64;
  var $i508: i64;
  var $p510: ref;
  var $i511: i64;
  var $i512: i64;
  var $p514: ref;
  var $i515: i64;
  var $i516: i64;
  var $p518: ref;
  var $i519: i64;
  var $i520: i64;
  var $p522: ref;
  var $i523: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ib_dma_unmap_single($p4, $i12, 8268, 2);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(1, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} ib_dma_unmap_single($p4, $i19, 8268, 2);
    $i20 := $add.i64(1, 1);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref($i20, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ib_dma_unmap_single($p4, $i23, 8268, 2);
    $i24 := $add.i64($i20, 1);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref($i24, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ib_dma_unmap_single($p4, $i27, 8268, 2);
    $i28 := $add.i64($i24, 1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref($i28, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ib_dma_unmap_single($p4, $i31, 8268, 2);
    $i32 := $add.i64($i28, 1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref($i32, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ib_dma_unmap_single($p4, $i35, 8268, 2);
    $i36 := $add.i64($i32, 1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p10, $mul.ref($i36, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ib_dma_unmap_single($p4, $i39, 8268, 2);
    $i40 := $add.i64($i36, 1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p10, $mul.ref($i40, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ib_dma_unmap_single($p4, $i43, 8268, 2);
    $i44 := $add.i64($i40, 1);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p10, $mul.ref($i44, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ib_dma_unmap_single($p4, $i47, 8268, 2);
    $i48 := $add.i64($i44, 1);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p10, $mul.ref($i48, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ib_dma_unmap_single($p4, $i51, 8268, 2);
    $i52 := $add.i64($i48, 1);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p10, $mul.ref($i52, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ib_dma_unmap_single($p4, $i55, 8268, 2);
    $i56 := $add.i64($i52, 1);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p10, $mul.ref($i56, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ib_dma_unmap_single($p4, $i59, 8268, 2);
    $i60 := $add.i64($i56, 1);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p10, $mul.ref($i60, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ib_dma_unmap_single($p4, $i63, 8268, 2);
    $i64 := $add.i64($i60, 1);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref($i64, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ib_dma_unmap_single($p4, $i67, 8268, 2);
    $i68 := $add.i64($i64, 1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p10, $mul.ref($i68, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ib_dma_unmap_single($p4, $i71, 8268, 2);
    $i72 := $add.i64($i68, 1);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p10, $mul.ref($i72, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} ib_dma_unmap_single($p4, $i75, 8268, 2);
    $i76 := $add.i64($i72, 1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p10, $mul.ref($i76, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ib_dma_unmap_single($p4, $i79, 8268, 2);
    $i80 := $add.i64($i76, 1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p10, $mul.ref($i80, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ib_dma_unmap_single($p4, $i83, 8268, 2);
    $i84 := $add.i64($i80, 1);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p10, $mul.ref($i84, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} ib_dma_unmap_single($p4, $i87, 8268, 2);
    $i88 := $add.i64($i84, 1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p10, $mul.ref($i88, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p90);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ib_dma_unmap_single($p4, $i91, 8268, 2);
    $i92 := $add.i64($i88, 1);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p10, $mul.ref($i92, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} ib_dma_unmap_single($p4, $i95, 8268, 2);
    $i96 := $add.i64($i92, 1);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p10, $mul.ref($i96, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ib_dma_unmap_single($p4, $i99, 8268, 2);
    $i100 := $add.i64($i96, 1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p10, $mul.ref($i100, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.0, $p102);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} ib_dma_unmap_single($p4, $i103, 8268, 2);
    $i104 := $add.i64($i100, 1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p10, $mul.ref($i104, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} ib_dma_unmap_single($p4, $i107, 8268, 2);
    $i108 := $add.i64($i104, 1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p10, $mul.ref($i108, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} ib_dma_unmap_single($p4, $i111, 8268, 2);
    $i112 := $add.i64($i108, 1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p10, $mul.ref($i112, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ib_dma_unmap_single($p4, $i115, 8268, 2);
    $i116 := $add.i64($i112, 1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p10, $mul.ref($i116, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, $p118);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ib_dma_unmap_single($p4, $i119, 8268, 2);
    $i120 := $add.i64($i116, 1);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p10, $mul.ref($i120, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ib_dma_unmap_single($p4, $i123, 8268, 2);
    $i124 := $add.i64($i120, 1);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p10, $mul.ref($i124, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.0, $p126);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ib_dma_unmap_single($p4, $i127, 8268, 2);
    $i128 := $add.i64($i124, 1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p10, $mul.ref($i128, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.0, $p130);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ib_dma_unmap_single($p4, $i131, 8268, 2);
    $i132 := $add.i64($i128, 1);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p10, $mul.ref($i132, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} ib_dma_unmap_single($p4, $i135, 8268, 2);
    $i136 := $add.i64($i132, 1);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p10, $mul.ref($i136, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.0, $p138);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ib_dma_unmap_single($p4, $i139, 8268, 2);
    $i140 := $add.i64($i136, 1);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p10, $mul.ref($i140, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.0, $p142);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ib_dma_unmap_single($p4, $i143, 8268, 2);
    $i144 := $add.i64($i140, 1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p10, $mul.ref($i144, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ib_dma_unmap_single($p4, $i147, 8268, 2);
    $i148 := $add.i64($i144, 1);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p10, $mul.ref($i148, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.0, $p150);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} ib_dma_unmap_single($p4, $i151, 8268, 2);
    $i152 := $add.i64($i148, 1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p10, $mul.ref($i152, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.0, $p154);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ib_dma_unmap_single($p4, $i155, 8268, 2);
    $i156 := $add.i64($i152, 1);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p10, $mul.ref($i156, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i159 := $load.i64($M.0, $p158);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} ib_dma_unmap_single($p4, $i159, 8268, 2);
    $i160 := $add.i64($i156, 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p10, $mul.ref($i160, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.0, $p162);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} ib_dma_unmap_single($p4, $i163, 8268, 2);
    $i164 := $add.i64($i160, 1);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p10, $mul.ref($i164, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i167 := $load.i64($M.0, $p166);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} ib_dma_unmap_single($p4, $i167, 8268, 2);
    $i168 := $add.i64($i164, 1);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p10, $mul.ref($i168, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.0, $p170);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} ib_dma_unmap_single($p4, $i171, 8268, 2);
    $i172 := $add.i64($i168, 1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p10, $mul.ref($i172, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.0, $p174);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} ib_dma_unmap_single($p4, $i175, 8268, 2);
    $i176 := $add.i64($i172, 1);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p10, $mul.ref($i176, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i179 := $load.i64($M.0, $p178);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} ib_dma_unmap_single($p4, $i179, 8268, 2);
    $i180 := $add.i64($i176, 1);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p10, $mul.ref($i180, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.0, $p182);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} ib_dma_unmap_single($p4, $i183, 8268, 2);
    $i184 := $add.i64($i180, 1);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p10, $mul.ref($i184, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i187 := $load.i64($M.0, $p186);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} ib_dma_unmap_single($p4, $i187, 8268, 2);
    $i188 := $add.i64($i184, 1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p10, $mul.ref($i188, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i191 := $load.i64($M.0, $p190);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} ib_dma_unmap_single($p4, $i191, 8268, 2);
    $i192 := $add.i64($i188, 1);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p10, $mul.ref($i192, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i195 := $load.i64($M.0, $p194);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} ib_dma_unmap_single($p4, $i195, 8268, 2);
    $i196 := $add.i64($i192, 1);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p10, $mul.ref($i196, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i199 := $load.i64($M.0, $p198);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} ib_dma_unmap_single($p4, $i199, 8268, 2);
    $i200 := $add.i64($i196, 1);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p10, $mul.ref($i200, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.0, $p202);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ib_dma_unmap_single($p4, $i203, 8268, 2);
    $i204 := $add.i64($i200, 1);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p10, $mul.ref($i204, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.0, $p206);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ib_dma_unmap_single($p4, $i207, 8268, 2);
    $i208 := $add.i64($i204, 1);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p10, $mul.ref($i208, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i211 := $load.i64($M.0, $p210);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ib_dma_unmap_single($p4, $i211, 8268, 2);
    $i212 := $add.i64($i208, 1);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p10, $mul.ref($i212, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i215 := $load.i64($M.0, $p214);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ib_dma_unmap_single($p4, $i215, 8268, 2);
    $i216 := $add.i64($i212, 1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p10, $mul.ref($i216, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i219 := $load.i64($M.0, $p218);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} ib_dma_unmap_single($p4, $i219, 8268, 2);
    $i220 := $add.i64($i216, 1);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p10, $mul.ref($i220, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i223 := $load.i64($M.0, $p222);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ib_dma_unmap_single($p4, $i223, 8268, 2);
    $i224 := $add.i64($i220, 1);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p10, $mul.ref($i224, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i227 := $load.i64($M.0, $p226);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ib_dma_unmap_single($p4, $i227, 8268, 2);
    $i228 := $add.i64($i224, 1);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p10, $mul.ref($i228, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i231 := $load.i64($M.0, $p230);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} ib_dma_unmap_single($p4, $i231, 8268, 2);
    $i232 := $add.i64($i228, 1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p10, $mul.ref($i232, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.0, $p234);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ib_dma_unmap_single($p4, $i235, 8268, 2);
    $i236 := $add.i64($i232, 1);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p10, $mul.ref($i236, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i239 := $load.i64($M.0, $p238);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} ib_dma_unmap_single($p4, $i239, 8268, 2);
    $i240 := $add.i64($i236, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p10, $mul.ref($i240, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i243 := $load.i64($M.0, $p242);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ib_dma_unmap_single($p4, $i243, 8268, 2);
    $i244 := $add.i64($i240, 1);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p10, $mul.ref($i244, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i247 := $load.i64($M.0, $p246);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} ib_dma_unmap_single($p4, $i247, 8268, 2);
    $i248 := $add.i64($i244, 1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p10, $mul.ref($i248, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.0, $p250);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ib_dma_unmap_single($p4, $i251, 8268, 2);
    $i252 := $add.i64($i248, 1);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p10, $mul.ref($i252, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i255 := $load.i64($M.0, $p254);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} ib_dma_unmap_single($p4, $i255, 8268, 2);
    $i256 := $add.i64($i252, 1);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p10, $mul.ref($i256, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i259 := $load.i64($M.0, $p258);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ib_dma_unmap_single($p4, $i259, 8268, 2);
    $i260 := $add.i64($i256, 1);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p10, $mul.ref($i260, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i263 := $load.i64($M.0, $p262);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ib_dma_unmap_single($p4, $i263, 8268, 2);
    $i264 := $add.i64($i260, 1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p10, $mul.ref($i264, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i267 := $load.i64($M.0, $p266);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ib_dma_unmap_single($p4, $i267, 8268, 2);
    $i268 := $add.i64($i264, 1);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p10, $mul.ref($i268, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i271 := $load.i64($M.0, $p270);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} ib_dma_unmap_single($p4, $i271, 8268, 2);
    $i272 := $add.i64($i268, 1);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p10, $mul.ref($i272, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i275 := $load.i64($M.0, $p274);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ib_dma_unmap_single($p4, $i275, 8268, 2);
    $i276 := $add.i64($i272, 1);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p10, $mul.ref($i276, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i279 := $load.i64($M.0, $p278);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} ib_dma_unmap_single($p4, $i279, 8268, 2);
    $i280 := $add.i64($i276, 1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p10, $mul.ref($i280, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i283 := $load.i64($M.0, $p282);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ib_dma_unmap_single($p4, $i283, 8268, 2);
    $i284 := $add.i64($i280, 1);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p10, $mul.ref($i284, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i287 := $load.i64($M.0, $p286);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ib_dma_unmap_single($p4, $i287, 8268, 2);
    $i288 := $add.i64($i284, 1);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p10, $mul.ref($i288, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i291 := $load.i64($M.0, $p290);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ib_dma_unmap_single($p4, $i291, 8268, 2);
    $i292 := $add.i64($i288, 1);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p10, $mul.ref($i292, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i295 := $load.i64($M.0, $p294);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} ib_dma_unmap_single($p4, $i295, 8268, 2);
    $i296 := $add.i64($i292, 1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p10, $mul.ref($i296, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i299 := $load.i64($M.0, $p298);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ib_dma_unmap_single($p4, $i299, 8268, 2);
    $i300 := $add.i64($i296, 1);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p10, $mul.ref($i300, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i303 := $load.i64($M.0, $p302);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ib_dma_unmap_single($p4, $i303, 8268, 2);
    $i304 := $add.i64($i300, 1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p10, $mul.ref($i304, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i307 := $load.i64($M.0, $p306);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ib_dma_unmap_single($p4, $i307, 8268, 2);
    $i308 := $add.i64($i304, 1);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p10, $mul.ref($i308, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i311 := $load.i64($M.0, $p310);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ib_dma_unmap_single($p4, $i311, 8268, 2);
    $i312 := $add.i64($i308, 1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p10, $mul.ref($i312, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i315 := $load.i64($M.0, $p314);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ib_dma_unmap_single($p4, $i315, 8268, 2);
    $i316 := $add.i64($i312, 1);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p10, $mul.ref($i316, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i319 := $load.i64($M.0, $p318);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} ib_dma_unmap_single($p4, $i319, 8268, 2);
    $i320 := $add.i64($i316, 1);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p10, $mul.ref($i320, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i323 := $load.i64($M.0, $p322);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ib_dma_unmap_single($p4, $i323, 8268, 2);
    $i324 := $add.i64($i320, 1);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p10, $mul.ref($i324, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i327 := $load.i64($M.0, $p326);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} ib_dma_unmap_single($p4, $i327, 8268, 2);
    $i328 := $add.i64($i324, 1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p10, $mul.ref($i328, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.0, $p330);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} ib_dma_unmap_single($p4, $i331, 8268, 2);
    $i332 := $add.i64($i328, 1);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p10, $mul.ref($i332, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i335 := $load.i64($M.0, $p334);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} ib_dma_unmap_single($p4, $i335, 8268, 2);
    $i336 := $add.i64($i332, 1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p10, $mul.ref($i336, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i339 := $load.i64($M.0, $p338);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} ib_dma_unmap_single($p4, $i339, 8268, 2);
    $i340 := $add.i64($i336, 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p10, $mul.ref($i340, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i343 := $load.i64($M.0, $p342);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} ib_dma_unmap_single($p4, $i343, 8268, 2);
    $i344 := $add.i64($i340, 1);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p10, $mul.ref($i344, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i347 := $load.i64($M.0, $p346);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} ib_dma_unmap_single($p4, $i347, 8268, 2);
    $i348 := $add.i64($i344, 1);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p10, $mul.ref($i348, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i351 := $load.i64($M.0, $p350);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} ib_dma_unmap_single($p4, $i351, 8268, 2);
    $i352 := $add.i64($i348, 1);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p10, $mul.ref($i352, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i355 := $load.i64($M.0, $p354);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ib_dma_unmap_single($p4, $i355, 8268, 2);
    $i356 := $add.i64($i352, 1);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p10, $mul.ref($i356, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i359 := $load.i64($M.0, $p358);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ib_dma_unmap_single($p4, $i359, 8268, 2);
    $i360 := $add.i64($i356, 1);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p10, $mul.ref($i360, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i363 := $load.i64($M.0, $p362);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ib_dma_unmap_single($p4, $i363, 8268, 2);
    $i364 := $add.i64($i360, 1);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p10, $mul.ref($i364, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i367 := $load.i64($M.0, $p366);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ib_dma_unmap_single($p4, $i367, 8268, 2);
    $i368 := $add.i64($i364, 1);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p10, $mul.ref($i368, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i371 := $load.i64($M.0, $p370);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ib_dma_unmap_single($p4, $i371, 8268, 2);
    $i372 := $add.i64($i368, 1);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p10, $mul.ref($i372, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i375 := $load.i64($M.0, $p374);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ib_dma_unmap_single($p4, $i375, 8268, 2);
    $i376 := $add.i64($i372, 1);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p10, $mul.ref($i376, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i379 := $load.i64($M.0, $p378);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ib_dma_unmap_single($p4, $i379, 8268, 2);
    $i380 := $add.i64($i376, 1);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p10, $mul.ref($i380, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i383 := $load.i64($M.0, $p382);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} ib_dma_unmap_single($p4, $i383, 8268, 2);
    $i384 := $add.i64($i380, 1);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p10, $mul.ref($i384, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i387 := $load.i64($M.0, $p386);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} ib_dma_unmap_single($p4, $i387, 8268, 2);
    $i388 := $add.i64($i384, 1);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p10, $mul.ref($i388, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i391 := $load.i64($M.0, $p390);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} ib_dma_unmap_single($p4, $i391, 8268, 2);
    $i392 := $add.i64($i388, 1);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p10, $mul.ref($i392, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i395 := $load.i64($M.0, $p394);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} ib_dma_unmap_single($p4, $i395, 8268, 2);
    $i396 := $add.i64($i392, 1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p10, $mul.ref($i396, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i399 := $load.i64($M.0, $p398);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ib_dma_unmap_single($p4, $i399, 8268, 2);
    $i400 := $add.i64($i396, 1);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p10, $mul.ref($i400, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i403 := $load.i64($M.0, $p402);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ib_dma_unmap_single($p4, $i403, 8268, 2);
    $i404 := $add.i64($i400, 1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p10, $mul.ref($i404, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i407 := $load.i64($M.0, $p406);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} ib_dma_unmap_single($p4, $i407, 8268, 2);
    $i408 := $add.i64($i404, 1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p10, $mul.ref($i408, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i411 := $load.i64($M.0, $p410);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ib_dma_unmap_single($p4, $i411, 8268, 2);
    $i412 := $add.i64($i408, 1);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p10, $mul.ref($i412, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i415 := $load.i64($M.0, $p414);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ib_dma_unmap_single($p4, $i415, 8268, 2);
    $i416 := $add.i64($i412, 1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p10, $mul.ref($i416, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i419 := $load.i64($M.0, $p418);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} ib_dma_unmap_single($p4, $i419, 8268, 2);
    $i420 := $add.i64($i416, 1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p10, $mul.ref($i420, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i423 := $load.i64($M.0, $p422);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} ib_dma_unmap_single($p4, $i423, 8268, 2);
    $i424 := $add.i64($i420, 1);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p10, $mul.ref($i424, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i427 := $load.i64($M.0, $p426);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ib_dma_unmap_single($p4, $i427, 8268, 2);
    $i428 := $add.i64($i424, 1);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p10, $mul.ref($i428, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i431 := $load.i64($M.0, $p430);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ib_dma_unmap_single($p4, $i431, 8268, 2);
    $i432 := $add.i64($i428, 1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p10, $mul.ref($i432, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i435 := $load.i64($M.0, $p434);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ib_dma_unmap_single($p4, $i435, 8268, 2);
    $i436 := $add.i64($i432, 1);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p10, $mul.ref($i436, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i439 := $load.i64($M.0, $p438);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} ib_dma_unmap_single($p4, $i439, 8268, 2);
    $i440 := $add.i64($i436, 1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p10, $mul.ref($i440, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i443 := $load.i64($M.0, $p442);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ib_dma_unmap_single($p4, $i443, 8268, 2);
    $i444 := $add.i64($i440, 1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p10, $mul.ref($i444, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i447 := $load.i64($M.0, $p446);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} ib_dma_unmap_single($p4, $i447, 8268, 2);
    $i448 := $add.i64($i444, 1);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p10, $mul.ref($i448, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i451 := $load.i64($M.0, $p450);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ib_dma_unmap_single($p4, $i451, 8268, 2);
    $i452 := $add.i64($i448, 1);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p10, $mul.ref($i452, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i455 := $load.i64($M.0, $p454);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ib_dma_unmap_single($p4, $i455, 8268, 2);
    $i456 := $add.i64($i452, 1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p10, $mul.ref($i456, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i459 := $load.i64($M.0, $p458);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ib_dma_unmap_single($p4, $i459, 8268, 2);
    $i460 := $add.i64($i456, 1);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p10, $mul.ref($i460, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i463 := $load.i64($M.0, $p462);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ib_dma_unmap_single($p4, $i463, 8268, 2);
    $i464 := $add.i64($i460, 1);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p10, $mul.ref($i464, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i467 := $load.i64($M.0, $p466);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ib_dma_unmap_single($p4, $i467, 8268, 2);
    $i468 := $add.i64($i464, 1);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p10, $mul.ref($i468, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i471 := $load.i64($M.0, $p470);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ib_dma_unmap_single($p4, $i471, 8268, 2);
    $i472 := $add.i64($i468, 1);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p10, $mul.ref($i472, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i475 := $load.i64($M.0, $p474);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ib_dma_unmap_single($p4, $i475, 8268, 2);
    $i476 := $add.i64($i472, 1);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p10, $mul.ref($i476, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i479 := $load.i64($M.0, $p478);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ib_dma_unmap_single($p4, $i479, 8268, 2);
    $i480 := $add.i64($i476, 1);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p10, $mul.ref($i480, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i483 := $load.i64($M.0, $p482);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ib_dma_unmap_single($p4, $i483, 8268, 2);
    $i484 := $add.i64($i480, 1);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p10, $mul.ref($i484, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i487 := $load.i64($M.0, $p486);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} ib_dma_unmap_single($p4, $i487, 8268, 2);
    $i488 := $add.i64($i484, 1);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p10, $mul.ref($i488, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i491 := $load.i64($M.0, $p490);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ib_dma_unmap_single($p4, $i491, 8268, 2);
    $i492 := $add.i64($i488, 1);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p10, $mul.ref($i492, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i495 := $load.i64($M.0, $p494);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} ib_dma_unmap_single($p4, $i495, 8268, 2);
    $i496 := $add.i64($i492, 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p10, $mul.ref($i496, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i499 := $load.i64($M.0, $p498);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} ib_dma_unmap_single($p4, $i499, 8268, 2);
    $i500 := $add.i64($i496, 1);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p10, $mul.ref($i500, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i503 := $load.i64($M.0, $p502);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ib_dma_unmap_single($p4, $i503, 8268, 2);
    $i504 := $add.i64($i500, 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p10, $mul.ref($i504, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i507 := $load.i64($M.0, $p506);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ib_dma_unmap_single($p4, $i507, 8268, 2);
    $i508 := $add.i64($i504, 1);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p10, $mul.ref($i508, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i511 := $load.i64($M.0, $p510);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} ib_dma_unmap_single($p4, $i511, 8268, 2);
    $i512 := $add.i64($i508, 1);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p10, $mul.ref($i512, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i515 := $load.i64($M.0, $p514);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ib_dma_unmap_single($p4, $i515, 8268, 2);
    $i516 := $add.i64($i512, 1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p10, $mul.ref($i516, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i519 := $load.i64($M.0, $p518);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ib_dma_unmap_single($p4, $i519, 8268, 2);
    $i520 := $add.i64($i516, 1);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p10, $mul.ref($i520, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i523 := $load.i64($M.0, $p522);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ib_dma_unmap_single($p4, $i523, 8268, 2);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} kfree($p16);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rdma_destroy_id: ref;

axiom rdma_destroy_id == $sub.ref(0, 455856);

procedure rdma_destroy_id($p0: ref);
  free requires assertsPassed;



implementation rdma_destroy_id($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    return;
}



const isert_comp_put: ref;

axiom isert_comp_put == $sub.ref(0, 456888);

procedure isert_comp_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_comp_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} mutex_lock_nested(device_list_mutex, 0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1040, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1040, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} mutex_unlock(device_list_mutex);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    return;
}



const ib_destroy_qp: ref;

axiom ib_destroy_qp == $sub.ref(0, 457920);

procedure ib_destroy_qp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_destroy_qp($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1040} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const isert_free_login_buf: ref;

axiom isert_free_login_buf == $sub.ref(0, 458952);

procedure isert_free_login_buf($p0: ref);
  free requires assertsPassed;



implementation isert_free_login_buf($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(64, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ib_dma_unmap_single($p4, $i6, 8268, 1);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(48, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ib_dma_unmap_single($p4, $i8, 8192, 2);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(24, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} kfree($p10);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    return;
}



const isert_device_put: ref;

axiom isert_device_put == $sub.ref(0, 459984);

procedure isert_device_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.12, $M.14, $M.16;



implementation isert_device_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} mutex_lock_nested(device_list_mutex, 0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1046} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} mutex_unlock(device_list_mutex);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} isert_free_device_ib_res($p0);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} list_del($p17);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} kfree($p18);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_128 := printk.ref.ref.ref.i32(.str.95, .str.96, $p0, $i12);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_free_device_ib_res: ref;

axiom isert_free_device_ib_res == $sub.ref(0, 461016);

procedure isert_free_device_ib_res($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation isert_free_device_ib_res($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 1);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1053} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_130 := ib_dereg_mr($p9);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_131 := ib_dealloc_pd($p12);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} isert_free_comps($p0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_129 := printk.ref.ref.ref(.str.97, .str.98, $p0);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ib_dealloc_pd: ref;

axiom ib_dealloc_pd == $sub.ref(0, 462048);

procedure ib_dealloc_pd($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dealloc_pd($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1058} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1059} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const isert_free_comps: ref;

axiom isert_free_comps == $sub.ref(0, 463080);

procedure isert_free_comps($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation isert_free_comps($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i4: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var vslice_dummy_var_132: i1;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} kfree($p23);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p9, $p10, $i11, $i12, $p13, $p15, $p16, $i18, $i19, $i20, $i4, vslice_dummy_var_132, vslice_dummy_var_133 := isert_free_comps_loop_$bb4($p0, $p1, $p5, $p6, $i7, $p9, $p10, $i11, $i12, $p13, $p15, $p16, $i18, $i19, $i20, $i4, vslice_dummy_var_132, vslice_dummy_var_133);
    goto $bb4_last;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 1128)), $mul.ref(8, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i4, 1);
    call {:si_unique_call 1062} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p1);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, $i18);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i18;
    goto $bb9_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i7, 1128)), $mul.ref(1048, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_132 := ldv_cancel_work_sync_43($p13);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref($i7, 1128)), $mul.ref(8, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_133 := ib_destroy_cq($p16);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5658;
}



const ldv_cancel_work_sync_43: ref;

axiom ldv_cancel_work_sync_43 == $sub.ref(0, 464112);

procedure ldv_cancel_work_sync_43($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation ldv_cancel_work_sync_43($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i1 := cancel_work_sync($p0);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1065} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1066} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} disable_work_1($p0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ib_destroy_cq: ref;

axiom ib_destroy_cq == $sub.ref(0, 465144);

procedure ib_destroy_cq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_destroy_cq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1069} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 466176);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1070} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1071} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 467208);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.12;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i11 := $M.12;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.14;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i19 := $M.14;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.16;
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i27 := $M.16;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.17;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1075} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.15;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1074} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.13;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 1073} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.11;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 468240);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __init_waitqueue_head($p3, .str.18, $p1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 469272);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 470304);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    return;
}



const isert_conn_terminate: ref;

axiom isert_conn_terminate == $sub.ref(0, 471336);

procedure isert_conn_terminate($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_conn_terminate($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 0);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 1087} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} vslice_dummy_var_136 := printk.ref.ref.ref.i32(.str.111, .str.109, $p0, $i35);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 1);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 3);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i19 := rdma_disconnect($p18);
    call {:si_unique_call 1082} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i21 := $M.1;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1084} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_135 := printk.ref.ref.ref(.str.110, .str.109, $p0);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} vslice_dummy_var_134 := printk.ref.ref.ref.i32(.str.108, .str.109, $p0, $i14);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb9;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const isert_wait4cmds: ref;

axiom isert_wait4cmds == $sub.ref(0, 472368);

procedure isert_wait4cmds($p0: ref);
  free requires assertsPassed;



implementation isert_wait4cmds($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 1);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1090} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2424, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2424, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1280)), $mul.ref(1264, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} target_sess_cmd_list_set_waiting($p15);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2424, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1280)), $mul.ref(1264, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} target_wait_for_sess_cmds($p19);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_137 := printk.ref.ref.ref(.str.248, .str.249, $p0);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_wait4logout: ref;

axiom isert_wait4logout == $sub.ref(0, 473400);

procedure isert_wait4logout($p0: ref);
  free requires assertsPassed;



implementation isert_wait4logout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 1);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1095} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(2160, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 1);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1098} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2480)), $mul.ref(656, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} vslice_dummy_var_140 := wait_for_completion_timeout($p20, 3750);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_139 := printk.ref.ref.ref(.str.253, .str.252, $p0);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_138 := printk.ref.ref.ref(.str.99, .str.252, $p0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 474432);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i2 := ldv_queue_work_on_15(8192, $p0, $p1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1102} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 475464);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} {:cexpr "ldv_queue_work_on_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1105} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1106} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} activate_work_1($p2, 2);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 476496);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1108} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1109} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1110} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 477528);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1112} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1113} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const target_sess_cmd_list_set_waiting: ref;

axiom target_sess_cmd_list_set_waiting == $sub.ref(0, 478560);

procedure target_sess_cmd_list_set_waiting($p0: ref);
  free requires assertsPassed;



implementation target_sess_cmd_list_set_waiting($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    return;
}



const target_wait_for_sess_cmds: ref;

axiom target_wait_for_sess_cmds == $sub.ref(0, 479592);

procedure target_wait_for_sess_cmds($p0: ref);
  free requires assertsPassed;



implementation target_wait_for_sess_cmds($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    return;
}



const rdma_disconnect: ref;

axiom rdma_disconnect == $sub.ref(0, 480624);

procedure rdma_disconnect($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rdma_disconnect($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const down_interruptible: ref;

axiom down_interruptible == $sub.ref(0, 481656);

procedure down_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation down_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const isert_set_conn_info: ref;

axiom isert_set_conn_info == $sub.ref(0, 482688);

procedure isert_set_conn_info($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_set_conn_info($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i16;
  var $i28: i16;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $i42: i16;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $i56: i16;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i16;
  var $i70: i16;
  var $p71: ref;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(112, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 10);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    $p45 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(136, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_143 := sprintf.ref.ref.ref($p48, .str.213, $p50);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i56 := __fswab16($i55);
    call {:si_unique_call 1126} {:cexpr "tmp___1"} boogie_si_record_i16($i56);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(104, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $i56);
    $p59 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(184, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} vslice_dummy_var_144 := sprintf.ref.ref.ref($p62, .str.213, $p64);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p60, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i70 := __fswab16($i69);
    call {:si_unique_call 1129} {:cexpr "tmp___2"} boogie_si_record_i16($i70);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(106, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $i70);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(136, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 28)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} vslice_dummy_var_141 := snprintf.ref.i64.ref.ref($p20, 48, .str.212, $p22);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 28)), $mul.ref(2, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i28 := __fswab16($i27);
    call {:si_unique_call 1120} {:cexpr "tmp"} boogie_si_record_i16($i28);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(104, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    $p31 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(184, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 28)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} vslice_dummy_var_142 := snprintf.ref.i64.ref.ref($p34, 48, .str.212, $p36);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p32, $mul.ref(0, 28)), $mul.ref(2, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i42 := __fswab16($i41);
    call {:si_unique_call 1123} {:cexpr "tmp___0"} boogie_si_record_i16($i42);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 2480)), $mul.ref(106, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 483720);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 484752);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const sema_init: ref;

axiom sema_init == $sub.ref(0, 485784);

procedure sema_init($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sema_init($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p16: ref;
  var $p20: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 1132} {:cexpr "sema_init:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 559067475));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $sub.i32(0, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, .str.200);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i1);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p38);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 1133} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p41, $p42, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} lockdep_init_map($p44, .str.201, $p2, 0);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 486816);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    return;
}



const isert_setup_id: ref;

axiom isert_setup_id == $sub.ref(0, 487848);

procedure isert_setup_id($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation isert_setup_id($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $i39: i32;
  var $i40: i1;
  var $i38: i32;
  var $i25: i32;
  var $i43: i64;
  var $p44: ref;
  var $p42: ref;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(264, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1136} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $p14 := rdma_create_id(isert_cma_handler, $p13, 262, 2);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i16 := IS_ERR($p15);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 1140} {:cexpr "tmp___2"} boogie_si_record_i8($i17);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $M.1;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 2);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1149} {:cexpr "tmp___3"} boogie_si_record_i64($i30);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i35 := rdma_bind_addr($p14, $p4);
    call {:si_unique_call 1152} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i39 := rdma_listen($p14, 0);
    call {:si_unique_call 1156} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p42 := $p14;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $r := $p42;
    return;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_149 := printk.ref.ref.i32(.str.5, .str.1, $i39);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i38 := $i39;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} rdma_destroy_id($p14);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i25 := $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i25);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p44 := ERR_PTR($i43);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p42 := $p44;
    goto $bb18;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_148 := printk.ref.ref.i32(.str.4, .str.1, $i35);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb13;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p14, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} vslice_dummy_var_147 := printk.ref.ref.ref.ref(.str.3, .str.1, $p14, $p33);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p14);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i20 := PTR_ERR($p19);
    call {:si_unique_call 1142} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_146 := printk.ref.ref.i64(.str.2, .str.1, $i20);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p14);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i23 := PTR_ERR($p22);
    call {:si_unique_call 1145} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    call {:si_unique_call 1146} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(264, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} vslice_dummy_var_145 := printk.ref.ref.ref.ref(.str, .str.1, $p11, $p4);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_cma_handler: ref;

axiom isert_cma_handler == $sub.ref(0, 488880);

procedure isert_cma_handler($p0: ref, $p1: ref) returns ($r: i32);



const rdma_create_id: ref;

axiom rdma_create_id == $sub.ref(0, 489912);

procedure rdma_create_id($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation rdma_create_id($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} {:cexpr "rdma_create_id:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1159} {:cexpr "rdma_create_id:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p4 := external_alloc();
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const rdma_bind_addr: ref;

axiom rdma_bind_addr == $sub.ref(0, 490944);

procedure rdma_bind_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rdma_bind_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1161} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rdma_listen: ref;

axiom rdma_listen == $sub.ref(0, 491976);

procedure rdma_listen($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rdma_listen($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} {:cexpr "rdma_listen:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1164} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 493008);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 494040);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rdma_event_msg: ref;

axiom rdma_event_msg == $sub.ref(0, 495072);

procedure rdma_event_msg($i0: i32) returns ($r: ref);



const isert_connect_request: ref;

axiom isert_connect_request == $sub.ref(0, 496104);

procedure isert_connect_request($p0: ref, $p1: ref) returns ($r: i32);



const isert_connected_handler: ref;

axiom isert_connected_handler == $sub.ref(0, 497136);

procedure isert_connected_handler($p0: ref);



const isert_disconnected_handler: ref;

axiom isert_disconnected_handler == $sub.ref(0, 498168);

procedure isert_disconnected_handler($p0: ref, $i1: i32) returns ($r: i32);



const isert_connect_error: ref;

axiom isert_connect_error == $sub.ref(0, 499200);

procedure isert_connect_error($p0: ref) returns ($r: i32);



const isert_np_cma_handler: ref;

axiom isert_np_cma_handler == $sub.ref(0, 500232);

procedure isert_np_cma_handler($p0: ref, $i1: i32) returns ($r: i32);



const kref_get_unless_zero: ref;

axiom kref_get_unless_zero == $sub.ref(0, 501264);

procedure kref_get_unless_zero($p0: ref) returns ($r: i32);



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 502296);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 503328);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 504360);

procedure atomic_read($p0: ref) returns ($r: i32);



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 505392);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const rdma_reject: ref;

axiom rdma_reject == $sub.ref(0, 506424);

procedure rdma_reject($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);



const isert_init_conn: ref;

axiom isert_init_conn == $sub.ref(0, 507456);

procedure isert_init_conn($p0: ref);



const isert_alloc_login_buf: ref;

axiom isert_alloc_login_buf == $sub.ref(0, 508488);

procedure isert_alloc_login_buf($p0: ref, $p1: ref) returns ($r: i32);



const isert_device_get: ref;

axiom isert_device_get == $sub.ref(0, 509520);

procedure isert_device_get($p0: ref) returns ($r: ref);



const isert_conn_setup_qp: ref;

axiom isert_conn_setup_qp == $sub.ref(0, 510552);

procedure isert_conn_setup_qp($p0: ref, $p1: ref) returns ($r: i32);



const isert_rdma_accept: ref;

axiom isert_rdma_accept == $sub.ref(0, 511584);

procedure isert_rdma_accept($p0: ref) returns ($r: i32);



const up: ref;

axiom up == $sub.ref(0, 512616);

procedure up($p0: ref);



const rdma_accept: ref;

axiom rdma_accept == $sub.ref(0, 513648);

procedure rdma_accept($p0: ref, $p1: ref) returns ($r: i32);



const isert_comp_get: ref;

axiom isert_comp_get == $sub.ref(0, 514680);

procedure isert_comp_get($p0: ref) returns ($r: ref);



const isert_create_qp: ref;

axiom isert_create_qp == $sub.ref(0, 515712);

procedure isert_create_qp($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const isert_qp_event_callback: ref;

axiom isert_qp_event_callback == $sub.ref(0, 516744);

procedure isert_qp_event_callback($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation isert_qp_event_callback($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p5 := ib_event_msg($i4);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} vslice_dummy_var_150 := printk.ref.ref.ref.i32.ref(.str.87, .str.88, $p5, $i7, $p2);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i17 := $M.1;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1172} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} vslice_dummy_var_152 := printk.ref.ref(.str.89, .str.88);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} vslice_dummy_var_151 := rdma_notify($p15, 4);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const rdma_create_qp: ref;

axiom rdma_create_qp == $sub.ref(0, 517776);

procedure rdma_create_qp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const ib_event_msg: ref;

axiom ib_event_msg == $sub.ref(0, 518808);

procedure ib_event_msg($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_event_msg($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} {:cexpr "ib_event_msg:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p1 := external_alloc();
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const rdma_notify: ref;

axiom rdma_notify == $sub.ref(0, 519840);

procedure rdma_notify($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rdma_notify($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} {:cexpr "rdma_notify:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1178} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const isert_create_device_ib_res: ref;

axiom isert_create_device_ib_res == $sub.ref(0, 520872);

procedure isert_create_device_ib_res($p0: ref) returns ($r: i32);



const isert_query_device: ref;

axiom isert_query_device == $sub.ref(0, 521904);

procedure isert_query_device($p0: ref, $p1: ref) returns ($r: i32);



const isert_reg_rdma: ref;

axiom isert_reg_rdma == $sub.ref(0, 522936);

procedure isert_reg_rdma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.38, $M.39, $CurrAddr, assertsPassed;



implementation isert_reg_rdma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i1;
  var $i95: i8;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i49: i32;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i28: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p4 := iscsit_priv_cmd($p1);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(136, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p4);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 3);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(600, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(616, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(48, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i26 := isert_map_data_buf($p8, $p5, $p18, $i20, $i22, $i16, $i24, $p25);
    call {:si_unique_call 1182} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 1);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i33 := isert_prot_cmd($p8, $p3);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 1184} {:cexpr "tmp___0"} boogie_si_record_i8($i34);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $p43 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i47 := isert_fast_reg_mr($p8, $p43, $p44, 2, $p46);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 1189} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $i50 := isert_prot_cmd($p8, $p3);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 1191} {:cexpr "tmp___1"} boogie_si_record_i8($i51);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p58 := $p59;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(40, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p58);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1194} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p62, $p63, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(40, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(32, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p64);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 1);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(72, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 1195} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p68, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(72, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(64, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p69);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(16, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p4);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(40, 1));
    $p75 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p74);
    $p76 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(24, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 1);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    $p79 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, $i78);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 2);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i82 == 1);
    $p101 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(28, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 4);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.0, $p102);
    $p104 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(40, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p106, $i103);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(4, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    $p109 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(40, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i108);
    $p112 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 2);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb25:
    assume $i82 == 1;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(28, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, 0);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    $p86 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(40, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i85);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(0, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    $p91 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(40, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i90);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i94 := isert_prot_cmd($p8, $p3);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i8($i94);
    call {:si_unique_call 1197} {:cexpr "tmp___2"} boogie_si_record_i8($i95);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i8.i1($i95);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i99 := (if $i98 == 1 then 0 else 2);
    $p100 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i96 == 1;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i97 := 0;
    goto $bb29;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i53 := isert_handle_prot_cmd($p8, $p5, $p2);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 1193} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(2, 16));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p58 := $p57;
    goto $bb24;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i49 := $i53;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p43);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} isert_unmap_data_buf($p8, $p118);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i28 := $i49;
    goto $bb6;

  $bb31:
    assume $i114 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ldv_spin_lock();
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p43, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p8, $mul.ref(0, 2168)), $mul.ref(1952, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} list_add_tail($p115, $p116);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p8, $mul.ref(0, 2168)), $mul.ref(1976, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} spin_unlock_irqrestore($p117, $u0);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb17;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} ldv_spin_lock();
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2168)), $mul.ref(1952, 1)), $mul.ref(0, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} list_del($p40);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 2168)), $mul.ref(1976, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} spin_unlock_irqrestore($p41, $u0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p38);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p43 := $p38;
    goto $bb13;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const isert_unreg_rdma: ref;

axiom isert_unreg_rdma == $sub.ref(0, 523968);

procedure isert_unreg_rdma($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation isert_unreg_rdma($p0: ref, $p1: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1203} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(32, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $0.ref);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i53 := $M.1;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i53, 2);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1213} {:cexpr "tmp___1"} boogie_si_record_i64($i57);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(216, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} isert_unmap_data_buf($p1, $p60);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i58 == 1;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} vslice_dummy_var_155 := printk.ref.ref.ref(.str.64, .str.62, $p0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 2);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1206} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 1);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1976, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} spin_lock_bh($p41);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1952, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} list_add_tail($p44, $p45);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1976, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} spin_unlock_bh($p46);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i29 == 1;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(248, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} isert_unmap_data_buf($p1, $p30);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 254);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i37);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i19 == 1;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} vslice_dummy_var_154 := printk.ref.ref.ref.ref(.str.63, .str.62, $p0, $p21);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} vslice_dummy_var_153 := printk.ref.ref.ref(.str.61, .str.62, $p0);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_map_rdma: ref;

axiom isert_map_rdma == $sub.ref(0, 525000);

procedure isert_map_rdma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation isert_map_rdma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i1;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i64;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i29: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p4 := iscsit_priv_cmd($p1);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(136, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(600, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(616, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(48, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i27 := isert_map_data_buf($p8, $p5, $p19, $i21, $i23, $i17, $i25, $p26);
    call {:si_unique_call 1218} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 1219} {:cexpr "data_left"} boogie_si_record_i32($i31);
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1)), $mul.ref(20, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 1220} {:cexpr "offset"} boogie_si_record_i32($i33);
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i37 := $mul.i64($i36, 16);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p38 := kzalloc($i37, 208);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(32, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p38);
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 2168)), $mul.ref(20, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i51, $i53);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 2168)), $mul.ref(20, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i58 := $udiv.i32($i55, $i57);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i63 := $mul.i64($i62, 96);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p64 := kzalloc($i63, 208);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(64, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p64);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(64, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(16, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p4);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 2168)), $mul.ref(20, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i81 := $mul.i32($i80, 4096);
    call {:si_unique_call 1230} {:cexpr "rdma_write_max"} boogie_si_record_i32($i81);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i84 := $sgt.i32($i83, 0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb21:
    assume $i84 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i85, $i86, $i87, $i88, $p89 := 0, 0, $i31, $i33, $p38;
    goto $bb24;

  $bb24:
    call $p91, $p92, $i93, $p94, $i95, $i96, $p97, $p98, $i99, $i100, $p101, $p102, $i103, $i104, $i105, $p106, $p107, $p108, $p109, $i110, $p111, $p112, $p113, $i114, $p115, $i116, $i117, $p119, $p120, $p121, $p122, $i123, $i124, $p125, $p126, $p127, $p128, $i129, $i130, $i131, $p132, $p133, $p134, $p135, $i136, $p137, $p138, $p139, $i140, $p141, $i142, $i143, $p144, $p145, $p146, $i147, $i148, $p149, $p150, $i151, $i152, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i85, $i86, $i87, $i88, $p89 := isert_map_rdma_loop_$bb24($p2, $p5, $p8, $i81, $p82, $p91, $p92, $i93, $p94, $i95, $i96, $p97, $p98, $i99, $i100, $p101, $p102, $i103, $i104, $i105, $p106, $p107, $p108, $p109, $i110, $p111, $p112, $p113, $i114, $p115, $i116, $i117, $p119, $p120, $p121, $p122, $i123, $i124, $p125, $p126, $p127, $p128, $i129, $i130, $i131, $p132, $p133, $p134, $p135, $i136, $p137, $p138, $p139, $i140, $p141, $i142, $i143, $p144, $p145, $p146, $i147, $i148, $p149, $p150, $i151, $i152, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i85, $i86, $i87, $i88, $p89);
    goto $bb24_last;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i85);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p92, $mul.ref($i93, 96));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i95 := $ult.i32($i87, $i81);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i96 := $i81;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(32, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 0);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i100 == 1);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(28, 1));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 4);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i130 := $zext.i32.i64($i86);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i129, $i130);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p134, $i131);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(4, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, $i136);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i85, 1);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i140, $i142);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i143 == 1);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(64, 1));
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i85);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 1);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p146, $mul.ref($i148, 96));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(0, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p150, $p149);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i151 := isert_build_rdma_wr($p8, $p5, $p89, $p94, $i96, $i88);
    call {:si_unique_call 1232} {:cexpr "ib_sge_cnt"} boogie_si_record_i32($i151);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p89, $mul.ref($i152, 16));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i88, $i96);
    call {:si_unique_call 1233} {:cexpr "offset"} boogie_si_record_i32($i154);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i86, $i96);
    call {:si_unique_call 1234} {:cexpr "va_offset"} boogie_si_record_i32($i155);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i156 := $sub.i32($i87, $i96);
    call {:si_unique_call 1235} {:cexpr "data_left"} boogie_si_record_i32($i156);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i85, 1);
    call {:si_unique_call 1236} {:cexpr "i"} boogie_si_record_i32($i157);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p82);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i159 := $sgt.i32($i158, $i157);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i159 == 1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb38:
    assume $i159 == 1;
    assume {:verifier.code 0} true;
    $i85, $i86, $i87, $i88, $p89 := $i157, $i155, $i156, $i154, $p153;
    goto $bb38_dummy;

  $bb35:
    assume $i143 == 1;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(32, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 2);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i100 == 1;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(28, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 0);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.0, $p102);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i88);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i103, $i104);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p108, $i105);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(0, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i110);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i85, 1);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i114, $i116);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i117 == 1);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(64, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i85);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 1);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p122, $mul.ref($i124, 96));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(0, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p125);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i117 == 1;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p92, $mul.ref($i93, 96)), $mul.ref(0, 1));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p119);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i95 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i96 := $i87;
    goto $bb28;

  $bb15:
    assume $i70 == 1;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i71 := $M.1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, 2);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 1228} {:cexpr "tmp___3"} boogie_si_record_i64($i75);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} isert_unmap_data_buf($p8, $p9);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb6;

  $bb17:
    assume $i76 == 1;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_157 := printk.ref.ref(.str.67, .str.66);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i42 := $M.1;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 1223} {:cexpr "tmp___1"} boogie_si_record_i64($i46);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vslice_dummy_var_156 := printk.ref.ref(.str.65, .str.66);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;
}



const isert_unmap_cmd: ref;

axiom isert_unmap_cmd == $sub.ref(0, 526032);

procedure isert_unmap_cmd($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_unmap_cmd($p0: ref, $p1: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1238} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(32, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i42 := $M.1;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 2);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 1249} {:cexpr "tmp___2"} boogie_si_record_i64($i46);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(32, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} kfree($p51);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(32, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $0.ref);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_161 := printk.ref.ref.ref(.str.75, .str.73, $p0);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i27 := $M.1;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 2);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1245} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} kfree($p36);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_160 := printk.ref.ref.ref(.str.74, .str.73, $p0);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i15 := $M.1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 2);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1241} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(216, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} isert_unmap_data_buf($p1, $p22);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_159 := printk.ref.ref.ref(.str.64, .str.73, $p0);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_158 := printk.ref.ref.ref(.str.61, .str.73, $p0);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isert_alloc_comps: ref;

axiom isert_alloc_comps == $sub.ref(0, 527064);

procedure isert_alloc_comps($p0: ref, $p1: ref) returns ($r: i32);



const ib_alloc_pd: ref;

axiom ib_alloc_pd == $sub.ref(0, 528096);

procedure ib_alloc_pd($p0: ref) returns ($r: ref);



const ib_get_dma_mr: ref;

axiom ib_get_dma_mr == $sub.ref(0, 529128);

procedure ib_get_dma_mr($p0: ref, $i1: i32) returns ($r: ref);



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 530160);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 1253} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 531192);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);



const __init_work: ref;

axiom __init_work == $sub.ref(0, 532224);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 533256);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    return;
}



const isert_cq_work: ref;

axiom isert_cq_work == $sub.ref(0, 534288);

procedure isert_cq_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.33, $M.38, $M.39, assertsPassed;



implementation isert_cq_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i11: i1;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i13: i32;
  var $i12: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i9: i32;
  var $i10: i32;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1048), 1128)), $mul.ref(16, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1048), 1128)), $mul.ref(8, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i7 := ib_poll_cq($p6, 16, $p4);
    call {:si_unique_call 1257} {:cexpr "n"} boogie_si_record_i32($i7);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1048), 1128)), $mul.ref(8, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} vslice_dummy_var_162 := ib_req_notify_cq($p24, 2);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i7, 0;
    goto $bb4;

  $bb4:
    call $i11, $i14, $p15, $i16, $i17, $i13, $i12, $i18, $i19, $p20, $i21, $i22, $i9, $i10 := isert_cq_work_loop_$bb4($p4, $p5, $i11, $i14, $p15, $i16, $i17, $i13, $i12, $i18, $i19, $p20, $i21, $i22, $i9, $i10);
    goto $bb4_last;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32(0, $i9);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i10, $i12);
    call {:si_unique_call 1260} {:cexpr "completed"} boogie_si_record_i32($i18);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 65535);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p5);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i21 := ib_poll_cq($p20, 16, $p4);
    call {:si_unique_call 1263} {:cexpr "n"} boogie_si_record_i32($i21);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i21, $i18;
    goto $bb18_dummy;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb9;

  $bb9:
    call $i14, $p15, $i16, $i17, $i13 := isert_cq_work_loop_$bb9($p4, $i14, $p15, $i16, $i17, $i13, $i9);
    goto $bb9_last;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p4, $mul.ref($i14, 64));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} isert_handle_wc($p15);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i13, 1);
    call {:si_unique_call 1259} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $i9);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb11_dummy;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6677;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6671;
}



const isert_cq_callback: ref;

axiom isert_cq_callback == $sub.ref(0, 535320);

procedure isert_cq_callback($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_cq_callback($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_163: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p3 := $M.27;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1128)), $mul.ref(1048, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} vslice_dummy_var_163 := queue_work($p3, $p4);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    return;
}



const isert_cq_event_callback: ref;

axiom isert_cq_event_callback == $sub.ref(0, 536352);

procedure isert_cq_event_callback($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation isert_cq_event_callback($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1266} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} vslice_dummy_var_164 := printk.ref.ref.i32(.str.81, .str.82, $i9);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ib_create_cq: ref;

axiom ib_create_cq == $sub.ref(0, 537384);

procedure ib_create_cq($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);



const ib_req_notify_cq: ref;

axiom ib_req_notify_cq == $sub.ref(0, 538416);

procedure ib_req_notify_cq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ib_req_notify_cq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "ib_req_notify_cq:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2496)), $mul.ref(688, 1));
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    call {:si_unique_call 1269} $i6 := devirtbounce.17($p5, $p0, $i1);
    call {:si_unique_call 1270} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const isert_handle_wc: ref;

axiom isert_handle_wc == $sub.ref(0, 539448);

procedure isert_handle_wc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.33, $M.38, $M.39, assertsPassed;



implementation isert_handle_wc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 1272} {:cexpr "tmp___2"} boogie_si_record_i64($i11);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 5);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i37 := $M.1;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 2);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1278} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, $sub.i64(0, 1));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} isert_cq_comp_err($p5, $p0);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p45 := ib_wc_status_msg($i44);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} vslice_dummy_var_166 := printk.ref.ref.ref.i32.i64(.str.132, .str.131, $p45, $i47, $i49);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p29 := ib_wc_status_msg($i28);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} vslice_dummy_var_165 := printk.ref.ref.ref.i32.i64.i32(.str.130, .str.131, $p29, $i31, $i33, $i35);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 128);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} isert_snd_completion($p23, $p5);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} isert_rcv_completion($p18, $p5, $i20);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ib_poll_cq: ref;

axiom ib_poll_cq == $sub.ref(0, 540480);

procedure ib_poll_cq($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_poll_cq($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} {:cexpr "ib_poll_cq:arg:num_entries"} boogie_si_record_i32($i1);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2496)), $mul.ref(672, 1));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1283} $i7 := devirtbounce.18($p6, $p0, $i1, $p2);
    call {:si_unique_call 1284} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const isert_rcv_completion: ref;

axiom isert_rcv_completion == $sub.ref(0, 541512);

procedure isert_rcv_completion($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.33, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.38, $M.39, assertsPassed;



implementation isert_rcv_completion($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i22: i64;
  var $i32: i64;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} {:cexpr "isert_rcv_completion:arg:xfer_len"} boogie_si_record_i32($i2);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(32, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    call {:si_unique_call 1289} {:cexpr "rx_dma"} boogie_si_record_i64($i24);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 2);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1291} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64(8268);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} ib_dma_sync_single_for_cpu($p6, $i22, $i32, 2);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i34 := $M.1;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 2);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 1295} {:cexpr "tmp___1"} boogie_si_record_i64($i38);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(32, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p0);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i52, $i54);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} isert_rx_do_work($p0, $p1);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64(8268);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} ib_dma_sync_single_for_device($p6, $i22, $i75, 2);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i77, 1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i80 := $M.1;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i81 := $sgt.i32($i80, 2);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 1305} {:cexpr "tmp___2"} boogie_si_record_i64($i84);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(32, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p0);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i91, $i93);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    call {:si_unique_call 1307} {:cexpr "outstanding"} boogie_si_record_i32($i96);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 32);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i98 := $sle.i32($i97, 128);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i98 == 1;
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(128, $i96);
    call {:si_unique_call 1308} {:cexpr "_min1"} boogie_si_record_i32($i99);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 32);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i100 == 1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i101 := 32;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i102 := isert_post_recv($p1, $i101);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 1310} {:cexpr "err"} boogie_si_record_i32($i102);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i103 == 1;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vslice_dummy_var_171 := printk.ref.ref.i32.i32(.str.138, .str.134, $i101, $i102);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i100 == 1;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i101 := $i99;
    goto $bb36;

  $bb28:
    assume $i94 == 1;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i85 == 1;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vslice_dummy_var_170 := printk.ref.ref.i32(.str.137, .str.134, $i87);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i2, 76);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(56, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1592, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} mutex_lock_nested($p72, 0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1232, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} complete_($p73);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1592, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} mutex_unlock($p74);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume $i61 == 1;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2480)), $mul.ref(2360, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i67 == 1;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb19;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} isert_rx_login_req($p1);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb10:
    assume $i39 == 1;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(32, 1)), $mul.ref(1, 1));
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i2, 76);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vslice_dummy_var_169 := printk.ref.ref.i32.i32.i32.i32(.str.136, .str.134, $i42, $i44, $i47, $i48);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} vslice_dummy_var_168 := printk.ref.ref.i64.i32(.str.135, .str.134, $i24, 8268);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(48, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    call {:si_unique_call 1286} {:cexpr "rx_dma"} boogie_si_record_i64($i14);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i15 := $M.1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 2);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1288} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $i14;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} vslice_dummy_var_167 := printk.ref.ref.i64.i32(.str.133, .str.134, $i14, 8268);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const isert_snd_completion: ref;

axiom isert_snd_completion == $sub.ref(0, 542544);

procedure isert_snd_completion($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_snd_completion($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 2);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1314} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p20 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_173 := printk.ref.ref.i32(.str.166, .str.165, $i27);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} dump_stack();
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} isert_completion_rdma_read($p0, $p7);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} isert_completion_rdma_write($p0, $p7);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} isert_response_completion($p0, $p7, $p1, $p5);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_172 := printk.ref.ref.ref.i32(.str.164, .str.165, $p7, $i18);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} isert_unmap_tx_desc($p0, $p5);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ib_wc_status_msg: ref;

axiom ib_wc_status_msg == $sub.ref(0, 543576);

procedure ib_wc_status_msg($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_wc_status_msg($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} {:cexpr "ib_wc_status_msg:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $p1 := external_alloc();
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const isert_cq_comp_err: ref;

axiom isert_cq_comp_err == $sub.ref(0, 544608);

procedure isert_cq_comp_err($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_cq_comp_err($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $sub.i64(0, 2));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i16 := is_isert_tx_desc($p0, $p15);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 1326} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(4, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} iscsit_cause_connection_reinstatement($p38, 0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} isert_completion_put($p25, $p27, $p22, 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} isert_unmap_tx_desc($p25, $p22);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 1);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1324} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1848, 1));
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} complete_($p12);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_174 := printk.ref.ref.ref(.str.173, .str.174, $p0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const is_isert_tx_desc: ref;

axiom is_isert_tx_desc == $sub.ref(0, 545640);

procedure is_isert_tx_desc($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_isert_tx_desc($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i7 := $uge.i64($i5, $i6);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64(1572864);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p4, $mul.ref($i8, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i64($i10, $i11);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;
}



const isert_unmap_tx_desc: ref;

axiom isert_unmap_tx_desc == $sub.ref(0, 546672);

procedure isert_unmap_tx_desc($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_unmap_tx_desc($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1333} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} ib_dma_unmap_single($p1, $i13, 76, 1);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_175 := printk.ref.ref(.str.126, .str.127);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const isert_completion_put: ref;

axiom isert_completion_put == $sub.ref(0, 547704);

procedure isert_completion_put($p0: ref, $p1: ref, $p2: ref, $i3: i1);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_completion_put($p0: ref, $p1: ref, $p2: ref, $i3: i1)
{
  var $i4: i8;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i1;
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1336} {:cexpr "isert_completion_put:arg:comp_err"} boogie_si_record_i1($i3);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} isert_unmap_tx_desc($p0, $p2);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i4);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} isert_put_cmd($p1, $i21);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 2);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1338} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(32, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} ib_dma_unmap_single($p2, $i16, $i19, 1);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(24, 1));
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 0);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} vslice_dummy_var_176 := printk.ref.ref(.str.124, .str.125);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const iscsit_cause_connection_reinstatement: ref;

axiom iscsit_cause_connection_reinstatement == $sub.ref(0, 548736);

procedure iscsit_cause_connection_reinstatement($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation iscsit_cause_connection_reinstatement($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} {:cexpr "iscsit_cause_connection_reinstatement:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    return;
}



const isert_put_cmd: ref;

axiom isert_put_cmd == $sub.ref(0, 549768);

procedure isert_put_cmd($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_put_cmd($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $p86: ref;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1344} {:cexpr "isert_put_cmd:arg:comp_err"} boogie_si_record_i1($i1);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(56, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(48, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 2);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1346} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(18, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 63);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, 63);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} iscsit_release_cmd($p4);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(1, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 64);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} spin_lock_bh($p65);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i67 := list_empty($p66);
    call {:si_unique_call 1365} {:cexpr "tmp___2"} boogie_si_record_i32($i67);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} spin_unlock_bh($p70);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(264, 1));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb46:
    assume $i75 == 1;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i76 := $M.1;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, 2);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1369} {:cexpr "tmp___3"} boogie_si_record_i64($i80);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_182 := transport_generic_free_cmd($p86, 0);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb48:
    assume $i81 == 1;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(18, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_181 := printk.ref.ref.i32(.str.129, .str.128, $i84);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb43:
    assume $i68 == 1;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} list_del_init($p69);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb9:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;

  $bb7:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p8, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} spin_lock_bh($p49);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i51 := list_empty($p50);
    call {:si_unique_call 1350} {:cexpr "tmp___1"} boogie_si_record_i32($i51);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} spin_unlock_bh($p54);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_180 := transport_generic_free_cmd($p55, 0);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i52 == 1;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} list_del_init($p53);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb5:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} spin_lock_bh($p29);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i31 := list_empty($p30);
    call {:si_unique_call 1353} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 2480)), $mul.ref(1824, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} spin_unlock_bh($p34);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(160, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 1358} devirtbounce.1($p46, $p0, $p6);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_179 := transport_generic_free_cmd($p47, 0);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} iscsit_stop_dataout_timer($p4);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i2);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i38 == 1;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(32, 1));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 3);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb31;

  $bb32:
    assume $i42 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_178 := target_put_sess_cmd($p43);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(896, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} list_del_init($p33);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb22;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_177 := printk.ref.ref.ref(.str.61, .str.128, $p0);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const target_put_sess_cmd: ref;

axiom target_put_sess_cmd == $sub.ref(0, 550800);

procedure target_put_sess_cmd($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation target_put_sess_cmd($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1373} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1374} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const transport_generic_free_cmd: ref;

axiom transport_generic_free_cmd == $sub.ref(0, 551832);

procedure transport_generic_free_cmd($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation transport_generic_free_cmd($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1375} {:cexpr "transport_generic_free_cmd:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1376} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const iscsit_release_cmd: ref;

axiom iscsit_release_cmd == $sub.ref(0, 552864);

procedure iscsit_release_cmd($p0: ref);
  free requires assertsPassed;



implementation iscsit_release_cmd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    return;
}



const isert_response_completion: ref;

axiom isert_response_completion == $sub.ref(0, 553896);

procedure isert_response_completion($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $CurrAddr, $M.3;



implementation isert_response_completion($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var vslice_dummy_var_183: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(56, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 34);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 15);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 19);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 36);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 31);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} isert_completion_put($p0, $p1, $p3, 0);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} isert_unmap_tx_desc($p0, $p3);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(592, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} __init_work($p20, 0);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, 137438953408);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p5);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 1382} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p24, $p25, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(592, 1)), $mul.ref(32, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} lockdep_init_map($p27, .str.167, $p4, 0);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(592, 1)), $mul.ref(8, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} INIT_LIST_HEAD($p29);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(592, 1)), $mul.ref(24, 1));
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, isert_do_control_comp);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p32 := $M.27;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(592, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} vslice_dummy_var_183 := queue_work($p32, $p33);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const isert_completion_rdma_write: ref;

axiom isert_completion_rdma_write == $sub.ref(0, 554928);

procedure isert_completion_rdma_write($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_completion_rdma_write($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(56, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(48, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 1389} devirtbounce.1($p40, $p1, $p7);
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(56, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i38, 0);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} vslice_dummy_var_185 := isert_put_response($p47, $p4);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i42 == 1;
    $p43 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(812, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} vslice_dummy_var_184 := transport_send_check_condition_and_sense($p5, $i44, 0);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb4:
    assume $i20 == 1;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i27 := isert_check_pi_status($p5, $p26);
    call {:si_unique_call 1388} {:cexpr "ret"} boogie_si_record_i32($i27);
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 254);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i34);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i38 := $i27;
    goto $bb6;
}



const isert_completion_rdma_read: ref;

axiom isert_completion_rdma_read == $sub.ref(0, 555960);

procedure isert_completion_rdma_read($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $CurrAddr;



implementation isert_completion_rdma_read($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(56, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(48, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} iscsit_stop_dataout_timer($p4);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 1395} devirtbounce.1($p40, $p1, $p7);
    $p42 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(56, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i46 := $M.1;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, 2);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 1397} {:cexpr "tmp"} boogie_si_record_i64($i50);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(368, 1));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} spin_lock_bh($p53);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(28, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 1);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(28, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 6);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(368, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} spin_unlock_bh($p59);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i38, 0);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i60 == 1);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} target_execute_cmd($p5);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i60 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} vslice_dummy_var_187 := target_put_sess_cmd($p5);
    $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(812, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} vslice_dummy_var_188 := transport_send_check_condition_and_sense($p5, $i63, 0);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i51 == 1;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_186 := printk.ref.ref.ref(.str.171, .str.172, $p1);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb4:
    assume $i20 == 1;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i27 := isert_check_pi_status($p5, $p26);
    call {:si_unique_call 1393} {:cexpr "ret"} boogie_si_record_i32($i27);
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 254);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(280, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i34);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i38 := $i27;
    goto $bb6;
}



const dump_stack: ref;

axiom dump_stack == $sub.ref(0, 556992);

procedure dump_stack();
  free requires assertsPassed;



implementation dump_stack()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    return;
}



const isert_check_pi_status: ref;

axiom isert_check_pi_status == $sub.ref(0, 558024);

procedure isert_check_pi_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation isert_check_pi_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $i48: i32;
  var $i6: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i3 := ib_check_mr_status($p1, 1, $p2);
    call {:si_unique_call 1406} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.28, $p7);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i3;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i6 := $i48;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(112, 1));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 5048)), $mul.ref(1872, 1)), $mul.ref(76, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 8);
    call {:si_unique_call 1408} {:cexpr "block_size___0"} boogie_si_record_i32($i16);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.29, $p18);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.30, $p28);
    call {:si_unique_call 1409} {:cexpr "sec_offset_err"} boogie_si_record_i64($i29);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i16);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i31 := $udiv.i64($i29, $i30);
    call {:si_unique_call 1410} {:cexpr "sec_offset_err"} boogie_si_record_i64($i31);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(336, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, $i31);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(816, 1));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.29, $p37);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(816, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.31, $p42);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.32, $p45);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} vslice_dummy_var_190 := printk.ref.ref.i32.i64.i32.i32(.str.170, .str.169, $i38, $i40, $i43, $i46);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb19;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(812, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 22);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(812, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 23);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb14;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(812, 1));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 21);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_189 := printk.ref.ref.i32(.str.168, .str.169, $i3);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb3;
}



const transport_send_check_condition_and_sense: ref;

axiom transport_send_check_condition_and_sense == $sub.ref(0, 559056);

procedure transport_send_check_condition_and_sense($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation transport_send_check_condition_and_sense($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1412} {:cexpr "transport_send_check_condition_and_sense:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1413} {:cexpr "transport_send_check_condition_and_sense:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1414} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1415} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const target_execute_cmd: ref;

axiom target_execute_cmd == $sub.ref(0, 560088);

procedure target_execute_cmd($p0: ref);
  free requires assertsPassed;



implementation target_execute_cmd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    return;
}



const ib_check_mr_status: ref;

axiom ib_check_mr_status == $sub.ref(0, 561120);

procedure ib_check_mr_status($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_check_mr_status($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1416} {:cexpr "ib_check_mr_status:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1417} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1418} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const isert_do_control_comp: ref;

axiom isert_do_control_comp == $sub.ref(0, 562152);

procedure isert_do_control_comp($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation isert_do_control_comp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 584), 672));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 584), 672)), $mul.ref(48, 1));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 584), 672)), $mul.ref(56, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 2);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1420} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_194 := printk.ref.ref.i32(.str.123, .str.122, $i38);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} dump_stack();
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 31);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 584), 672)), $mul.ref(64, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} isert_completion_put($p33, $p2, $p8, 0);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 1880)), $mul.ref(872, 1));
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} vslice_dummy_var_192 := iscsit_tmr_post_handler($p10, $p30);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i21, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i21, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb18;

  $bb15:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i21, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb12;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 1880)), $mul.ref(872, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} vslice_dummy_var_193 := iscsit_logout_post_handler($p10, $p35);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} vslice_dummy_var_191 := printk.ref.ref.ref.i32(.str.121, .str.122, $p2, $i18);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const iscsit_tmr_post_handler: ref;

axiom iscsit_tmr_post_handler == $sub.ref(0, 563184);

procedure iscsit_tmr_post_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_tmr_post_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1427} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1428} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const iscsit_logout_post_handler: ref;

axiom iscsit_logout_post_handler == $sub.ref(0, 564216);

procedure iscsit_logout_post_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_logout_post_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1429} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1430} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const isert_rx_do_work: ref;

axiom isert_rx_do_work == $sub.ref(0, 565248);

procedure isert_rx_do_work($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.33, $M.3, $CurrAddr, assertsPassed;



implementation isert_rx_do_work($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i32;
  var $i60: i32;
  var $i72: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 240);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i62 := $M.1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i62, 0);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 1452} {:cexpr "tmp___6"} boogie_si_record_i64($i66);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i57, $i58, $i59, $i60 := 0, 0, 0, 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i72 := isert_rx_opcode($p1, $p0, $i59, $i57, $i60, $i58);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 1450} {:cexpr "rc"} boogie_si_record_i32($i72);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i67 == 1;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_199 := printk.ref.ref.i32(.str.146, .str.142, $i70);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_195 := printk.ref.ref(.str.145, .str.142);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i57, $i58, $i59, $i60 := 0, 0, 0, 0;
    goto $bb24;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb7:
    assume $i9 == 1;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i28, $i29 := 0, 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 8);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i48, $i49 := 0, 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i50 := $M.1;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i51 := $sgt.i32($i50, 2);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1447} {:cexpr "tmp___5"} boogie_si_record_i64($i54);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i57, $i58, $i59, $i60 := $i28, $i48, $i29, $i49;
    goto $bb24;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_198 := printk.ref.ref(.str.144, .str.142);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i37 := __fswab32($i36);
    call {:si_unique_call 1440} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i40 := __fswab64($i39);
    call {:si_unique_call 1442} {:cexpr "tmp___3"} boogie_si_record_i64($i40);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i41 := $M.1;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 2);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1444} {:cexpr "tmp___4"} boogie_si_record_i64($i45);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i40, $i37;
    goto $bb20;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_197 := printk.ref.ref.i32.i64(.str.143, .str.142, $i37, $i40);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i14 == 1;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i17 := __fswab32($i16);
    call {:si_unique_call 1433} {:cexpr "tmp"} boogie_si_record_i32($i17);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12296)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i20 := __fswab64($i19);
    call {:si_unique_call 1435} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i21 := $M.1;
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 2);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1437} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i20, $i17;
    goto $bb14;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_196 := printk.ref.ref.i32.i64(.str.141, .str.142, $i17, $i20);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const __fswab64: ref;

axiom __fswab64 == $sub.ref(0, 566280);

procedure __fswab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __fswab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} {:cexpr "__fswab64:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i1 := __arch_swab64($i0);
    call {:si_unique_call 1456} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const isert_rx_opcode: ref;

axiom isert_rx_opcode == $sub.ref(0, 567312);

procedure isert_rx_opcode($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i32, $i5: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.33, $M.3, $CurrAddr, assertsPassed;



implementation isert_rx_opcode($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i32, $i5: i64) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p80: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i43: i32;
  var $i30: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} {:cexpr "isert_rx_opcode:arg:read_stag"} boogie_si_record_i32($i2);
    call {:si_unique_call 1458} {:cexpr "isert_rx_opcode:arg:read_va"} boogie_si_record_i64($i3);
    call {:si_unique_call 1459} {:cexpr "isert_rx_opcode:arg:write_stag"} boogie_si_record_i32($i4);
    call {:si_unique_call 1460} {:cexpr "isert_rx_opcode:arg:write_va"} boogie_si_record_i64($i5);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12296)), $mul.ref(32, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12296)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 63);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 1461} {:cexpr "opcode"} boogie_si_record_i8($i13);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 2480)), $mul.ref(2424, 1));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1280)), $mul.ref(1256, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1244)), $mul.ref(1241, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i13);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i31, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i31, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i31, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i13);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_201 := printk.ref.ref.i32(.str.149, .str.148, $i88);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} dump_stack();
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i30 := $i43;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $p66 := isert_allocate_cmd($p8);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p6);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $i70 := iscsit_handle_logout_cmd($p8, $p66, $p69);
    call {:si_unique_call 1480} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i43 := $i70;
    goto $bb31;

  $bb39:
    assume $i68 == 1;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb31;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p6);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i60 := isert_handle_iscsi_dataout($p0, $p1, $p59);
    call {:si_unique_call 1466} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i43 := $i60;
    goto $bb31;

  $bb14:
    assume $i33 == 1;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12296)), $mul.ref(32, 1)), $mul.ref(20, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $i73 := __fswab32($i72);
    call {:si_unique_call 1464} {:cexpr "tmp___1"} boogie_si_record_i32($i73);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, $sub.i32(0, 1));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i74 == 1);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p81 := isert_allocate_cmd($p8);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p80 := $p81;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p84 := iscsit_priv_cmd($p80);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p6);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i87 := isert_handle_text_cmd($p0, $p85, $p80, $p1, $p86);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 1485} {:cexpr "ret"} boogie_si_record_i32($i87);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i43 := $i87;
    goto $bb31;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i83 == 1;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb31;

  $bb42:
    assume $i74 == 1;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12296)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p77 := iscsit_find_cmd_from_itt($p8, $i76);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p80 := $p77;
    goto $bb47;

  $bb44:
    assume $i79 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb31;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i31, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i31, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb20;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p61 := isert_allocate_cmd($p8);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p6);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i65 := iscsit_handle_task_mgt_cmd($p8, $p61, $p64);
    call {:si_unique_call 1478} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i43 := $i65;
    goto $bb31;

  $bb36:
    assume $i63 == 1;
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb31;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $p40 := isert_allocate_cmd($p8);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p44 := iscsit_priv_cmd($p40);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 672)), $mul.ref(0, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i2);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i3);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref(0, 672)), $mul.ref(4, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i4);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p45, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i5);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p6);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i51 := isert_handle_scsi_cmd($p0, $p45, $p40, $p1, $p50);
    call {:si_unique_call 1473} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i43 := $i51;
    goto $bb31;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb31;

  $bb21:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i31, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb27:
    assume $i39 == 1;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p52 := isert_allocate_cmd($p8);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p55 := iscsit_priv_cmd($p52);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p6);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i58 := isert_handle_nop_out($p0, $p56, $p52, $p1, $p57);
    call {:si_unique_call 1476} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i43 := $i58;
    goto $bb31;

  $bb33:
    assume $i54 == 1;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb31;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i13);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i13);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 6);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i13);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} vslice_dummy_var_200 := printk.ref.ref.i32(.str.147, .str.148, $i28);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb5;
}



const isert_allocate_cmd: ref;

axiom isert_allocate_cmd == $sub.ref(0, 568344);

procedure isert_allocate_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_allocate_cmd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p8: ref;
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2480)), $mul.ref(2392, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p4 := iscsit_allocate_cmd($p0, 1);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p9 := iscsit_priv_cmd($p4);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 672)), $mul.ref(48, 1));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p2);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 672)), $mul.ref(56, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p4);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_202 := printk.ref.ref(.str.150, .str.151);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const isert_handle_scsi_cmd: ref;

axiom isert_handle_scsi_cmd == $sub.ref(0, 569376);

procedure isert_handle_scsi_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation isert_handle_scsi_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i22: i8;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $p71: ref;
  var $i10: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i64;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i8 := iscsit_setup_scsi_cmd($p6, $p2, $p4);
    call {:si_unique_call 1492} {:cexpr "rc"} boogie_si_record_i32($i8);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(17, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 1493} {:cexpr "imm_data"} boogie_si_record_i32($i13);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(132, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1494} {:cexpr "imm_data_len"} boogie_si_record_i32($i15);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(23, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 1495} {:cexpr "unsol_data"} boogie_si_record_i32($i18);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i19 := iscsit_process_scsi_cmd($p6, $p2, $p7);
    call {:si_unique_call 1497} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i19, 0);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i13, 0);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(600, 1));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i15);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 4095);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i29 := $udiv.i64($i28, 4096);
    call {:si_unique_call 1500} {:cexpr "_max2"} boogie_si_record_i64($i29);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64(1, $i29);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 1501} {:cexpr "sg_nents___0"} boogie_si_record_i32($i32);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 2);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 1503} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 12296)), $mul.ref(80, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i15);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} vslice_dummy_var_204 := sg_copy_from_buffer($p26, $i32, $p43, $i44);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, $i15);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(48, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, $i54);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i65 := iscsit_sequence_cmd($p6, $p2, $p4, $i64);
    call {:si_unique_call 1499} {:cexpr "rc"} boogie_si_record_i32($i65);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i22);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb32:
    assume $i69 == 1;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i13, 0);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb34;

  $bb35:
    assume $i70 == 1;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vslice_dummy_var_205 := target_put_sess_cmd($p71);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i22);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i67 == 1);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i18, 0);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb26;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} iscsit_set_unsoliticed_dataout($p2);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb26;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(368, 1));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} spin_lock_bh($p56);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(28, 1));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 1);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(28, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(12, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 6);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(368, 1));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} spin_unlock_bh($p62);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 12296)), $mul.ref(80, 1));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_203 := printk.ref.ref.ref.i32.ref.i32(.str.152, .str.153, $p26, $i32, $p40, $i15);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb17;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb9;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const isert_handle_nop_out: ref;

axiom isert_handle_nop_out == $sub.ref(0, 570408);

procedure isert_handle_nop_out($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation isert_handle_nop_out($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i8 := iscsit_setup_nop_out($p6, $p2, $p7);
    call {:si_unique_call 1511} {:cexpr "rc"} boogie_si_record_i32($i8);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i11 := iscsit_process_nop_out($p6, $p2, $p7);
    call {:si_unique_call 1513} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const isert_handle_iscsi_dataout: ref;

axiom isert_handle_iscsi_dataout == $sub.ref(0, 571440);

procedure isert_handle_iscsi_dataout($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $CurrAddr;



implementation isert_handle_iscsi_dataout($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i25: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p3, $0.ref);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 8);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i11, $i16);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i17, $i21);
    call {:si_unique_call 1515} {:cexpr "unsol_data_len"} boogie_si_record_i32($i22);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i23 := iscsit_check_dataout_hdr($p5, $p2, $p3);
    call {:si_unique_call 1517} {:cexpr "rc"} boogie_si_record_i32($i23);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.33, $p3);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.33, $p3);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1880)), $mul.ref(23, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.34, $p30);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $M.1;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 2);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1521} {:cexpr "tmp"} boogie_si_record_i64($i39);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.33, $p3);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.35, $p50);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i52 := $udiv.i32($i51, 4096);
    call {:si_unique_call 1523} {:cexpr "sg_off"} boogie_si_record_i32($i52);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.33, $p3);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(600, 1));
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.37, $p55);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i52);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p56, $mul.ref($i57, 40));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i22);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 4095);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i61 := $udiv.i64($i60, 4096);
    call {:si_unique_call 1524} {:cexpr "_max2"} boogie_si_record_i64($i61);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i64(1, $i61);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i62 == 1);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i32($i63);
    call {:si_unique_call 1525} {:cexpr "sg_nents___0"} boogie_si_record_i32($i64);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.33, $p3);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.35, $p66);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 4095);
    call {:si_unique_call 1526} {:cexpr "page_off"} boogie_si_record_i32($i68);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i71 := $M.1;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, 2);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 1530} {:cexpr "tmp___0"} boogie_si_record_i64($i75);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 12296)), $mul.ref(80, 1));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i22);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_210 := sg_copy_from_buffer($p58, $i64, $p81, $i82);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.33, $p3);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i85 := iscsit_check_dataout_payload($p84, $p6, 0);
    call {:si_unique_call 1534} {:cexpr "rc"} boogie_si_record_i32($i85);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb23:
    assume $i86 == 1;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i25 := $i85;
    goto $bb3;

  $bb20:
    assume $i76 == 1;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 12296)), $mul.ref(80, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_209 := printk.ref.ref.ref.i32.i32.ref.i32(.str.158, .str.155, $p58, $i52, $i64, $p78, $i22);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i69 == 1;
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_208 := printk.ref.ref(.str.157, .str.155);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} dump_stack();
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 1);
    goto $bb3;

  $bb14:
    assume $i62 == 1;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i63 := 1;
    goto $bb16;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.33, $p3);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1880)), $mul.ref(128, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.35, $p42);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.33, $p3);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(48, 1));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.36, $p46);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} vslice_dummy_var_207 := printk.ref.ref.i32.i32.i32(.str.156, .str.155, $i22, $i43, $i47);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} vslice_dummy_var_206 := printk.ref.ref(.str.154, .str.155);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} dump_stack();
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 1);
    goto $bb3;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb3;
}



const iscsit_handle_task_mgt_cmd: ref;

axiom iscsit_handle_task_mgt_cmd == $sub.ref(0, 572472);

procedure iscsit_handle_task_mgt_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_handle_task_mgt_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_handle_logout_cmd: ref;

axiom iscsit_handle_logout_cmd == $sub.ref(0, 573504);

procedure iscsit_handle_logout_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_handle_logout_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1537} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_find_cmd_from_itt: ref;

axiom iscsit_find_cmd_from_itt == $sub.ref(0, 574536);

procedure iscsit_find_cmd_from_itt($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation iscsit_find_cmd_from_itt($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} {:cexpr "iscsit_find_cmd_from_itt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p2 := external_alloc();
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const isert_handle_text_cmd: ref;

axiom isert_handle_text_cmd == $sub.ref(0, 575568);

procedure isert_handle_text_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation isert_handle_text_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i25: i32;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1112, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(1, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 8);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i11, $i16);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(5, 1)), $mul.ref(2, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i17, $i21);
    call {:si_unique_call 1541} {:cexpr "payload_length"} boogie_si_record_i32($i22);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $i23 := iscsit_setup_text_cmd($p6, $p2, $p4);
    call {:si_unique_call 1543} {:cexpr "rc"} boogie_si_record_i32($i23);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i22, 0);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $p32 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(152, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 1880)), $mul.ref(152, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 12296)), $mul.ref(80, 1));
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i22);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 1546} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p35, $p37, $i38, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i39 := iscsit_process_text_cmd($p6, $p2, $p4);
    call {:si_unique_call 1548} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i25 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i22);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p28 := kzalloc($i27, 208);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $p28;
    goto $bb10;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_211 := printk.ref.ref.i32(.str.159, .str.160, $i22);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb3;
}



const iscsit_setup_text_cmd: ref;

axiom iscsit_setup_text_cmd == $sub.ref(0, 576600);

procedure iscsit_setup_text_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_setup_text_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_process_text_cmd: ref;

axiom iscsit_process_text_cmd == $sub.ref(0, 577632);

procedure iscsit_process_text_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_process_text_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1551} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1552} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_check_dataout_hdr: ref;

axiom iscsit_check_dataout_hdr == $sub.ref(0, 578664);

procedure iscsit_check_dataout_hdr($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_check_dataout_hdr($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1554} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sg_copy_from_buffer: ref;

axiom sg_copy_from_buffer == $sub.ref(0, 579696);

procedure sg_copy_from_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation sg_copy_from_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1555} {:cexpr "sg_copy_from_buffer:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1556} {:cexpr "sg_copy_from_buffer:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1557} $i4 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1558} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const iscsit_check_dataout_payload: ref;

axiom iscsit_check_dataout_payload == $sub.ref(0, 580728);

procedure iscsit_check_dataout_payload($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_check_dataout_payload($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} {:cexpr "iscsit_check_dataout_payload:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1560} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1561} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_setup_nop_out: ref;

axiom iscsit_setup_nop_out == $sub.ref(0, 581760);

procedure iscsit_setup_nop_out($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_setup_nop_out($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1562} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_process_nop_out: ref;

axiom iscsit_process_nop_out == $sub.ref(0, 582792);

procedure iscsit_process_nop_out($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_process_nop_out($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1564} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_setup_scsi_cmd: ref;

axiom iscsit_setup_scsi_cmd == $sub.ref(0, 583824);

procedure iscsit_setup_scsi_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_setup_scsi_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1566} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_process_scsi_cmd: ref;

axiom iscsit_process_scsi_cmd == $sub.ref(0, 584856);

procedure iscsit_process_scsi_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_process_scsi_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1568} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1569} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const iscsit_sequence_cmd: ref;

axiom iscsit_sequence_cmd == $sub.ref(0, 585888);

procedure iscsit_sequence_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_sequence_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1570} {:cexpr "iscsit_sequence_cmd:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const iscsit_set_unsoliticed_dataout: ref;

axiom iscsit_set_unsoliticed_dataout == $sub.ref(0, 586920);

procedure iscsit_set_unsoliticed_dataout($p0: ref);
  free requires assertsPassed;



implementation iscsit_set_unsoliticed_dataout($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    return;
}



const iscsit_allocate_cmd: ref;

axiom iscsit_allocate_cmd == $sub.ref(0, 587952);

procedure iscsit_allocate_cmd($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation iscsit_allocate_cmd($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} {:cexpr "iscsit_allocate_cmd:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $p2 := external_alloc();
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __arch_swab64: ref;

axiom __arch_swab64 == $sub.ref(0, 588984);

procedure __arch_swab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __arch_swab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} {:cexpr "__arch_swab64:arg:val"} boogie_si_record_i64($i0);
    call {:si_unique_call 1576} $i1 := devirtbounce.19(0, $i0);
    call {:si_unique_call 1577} {:cexpr "val"} boogie_si_record_i64($i1);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 590016);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 1580} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 591048);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1582} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const isert_unmap_data_buf: ref;

axiom isert_unmap_data_buf == $sub.ref(0, 592080);

procedure isert_unmap_data_buf($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_unmap_data_buf($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ib_dma_unmap_sg($p5, $p7, $i9, $i11);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 1585} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p12, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    return;
}



const ib_dma_unmap_sg: ref;

axiom ib_dma_unmap_sg == $sub.ref(0, 593112);

procedure ib_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} {:cexpr "ib_dma_unmap_sg:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1587} {:cexpr "ib_dma_unmap_sg:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} dma_unmap_sg_attrs($p13, $p1, $i2, $i3, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1588} devirtbounce.20($p11, $p0, $p1, $i2, $i3);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_unmap_sg_attrs: ref;

axiom dma_unmap_sg_attrs == $sub.ref(0, 594144);

procedure dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} {:cexpr "dma_unmap_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1591} {:cexpr "dma_unmap_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p5 := get_dma_ops($p0);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1594} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1596} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} debug_dma_unmap_sg($p0, $p1, $i2, $i3);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1599} devirtbounce.21($p17, $p0, $p1, $i2, $i3, $p4);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1597} devirtbounce.4(0, .str.24, 70, 12);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_sg_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_unmap_sg: ref;

axiom debug_dma_unmap_sg == $sub.ref(0, 595176);

procedure debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} {:cexpr "debug_dma_unmap_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1601} {:cexpr "debug_dma_unmap_sg:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    return;
}



const isert_map_data_buf: ref;

axiom isert_map_data_buf == $sub.ref(0, 596208);

procedure isert_map_data_buf($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_map_data_buf($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i54: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} {:cexpr "isert_map_data_buf:arg:nents"} boogie_si_record_i32($i3);
    call {:si_unique_call 1603} {:cexpr "isert_map_data_buf:arg:length"} boogie_si_record_i32($i4);
    call {:si_unique_call 1604} {:cexpr "isert_map_data_buf:arg:offset"} boogie_si_record_i32($i5);
    call {:si_unique_call 1605} {:cexpr "isert_map_data_buf:arg:op"} boogie_si_record_i32($i6);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1568, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 2);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 1 else 2);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i4, $i5);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i5);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i20 := $udiv.i32($i19, 4096);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p2, $mul.ref($i24, 40));
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p25);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i3, $i28);
    call {:si_unique_call 1606} {:cexpr "__min1"} boogie_si_record_i32($i29);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i30 := $ult.i32($i29, 256);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i31 := 256;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    call {:si_unique_call 1607} {:cexpr "__min1___0"} boogie_si_record_i32($i34);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i35 := $ult.i32($i34, 1048576);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i36 := 1048576;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i44 := ib_dma_map_sg($p11, $p39, $i41, $i43);
    call {:si_unique_call 1609} {:cexpr "tmp"} boogie_si_record_i32($i44);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1611} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i55 := $M.1;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 2);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 1614} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} vslice_dummy_var_213 := printk.ref.ref.ref.i32.ref.i32.i32(.str.39, .str.38, $p1, $i62, $p64, $i66, $i68);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i52 == 1;
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_212 := printk.ref.ref.ref(.str.37, .str.38, $p2);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb6;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb3;
}



const isert_build_rdma_wr: ref;

axiom isert_build_rdma_wr == $sub.ref(0, 597240);

procedure isert_build_rdma_wr($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_build_rdma_wr($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i90: i32;
  var $p91: ref;
  var $i92: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i93: i32;
  var $i32: i32;
  var $i81: i32;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p107: ref;
  var $i108: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} {:cexpr "isert_build_rdma_wr:arg:data_left"} boogie_si_record_i32($i4);
    call {:si_unique_call 1617} {:cexpr "isert_build_rdma_wr:arg:offset"} boogie_si_record_i32($i5);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(56, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i32($i5, 4096);
    call {:si_unique_call 1618} {:cexpr "sg_off"} boogie_si_record_i32($i12);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(600, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i12);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 40));
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(616, 1));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, $i12);
    call {:si_unique_call 1619} {:cexpr "_min1"} boogie_si_record_i32($i21);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(20, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 1620} {:cexpr "_min2"} boogie_si_record_i32($i23);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32($i21, $i23);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i5, 4095);
    call {:si_unique_call 1621} {:cexpr "page_off"} boogie_si_record_i32($i26);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p2);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(64, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32(0, $i25);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i32 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i81 := $i32;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i81, 1);
    call {:si_unique_call 1634} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i96 := $M.1;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i97 := $sgt.i32($i96, 2);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i97);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 1636} {:cexpr "tmp___4"} boogie_si_record_i64($i100);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $r := $i108;
    return;

  $bb28:
    assume $i101 == 1;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} vslice_dummy_var_217 := printk.ref.ref.ref.i32(.str.72, .str.69, $p103, $i105);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i33, $i34, $p35, $p36, $i37 := 0, $i26, $p2, $p17, $i4;
    goto $bb7;

  $bb7:
    call $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $p46, $i47, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $p71, $i72, $p73, $i74, $p76, $i77, $i78, $i79, $i80, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $p91, $i92, $i33, $i34, $p35, $p36, $i37, $i93, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216 := isert_build_rdma_wr_loop_$bb7($p9, $p11, $i25, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $p46, $i47, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $p71, $i72, $p73, $i74, $p76, $i77, $i78, $i79, $i80, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $p91, $i92, $i33, $i34, $p35, $p36, $i37, $i93, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216);
    goto $bb7_last;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i38 := $M.1;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, 2);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 1623} {:cexpr "tmp"} boogie_si_record_i64($i42);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $i49 := ib_sg_dma_address($p11, $p36);
    call {:si_unique_call 1626} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i34);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i49, $i50);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i51);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $i53 := ib_sg_dma_len($p11, $p36);
    call {:si_unique_call 1628} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i53, $i34);
    call {:si_unique_call 1629} {:cexpr "__min2"} boogie_si_record_i32($i54);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i37, $i54);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i55 == 1);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i56 := $i54;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p9, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i63 := $M.1;
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i63, 2);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i32($i64);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 1631} {:cexpr "tmp___2"} boogie_si_record_i64($i67);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i37, $i77);
    call {:si_unique_call 1633} {:cexpr "data_left"} boogie_si_record_i32($i78);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i80 := $i33;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p35, $mul.ref(1, 16));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i83 := $M.1;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i84 := $sgt.i32($i83, 2);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 1638} {:cexpr "tmp___3"} boogie_si_record_i64($i87);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i33, 1);
    call {:si_unique_call 1640} {:cexpr "i"} boogie_si_record_i32($i90);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p91 := sg_next($p36);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i90, $i25);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i93 := $i90;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i32 := $i93;
    goto $bb6;

  $bb25:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i33, $i34, $p35, $p36, $i37 := $i90, 0, $p82, $p91, $i78;
    goto $bb25_dummy;

  $bb22:
    assume $i88 == 1;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_216 := printk.ref.ref.ref(.str.71, .str.69, $p82);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb20;

  $bb15:
    assume $i68 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_215 := printk.ref.ref.i64.i32.i32(.str.70, .str.69, $i70, $i72, $i74);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i55 == 1;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i56 := $i37;
    goto $bb14;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} vslice_dummy_var_214 := printk.ref.ref.i64.i32.i32(.str.68, .str.69, $i45, $i47, $i34);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i25 := $i21;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8277;
}



const ib_sg_dma_address: ref;

axiom ib_sg_dma_address == $sub.ref(0, 598272);

procedure ib_sg_dma_address($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ib_sg_dma_address($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ib_sg_dma_len: ref;

axiom ib_sg_dma_len == $sub.ref(0, 599304);

procedure ib_sg_dma_len($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_sg_dma_len($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sg_next: ref;

axiom sg_next == $sub.ref(0, 600336);

procedure sg_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_next($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $p1 := external_alloc();
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ib_dma_map_sg: ref;

axiom ib_dma_map_sg == $sub.ref(0, 601368);

procedure ib_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} {:cexpr "ib_dma_map_sg:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1645} {:cexpr "ib_dma_map_sg:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i16 := dma_map_sg_attrs($p15, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 1649} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(920, 1));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1646} $i12 := devirtbounce.22($p11, $p0, $p1, $i2, $i3);
    call {:si_unique_call 1647} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const dma_map_sg_attrs: ref;

axiom dma_map_sg_attrs == $sub.ref(0, 602400);

procedure dma_map_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dma_map_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i1;
  var $p7: ref;
  var $i8: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} {:cexpr "dma_map_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1651} {:cexpr "dma_map_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $p5 := get_dma_ops($p0);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i2);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $i15 := valid_dma_direction($i3);
    call {:si_unique_call 1658} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1660} {:cexpr "tmp___2"} boogie_si_record_i64($i19);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 1662} $i23 := devirtbounce.23($p22, $p0, $p1, $i2, $i3, $p4);
    call {:si_unique_call 1663} {:cexpr "ents"} boogie_si_record_i32($i23);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1665} {:cexpr "tmp___3"} boogie_si_record_i64($i27);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} debug_dma_map_sg($p0, $p1, $i2, $i23, $i3);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb13:
    assume $i28 == 1;
    call {:si_unique_call 1666} devirtbounce.4(0, .str.24, 58, 12);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call dma_map_sg_attrs_loop_$bb15();
    goto $bb15_last;

  $bb9:
    assume $i20 == 1;
    call {:si_unique_call 1661} devirtbounce.4(0, .str.24, 56, 12);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call dma_map_sg_attrs_loop_$bb11();
    goto $bb11_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p7, $i8 := $p1, 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $i14, $p7, $i8 := dma_map_sg_attrs_loop_$bb4($i2, $p9, $p10, $i11, $i12, $p13, $i14, $p7, $i8);
    goto $bb4_last;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $p9 := sg_virt($p7);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} kmemcheck_mark_initialized($p9, $i11);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i8, 1);
    call {:si_unique_call 1655} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p13 := sg_next($p7);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, $i2);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8 := $p13, $i12;
    goto $bb6_dummy;

  $bb15_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8412;
}



const sg_virt: ref;

axiom sg_virt == $sub.ref(0, 603432);

procedure sg_virt($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_virt($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p1 := sg_page($p0);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p2 := lowmem_page_address($p1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const debug_dma_map_sg: ref;

axiom debug_dma_map_sg == $sub.ref(0, 604464);

procedure debug_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation debug_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} {:cexpr "debug_dma_map_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1671} {:cexpr "debug_dma_map_sg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1672} {:cexpr "debug_dma_map_sg:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    return;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 605496);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1674} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1677} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 1678} devirtbounce.4(0, .str.40, 124, 12);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1675} devirtbounce.4(0, .str.40, 123, 12);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_page_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 606528);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 607560);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} ldv_spin_unlock();
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    return;
}



const isert_fast_reg_mr: ref;

axiom isert_fast_reg_mr == $sub.ref(0, 608592);

procedure isert_fast_reg_mr($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.38, $M.39, assertsPassed;



implementation isert_fast_reg_mr($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p47: ref;
  var $p48: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p120: ref;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i8;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i64;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $i154: i64;
  var $p155: ref;
  var $i156: i32;
  var $p157: ref;
  var $i158: i32;
  var $i41: i32;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $p5 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p6 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1685} {:cexpr "isert_fast_reg_mr:arg:ind"} boogie_si_record_i32($i3);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i3, 2);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    assume {:verifier.code 0} true;
    $p47, $p48 := $p52, $p56;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 4095);
    call {:si_unique_call 1691} {:cexpr "page_off"} boogie_si_record_i32($i59);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i60 := $M.1;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i60, 2);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 1693} {:cexpr "tmp___0"} boogie_si_record_i64($i64);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $i77 := isert_map_fr_pagelist($p11, $p72, $i74, $p76);
    call {:si_unique_call 1696} {:cexpr "pagelist_len"} boogie_si_record_i32($i77);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, $i3);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $p83 := $0.ref;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p5);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 1698} cmdloc_dummy_var_41 := $memset.i8(cmdloc_dummy_var_40, $p84, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p85, $sub.i64(0, 1));
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, 11);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i59);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i89, $i90);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p94, $i91);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $p48);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i77);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 12);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i105);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p47, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i110);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 1);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p83);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i118 := $eq.i64($i117, 0);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i118 == 1);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p83, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p5);
    assume {:verifier.code 0} true;
    $p119 := $p83;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $i123 := ib_post_send($p122, $p119, $p7);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 1700} {:cexpr "ret"} boogie_si_record_i32($i123);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i3);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i131 := $xor.i32($i130, $sub.i32(0, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i128, $i131);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i132);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, $i133);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p47, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i136);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i141 := $zext.i32.i64($i59);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i140, $i141);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p143, $i142);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i145);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i147 := $M.1;
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i148 := $sgt.i32($i147, 2);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i149 := $zext.i1.i32($i148);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i149);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $i151 := ldv__builtin_expect($i150, 0);
    call {:si_unique_call 1703} {:cexpr "tmp___1"} boogie_si_record_i64($i151);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i41 := $i123;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb23:
    assume $i152 == 1;
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.0, $p153);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_221 := printk.ref.ref.i64.i32.i32(.str.41, .str.42, $i154, $i156, $i158);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i124 == 1;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} vslice_dummy_var_220 := printk.ref.ref.i32(.str.44, .str.42, $i123);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i41 := $i123;
    goto $bb6;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i118 == 1;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p119 := $p5;
    goto $bb19;

  $bb14:
    assume $i82 == 1;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} isert_inv_rkey($p6, $p47);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $p83 := $p6;
    goto $bb16;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} vslice_dummy_var_219 := printk.ref.ref.ref.i32.i32(.str.43, .str.42, $p1, $i67, $i69);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p47, $p48 := $p44, $p46;
    goto $bb10;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i22 := ib_sg_dma_address($p11, $p21);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i22);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $i26 := ib_sg_dma_len($p11, $p25);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 2);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 1689} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb3:
    assume $i33 == 1;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} vslice_dummy_var_218 := printk.ref.ref.i64.i32.i32(.str.41, .str.42, $i35, $i37, $i39);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const isert_handle_prot_cmd: ref;

axiom isert_handle_prot_cmd == $sub.ref(0, 609624);

procedure isert_handle_prot_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $M.3, $M.39, $CurrAddr, assertsPassed;



implementation isert_handle_prot_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i52: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i23: i32;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1584, 1));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(56, 1));
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1880)), $mul.ref(912, 1));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p24 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(800, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i55 := isert_reg_sig_mr($p0, $p7, $p2, $p54);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 1716} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 1);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i64);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} vslice_dummy_var_225 := printk.ref.ref.ref(.str.51, .str.49, $p0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i52 := $i55;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(800, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i23 := $i52;
    goto $bb5;

  $bb21:
    assume $i71 == 1;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(248, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} isert_unmap_data_buf($p0, $p72);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(800, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(808, 1));
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1880)), $mul.ref(912, 1)), $mul.ref(792, 1));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(248, 1));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $i37 := isert_map_data_buf($p0, $p1, $p29, $i31, $i33, 0, $i35, $p36);
    call {:si_unique_call 1709} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(1, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 1711} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p42, 0, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(248, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(1, 16));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $i49 := isert_fast_reg_mr($p0, $p44, $p45, 4, $p48);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 1713} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} vslice_dummy_var_224 := printk.ref.ref.ref(.str.51, .str.49, $p0);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i52 := $i49;
    goto $bb15;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} vslice_dummy_var_223 := printk.ref.ref.ref(.str.50, .str.49, $p0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i23 := $i37;
    goto $bb5;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $i20 := isert_create_pi_ctx($p15, $p17, $p19);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 1706} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} vslice_dummy_var_222 := printk.ref.ref.ref(.str.48, .str.49, $p0);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i23 := $i20;
    goto $bb5;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const isert_create_pi_ctx: ref;

axiom isert_create_pi_ctx == $sub.ref(0, 610656);

procedure isert_create_pi_ctx($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $CurrAddr, assertsPassed;



implementation isert_create_pi_ctx($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $i66: i8;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i47: i32;
  var $p94: ref;
  var $p95: ref;
  var $i28: i32;
  var $p96: ref;
  var $i9: i32;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $p4 := kzalloc(24, 208);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $p10 := ib_alloc_fast_reg_page_list($p1, 256);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} $i15 := IS_ERR($p14);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 1724} {:cexpr "tmp___2"} boogie_si_record_i8($i16);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $p29 := ib_alloc_fast_reg_mr($p2, 256);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p29);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $i34 := IS_ERR($p33);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 1734} {:cexpr "tmp___5"} boogie_si_record_i8($i35);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 4);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p3);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.38;
    call {:si_unique_call 1742} cmdloc_dummy_var_45 := $memset.i8(cmdloc_dummy_var_44, $p54, 0, 8, $zext.i32.i64(4), 0 == 1);
    $M.38 := cmdloc_dummy_var_45;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p55, 2);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.38, $p56);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, 1);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p59, $i58);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $p60 := ib_create_mr($p2, $p3);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p60);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} $i65 := IS_ERR($p64);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i8($i65);
    call {:si_unique_call 1745} {:cexpr "tmp___8"} boogie_si_record_i8($i66);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i66);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p4);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, 8);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $i83);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 254);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i89);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb13:
    assume $i67 == 1;
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $i71 := PTR_ERR($p70);
    call {:si_unique_call 1747} {:cexpr "tmp___6"} boogie_si_record_i64($i71);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} vslice_dummy_var_229 := printk.ref.ref.i64(.str.56, .str.53, $i71);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i76 := PTR_ERR($p75);
    call {:si_unique_call 1750} {:cexpr "tmp___7"} boogie_si_record_i64($i76);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    call {:si_unique_call 1751} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_230 := ib_dereg_mr($p92);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i47 := $i77;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} ib_free_fast_reg_page_list($p95);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i28 := $i47;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p5);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} kfree($p96);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb3;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} $i40 := PTR_ERR($p39);
    call {:si_unique_call 1736} {:cexpr "tmp___3"} boogie_si_record_i64($i40);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} vslice_dummy_var_228 := printk.ref.ref.i64(.str.55, .str.53, $i40);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} $i45 := PTR_ERR($p44);
    call {:si_unique_call 1739} {:cexpr "tmp___4"} boogie_si_record_i64($i45);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    call {:si_unique_call 1740} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb11;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $i21 := PTR_ERR($p20);
    call {:si_unique_call 1726} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} vslice_dummy_var_227 := printk.ref.ref.i64(.str.54, .str.53, $i21);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i26 := PTR_ERR($p25);
    call {:si_unique_call 1729} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    call {:si_unique_call 1730} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} vslice_dummy_var_226 := printk.ref.ref(.str.52, .str.53);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const isert_reg_sig_mr: ref;

axiom isert_reg_sig_mr == $sub.ref(0, 611688);

procedure isert_reg_sig_mr($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.0, $M.3, $CurrAddr, $M.38, assertsPassed;



implementation isert_reg_sig_mr($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p59: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p77: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $p110: ref;
  var $i111: i64;
  var $p114: ref;
  var $i115: i32;
  var $p118: ref;
  var $i119: i32;
  var $i13: i32;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p4 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $p5 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $p7 := $alloc($mul.ref(60, $zext.i32.i64(1)));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.39;
    call {:si_unique_call 1757} cmdloc_dummy_var_47 := $memset.i8(cmdloc_dummy_var_46, $p10, 0, 60, $zext.i32.i64(4), 0 == 1);
    $M.39 := cmdloc_dummy_var_47;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} $i11 := isert_set_sig_attrs($p1, $p7);
    call {:si_unique_call 1759} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(788, 1));
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} $i18 := isert_set_prot_checks($i17);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 60)), $mul.ref(0, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p19, $i18);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 8);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 1762} cmdloc_dummy_var_49 := $memset.i8(cmdloc_dummy_var_48, $p28, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 15);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $sub.i64(0, 1));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p31);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 1);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p7);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p42);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(800, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p27);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i57 == 1);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p27, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p4);
    assume {:verifier.code 0} true;
    $p58 := $p27;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2168)), $mul.ref(1576, 1));
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} $i62 := ib_post_send($p61, $p58, $p6);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 1764} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 247);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i69);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i74);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, 0);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i82);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(780, 1));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 4);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i102 := $M.1;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i103 := $sgt.i32($i102, 2);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i104 := $zext.i1.i32($i103);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i104);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i106 := ldv__builtin_expect($i105, 0);
    call {:si_unique_call 1767} {:cexpr "tmp"} boogie_si_record_i64($i106);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i13 := $i62;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb23:
    assume $i107 == 1;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} vslice_dummy_var_232 := printk.ref.ref.i64.i32.i32(.str.58, .str.57, $i111, $i115, $i119);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i88 == 1;
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(780, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 2);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb19;

  $bb20:
    assume $i91 == 1;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(792, 1));
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i95, $i97);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i98);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} vslice_dummy_var_231 := printk.ref.ref.i32(.str.44, .str.57, $i62);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i13 := $i62;
    goto $bb3;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i57 == 1;
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $p58 := $p4;
    goto $bb13;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(1, 16));
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p52);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} isert_inv_rkey($p5, $p26);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p27 := $p5;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const isert_set_sig_attrs: ref;

axiom isert_set_sig_attrs == $sub.ref(0, 612720);

procedure isert_set_sig_attrs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39;



implementation isert_set_sig_attrs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i26: i32;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(780, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(780, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} vslice_dummy_var_233 := printk.ref.ref.i32(.str.59, .str.60, $i24);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(32, 1));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} isert_set_dif_domain($p0, $p1, $p21);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} isert_set_dif_domain($p0, $p1, $p22);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb30;

  $bb6:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb12:
    assume $i8 == 1;
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p16, 0);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(32, 1));
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} isert_set_dif_domain($p0, $p1, $p17);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p19, 0);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} isert_set_dif_domain($p0, $p1, $p20);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb19:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb24:
    assume $i13 == 1;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb26:
    assume $i14 == 1;
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const isert_set_prot_checks: ref;

axiom isert_set_prot_checks == $sub.ref(0, 613752);

procedure isert_set_prot_checks($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation isert_set_prot_checks($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} {:cexpr "isert_set_prot_checks:arg:prot_checks"} boogie_si_record_i8($i0);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i4 := (if $i3 == 1 then $sub.i32(0, 64) else 0);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i0);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 48 else 0);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i0);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 15 else 0);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i9, $i13);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const isert_inv_rkey: ref;

axiom isert_inv_rkey == $sub.ref(0, 614784);

procedure isert_inv_rkey($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_inv_rkey($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 1775} cmdloc_dummy_var_51 := $memset.i8(cmdloc_dummy_var_50, $p2, 0, 96, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $sub.i64(0, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 10);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i6);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $i11 := ib_inc_rkey($i10);
    call {:si_unique_call 1777} {:cexpr "rkey"} boogie_si_record_i32($i11);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} ib_update_fast_reg_key($p1, $i14);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    return;
}



const ib_inc_rkey: ref;

axiom ib_inc_rkey == $sub.ref(0, 615816);

procedure ib_inc_rkey($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ib_inc_rkey($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} {:cexpr "ib_inc_rkey:arg:rkey"} boogie_si_record_i32($i0);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i3 := $xor.i32(255, $sub.i32(0, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $i0);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i2, $i4);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ib_update_fast_reg_key: ref;

axiom ib_update_fast_reg_key == $sub.ref(0, 616848);

procedure ib_update_fast_reg_key($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation ib_update_fast_reg_key($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} {:cexpr "ib_update_fast_reg_key:arg:newkey"} boogie_si_record_i8($i1);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 256));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 256));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i10, $i11);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    return;
}



const isert_set_dif_domain: ref;

axiom isert_set_dif_domain == $sub.ref(0, 617880);

procedure isert_set_dif_domain($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation isert_set_dif_domain($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p3, 1);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p6, 0);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(112, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5048)), $mul.ref(1872, 1)), $mul.ref(76, 1));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $M.39 := $store.i16($M.39, $p15, $i12);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(796, 1));
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p20, $i17);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $M.39 := $store.i16($M.39, $p23, $sub.i16(0, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p26, 1);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p29, 1);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(784, 1));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i32 == 1);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(784, 1));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p38, 1);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb2;
}



const ib_create_mr: ref;

axiom ib_create_mr == $sub.ref(0, 618912);

procedure ib_create_mr($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ib_create_mr($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $p2 := external_alloc();
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const isert_map_fr_pagelist: ref;

axiom isert_map_fr_pagelist == $sub.ref(0, 619944);

procedure isert_map_fr_pagelist($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isert_map_fr_pagelist($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i34: i64;
  var $i35: i64;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i32: i32;
  var $i33: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i54: i32;
  var $i6: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} {:cexpr "isert_map_fr_pagelist:arg:sg_nents___0"} boogie_si_record_i32($i2);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i2, $sub.i32(0, 1));
    call {:si_unique_call 1783} {:cexpr "last_ent"} boogie_si_record_i32($i4);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i2);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i7, $i8, $i9, $p10, $i11 := 0, 1, 0, $p1, 0;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $p26, $i27, $i29, $i30, $i31, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i32, $i33, $i51, $p52, $i53, $i7, $i8, $i9, $p10, $i11, $i54, vslice_dummy_var_234, vslice_dummy_var_235 := isert_map_fr_pagelist_loop_$bb4($p0, $i2, $p3, $i4, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $p26, $i27, $i29, $i30, $i31, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i32, $i33, $i51, $p52, $i53, $i7, $i8, $i9, $p10, $i11, $i54, vslice_dummy_var_234, vslice_dummy_var_235);
    goto $bb4_last;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} $i12 := ib_sg_dma_address($p0, $p10);
    call {:si_unique_call 1785} {:cexpr "start_addr"} boogie_si_record_i64($i12);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i8, 0);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i11;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i15 := ib_sg_dma_len($p0, $p10);
    call {:si_unique_call 1787} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $i12);
    call {:si_unique_call 1788} {:cexpr "end_addr"} boogie_si_record_i64($i17);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 2);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1790} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i17, 4095);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i14, $sub.i64(0, 4096));
    call {:si_unique_call 1794} {:cexpr "page"} boogie_si_record_i64($i34);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i34, $i7;
    goto $bb19;

  $bb19:
    call $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, vslice_dummy_var_235 := isert_map_fr_pagelist_loop_$bb19($p3, $i17, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, vslice_dummy_var_235);
    goto $bb19_last;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    call {:si_unique_call 1795} {:cexpr "n_pages"} boogie_si_record_i32($i37);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i36);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p3, $mul.ref($i38, 8));
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i40 := $M.1;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 2);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 1797} {:cexpr "tmp___2"} boogie_si_record_i64($i44);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i35, 4096);
    call {:si_unique_call 1799} {:cexpr "page"} boogie_si_record_i64($i48);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i49 := $ult.i64($i48, $i17);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i50 := $i37;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i32, $i33 := 1, $i50;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i9, 1);
    call {:si_unique_call 1792} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $p52 := sg_next($p10);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i51, $i2);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i54 := $i33;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i6 := $i54;
    goto $bb3;

  $bb26:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8, $i9, $p10, $i11 := $i33, $i32, $i51, $p52, $i14;
    goto $bb26_dummy;

  $bb23:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i35, $i36 := $i48, $i37;
    goto $bb23_dummy;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i37, $sub.i32(0, 1));
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} vslice_dummy_var_235 := printk.ref.ref.i32.i64(.str.47, .str.46, $i46, $i35);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i9, $i4);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb14;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i32, $i33 := 0, $i7;
    goto $bb17;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} vslice_dummy_var_234 := printk.ref.ref.i32.i64.i32(.str.45, .str.46, $i9, $i25, $i27);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb8;

  $bb23_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9233;

  $bb26_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9193;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 620976);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 622008);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    return;
}



const ib_query_device: ref;

axiom ib_query_device == $sub.ref(0, 623040);

procedure ib_query_device($p0: ref, $p1: ref) returns ($r: i32);



const kref_init: ref;

axiom kref_init == $sub.ref(0, 624072);

procedure kref_init($p0: ref);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 625104);

procedure spinlock_check($p0: ref) returns ($r: ref);



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 626136);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);



const isert_release_work: ref;

axiom isert_release_work == $sub.ref(0, 627168);

procedure isert_release_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.38, $M.39, assertsPassed, $M.33;



implementation isert_release_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 2040), 2168));
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 1);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1804} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2040), 2168)), $mul.ref(1752, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} wait_for_completion($p10);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2040), 2168)), $mul.ref(1592, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} mutex_lock_nested($p11, 0);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2040), 2168)), $mul.ref(0, 1));
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 4);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2040), 2168)), $mul.ref(1592, 1));
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} mutex_unlock($p13);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 1);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1810} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} isert_put_conn($p2);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} vslice_dummy_var_237 := printk.ref.ref.ref(.str.177, .str.176, $p2);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} vslice_dummy_var_236 := printk.ref.ref.ref(.str.175, .str.176, $p2);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 628200);

procedure atomic_set($p0: ref, $i1: i32);



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 629232);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $p1 := calloc(1, $i0);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1815} __VERIFIER_assume($i4);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 630264);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.40;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1817} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.40;
    call {:si_unique_call 1818} cmdloc_dummy_var_53 := $memset.i8(cmdloc_dummy_var_52, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.40 := cmdloc_dummy_var_53;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 631296);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.43, $M.44;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1819} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1820} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1821} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1822} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 632328);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.12;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i11 := $M.12;
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.14;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i19 := $M.14;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.16;
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i27 := $M.16;
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p30 := $M.17;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} isert_cq_work($p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1830} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p22 := $M.15;
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} isert_cq_work($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p14 := $M.13;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} isert_cq_work($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p6 := $M.11;
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} isert_cq_work($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 1824} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_initialize_iscsit_transport_4: ref;

axiom ldv_initialize_iscsit_transport_4 == $sub.ref(0, 633360);

procedure ldv_initialize_iscsit_transport_4();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $M.0, $CurrAddr;



implementation ldv_initialize_iscsit_transport_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $p0 := ldv_init_zalloc(2496);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $p2 := ldv_init_zalloc(576);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $M.46 := $p2;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $p4 := ldv_init_zalloc(192);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $M.47 := $p4;
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} $p6 := ldv_init_zalloc(1920);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $M.48 := $p6;
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_3: ref;

axiom invoke_work_3 == $sub.ref(0, 634392);

procedure invoke_work_3();
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.42, $M.43, $M.44, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation invoke_work_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1835} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1836} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1837} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} ldv_stop();
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i21 := $M.44;
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i23 := $M.44;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.44 := 4;
    call {:si_unique_call 1847} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(4);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p25 := $M.49;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} isert_do_control_comp($p25);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1849} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i16 := $M.43;
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i18 := $M.43;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.43 := 4;
    call {:si_unique_call 1844} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(4);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $p20 := $M.49;
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} isert_do_control_comp($p20);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1846} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i11 := $M.42;
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i13 := $M.42;
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 1841} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(4);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p15 := $M.49;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} isert_do_control_comp($p15);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1843} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i6 := $M.41;
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i8 := $M.41;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 1838} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(4);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p10 := $M.49;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} isert_do_control_comp($p10);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1840} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 635424);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 636456);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52, $M.53;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1851} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1852} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1853} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1854} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 637488);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 1855} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 1856} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 1857} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 1858} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 638520);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.12;
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.14;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.16;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} call_and_disable_work_1($p12);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p9 := $M.15;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} call_and_disable_work_1($p9);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p6 := $M.13;
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} call_and_disable_work_1($p6);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $p3 := $M.11;
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} call_and_disable_work_1($p3);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 639552);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1864} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1866} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} ldv_stop();
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i21 := $M.16;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i23 := $M.16;
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.16 := 4;
    call {:si_unique_call 1876} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p25 := $M.11;
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} isert_cq_work($p25);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1878} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i18 := $M.14;
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 1873} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $p20 := $M.11;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} isert_cq_work($p20);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1875} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i11 := $M.12;
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i13 := $M.12;
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.12 := 4;
    call {:si_unique_call 1870} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p15 := $M.11;
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} isert_cq_work($p15);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 1872} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.10 := 4;
    call {:si_unique_call 1867} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p10 := $M.11;
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} isert_cq_work($p10);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 1869} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 640584);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.50, $M.0, $M.51, $M.52, $M.53, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.38, $M.39, assertsPassed, $M.33;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1880} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1881} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1882} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_stop();
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i21 := $M.53;
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i23 := $M.53;
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1892} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p25 := $M.54;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} isert_release_work($p25);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1894} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i16 := $M.52;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i18 := $M.52;
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.52 := 4;
    call {:si_unique_call 1889} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $p20 := $M.54;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} isert_release_work($p20);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1891} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i11 := $M.51;
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i13 := $M.51;
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.51 := 4;
    call {:si_unique_call 1886} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p15 := $M.54;
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} isert_release_work($p15);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1888} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i6 := $M.50;
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i8 := $M.50;
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1883} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $p10 := $M.54;
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} isert_release_work($p10);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1885} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 641616);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.55, $M.10, $M.12, $M.14, $M.16, $M.56, $M.57, $M.58, $M.41, $M.42, $M.43, $M.44, $M.59, $M.50, $M.51, $M.52, $M.53, $M.60, $M.0, $M.61, $M.45, $M.46, $M.47, $M.48, $M.49, $M.11, $M.13, $M.15, $M.17, $M.54, $M.3, $M.69, $M.2, $M.27, $M.1, $M.70, $M.71, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.38, $M.39, assertsPassed, $M.33;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i1;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var vslice_dummy_var_238: ref;
  var vslice_dummy_var_239: ref;
  var vslice_dummy_var_240: ref;
  var vslice_dummy_var_241: ref;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    call {:si_unique_call 1896} $initialize();
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $p4 := ldv_init_zalloc(128);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} ldv_initialize();
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} vslice_dummy_var_238 := ldv_memset($p6, 0, 4);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} vslice_dummy_var_239 := ldv_memset($p8, 0, 4);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} vslice_dummy_var_240 := ldv_memset($p2, 0, 1);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} vslice_dummy_var_241 := ldv_memset($p11, 0, 4);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 1908} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} work_init_1();
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1910} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 1911} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1912} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} work_init_3();
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1914} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} work_init_2();
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1916} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $i42, $i44, $i45, $p46, $i48, $i49, $p50, $p51, $i53, $i54, $p55, $p56, $i57, $i59, $i60, $p61, $p62, $i64, $i65, $p66, $p67, $i68, $i70, $i71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $p80, $i82, $i83, $p84, $p85, $i86, $i87, $i89, $i90, $p91, $i93, $i94, $p95, $p96, $i98, $i99, $p100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250, vslice_dummy_var_251 := main_loop_$bb1($p0, $p1, $p2, $p3, $p5, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $i42, $i44, $i45, $p46, $i48, $i49, $p50, $p51, $i53, $i54, $p55, $p56, $i57, $i59, $i60, $p61, $p62, $i64, $i65, $p66, $p67, $i68, $i70, $i71, $p72, $i73, $i74, $p75, $p76, $i77, $i78, $p79, $p80, $i82, $i83, $p84, $p85, $i86, $i87, $i89, $i90, $p91, $i93, $i94, $p95, $p96, $i98, $i99, $p100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250, vslice_dummy_var_251);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_stop();
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb96_dummy;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i125 := $M.60;
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb133:
    assume $i126 == 1;
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} invoke_work_2();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    goto $bb135;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i123 := $M.59;
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb130:
    assume $i124 == 1;
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} invoke_work_3();
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i106 := $M.58;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb100:
    assume $i107 == 1;
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1953} $i108 := __VERIFIER_nondet_int();
    call {:si_unique_call 1954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i108);
    call {:si_unique_call 1955} {:cexpr "tmp___2"} boogie_si_record_i32($i108);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} ldv_stop();
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb105:
    assume $i110 == 1;
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $i116 := $M.58;
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 1);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb118:
    assume $i117 == 1;
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i118 := isert_init();
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $M.61 := $i118;
    call {:si_unique_call 1960} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i118);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i119 := $M.61;
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i121 := $M.61;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb123:
    assume $i122 == 1;
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1964} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} ldv_check_final_state();
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb120:
    assume $i120 == 1;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1961} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1962} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} ldv_initialize_iscsit_transport_4();
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    goto $bb122;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i108, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb107;

  $bb108:
    assume $i111 == 1;
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i112 := $M.58;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 3);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb110:
    assume $i113 == 1;
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $i114 := $M.57;
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb112;

  $bb113:
    assume $i115 == 1;
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} isert_exit();
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1957} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $i104 := $M.56;
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb97:
    assume $i105 == 1;
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} invoke_work_1();
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i20 := $M.55;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1920} $i22 := __VERIFIER_nondet_int();
    call {:si_unique_call 1921} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i22);
    call {:si_unique_call 1922} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i22, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i22, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i22, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_stop();
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb27:
    assume $i27 == 1;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i101 := $M.55;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb90:
    assume $i102 == 1;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p103 := $M.45;
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} isert_free_conn($p103);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1950} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    goto $bb92;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i26 == 1;
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i98 := $M.55;
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 1);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb87:
    assume $i99 == 1;
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p100 := $M.45;
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} isert_wait_conn($p100);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1948} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i22, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i28 == 1);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i93 := $M.55;
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb84:
    assume $i94 == 1;
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p95 := $M.45;
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $p96 := $M.48;
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} vslice_dummy_var_251 := isert_put_datain($p95, $p96);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1946} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    goto $bb86;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i28 == 1;
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i89 := $M.55;
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb81:
    assume $i90 == 1;
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $p91 := $M.45;
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} vslice_dummy_var_250 := isert_get_sup_prot_ops($p91);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1944} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb21:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i22, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i30 == 1);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i82 := $M.55;
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb78:
    assume $i83 == 1;
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p84 := $M.45;
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p85 := $M.48;
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.40, $p2);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i86);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} vslice_dummy_var_249 := isert_get_dataout($p84, $p85, $i87);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1942} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i30 == 1;
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i77 := $M.55;
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb75:
    assume $i78 == 1;
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $p79 := $M.45;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p80 := $M.48;
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} vslice_dummy_var_248 := isert_put_response($p79, $p80);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1940} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i29 == 1;
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i73 := $M.55;
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb72:
    assume $i74 == 1;
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $p75 := $M.45;
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p76 := $M.48;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} isert_aborted_task($p75, $p76);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1938} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb19:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i22, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i22, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i33 == 1);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i70 := $M.55;
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb69:
    assume $i71 == 1;
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $p72 := $M.46;
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} isert_free_np($p72);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1936} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb40:
    assume $i33 == 1;
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i64 := $M.55;
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb66:
    assume $i65 == 1;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p66 := $M.45;
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p67 := $M.47;
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.40, $p0);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} vslice_dummy_var_247 := isert_put_login_tx($p66, $p67, $i68);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1934} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i22, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i34 == 1);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i59 := $M.55;
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb63:
    assume $i60 == 1;
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p61 := $M.46;
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p62 := $M.45;
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} vslice_dummy_var_246 := isert_accept_np($p61, $p62);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1932} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb42:
    assume $i34 == 1;
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $i53 := $M.55;
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb60:
    assume $i54 == 1;
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p55 := $M.45;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p56 := $M.48;
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.40, $p3);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} vslice_dummy_var_245 := isert_immediate_queue($p55, $p56, $i57);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1930} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i22, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i36 == 1);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i48 := $M.55;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb57:
    assume $i49 == 1;
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p50 := $M.45;
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $p51 := $M.47;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} vslice_dummy_var_244 := isert_get_login_rx($p50, $p51);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1928} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb46:
    assume $i36 == 1;
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i44 := $M.55;
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb54:
    assume $i45 == 1;
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p46 := $M.46;
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} vslice_dummy_var_243 := isert_setup_np($p46, $p5);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1926} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i22, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb29;

  $bb48:
    assume $i37 == 1;
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i38 := $M.55;
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i39 == 1;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p40 := $M.45;
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $p41 := $M.48;
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.40, $p1);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} vslice_dummy_var_242 := isert_response_queue($p40, $p41, $i42);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1924} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb96_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1917} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1918} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1919} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 642648);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    return;
}



const isert_exit: ref;

axiom isert_exit == $sub.ref(0, 643680);

procedure isert_exit();
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation isert_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var vslice_dummy_var_252: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} flush_scheduled_work();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $p0 := $M.2;
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} ldv_destroy_workqueue_45($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $p1 := $M.27;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} ldv_destroy_workqueue_46($p1);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} iscsit_unregister_transport(iser_target_transport);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 1);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1974} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} vslice_dummy_var_252 := printk.ref.ref(.str.254, .str.255);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const isert_init: ref;

axiom isert_init == $sub.ref(0, 644712);

procedure isert_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.2, $M.10, $M.12, $M.14, $M.16, $CurrAddr, $M.0, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation isert_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i7: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $p2 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.257, 18, 0, $p0, .str.256);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $M.27 := $p2;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $p3 := $M.27;
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i9 := cpumask_weight($p8);
    call {:si_unique_call 1981} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 4);
    call {:si_unique_call 1982} {:cexpr "__max2"} boogie_si_record_i32($i10);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32(512, $i10);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $p13 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.261, 2, $i12, $p1, .str.260);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $M.2 := $p13;
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p14 := $M.2;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} vslice_dummy_var_255 := iscsit_register_transport(iser_target_transport);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 1);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1988} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} vslice_dummy_var_256 := printk.ref.ref(.str.263, .str.259);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} vslice_dummy_var_254 := printk.ref.ref(.str.262, .str.259);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $M.27;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} ldv_destroy_workqueue_44($p26);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i12 := 512;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} vslice_dummy_var_253 := printk.ref.ref(.str.258, .str.259);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 645744);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 646776);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1991} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} $p5 := external_alloc();
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const iscsit_register_transport: ref;

axiom iscsit_register_transport == $sub.ref(0, 647808);

procedure iscsit_register_transport($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsit_register_transport($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1993} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1994} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_destroy_workqueue_44: ref;

axiom ldv_destroy_workqueue_44 == $sub.ref(0, 648840);

procedure ldv_destroy_workqueue_44($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation ldv_destroy_workqueue_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} destroy_workqueue($p0);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} call_and_disable_all_1(2);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 649872);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    return;
}



const flush_scheduled_work: ref;

axiom flush_scheduled_work == $sub.ref(0, 650904);

procedure flush_scheduled_work();
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation flush_scheduled_work()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, system_wq);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} ldv_flush_workqueue_18($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_45: ref;

axiom ldv_destroy_workqueue_45 == $sub.ref(0, 651936);

procedure ldv_destroy_workqueue_45($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation ldv_destroy_workqueue_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} destroy_workqueue($p0);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} call_and_disable_all_1(2);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_46: ref;

axiom ldv_destroy_workqueue_46 == $sub.ref(0, 652968);

procedure ldv_destroy_workqueue_46($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation ldv_destroy_workqueue_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} destroy_workqueue($p0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} call_and_disable_all_1(2);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const iscsit_unregister_transport: ref;

axiom iscsit_unregister_transport == $sub.ref(0, 654000);

procedure iscsit_unregister_transport($p0: ref);
  free requires assertsPassed;



implementation iscsit_unregister_transport($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_workqueue_18: ref;

axiom ldv_flush_workqueue_18 == $sub.ref(0, 655032);

procedure ldv_flush_workqueue_18($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.3, $M.11, $M.13, $M.15, $M.17, $M.33, $M.38, $M.39, assertsPassed;



implementation ldv_flush_workqueue_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} flush_workqueue($p0);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} call_and_disable_all_1(2);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 656064);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 657096);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2004} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 1} true;
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 658128);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 659160);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 660192);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 661224);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 662256);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 663288);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 664320);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 665352);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 666384);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 667416);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 668448);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 669480);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 670512);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2005} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2006} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2007} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2008} __VERIFIER_assume($i4);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 671544);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 672576);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 673608);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 674640);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 675672);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 676704);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 677736);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 678768);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 679800);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2009} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2010} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2011} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2012} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2013} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2014} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2015} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2016} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2017} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2018} __VERIFIER_assume($i7);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2019} __VERIFIER_assume($i11);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 680832);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 681864);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 682896);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 683928);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 684960);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 685992);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 687024);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 688056);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 689088);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2020} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2021} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2022} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2023} __VERIFIER_assume($i10);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 690120);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2024} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2025} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2026} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 691152);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2027} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2028} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 692184);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 693216);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2029} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2030} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 694248);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 695280);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 696312);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2031} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2032} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2033} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2034} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $p6 := malloc($i5);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 2036} cmdloc_dummy_var_55 := $memset.i8(cmdloc_dummy_var_54, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 697344);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 698376);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.41, $M.49, $M.42, $M.43, $M.44, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.50, $M.54, $M.51, $M.52, $M.53, $M.45, $M.46, $M.47, $M.48, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.3, $M.69, $M.2, $M.27, $M.0, $M.1, $M.70, $M.71;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2037} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.41 := 0;
    call {:si_unique_call 2038} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.49 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 2039} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 2040} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 2041} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 2042} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 2043} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.14 := 0;
    call {:si_unique_call 2044} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 2045} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.50 := 0;
    call {:si_unique_call 2046} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.54 := $0.ref;
    $M.51 := 0;
    call {:si_unique_call 2047} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 2048} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 2049} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 2050} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2051} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 2052} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 2053} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2054} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 2055} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 2056} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 2057} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.69 := $store.i8($M.69, iser_target_transport, 73);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(1, 1)), 66);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(2, 1)), 47);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(3, 1)), 105);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(4, 1)), 83);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(5, 1)), 69);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(6, 1)), 82);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(16, 1)), 5);
    $M.69 := $store.i32($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(20, 1)), 664);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(24, 1)), __this_module);
    $M.69 := $store.ref($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.69 := $store.ref($M.69, $add.ref($add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(8, 1)), $0.ref);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(48, 1)), isert_setup_np);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(56, 1)), isert_accept_np);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(64, 1)), isert_free_np);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(72, 1)), isert_wait_conn);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(80, 1)), isert_free_conn);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(88, 1)), isert_get_login_rx);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(96, 1)), isert_put_login_tx);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(104, 1)), isert_immediate_queue);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(112, 1)), isert_response_queue);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(120, 1)), isert_get_dataout);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(128, 1)), isert_put_datain);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(136, 1)), isert_put_response);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(144, 1)), isert_aborted_task);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(iser_target_transport, $mul.ref(0, 160)), $mul.ref(152, 1)), isert_get_sup_prot_ops);
    $M.2 := $0.ref;
    $M.27 := $0.ref;
    $M.0 := $store.ref($M.0, device_list, device_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(device_list, $mul.ref(0, 16)), $mul.ref(8, 1)), device_list);
    $M.0 := $store.i32($M.0, device_list_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.28);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(device_list_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(device_list_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), device_list_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.29);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(device_list_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.1 := 0;
    call {:si_unique_call 2058} {:cexpr "isert_debug_level"} boogie_si_record_i32(0);
    $M.70 := $store.i8($M.70, .str.212, 37);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.212, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.212, $mul.ref(0, 6)), $mul.ref(2, 1)), 73);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.212, $mul.ref(0, 6)), $mul.ref(3, 1)), 54);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.212, $mul.ref(0, 6)), $mul.ref(4, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.212, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.71 := $store.i8($M.71, .str.213, 37);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.213, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.213, $mul.ref(0, 5)), $mul.ref(2, 1)), 73);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.213, $mul.ref(0, 5)), $mul.ref(3, 1)), 52);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.213, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    call {:si_unique_call 2059} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 699408);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.38, $M.39, $CurrAddr, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(isert_map_rdma, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(isert_reg_rdma, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 2060} $i1 := isert_reg_rdma(arg, arg1, arg2);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    $r := $i1;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 2061} $i2 := isert_map_rdma(arg, arg1, arg2);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    $r := $i2;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 700440);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(isert_cq_event_callback, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i14 == 1);
    $i13 := $eq.ref(isert_cq_callback, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i13 == 1);
    $i12 := $eq.ref(isert_unmap_cmd, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i12 == 1);
    $i11 := $eq.ref(isert_unreg_rdma, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i11 == 1);
    $i10 := $eq.ref(isert_qp_event_callback, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i10 == 1);
    $i9 := $eq.ref(isert_aborted_task, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2062} isert_aborted_task($p1, $p2);
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2063} isert_qp_event_callback($p3, $p4);
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 2064} isert_unreg_rdma(arg, arg1);
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 2065} isert_unmap_cmd(arg, arg1);
    return;

  $bb6:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2066} isert_cq_callback($p5, $p6);
    return;

  $bb7:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2067} isert_cq_event_callback($p7, $p8);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 701472);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 702504);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.38, $M.39, $CurrAddr, assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(isert_map_rdma, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i10 == 1);
    $i9 := $eq.ref(isert_reg_rdma, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2068} $i4 := isert_reg_rdma($p1, $p2, $p3);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    $r := $i4;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2069} $i8 := isert_map_rdma($p5, $p6, $p7);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    $r := $i8;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 703536);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 704568);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 705600);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 706632);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 707664);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 708696);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 709728);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.38, $M.39, $CurrAddr, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(isert_map_rdma, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i10 == 1);
    $i9 := $eq.ref(isert_reg_rdma, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2070} $i4 := isert_reg_rdma($p1, $p2, $p3);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    $r := $i4;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2071} $i8 := isert_map_rdma($p5, $p6, $p7);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    $r := $i8;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 710760);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 711792);

procedure devirtbounce.12(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 712824);

procedure devirtbounce.13(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $CurrAddr, $M.38, $M.39, assertsPassed, $M.33;



implementation devirtbounce.13(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(isert_release_work, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(isert_do_control_comp, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(isert_cq_work, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(isert_release_kref, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i10 == 1);
    $i9 := $eq.ref(isert_free_conn, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i9 == 1);
    $i8 := $eq.ref(isert_wait_conn, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i8 == 1);
    $i7 := $eq.ref(isert_free_np, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2072} isert_free_np($p1);
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2073} isert_wait_conn($p2);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2074} isert_free_conn($p3);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 2075} isert_release_kref(arg);
    return;

  $bb6:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2076} isert_cq_work($p4);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2077} isert_do_control_comp($p5);
    return;

  $bb8:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2078} isert_release_work($p6);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 713856);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 714888);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 715920);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 716952);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 717984);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 719016);

procedure devirtbounce.19(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 720048);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 721080);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 722112);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 723144);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.41, $M.49, $M.42, $M.43, $M.44, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.50, $M.54, $M.51, $M.52, $M.53, $M.45, $M.46, $M.47, $M.48, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.3, $M.69, $M.2, $M.27, $M.0, $M.1, $M.70, $M.71, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2079} __SMACK_static_init();
    call {:si_unique_call 2080} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.40, $M.55, $M.10, $M.12, $M.14, $M.16, $M.56, $M.57, $M.58, $M.41, $M.42, $M.43, $M.44, $M.59, $M.50, $M.51, $M.52, $M.53, $M.60, $M.0, $M.61, $M.45, $M.46, $M.47, $M.48, $M.49, $M.11, $M.13, $M.15, $M.17, $M.54, $M.3, $M.69, $M.2, $M.27, $M.1, $M.70, $M.71, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.38, $M.39, $M.33;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation isert_accept_np_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i1)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb16_dummy;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} out_$i29 := down_interruptible(in_$p5);
    call {:si_unique_call 29} {:cexpr "ret"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} mutex_unlock(out_$p28);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_90;

  $bb14:
    assume out_$i27 == 1;
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} out_$i26 := list_empty(out_$p25);
    call {:si_unique_call 26} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p4, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} mutex_lock_nested(out_$p24, 0);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} spin_unlock_bh(out_$p23);
    goto corral_source_split_82;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(88, 1));
    goto corral_source_split_81;

  $bb9:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i12 := $ugt.i32(out_$i11, 2);
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(12, 1));
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} spin_lock_bh(out_$p9);
    goto corral_source_split_61;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(88, 1));
    goto corral_source_split_60;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30 := isert_accept_np_loop_$bb4(in_$p0, in_$p4, in_$p5, out_$p9, out_$p10, out_$i11, out_$i12, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure isert_accept_np_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i1);
  modifies $M.3;



implementation isert_free_np_loop_$bb12(in_$i34: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p36: ref, in_$p37: ref, in_vslice_dummy_var_60: i32) returns (out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p36: ref, out_$p37: ref, out_vslice_dummy_var_60: i32)
{

  entry:
    out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p36, out_$p37, out_vslice_dummy_var_60 := in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p36, in_$p37, in_vslice_dummy_var_60;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  $bb17:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p36, out_$p37 := out_$p51, out_$p36;
    goto $bb17_dummy;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i34);
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p36, $mul.ref(0, 2168)), $mul.ref(1120, 1));
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p50, $mul.ref($sub.ref(0, 1120), 2168));
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(0, 2168)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_181;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} isert_connect_release(out_$p37);
    goto corral_source_split_180;

  $bb15:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} out_vslice_dummy_var_60 := printk.ref.ref.ref.i32(.str.230, .str.229, out_$p37, out_$i45);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p37, $mul.ref(0, 2168)), $mul.ref(0, 1));
    goto corral_source_split_176;

  $bb14:
    assume out_$i43 == 1;
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_173;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_$i42 := ldv__builtin_expect(out_$i41, 0);
    call {:si_unique_call 44} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, 1);
    goto corral_source_split_169;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i38 := $M.1;
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p36, out_$p37, out_vslice_dummy_var_60 := isert_free_np_loop_$bb12(in_$i34, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p36, out_$p37, out_vslice_dummy_var_60);
    return;

  exit:
    return;
}



procedure isert_free_np_loop_$bb12(in_$i34: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p36: ref, in_$p37: ref, in_vslice_dummy_var_60: i32) returns (out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p36: ref, out_$p37: ref, out_vslice_dummy_var_60: i32);
  modifies $M.0, $M.10, $M.12, $M.14, $M.16;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation dma_sync_single_for_cpu_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_cpu_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_cpu_loop_$bb3();



implementation isert_conn_create_fastreg_pool_loop_$bb7(in_$p0: ref, in_$p2: ref, in_$i16: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i19: i32)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$i23, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i19 := in_$p20, in_$p21, in_$i22, in_$i23, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i19;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1514;

  $bb16:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i42;
    goto $bb16_dummy;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i42, in_$i16);
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i19, 1);
    call {:si_unique_call 407} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, out_$i40);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2168)), $mul.ref(1968, 1));
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} list_add_tail(out_$p36, out_$p37);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2168)), $mul.ref(1952, 1));
    goto corral_source_split_1540;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p21, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := out_$p20, out_$i30;
    assume true;
    goto $bb14;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_1532;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} out_$i30 := isert_create_fr_desc(out_$p27, out_$p29, out_$p21);
    call {:si_unique_call 403} {:cexpr "ret"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_1528;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_1527;

  $bb10:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_1517;

  SeqInstr_87:
    goto corral_source_split_1516;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} out_$p20 := kzalloc(48, 208);
    goto SeqInstr_86;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$i23, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i19 := isert_conn_create_fastreg_pool_loop_$bb7(in_$p0, in_$p2, in_$i16, out_$p20, out_$p21, out_$i22, out_$i23, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i19);
    return;

  exit:
    return;
}



procedure isert_conn_create_fastreg_pool_loop_$bb7(in_$p0: ref, in_$p2: ref, in_$i16: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i19: i32);
  modifies $M.0, assertsPassed;



implementation isert_alloc_rx_descriptors_loop_$bb18(in_$p4: ref, in_$i18: i32, in_$p38: ref, in_$i39: i64, in_$i40: i32, in_$p41: ref, in_$i42: i1, in_$i36: i32, in_$p37: ref) returns (out_$p38: ref, out_$i39: i64, out_$i40: i32, out_$p41: ref, out_$i42: i1, out_$i36: i32, out_$p37: ref)
{

  entry:
    out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i36, out_$p37 := in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i36, in_$p37;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  $bb20:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$p37 := out_$i40, out_$p41;
    goto $bb20_dummy;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, in_$i18);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p37, $mul.ref(1, 12296));
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i36, 1);
    call {:si_unique_call 420} {:cexpr "j"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} ib_dma_unmap_single(in_$p4, out_$i39, 8268, 2);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.0, out_$p38);
    goto corral_source_split_1627;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 12296)), $mul.ref(8272, 1));
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i36, out_$p37 := isert_alloc_rx_descriptors_loop_$bb18(in_$p4, in_$i18, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i36, out_$p37);
    return;

  exit:
    return;
}



procedure isert_alloc_rx_descriptors_loop_$bb18(in_$p4: ref, in_$i18: i32, in_$p38: ref, in_$i39: i64, in_$i40: i32, in_$p41: ref, in_$i42: i1, in_$i36: i32, in_$p37: ref) returns (out_$p38: ref, out_$i39: i64, out_$i40: i32, out_$p41: ref, out_$i42: i1, out_$i36: i32, out_$p37: ref);



implementation isert_post_recv_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$i28: i1, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p29: ref, in_$i30: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$i28: i1, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p29: ref, out_$i30: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i10, out_$i11, out_$p12, out_$p29, out_$i30 := in_$p13, in_$p14, in_$i15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i10, in_$i11, in_$p12, in_$p29, in_$i30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11, out_$p12 := out_$i25, out_$i26, out_$p27;
    goto $bb6_dummy;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p29, out_$i30 := out_$p27, out_$i25;
    assume true;
    goto $bb6;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i26, in_$i1);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p12, $mul.ref(1, 32));
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i11, 1);
    call {:si_unique_call 678} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i24, 127);
    call {:si_unique_call 677} {:cexpr "rx_head"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i10, 1);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p23, out_$p22);
    goto corral_source_split_4073;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p12, $mul.ref(1, 32));
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p21, 1);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, out_$p19);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 12296)), $mul.ref(8280, 1));
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p18, out_$i17);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p14, $mul.ref(out_$i15, 12296));
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i10);
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_4060;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2168)), $mul.ref(80, 1));
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i10, out_$i11, out_$p12, out_$p29, out_$i30 := isert_post_recv_loop_$bb4(in_$p0, in_$i1, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i10, out_$i11, out_$p12, out_$p29, out_$i30);
    return;

  exit:
    return;
}



procedure isert_post_recv_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$i28: i1, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p29: ref, in_$i30: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$i28: i1, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p29: ref, out_$i30: i32);
  modifies $M.0;



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation isert_conn_free_fastreg_pool_loop_$bb11(in_$i22: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i64: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i64: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32)
{

  entry:
    out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p47, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p61, out_$i62, out_$i63, out_$i25, out_$p26, out_$p27, out_$i64, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p47, in_$p48, in_$p49, in_$p50, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$p58, in_$p59, in_$p61, in_$i62, in_$i63, in_$i25, in_$p26, in_$p27, in_$i64, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4392;

  $bb16:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$p26, out_$p27 := out_$i56, out_$p27, out_$p59;
    goto $bb16_dummy;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i56;
    assume true;
    goto $bb16;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, in_$i22);
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p27, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i25, 1);
    call {:si_unique_call 771} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} kfree(out_$p55);
    goto corral_source_split_4429;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_4428;

  $bb14:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} kfree(out_$p54);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_vslice_dummy_var_115 := ib_destroy_mr(out_$p50);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} out_vslice_dummy_var_114 := ib_dereg_mr(out_$p45);
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ib_free_fast_reg_page_list(out_$p41);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4408;

  $bb13:
    assume out_$i37 == 1;
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} out_vslice_dummy_var_113 := ib_dereg_mr(out_$p32);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ib_free_fast_reg_page_list(out_$p30);
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} list_del(out_$p28);
    goto corral_source_split_4395;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p26, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p47, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p61, out_$i62, out_$i63, out_$i25, out_$p26, out_$p27, out_$i64, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := isert_conn_free_fastreg_pool_loop_$bb11(in_$i22, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p47, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p61, out_$i62, out_$i63, out_$i25, out_$p26, out_$p27, out_$i64, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115);
    return;

  exit:
    return;
}



procedure isert_conn_free_fastreg_pool_loop_$bb11(in_$i22: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i64: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i64: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32);



implementation dma_sync_single_for_device_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_device_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_device_loop_$bb3();



implementation isert_connect_release_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} isert_connect_release_loop_$bb6();
    return;

  exit:
    return;
}



procedure isert_connect_release_loop_$bb6();



implementation isert_free_comps_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i4: i32, in_vslice_dummy_var_132: i1, in_vslice_dummy_var_133: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i4: i32, out_vslice_dummy_var_132: i1, out_vslice_dummy_var_133: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i18, out_$i19, out_$i20, out_$i4, out_vslice_dummy_var_132, out_vslice_dummy_var_133 := in_$p5, in_$p6, in_$i7, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p15, in_$p16, in_$i18, in_$i19, in_$i20, in_$i4, in_vslice_dummy_var_132, in_vslice_dummy_var_133;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5658;

  $bb9:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i18;
    goto $bb9_dummy;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$i20 := $sgt.i32(out_$i19, out_$i18);
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5677;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1062} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5676;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} out_vslice_dummy_var_133 := ib_destroy_cq(out_$p16);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 1128)), $mul.ref(8, 1));
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} out_vslice_dummy_var_132 := ldv_cancel_work_sync_43(out_$p13);
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 1128)), $mul.ref(1048, 1));
    goto corral_source_split_5670;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_5667;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 1128)), $mul.ref(8, 1));
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_5661;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i18, out_$i19, out_$i20, out_$i4, out_vslice_dummy_var_132, out_vslice_dummy_var_133 := isert_free_comps_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$i18, out_$i19, out_$i20, out_$i4, out_vslice_dummy_var_132, out_vslice_dummy_var_133);
    return;

  exit:
    return;
}



procedure isert_free_comps_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i4: i32, in_vslice_dummy_var_132: i1, in_vslice_dummy_var_133: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i4: i32, out_vslice_dummy_var_132: i1, out_vslice_dummy_var_133: i32);
  modifies $M.10, $M.12, $M.14, $M.16;



implementation isert_map_rdma_loop_$bb24(in_$p2: ref, in_$p5: ref, in_$p8: ref, in_$i81: i32, in_$p82: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$i95: i1, in_$i96: i32, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i64, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i64, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i32, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i147: i64, in_$i148: i64, in_$p149: ref, in_$p150: ref, in_$i151: i32, in_$i152: i64, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$p89: ref) returns (out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$i95: i1, out_$i96: i32, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i64, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i64, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i32, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i147: i64, out_$i148: i64, out_$p149: ref, out_$p150: ref, out_$i151: i32, out_$i152: i64, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$p89: ref)
{

  entry:
    out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$i100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p146, out_$i147, out_$i148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89 := in_$p91, in_$p92, in_$i93, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$i99, in_$i100, in_$p101, in_$p102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$p111, in_$p112, in_$p113, in_$i114, in_$p115, in_$i116, in_$i117, in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$i124, in_$p125, in_$p126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i131, in_$p132, in_$p133, in_$p134, in_$p135, in_$i136, in_$p137, in_$p138, in_$p139, in_$i140, in_$p141, in_$i142, in_$i143, in_$p144, in_$p145, in_$p146, in_$i147, in_$i148, in_$p149, in_$p150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;

  $bb38:
    assume out_$i159 == 1;
    assume {:verifier.code 0} true;
    out_$i85, out_$i86, out_$i87, out_$i88, out_$p89 := out_$i157, out_$i155, out_$i156, out_$i154, out_$p153;
    goto $bb38_dummy;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    out_$i159 := $sgt.i32(out_$i158, out_$i157);
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, in_$p82);
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i85, 1);
    call {:si_unique_call 1236} {:cexpr "i"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$i156 := $sub.i32(out_$i87, out_$i96);
    call {:si_unique_call 1235} {:cexpr "data_left"} boogie_si_record_i32(out_$i156);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i155 := $add.i32(out_$i86, out_$i96);
    call {:si_unique_call 1234} {:cexpr "va_offset"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i154 := $add.i32(out_$i88, out_$i96);
    call {:si_unique_call 1233} {:cexpr "offset"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref(out_$p89, $mul.ref(out_$i152, 16));
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6551;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} out_$i151 := isert_build_rdma_wr(in_$p8, in_$p5, out_$p89, out_$p94, out_$i96, out_$i88);
    call {:si_unique_call 1232} {:cexpr "ib_sge_cnt"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_6550;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p126, out_$p125);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p120, out_$p119);
    goto corral_source_split_6540;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(0, 1));
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 672)), $mul.ref(64, 1)), $mul.ref(144, 1));
    goto corral_source_split_6538;

  $bb31:
    assume out_$i117 == 1;
    goto corral_source_split_6537;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i114, out_$i116);
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, out_$p115);
    goto corral_source_split_6512;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i85, 1);
    goto corral_source_split_6510;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p113, out_$i110);
    goto corral_source_split_6509;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p112, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6508;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6506;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_6505;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p5, $mul.ref(0, 672)), $mul.ref(0, 1));
    goto corral_source_split_6504;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p108, out_$i105);
    goto corral_source_split_6503;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p107, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6500;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i64(out_$i103, out_$i104);
    goto corral_source_split_6499;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i32.i64(out_$i88);
    goto corral_source_split_6498;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i64($M.0, out_$p102);
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p5, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_6496;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p101, 0);
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(28, 1));
    goto corral_source_split_6494;

  $bb29:
    assume out_$i100 == 1;
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 2);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i32($M.0, out_$p98);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p2, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p97, 0);
    goto corral_source_split_6488;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(32, 1));
    goto corral_source_split_6487;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i96 := in_$i81;
    goto $bb28;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i87;
    goto $bb28;

  $bb26:
    assume out_$i95 == 1;
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i95 := $ult.i32(out_$i87, in_$i81);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p92, $mul.ref(out_$i93, 96));
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i85);
    goto corral_source_split_6478;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_6477;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 672)), $mul.ref(304, 1)), $mul.ref(64, 1));
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb27:
    assume !(out_$i95 == 1);
    goto corral_source_split_6484;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(0, 1));
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref(out_$p122, $mul.ref(out_$i124, 96));
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i124 := $add.i64(out_$i123, 1);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i123 := $sext.i32.i64(out_$i85);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p2, $mul.ref(0, 288)), $mul.ref(64, 1));
    goto corral_source_split_6543;

  $bb32:
    assume !(out_$i117 == 1);
    goto corral_source_split_6542;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p150, out_$p149);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p144, 2);
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(32, 1));
    goto corral_source_split_6561;

  $bb35:
    assume out_$i143 == 1;
    goto corral_source_split_6560;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i140, out_$i142);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.0, out_$p141);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p2, $mul.ref(0, 288)), $mul.ref(56, 1));
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i85, 1);
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p139, out_$i136);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p138, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.0, out_$p135);
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p5, $mul.ref(0, 672)), $mul.ref(4, 1));
    goto corral_source_split_6526;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p134, out_$i131);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p133, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6524;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$p133 := $bitcast.ref.ref(out_$p132);
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(40, 1));
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i64(out_$i129, out_$i130);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i32.i64(out_$i86);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i64($M.0, out_$p128);
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p5, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p127, 4);
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(28, 1));
    goto corral_source_split_6516;

  $bb30:
    assume !(out_$i100 == 1);
    goto corral_source_split_6515;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(out_$p92, $mul.ref(out_$i93, 96)), $mul.ref(0, 1));
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref(out_$p146, $mul.ref(out_$i148, 96));
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$i148 := $add.i64(out_$i147, 1);
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    out_$i147 := $sext.i32.i64(out_$i85);
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$p146 := $load.ref($M.0, out_$p145);
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p2, $mul.ref(0, 288)), $mul.ref(64, 1));
    goto corral_source_split_6565;

  $bb36:
    assume !(out_$i143 == 1);
    goto corral_source_split_6564;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$i100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p146, out_$i147, out_$i148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89 := isert_map_rdma_loop_$bb24(in_$p2, in_$p5, in_$p8, in_$i81, in_$p82, out_$p91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$i100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p146, out_$i147, out_$i148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89);
    return;

  exit:
    return;
}



procedure isert_map_rdma_loop_$bb24(in_$p2: ref, in_$p5: ref, in_$p8: ref, in_$i81: i32, in_$p82: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$i95: i1, in_$i96: i32, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i64, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i64, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i32, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i147: i64, in_$i148: i64, in_$p149: ref, in_$p150: ref, in_$i151: i32, in_$i152: i64, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$p89: ref) returns (out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$i95: i1, out_$i96: i32, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i64, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i64, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i32, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i147: i64, out_$i148: i64, out_$p149: ref, out_$p150: ref, out_$i151: i32, out_$i152: i64, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$p89: ref);
  modifies $M.0;



implementation isert_cq_work_loop_$bb9(in_$p4: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i13: i32, in_$i9: i32) returns (out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$p15, out_$i16, out_$i17, out_$i13 := in_$i14, in_$p15, in_$i16, in_$i17, in_$i13;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6677;

  $bb11:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i16;
    goto $bb11_dummy;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, in_$i9);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i13, 1);
    call {:si_unique_call 1259} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6682;

  SeqInstr_138:
    goto corral_source_split_6681;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} isert_handle_wc(out_$p15);
    goto SeqInstr_137;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p4, $mul.ref(out_$i14, 64));
    goto corral_source_split_6680;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_6679;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i14, out_$p15, out_$i16, out_$i17, out_$i13 := isert_cq_work_loop_$bb9(in_$p4, out_$i14, out_$p15, out_$i16, out_$i17, out_$i13, in_$i9);
    return;

  exit:
    return;
}



procedure isert_cq_work_loop_$bb9(in_$p4: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i13: i32, in_$i9: i32) returns (out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i13: i32);
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.33, $M.38, $M.39, assertsPassed;



implementation isert_cq_work_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i11: i1, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i13: i32, in_$i12: i32, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i9: i32, in_$i10: i32) returns (out_$i11: i1, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i13: i32, out_$i12: i32, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i9: i32, out_$i10: i32)
{

  entry:
    out_$i11, out_$i14, out_$p15, out_$i16, out_$i17, out_$i13, out_$i12, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i9, out_$i10 := in_$i11, in_$i14, in_$p15, in_$i16, in_$i17, in_$i13, in_$i12, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6671;

  $bb18:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i21, out_$i18;
    goto $bb18_dummy;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i21, 0);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} out_$i21 := ib_poll_cq(out_$p20, 16, in_$p4);
    call {:si_unique_call 1263} {:cexpr "n"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_6697;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, in_$p5);
    goto corral_source_split_6696;

  $bb15:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, 65535);
    goto corral_source_split_6688;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i10, out_$i12);
    call {:si_unique_call 1260} {:cexpr "completed"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_6687;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb8;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i9;
    goto $bb8;

  $bb12:
    assume !(out_$i17 == 1);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, out_$i9);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i13, 1);
    call {:si_unique_call 1259} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6682;

  SeqInstr_138:
    goto corral_source_split_6681;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} isert_handle_wc(out_$p15);
    goto SeqInstr_137;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p4, $mul.ref(out_$i14, 64));
    goto corral_source_split_6680;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_6679;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i14, out_$p15, out_$i16, out_$i17, out_$i13 := isert_cq_work_loop_$bb9(in_$p4, out_$i14, out_$p15, out_$i16, out_$i17, out_$i13, out_$i9);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6677;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    out_$i13 := 0;
    goto $bb9;

  $bb11:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i16;
    assume false;
    return;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_6675;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i9;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(0, out_$i9);
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i11, out_$i14, out_$p15, out_$i16, out_$i17, out_$i13, out_$i12, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i9, out_$i10 := isert_cq_work_loop_$bb4(in_$p4, in_$p5, out_$i11, out_$i14, out_$p15, out_$i16, out_$i17, out_$i13, out_$i12, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure isert_cq_work_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i11: i1, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i13: i32, in_$i12: i32, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i9: i32, in_$i10: i32) returns (out_$i11: i1, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i13: i32, out_$i12: i32, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i9: i32, out_$i10: i32);
  modifies $M.0, $CurrAddr, $M.3, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.33, $M.38, $M.39, assertsPassed;



implementation dma_unmap_sg_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_sg_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_sg_attrs_loop_$bb3();



implementation isert_build_rdma_wr_loop_$bb7(in_$p9: ref, in_$p11: ref, in_$i25: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$i90: i32, in_$p91: ref, in_$i92: i1, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i93: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32) returns (out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$i90: i32, out_$p91: ref, out_$i92: i1, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i93: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32)
{

  entry:
    out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i93, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216 := in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$p46, in_$i47, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$p71, in_$i72, in_$p73, in_$i74, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i90, in_$p91, in_$i92, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i93, in_vslice_dummy_var_214, in_vslice_dummy_var_215, in_vslice_dummy_var_216;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8277;

  $bb25:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34, out_$p35, out_$p36, out_$i37 := out_$i90, 0, out_$p82, out_$p91, out_$i78;
    goto $bb25_dummy;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i90;
    assume true;
    goto $bb25;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i90, in_$i25);
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} out_$p91 := sg_next(out_$p36);
    goto corral_source_split_8361;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i33, 1);
    call {:si_unique_call 1640} {:cexpr "i"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_8360;

  $bb23:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} out_vslice_dummy_var_216 := printk.ref.ref.ref(.str.71, .str.69, out_$p82);
    goto corral_source_split_8358;

  $bb22:
    assume out_$i88 == 1;
    goto corral_source_split_8357;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_8355;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} out_$i87 := ldv__builtin_expect(out_$i86, 0);
    call {:si_unique_call 1638} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_8354;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i85);
    goto corral_source_split_8353;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i32(out_$i84);
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    out_$i84 := $sgt.i32(out_$i83, 2);
    goto corral_source_split_8351;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    out_$i83 := $M.1;
    goto corral_source_split_8350;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p35, $mul.ref(1, 16));
    goto corral_source_split_8349;

  $bb19:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i33;
    assume true;
    goto $bb19;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 0);
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i32(out_$i37, out_$i77);
    call {:si_unique_call 1633} {:cexpr "data_left"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_8332;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8331;

  $bb16:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_vslice_dummy_var_215 := printk.ref.ref.i64.i32.i32(.str.70, .str.69, out_$i70, out_$i72, out_$i74);
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_8326;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8325;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i64($M.0, out_$p69);
    goto corral_source_split_8324;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8323;

  $bb15:
    assume out_$i68 == 1;
    goto corral_source_split_8322;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, 0);
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} out_$i67 := ldv__builtin_expect(out_$i66, 0);
    call {:si_unique_call 1631} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i65);
    goto corral_source_split_8318;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i1.i32(out_$i64);
    goto corral_source_split_8317;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    out_$i64 := $sgt.i32(out_$i63, 2);
    goto corral_source_split_8316;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$i63 := $M.1;
    goto corral_source_split_8315;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i61);
    goto corral_source_split_8314;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8313;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_8312;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8311;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_8310;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p9, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_8309;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p57, out_$i56);
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8307;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8306;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i54;
    goto $bb14;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    goto $bb14;

  $bb12:
    assume out_$i55 == 1;
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i37, out_$i54);
    goto corral_source_split_8300;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i53, out_$i34);
    call {:si_unique_call 1629} {:cexpr "__min2"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_8299;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} out_$i53 := ib_sg_dma_len(in_$p11, out_$p36);
    call {:si_unique_call 1628} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_8298;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p52, out_$i51);
    goto corral_source_split_8297;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i64(out_$i49, out_$i50);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i32.i64(out_$i34);
    goto corral_source_split_8294;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} out_$i49 := ib_sg_dma_address(in_$p11, out_$p36);
    call {:si_unique_call 1626} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_8293;

  $bb10:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} out_vslice_dummy_var_214 := printk.ref.ref.i64.i32.i32(.str.68, .str.69, out_$i45, out_$i47, out_$i34);
    goto corral_source_split_8291;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8289;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8287;

  $bb9:
    assume out_$i43 == 1;
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} out_$i42 := ldv__builtin_expect(out_$i41, 0);
    call {:si_unique_call 1623} {:cexpr "tmp"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_8283;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_8282;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_8281;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, 2);
    goto corral_source_split_8280;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i38 := $M.1;
    goto corral_source_split_8279;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume !(out_$i55 == 1);
    goto corral_source_split_8304;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i93, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216 := isert_build_rdma_wr_loop_$bb7(in_$p9, in_$p11, in_$i25, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i93, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216);
    return;

  exit:
    return;
}



procedure isert_build_rdma_wr_loop_$bb7(in_$p9: ref, in_$p11: ref, in_$i25: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$i90: i32, in_$p91: ref, in_$i92: i1, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i93: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32) returns (out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$i90: i32, out_$p91: ref, out_$i92: i1, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i93: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32);
  modifies $M.0;



implementation dma_map_sg_attrs_loop_$bb15()
{

  entry:
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} dma_map_sg_attrs_loop_$bb15();
    return;

  exit:
    return;
}



procedure dma_map_sg_attrs_loop_$bb15();



implementation dma_map_sg_attrs_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} dma_map_sg_attrs_loop_$bb11();
    return;

  exit:
    return;
}



procedure dma_map_sg_attrs_loop_$bb11();



implementation dma_map_sg_attrs_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p7: ref, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p7: ref, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8412;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8 := out_$p13, out_$i12;
    goto $bb6_dummy;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, in_$i2);
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} out_$p13 := sg_next(out_$p7);
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1655} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} kmemcheck_mark_initialized(out_$p9, out_$i11);
    goto corral_source_split_8417;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_8416;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8415;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} out_$p9 := sg_virt(out_$p7);
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8 := dma_map_sg_attrs_loop_$bb4(in_$i2, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8);
    return;

  exit:
    return;
}



procedure dma_map_sg_attrs_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p7: ref, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p7: ref, out_$i8: i32);



implementation sg_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb7();



implementation sg_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb3();



implementation isert_map_fr_pagelist_loop_$bb19(in_$p3: ref, in_$i17: i64, in_$i35: i64, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i48: i64, in_$i49: i1, in_$i50: i32, in_vslice_dummy_var_235: i32) returns (out_$i35: i64, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i48: i64, out_$i49: i1, out_$i50: i32, out_vslice_dummy_var_235: i32)
{

  entry:
    out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_vslice_dummy_var_235 := in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i49, in_$i50, in_vslice_dummy_var_235;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9233;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i48, out_$i37;
    goto $bb23_dummy;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i37;
    assume true;
    goto $bb23;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i64(out_$i48, in_$i17);
    goto corral_source_split_9250;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i35, 4096);
    call {:si_unique_call 1799} {:cexpr "page"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_9249;

  $bb21:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} out_vslice_dummy_var_235 := printk.ref.ref.i32.i64(.str.47, .str.46, out_$i46, out_$i35);
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i37, $sub.i32(0, 1));
    goto corral_source_split_9246;

  $bb20:
    assume out_$i45 == 1;
    goto corral_source_split_9245;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_9243;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} out_$i44 := ldv__builtin_expect(out_$i43, 0);
    call {:si_unique_call 1797} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_9242;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i32(out_$i41);
    goto corral_source_split_9240;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, 2);
    goto corral_source_split_9239;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    out_$i40 := $M.1;
    goto corral_source_split_9238;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p39, out_$i35);
    goto corral_source_split_9237;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p3, $mul.ref(out_$i38, 8));
    goto corral_source_split_9236;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i36);
    goto corral_source_split_9235;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 1);
    call {:si_unique_call 1795} {:cexpr "n_pages"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_9234;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_vslice_dummy_var_235 := isert_map_fr_pagelist_loop_$bb19(in_$p3, in_$i17, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_vslice_dummy_var_235);
    return;

  exit:
    return;
}



procedure isert_map_fr_pagelist_loop_$bb19(in_$p3: ref, in_$i17: i64, in_$i35: i64, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i48: i64, in_$i49: i1, in_$i50: i32, in_vslice_dummy_var_235: i32) returns (out_$i35: i64, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i48: i64, out_$i49: i1, out_$i50: i32, out_vslice_dummy_var_235: i32);
  modifies $M.0;



implementation isert_map_fr_pagelist_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i29: i64, in_$i30: i1, in_$i31: i1, in_$i34: i64, in_$i35: i64, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i48: i64, in_$i49: i1, in_$i50: i32, in_$i32: i32, in_$i33: i32, in_$i51: i32, in_$p52: ref, in_$i53: i1, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$p10: ref, in_$i11: i64, in_$i54: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32) returns (out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i29: i64, out_$i30: i1, out_$i31: i1, out_$i34: i64, out_$i35: i64, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i48: i64, out_$i49: i1, out_$i50: i32, out_$i32: i32, out_$i33: i32, out_$i51: i32, out_$p52: ref, out_$i53: i1, out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$p10: ref, out_$i11: i64, out_$i54: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i32, out_$i33, out_$i51, out_$p52, out_$i53, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i54, out_vslice_dummy_var_234, out_vslice_dummy_var_235 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i29, in_$i30, in_$i31, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i49, in_$i50, in_$i32, in_$i33, in_$i51, in_$p52, in_$i53, in_$i7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i54, in_vslice_dummy_var_234, in_vslice_dummy_var_235;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9193;

  $bb26:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8, out_$i9, out_$p10, out_$i11 := out_$i33, out_$i32, out_$i51, out_$p52, out_$i14;
    goto $bb26_dummy;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i33;
    assume true;
    goto $bb26;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i51, in_$i2);
    goto corral_source_split_9229;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} out_$p52 := sg_next(out_$p10);
    goto corral_source_split_9228;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1792} {:cexpr "i"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_9227;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9226;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 1, out_$i50;
    goto $bb17;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 0, out_$i7;
    goto $bb17;

  $bb15:
    assume out_$i31 == 1;
    goto corral_source_split_9224;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i9, in_$i4);
    goto corral_source_split_9222;

  $bb12:
    assume out_$i30 == 1;
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_9219;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i64(out_$i17, 4095);
    goto corral_source_split_9218;

  $bb10:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} out_vslice_dummy_var_234 := printk.ref.ref.i32.i64.i32(.str.45, .str.46, out_$i9, out_$i25, out_$i27);
    goto corral_source_split_9216;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_9215;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p10, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_9214;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_9213;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9212;

  $bb9:
    assume out_$i23 == 1;
    goto corral_source_split_9211;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_9209;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} out_$i22 := ldv__builtin_expect(out_$i21, 0);
    call {:si_unique_call 1790} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_9208;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_9207;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    goto corral_source_split_9206;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, 2);
    goto corral_source_split_9205;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    out_$i18 := $M.1;
    goto corral_source_split_9204;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i64(out_$i16, out_$i12);
    call {:si_unique_call 1788} {:cexpr "end_addr"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_9203;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_9202;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} out_$i15 := ib_sg_dma_len(in_$p0, out_$p10);
    call {:si_unique_call 1787} {:cexpr "tmp"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_9201;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9200;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := out_$i11;
    goto $bb8;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i12;
    goto $bb8;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_9198;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i8, 0);
    goto corral_source_split_9196;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_$i12 := ib_sg_dma_address(in_$p0, out_$p10);
    call {:si_unique_call 1785} {:cexpr "start_addr"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_9195;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i37;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i64(out_$i48, out_$i17);
    goto corral_source_split_9250;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i35, 4096);
    call {:si_unique_call 1799} {:cexpr "page"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_9249;

  $bb21:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} out_vslice_dummy_var_235 := printk.ref.ref.i32.i64(.str.47, .str.46, out_$i46, out_$i35);
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i37, $sub.i32(0, 1));
    goto corral_source_split_9246;

  $bb20:
    assume out_$i45 == 1;
    goto corral_source_split_9245;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_9243;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} out_$i44 := ldv__builtin_expect(out_$i43, 0);
    call {:si_unique_call 1797} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_9242;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i32(out_$i41);
    goto corral_source_split_9240;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, 2);
    goto corral_source_split_9239;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    out_$i40 := $M.1;
    goto corral_source_split_9238;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p39, out_$i35);
    goto corral_source_split_9237;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p3, $mul.ref(out_$i38, 8));
    goto corral_source_split_9236;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i36);
    goto corral_source_split_9235;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 1);
    call {:si_unique_call 1795} {:cexpr "n_pages"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_9234;

  $bb19:
    call out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_vslice_dummy_var_235 := isert_map_fr_pagelist_loop_$bb19(in_$p3, out_$i17, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_vslice_dummy_var_235);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9233;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i34, out_$i7;
    goto $bb19;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i48, out_$i37;
    assume false;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i64(out_$i14, $sub.i64(0, 4096));
    call {:si_unique_call 1794} {:cexpr "page"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_9231;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb14;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i32, out_$i33, out_$i51, out_$p52, out_$i53, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i54, out_vslice_dummy_var_234, out_vslice_dummy_var_235 := isert_map_fr_pagelist_loop_$bb4(in_$p0, in_$i2, in_$p3, in_$i4, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i32, out_$i33, out_$i51, out_$p52, out_$i53, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i54, out_vslice_dummy_var_234, out_vslice_dummy_var_235);
    return;

  exit:
    return;
}



procedure isert_map_fr_pagelist_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i29: i64, in_$i30: i1, in_$i31: i1, in_$i34: i64, in_$i35: i64, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i48: i64, in_$i49: i1, in_$i50: i32, in_$i32: i32, in_$i33: i32, in_$i51: i32, in_$p52: ref, in_$i53: i1, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$p10: ref, in_$i11: i64, in_$i54: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32) returns (out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i29: i64, out_$i30: i1, out_$i31: i1, out_$i34: i64, out_$i35: i64, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i48: i64, out_$i49: i1, out_$i50: i32, out_$i32: i32, out_$i33: i32, out_$i51: i32, out_$p52: ref, out_$i53: i1, out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$p10: ref, out_$i11: i64, out_$i54: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$i86: i8, in_$i87: i1, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32, in_vslice_dummy_var_247: i32, in_vslice_dummy_var_248: i32, in_vslice_dummy_var_249: i32, in_vslice_dummy_var_250: i32, in_vslice_dummy_var_251: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$i86: i8, out_$i87: i1, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32, out_vslice_dummy_var_247: i32, out_vslice_dummy_var_248: i32, out_vslice_dummy_var_249: i32, out_vslice_dummy_var_250: i32, out_vslice_dummy_var_251: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i44, out_$i45, out_$p46, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i59, out_$i60, out_$p61, out_$p62, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$p96, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i44, in_$i45, in_$p46, in_$i48, in_$i49, in_$p50, in_$p51, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i59, in_$i60, in_$p61, in_$p62, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i89, in_$i90, in_$p91, in_$i93, in_$i94, in_$p95, in_$p96, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_vslice_dummy_var_242, in_vslice_dummy_var_243, in_vslice_dummy_var_244, in_vslice_dummy_var_245, in_vslice_dummy_var_246, in_vslice_dummy_var_247, in_vslice_dummy_var_248, in_vslice_dummy_var_249, in_vslice_dummy_var_250, in_vslice_dummy_var_251;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1917} out_$i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1918} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i13);
    call {:si_unique_call 1919} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i13);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb96_dummy;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb17:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1924} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9706;

  SeqInstr_237:
    goto corral_source_split_9705;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} out_vslice_dummy_var_242 := isert_response_queue(out_$p40, out_$p41, out_$i42);
    goto SeqInstr_236;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.40, in_$p1);
    goto corral_source_split_9704;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    out_$p41 := $M.48;
    goto corral_source_split_9703;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    out_$p40 := $M.45;
    goto corral_source_split_9702;

  $bb50:
    assume out_$i39 == 1;
    goto corral_source_split_9701;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 1);
    goto corral_source_split_9699;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    out_$i38 := $M.55;
    goto corral_source_split_9698;

  $bb48:
    assume out_$i37 == 1;
    goto corral_source_split_9697;

  $bb44:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i22, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb36:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i22, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb19:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_9643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1920} out_$i22 := __VERIFIER_nondet_int();
    call {:si_unique_call 1921} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i22);
    call {:si_unique_call 1922} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i22);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i21 == 1;
    goto corral_source_split_9643;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_9641;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    out_$i20 := $M.55;
    goto corral_source_split_9640;

  $bb14:
    assume out_$i19 == 1;
    goto corral_source_split_9639;

  $bb12:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb55:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1926} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9711;

  SeqInstr_240:
    goto corral_source_split_9710;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} out_vslice_dummy_var_243 := isert_setup_np(out_$p46, in_$p5);
    goto SeqInstr_239;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    out_$p46 := $M.46;
    goto corral_source_split_9709;

  $bb54:
    assume out_$i45 == 1;
    goto corral_source_split_9708;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_9691;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    out_$i44 := $M.55;
    goto corral_source_split_9690;

  $bb46:
    assume out_$i36 == 1;
    goto corral_source_split_9689;

  $bb45:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb58:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1928} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9717;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} out_vslice_dummy_var_244 := isert_get_login_rx(out_$p50, out_$p51);
    goto corral_source_split_9716;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    out_$p51 := $M.47;
    goto corral_source_split_9715;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    out_$p50 := $M.45;
    goto corral_source_split_9714;

  $bb57:
    assume out_$i49 == 1;
    goto corral_source_split_9713;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 1);
    goto corral_source_split_9695;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    out_$i48 := $M.55;
    goto corral_source_split_9694;

  $bb47:
    assume !(out_$i36 == 1);
    goto corral_source_split_9693;

  $bb61:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1930} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9724;

  SeqInstr_243:
    goto corral_source_split_9723;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} out_vslice_dummy_var_245 := isert_immediate_queue(out_$p55, out_$p56, out_$i57);
    goto SeqInstr_242;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.40, in_$p3);
    goto corral_source_split_9722;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    out_$p56 := $M.48;
    goto corral_source_split_9721;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    out_$p55 := $M.45;
    goto corral_source_split_9720;

  $bb60:
    assume out_$i54 == 1;
    goto corral_source_split_9719;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_9683;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    out_$i53 := $M.55;
    goto corral_source_split_9682;

  $bb42:
    assume out_$i34 == 1;
    goto corral_source_split_9681;

  $bb38:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i22, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb37:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i22, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb64:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1932} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9730;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} out_vslice_dummy_var_246 := isert_accept_np(out_$p61, out_$p62);
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    out_$p62 := $M.45;
    goto corral_source_split_9728;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    out_$p61 := $M.46;
    goto corral_source_split_9727;

  $bb63:
    assume out_$i60 == 1;
    goto corral_source_split_9726;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 1);
    goto corral_source_split_9687;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    out_$i59 := $M.55;
    goto corral_source_split_9686;

  $bb43:
    assume !(out_$i34 == 1);
    goto corral_source_split_9685;

  $bb67:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1934} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9737;

  SeqInstr_246:
    goto corral_source_split_9736;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} out_vslice_dummy_var_247 := isert_put_login_tx(out_$p66, out_$p67, out_$i68);
    goto SeqInstr_245;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.40, in_$p0);
    goto corral_source_split_9735;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    out_$p67 := $M.47;
    goto corral_source_split_9734;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    out_$p66 := $M.45;
    goto corral_source_split_9733;

  $bb66:
    assume out_$i65 == 1;
    goto corral_source_split_9732;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_9675;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    out_$i64 := $M.55;
    goto corral_source_split_9674;

  $bb40:
    assume out_$i33 == 1;
    goto corral_source_split_9673;

  $bb39:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i22, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb70:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1936} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9742;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} isert_free_np(out_$p72);
    goto corral_source_split_9741;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    out_$p72 := $M.46;
    goto corral_source_split_9740;

  $bb69:
    assume out_$i71 == 1;
    goto corral_source_split_9739;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_9679;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    out_$i70 := $M.55;
    goto corral_source_split_9678;

  $bb41:
    assume !(out_$i33 == 1);
    goto corral_source_split_9677;

  $bb73:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1938} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9748;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} isert_aborted_task(out_$p75, out_$p76);
    goto corral_source_split_9747;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    out_$p76 := $M.48;
    goto corral_source_split_9746;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    out_$p75 := $M.45;
    goto corral_source_split_9745;

  $bb72:
    assume out_$i74 == 1;
    goto corral_source_split_9744;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_9663;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    out_$i73 := $M.55;
    goto corral_source_split_9662;

  $bb32:
    assume out_$i29 == 1;
    goto corral_source_split_9661;

  $bb21:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb20:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i22, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb76:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1940} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9754;

  SeqInstr_249:
    goto corral_source_split_9753;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} out_vslice_dummy_var_248 := isert_put_response(out_$p79, out_$p80);
    goto SeqInstr_248;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    out_$p80 := $M.48;
    goto corral_source_split_9752;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    out_$p79 := $M.45;
    goto corral_source_split_9751;

  $bb75:
    assume out_$i78 == 1;
    goto corral_source_split_9750;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 1);
    goto corral_source_split_9667;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    out_$i77 := $M.55;
    goto corral_source_split_9666;

  $bb34:
    assume out_$i30 == 1;
    goto corral_source_split_9665;

  $bb33:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i22, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb79:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1942} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9762;

  SeqInstr_252:
    goto corral_source_split_9761;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} out_vslice_dummy_var_249 := isert_get_dataout(out_$p84, out_$p85, out_$i87);
    goto SeqInstr_251;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i8.i1(out_$i86);
    goto corral_source_split_9760;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i8($M.40, in_$p2);
    goto corral_source_split_9759;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    out_$p85 := $M.48;
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    out_$p84 := $M.45;
    goto corral_source_split_9757;

  $bb78:
    assume out_$i83 == 1;
    goto corral_source_split_9756;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_9671;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    out_$i82 := $M.55;
    goto corral_source_split_9670;

  $bb35:
    assume !(out_$i30 == 1);
    goto corral_source_split_9669;

  $bb82:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1944} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9767;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} out_vslice_dummy_var_250 := isert_get_sup_prot_ops(out_$p91);
    goto corral_source_split_9766;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    out_$p91 := $M.45;
    goto corral_source_split_9765;

  $bb81:
    assume out_$i90 == 1;
    goto corral_source_split_9764;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 1);
    goto corral_source_split_9655;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    out_$i89 := $M.55;
    goto corral_source_split_9654;

  $bb30:
    assume out_$i28 == 1;
    goto corral_source_split_9653;

  $bb23:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i22, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb22:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i22, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb85:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1946} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9773;

  SeqInstr_255:
    goto corral_source_split_9772;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} out_vslice_dummy_var_251 := isert_put_datain(out_$p95, out_$p96);
    goto SeqInstr_254;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    out_$p96 := $M.48;
    goto corral_source_split_9771;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    out_$p95 := $M.45;
    goto corral_source_split_9770;

  $bb84:
    assume out_$i94 == 1;
    goto corral_source_split_9769;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 1);
    goto corral_source_split_9659;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    out_$i93 := $M.55;
    goto corral_source_split_9658;

  $bb31:
    assume !(out_$i28 == 1);
    goto corral_source_split_9657;

  $bb88:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1948} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9778;

  SeqInstr_258:
    goto corral_source_split_9777;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} isert_wait_conn(out_$p100);
    goto SeqInstr_257;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    out_$p100 := $M.45;
    goto corral_source_split_9776;

  $bb87:
    assume out_$i99 == 1;
    goto corral_source_split_9775;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 1);
    goto corral_source_split_9647;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    out_$i98 := $M.55;
    goto corral_source_split_9646;

  $bb25:
    assume out_$i26 == 1;
    goto corral_source_split_9645;

  $bb24:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i22, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb91:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1950} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9783;

  SeqInstr_261:
    goto corral_source_split_9782;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} isert_free_conn(out_$p103);
    goto SeqInstr_260;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    out_$p103 := $M.45;
    goto corral_source_split_9781;

  $bb90:
    assume out_$i102 == 1;
    goto corral_source_split_9780;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 1);
    goto corral_source_split_9651;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    out_$i101 := $M.55;
    goto corral_source_split_9650;

  $bb27:
    assume out_$i27 == 1;
    goto corral_source_split_9649;

  $bb26:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i22, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_stop();
    goto corral_source_split_9785;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb29;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb29;

  $bb98:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_264:
    goto corral_source_split_9788;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} invoke_work_1();
    goto SeqInstr_263;

  $bb97:
    assume out_$i105 == 1;
    goto corral_source_split_9787;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i104, 0);
    goto corral_source_split_9637;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    out_$i104 := $M.56;
    goto corral_source_split_9636;

  $bb13:
    assume !(out_$i18 == 1);
    goto corral_source_split_9635;

  $bb101:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb112;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i115 == 1);
    goto $bb112;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_9802;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    out_$i114 := $M.57;
    goto corral_source_split_9801;

  $bb110:
    assume out_$i113 == 1;
    goto corral_source_split_9800;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 3);
    goto corral_source_split_9798;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    out_$i112 := $M.58;
    goto corral_source_split_9797;

  $bb108:
    assume out_$i111 == 1;
    goto corral_source_split_9796;

  $bb103:
    assume out_$i109 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i108, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_9790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1953} out_$i108 := __VERIFIER_nondet_int();
    call {:si_unique_call 1954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i108);
    call {:si_unique_call 1955} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i108);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume out_$i107 == 1;
    goto corral_source_split_9790;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_9625;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    out_$i106 := $M.58;
    goto corral_source_split_9624;

  $bb5:
    assume out_$i15 == 1;
    goto corral_source_split_9623;

  $bb4:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb119:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 0);
    goto corral_source_split_9822;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i121 := $M.61;
    goto corral_source_split_9821;

  $bb121:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} ldv_initialize_iscsit_transport_4();
    goto corral_source_split_9819;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1962} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1961} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9817;

  $bb120:
    assume out_$i120 == 1;
    goto corral_source_split_9816;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_9814;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    out_$i119 := $M.61;
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $M.61 := out_$i118;
    call {:si_unique_call 1960} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_9812;

  SeqInstr_270:
    goto corral_source_split_9811;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} out_$i118 := isert_init();
    goto SeqInstr_269;

  $bb118:
    assume out_$i117 == 1;
    goto corral_source_split_9810;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 1);
    goto corral_source_split_9794;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    out_$i116 := $M.58;
    goto corral_source_split_9793;

  $bb105:
    assume out_$i110 == 1;
    goto corral_source_split_9792;

  $bb104:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} ldv_stop();
    goto corral_source_split_9827;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb106:
    assume {:verifier.code 0} true;
    assume !(out_$i110 == 1);
    goto $bb107;

  $bb109:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb107;

  $bb131:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} invoke_work_3();
    goto corral_source_split_9830;

  $bb130:
    assume out_$i124 == 1;
    goto corral_source_split_9829;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i32(out_$i123, 0);
    goto corral_source_split_9629;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    out_$i123 := $M.59;
    goto corral_source_split_9628;

  $bb7:
    assume out_$i16 == 1;
    goto corral_source_split_9627;

  $bb6:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb134:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    goto $bb135;

  SeqInstr_273:
    goto corral_source_split_9833;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} invoke_work_2();
    goto SeqInstr_272;

  $bb133:
    assume out_$i126 == 1;
    goto corral_source_split_9832;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_9633;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    out_$i125 := $M.60;
    goto corral_source_split_9632;

  $bb9:
    assume out_$i17 == 1;
    goto corral_source_split_9631;

  $bb8:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_stop();
    goto corral_source_split_9835;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb11;

  $bb96_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i44, out_$i45, out_$p46, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i59, out_$i60, out_$p61, out_$p62, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$p96, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i44, out_$i45, out_$p46, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i59, out_$i60, out_$p61, out_$p62, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$p96, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$i86: i8, in_$i87: i1, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32, in_vslice_dummy_var_247: i32, in_vslice_dummy_var_248: i32, in_vslice_dummy_var_249: i32, in_vslice_dummy_var_250: i32, in_vslice_dummy_var_251: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$i86: i8, out_$i87: i1, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32, out_vslice_dummy_var_247: i32, out_vslice_dummy_var_248: i32, out_vslice_dummy_var_249: i32, out_vslice_dummy_var_250: i32, out_vslice_dummy_var_251: i32);
  modifies $M.55, $M.0, $CurrAddr, $M.3, $M.38, $M.39, assertsPassed, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.33, $M.45, $M.46, $M.47, $M.48, $M.58, $M.61, $M.27, $M.2, $M.41, $M.42, $M.43, $M.44, $M.50, $M.51, $M.52, $M.53;


